

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Fri Apr 29 14:36:15 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F1823
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	intentry,global,class=CODE,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,delta=2
    60                           	psect	text45,local,class=CODE,merge=1,delta=2
    61                           	psect	text46,local,class=CODE,merge=1,delta=2
    62                           	psect	text47,local,class=CODE,merge=1,delta=2
    63                           	psect	text48,local,class=CODE,merge=1,delta=2
    64                           	psect	text49,local,class=CODE,merge=1,delta=2
    65                           	psect	text50,local,class=CODE,merge=1,delta=2
    66                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    67                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    68                           	dabs	1,0x7E,2
    69  0000                     
    70                           ; Version 2.40
    71                           ; Generated 17/11/2021 GMT
    72                           ; 
    73                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution. Publication is not required when
    87                           ;        this file is used in an embedded application.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC16F1823 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     	;# 
   106  0001                     	;# 
   107  0002                     	;# 
   108  0003                     	;# 
   109  0004                     	;# 
   110  0005                     	;# 
   111  0006                     	;# 
   112  0007                     	;# 
   113  0008                     	;# 
   114  0009                     	;# 
   115  000A                     	;# 
   116  000B                     	;# 
   117  000C                     	;# 
   118  000E                     	;# 
   119  0011                     	;# 
   120  0012                     	;# 
   121  0015                     	;# 
   122  0016                     	;# 
   123  0016                     	;# 
   124  0017                     	;# 
   125  0018                     	;# 
   126  0019                     	;# 
   127  001A                     	;# 
   128  001B                     	;# 
   129  001C                     	;# 
   130  001E                     	;# 
   131  001F                     	;# 
   132  008C                     	;# 
   133  008E                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0095                     	;# 
   137  0096                     	;# 
   138  0097                     	;# 
   139  0098                     	;# 
   140  0099                     	;# 
   141  009A                     	;# 
   142  009B                     	;# 
   143  009B                     	;# 
   144  009C                     	;# 
   145  009D                     	;# 
   146  009E                     	;# 
   147  010C                     	;# 
   148  010E                     	;# 
   149  0111                     	;# 
   150  0112                     	;# 
   151  0113                     	;# 
   152  0114                     	;# 
   153  0115                     	;# 
   154  0116                     	;# 
   155  0117                     	;# 
   156  0118                     	;# 
   157  0119                     	;# 
   158  011A                     	;# 
   159  011B                     	;# 
   160  011D                     	;# 
   161  011D                     	;# 
   162  018C                     	;# 
   163  018E                     	;# 
   164  0191                     	;# 
   165  0191                     	;# 
   166  0192                     	;# 
   167  0193                     	;# 
   168  0193                     	;# 
   169  0193                     	;# 
   170  0194                     	;# 
   171  0195                     	;# 
   172  0196                     	;# 
   173  0199                     	;# 
   174  019A                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019D                     	;# 
   182  019E                     	;# 
   183  019F                     	;# 
   184  020C                     	;# 
   185  020E                     	;# 
   186  0211                     	;# 
   187  0211                     	;# 
   188  0212                     	;# 
   189  0212                     	;# 
   190  0213                     	;# 
   191  0213                     	;# 
   192  0214                     	;# 
   193  0214                     	;# 
   194  0215                     	;# 
   195  0215                     	;# 
   196  0215                     	;# 
   197  0216                     	;# 
   198  0216                     	;# 
   199  0217                     	;# 
   200  0217                     	;# 
   201  0291                     	;# 
   202  0291                     	;# 
   203  0292                     	;# 
   204  0293                     	;# 
   205  0294                     	;# 
   206  0295                     	;# 
   207  0295                     	;# 
   208  0296                     	;# 
   209  0391                     	;# 
   210  0392                     	;# 
   211  0393                     	;# 
   212  039A                     	;# 
   213  039C                     	;# 
   214  039D                     	;# 
   215  039E                     	;# 
   216  039F                     	;# 
   217  0FE4                     	;# 
   218  0FE5                     	;# 
   219  0FE6                     	;# 
   220  0FE7                     	;# 
   221  0FE8                     	;# 
   222  0FE9                     	;# 
   223  0FEA                     	;# 
   224  0FEB                     	;# 
   225  0FED                     	;# 
   226  0FEE                     	;# 
   227  0FEF                     	;# 
   228  0000                     	;# 
   229  0001                     	;# 
   230  0002                     	;# 
   231  0003                     	;# 
   232  0004                     	;# 
   233  0005                     	;# 
   234  0006                     	;# 
   235  0007                     	;# 
   236  0008                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000E                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0015                     	;# 
   245  0016                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001C                     	;# 
   253  001E                     	;# 
   254  001F                     	;# 
   255  008C                     	;# 
   256  008E                     	;# 
   257  0091                     	;# 
   258  0092                     	;# 
   259  0095                     	;# 
   260  0096                     	;# 
   261  0097                     	;# 
   262  0098                     	;# 
   263  0099                     	;# 
   264  009A                     	;# 
   265  009B                     	;# 
   266  009B                     	;# 
   267  009C                     	;# 
   268  009D                     	;# 
   269  009E                     	;# 
   270  010C                     	;# 
   271  010E                     	;# 
   272  0111                     	;# 
   273  0112                     	;# 
   274  0113                     	;# 
   275  0114                     	;# 
   276  0115                     	;# 
   277  0116                     	;# 
   278  0117                     	;# 
   279  0118                     	;# 
   280  0119                     	;# 
   281  011A                     	;# 
   282  011B                     	;# 
   283  011D                     	;# 
   284  011D                     	;# 
   285  018C                     	;# 
   286  018E                     	;# 
   287  0191                     	;# 
   288  0191                     	;# 
   289  0192                     	;# 
   290  0193                     	;# 
   291  0193                     	;# 
   292  0193                     	;# 
   293  0194                     	;# 
   294  0195                     	;# 
   295  0196                     	;# 
   296  0199                     	;# 
   297  019A                     	;# 
   298  019B                     	;# 
   299  019B                     	;# 
   300  019B                     	;# 
   301  019B                     	;# 
   302  019C                     	;# 
   303  019C                     	;# 
   304  019D                     	;# 
   305  019E                     	;# 
   306  019F                     	;# 
   307  020C                     	;# 
   308  020E                     	;# 
   309  0211                     	;# 
   310  0211                     	;# 
   311  0212                     	;# 
   312  0212                     	;# 
   313  0213                     	;# 
   314  0213                     	;# 
   315  0214                     	;# 
   316  0214                     	;# 
   317  0215                     	;# 
   318  0215                     	;# 
   319  0215                     	;# 
   320  0216                     	;# 
   321  0216                     	;# 
   322  0217                     	;# 
   323  0217                     	;# 
   324  0291                     	;# 
   325  0291                     	;# 
   326  0292                     	;# 
   327  0293                     	;# 
   328  0294                     	;# 
   329  0295                     	;# 
   330  0295                     	;# 
   331  0296                     	;# 
   332  0391                     	;# 
   333  0392                     	;# 
   334  0393                     	;# 
   335  039A                     	;# 
   336  039C                     	;# 
   337  039D                     	;# 
   338  039E                     	;# 
   339  039F                     	;# 
   340  0FE4                     	;# 
   341  0FE5                     	;# 
   342  0FE6                     	;# 
   343  0FE7                     	;# 
   344  0FE8                     	;# 
   345  0FE9                     	;# 
   346  0FEA                     	;# 
   347  0FEB                     	;# 
   348  0FED                     	;# 
   349  0FEE                     	;# 
   350  0FEF                     	;# 
   351  0000                     	;# 
   352  0001                     	;# 
   353  0002                     	;# 
   354  0003                     	;# 
   355  0004                     	;# 
   356  0005                     	;# 
   357  0006                     	;# 
   358  0007                     	;# 
   359  0008                     	;# 
   360  0009                     	;# 
   361  000A                     	;# 
   362  000B                     	;# 
   363  000C                     	;# 
   364  000E                     	;# 
   365  0011                     	;# 
   366  0012                     	;# 
   367  0015                     	;# 
   368  0016                     	;# 
   369  0016                     	;# 
   370  0017                     	;# 
   371  0018                     	;# 
   372  0019                     	;# 
   373  001A                     	;# 
   374  001B                     	;# 
   375  001C                     	;# 
   376  001E                     	;# 
   377  001F                     	;# 
   378  008C                     	;# 
   379  008E                     	;# 
   380  0091                     	;# 
   381  0092                     	;# 
   382  0095                     	;# 
   383  0096                     	;# 
   384  0097                     	;# 
   385  0098                     	;# 
   386  0099                     	;# 
   387  009A                     	;# 
   388  009B                     	;# 
   389  009B                     	;# 
   390  009C                     	;# 
   391  009D                     	;# 
   392  009E                     	;# 
   393  010C                     	;# 
   394  010E                     	;# 
   395  0111                     	;# 
   396  0112                     	;# 
   397  0113                     	;# 
   398  0114                     	;# 
   399  0115                     	;# 
   400  0116                     	;# 
   401  0117                     	;# 
   402  0118                     	;# 
   403  0119                     	;# 
   404  011A                     	;# 
   405  011B                     	;# 
   406  011D                     	;# 
   407  011D                     	;# 
   408  018C                     	;# 
   409  018E                     	;# 
   410  0191                     	;# 
   411  0191                     	;# 
   412  0192                     	;# 
   413  0193                     	;# 
   414  0193                     	;# 
   415  0193                     	;# 
   416  0194                     	;# 
   417  0195                     	;# 
   418  0196                     	;# 
   419  0199                     	;# 
   420  019A                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019C                     	;# 
   426  019C                     	;# 
   427  019D                     	;# 
   428  019E                     	;# 
   429  019F                     	;# 
   430  020C                     	;# 
   431  020E                     	;# 
   432  0211                     	;# 
   433  0211                     	;# 
   434  0212                     	;# 
   435  0212                     	;# 
   436  0213                     	;# 
   437  0213                     	;# 
   438  0214                     	;# 
   439  0214                     	;# 
   440  0215                     	;# 
   441  0215                     	;# 
   442  0215                     	;# 
   443  0216                     	;# 
   444  0216                     	;# 
   445  0217                     	;# 
   446  0217                     	;# 
   447  0291                     	;# 
   448  0291                     	;# 
   449  0292                     	;# 
   450  0293                     	;# 
   451  0294                     	;# 
   452  0295                     	;# 
   453  0295                     	;# 
   454  0296                     	;# 
   455  0391                     	;# 
   456  0392                     	;# 
   457  0393                     	;# 
   458  039A                     	;# 
   459  039C                     	;# 
   460  039D                     	;# 
   461  039E                     	;# 
   462  039F                     	;# 
   463  0FE4                     	;# 
   464  0FE5                     	;# 
   465  0FE6                     	;# 
   466  0FE7                     	;# 
   467  0FE8                     	;# 
   468  0FE9                     	;# 
   469  0FEA                     	;# 
   470  0FEB                     	;# 
   471  0FED                     	;# 
   472  0FEE                     	;# 
   473  0FEF                     	;# 
   474  0000                     	;# 
   475  0001                     	;# 
   476  0002                     	;# 
   477  0003                     	;# 
   478  0004                     	;# 
   479  0005                     	;# 
   480  0006                     	;# 
   481  0007                     	;# 
   482  0008                     	;# 
   483  0009                     	;# 
   484  000A                     	;# 
   485  000B                     	;# 
   486  000C                     	;# 
   487  000E                     	;# 
   488  0011                     	;# 
   489  0012                     	;# 
   490  0015                     	;# 
   491  0016                     	;# 
   492  0016                     	;# 
   493  0017                     	;# 
   494  0018                     	;# 
   495  0019                     	;# 
   496  001A                     	;# 
   497  001B                     	;# 
   498  001C                     	;# 
   499  001E                     	;# 
   500  001F                     	;# 
   501  008C                     	;# 
   502  008E                     	;# 
   503  0091                     	;# 
   504  0092                     	;# 
   505  0095                     	;# 
   506  0096                     	;# 
   507  0097                     	;# 
   508  0098                     	;# 
   509  0099                     	;# 
   510  009A                     	;# 
   511  009B                     	;# 
   512  009B                     	;# 
   513  009C                     	;# 
   514  009D                     	;# 
   515  009E                     	;# 
   516  010C                     	;# 
   517  010E                     	;# 
   518  0111                     	;# 
   519  0112                     	;# 
   520  0113                     	;# 
   521  0114                     	;# 
   522  0115                     	;# 
   523  0116                     	;# 
   524  0117                     	;# 
   525  0118                     	;# 
   526  0119                     	;# 
   527  011A                     	;# 
   528  011B                     	;# 
   529  011D                     	;# 
   530  011D                     	;# 
   531  018C                     	;# 
   532  018E                     	;# 
   533  0191                     	;# 
   534  0191                     	;# 
   535  0192                     	;# 
   536  0193                     	;# 
   537  0193                     	;# 
   538  0193                     	;# 
   539  0194                     	;# 
   540  0195                     	;# 
   541  0196                     	;# 
   542  0199                     	;# 
   543  019A                     	;# 
   544  019B                     	;# 
   545  019B                     	;# 
   546  019B                     	;# 
   547  019B                     	;# 
   548  019C                     	;# 
   549  019C                     	;# 
   550  019D                     	;# 
   551  019E                     	;# 
   552  019F                     	;# 
   553  020C                     	;# 
   554  020E                     	;# 
   555  0211                     	;# 
   556  0211                     	;# 
   557  0212                     	;# 
   558  0212                     	;# 
   559  0213                     	;# 
   560  0213                     	;# 
   561  0214                     	;# 
   562  0214                     	;# 
   563  0215                     	;# 
   564  0215                     	;# 
   565  0215                     	;# 
   566  0216                     	;# 
   567  0216                     	;# 
   568  0217                     	;# 
   569  0217                     	;# 
   570  0291                     	;# 
   571  0291                     	;# 
   572  0292                     	;# 
   573  0293                     	;# 
   574  0294                     	;# 
   575  0295                     	;# 
   576  0295                     	;# 
   577  0296                     	;# 
   578  0391                     	;# 
   579  0392                     	;# 
   580  0393                     	;# 
   581  039A                     	;# 
   582  039C                     	;# 
   583  039D                     	;# 
   584  039E                     	;# 
   585  039F                     	;# 
   586  0FE4                     	;# 
   587  0FE5                     	;# 
   588  0FE6                     	;# 
   589  0FE7                     	;# 
   590  0FE8                     	;# 
   591  0FE9                     	;# 
   592  0FEA                     	;# 
   593  0FEB                     	;# 
   594  0FED                     	;# 
   595  0FEE                     	;# 
   596  0FEF                     	;# 
   597  0000                     	;# 
   598  0001                     	;# 
   599  0002                     	;# 
   600  0003                     	;# 
   601  0004                     	;# 
   602  0005                     	;# 
   603  0006                     	;# 
   604  0007                     	;# 
   605  0008                     	;# 
   606  0009                     	;# 
   607  000A                     	;# 
   608  000B                     	;# 
   609  000C                     	;# 
   610  000E                     	;# 
   611  0011                     	;# 
   612  0012                     	;# 
   613  0015                     	;# 
   614  0016                     	;# 
   615  0016                     	;# 
   616  0017                     	;# 
   617  0018                     	;# 
   618  0019                     	;# 
   619  001A                     	;# 
   620  001B                     	;# 
   621  001C                     	;# 
   622  001E                     	;# 
   623  001F                     	;# 
   624  008C                     	;# 
   625  008E                     	;# 
   626  0091                     	;# 
   627  0092                     	;# 
   628  0095                     	;# 
   629  0096                     	;# 
   630  0097                     	;# 
   631  0098                     	;# 
   632  0099                     	;# 
   633  009A                     	;# 
   634  009B                     	;# 
   635  009B                     	;# 
   636  009C                     	;# 
   637  009D                     	;# 
   638  009E                     	;# 
   639  010C                     	;# 
   640  010E                     	;# 
   641  0111                     	;# 
   642  0112                     	;# 
   643  0113                     	;# 
   644  0114                     	;# 
   645  0115                     	;# 
   646  0116                     	;# 
   647  0117                     	;# 
   648  0118                     	;# 
   649  0119                     	;# 
   650  011A                     	;# 
   651  011B                     	;# 
   652  011D                     	;# 
   653  011D                     	;# 
   654  018C                     	;# 
   655  018E                     	;# 
   656  0191                     	;# 
   657  0191                     	;# 
   658  0192                     	;# 
   659  0193                     	;# 
   660  0193                     	;# 
   661  0193                     	;# 
   662  0194                     	;# 
   663  0195                     	;# 
   664  0196                     	;# 
   665  0199                     	;# 
   666  019A                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019B                     	;# 
   671  019C                     	;# 
   672  019C                     	;# 
   673  019D                     	;# 
   674  019E                     	;# 
   675  019F                     	;# 
   676  020C                     	;# 
   677  020E                     	;# 
   678  0211                     	;# 
   679  0211                     	;# 
   680  0212                     	;# 
   681  0212                     	;# 
   682  0213                     	;# 
   683  0213                     	;# 
   684  0214                     	;# 
   685  0214                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0215                     	;# 
   689  0216                     	;# 
   690  0216                     	;# 
   691  0217                     	;# 
   692  0217                     	;# 
   693  0291                     	;# 
   694  0291                     	;# 
   695  0292                     	;# 
   696  0293                     	;# 
   697  0294                     	;# 
   698  0295                     	;# 
   699  0295                     	;# 
   700  0296                     	;# 
   701  0391                     	;# 
   702  0392                     	;# 
   703  0393                     	;# 
   704  039A                     	;# 
   705  039C                     	;# 
   706  039D                     	;# 
   707  039E                     	;# 
   708  039F                     	;# 
   709  0FE4                     	;# 
   710  0FE5                     	;# 
   711  0FE6                     	;# 
   712  0FE7                     	;# 
   713  0FE8                     	;# 
   714  0FE9                     	;# 
   715  0FEA                     	;# 
   716  0FEB                     	;# 
   717  0FED                     	;# 
   718  0FEE                     	;# 
   719  0FEF                     	;# 
   720  0000                     	;# 
   721  0001                     	;# 
   722  0002                     	;# 
   723  0003                     	;# 
   724  0004                     	;# 
   725  0005                     	;# 
   726  0006                     	;# 
   727  0007                     	;# 
   728  0008                     	;# 
   729  0009                     	;# 
   730  000A                     	;# 
   731  000B                     	;# 
   732  000C                     	;# 
   733  000E                     	;# 
   734  0011                     	;# 
   735  0012                     	;# 
   736  0015                     	;# 
   737  0016                     	;# 
   738  0016                     	;# 
   739  0017                     	;# 
   740  0018                     	;# 
   741  0019                     	;# 
   742  001A                     	;# 
   743  001B                     	;# 
   744  001C                     	;# 
   745  001E                     	;# 
   746  001F                     	;# 
   747  008C                     	;# 
   748  008E                     	;# 
   749  0091                     	;# 
   750  0092                     	;# 
   751  0095                     	;# 
   752  0096                     	;# 
   753  0097                     	;# 
   754  0098                     	;# 
   755  0099                     	;# 
   756  009A                     	;# 
   757  009B                     	;# 
   758  009B                     	;# 
   759  009C                     	;# 
   760  009D                     	;# 
   761  009E                     	;# 
   762  010C                     	;# 
   763  010E                     	;# 
   764  0111                     	;# 
   765  0112                     	;# 
   766  0113                     	;# 
   767  0114                     	;# 
   768  0115                     	;# 
   769  0116                     	;# 
   770  0117                     	;# 
   771  0118                     	;# 
   772  0119                     	;# 
   773  011A                     	;# 
   774  011B                     	;# 
   775  011D                     	;# 
   776  011D                     	;# 
   777  018C                     	;# 
   778  018E                     	;# 
   779  0191                     	;# 
   780  0191                     	;# 
   781  0192                     	;# 
   782  0193                     	;# 
   783  0193                     	;# 
   784  0193                     	;# 
   785  0194                     	;# 
   786  0195                     	;# 
   787  0196                     	;# 
   788  0199                     	;# 
   789  019A                     	;# 
   790  019B                     	;# 
   791  019B                     	;# 
   792  019B                     	;# 
   793  019B                     	;# 
   794  019C                     	;# 
   795  019C                     	;# 
   796  019D                     	;# 
   797  019E                     	;# 
   798  019F                     	;# 
   799  020C                     	;# 
   800  020E                     	;# 
   801  0211                     	;# 
   802  0211                     	;# 
   803  0212                     	;# 
   804  0212                     	;# 
   805  0213                     	;# 
   806  0213                     	;# 
   807  0214                     	;# 
   808  0214                     	;# 
   809  0215                     	;# 
   810  0215                     	;# 
   811  0215                     	;# 
   812  0216                     	;# 
   813  0216                     	;# 
   814  0217                     	;# 
   815  0217                     	;# 
   816  0291                     	;# 
   817  0291                     	;# 
   818  0292                     	;# 
   819  0293                     	;# 
   820  0294                     	;# 
   821  0295                     	;# 
   822  0295                     	;# 
   823  0296                     	;# 
   824  0391                     	;# 
   825  0392                     	;# 
   826  0393                     	;# 
   827  039A                     	;# 
   828  039C                     	;# 
   829  039D                     	;# 
   830  039E                     	;# 
   831  039F                     	;# 
   832  0FE4                     	;# 
   833  0FE5                     	;# 
   834  0FE6                     	;# 
   835  0FE7                     	;# 
   836  0FE8                     	;# 
   837  0FE9                     	;# 
   838  0FEA                     	;# 
   839  0FEB                     	;# 
   840  0FED                     	;# 
   841  0FEE                     	;# 
   842  0FEF                     	;# 
   843  0000                     	;# 
   844  0001                     	;# 
   845  0002                     	;# 
   846  0003                     	;# 
   847  0004                     	;# 
   848  0005                     	;# 
   849  0006                     	;# 
   850  0007                     	;# 
   851  0008                     	;# 
   852  0009                     	;# 
   853  000A                     	;# 
   854  000B                     	;# 
   855  000C                     	;# 
   856  000E                     	;# 
   857  0011                     	;# 
   858  0012                     	;# 
   859  0015                     	;# 
   860  0016                     	;# 
   861  0016                     	;# 
   862  0017                     	;# 
   863  0018                     	;# 
   864  0019                     	;# 
   865  001A                     	;# 
   866  001B                     	;# 
   867  001C                     	;# 
   868  001E                     	;# 
   869  001F                     	;# 
   870  008C                     	;# 
   871  008E                     	;# 
   872  0091                     	;# 
   873  0092                     	;# 
   874  0095                     	;# 
   875  0096                     	;# 
   876  0097                     	;# 
   877  0098                     	;# 
   878  0099                     	;# 
   879  009A                     	;# 
   880  009B                     	;# 
   881  009B                     	;# 
   882  009C                     	;# 
   883  009D                     	;# 
   884  009E                     	;# 
   885  010C                     	;# 
   886  010E                     	;# 
   887  0111                     	;# 
   888  0112                     	;# 
   889  0113                     	;# 
   890  0114                     	;# 
   891  0115                     	;# 
   892  0116                     	;# 
   893  0117                     	;# 
   894  0118                     	;# 
   895  0119                     	;# 
   896  011A                     	;# 
   897  011B                     	;# 
   898  011D                     	;# 
   899  011D                     	;# 
   900  018C                     	;# 
   901  018E                     	;# 
   902  0191                     	;# 
   903  0191                     	;# 
   904  0192                     	;# 
   905  0193                     	;# 
   906  0193                     	;# 
   907  0193                     	;# 
   908  0194                     	;# 
   909  0195                     	;# 
   910  0196                     	;# 
   911  0199                     	;# 
   912  019A                     	;# 
   913  019B                     	;# 
   914  019B                     	;# 
   915  019B                     	;# 
   916  019B                     	;# 
   917  019C                     	;# 
   918  019C                     	;# 
   919  019D                     	;# 
   920  019E                     	;# 
   921  019F                     	;# 
   922  020C                     	;# 
   923  020E                     	;# 
   924  0211                     	;# 
   925  0211                     	;# 
   926  0212                     	;# 
   927  0212                     	;# 
   928  0213                     	;# 
   929  0213                     	;# 
   930  0214                     	;# 
   931  0214                     	;# 
   932  0215                     	;# 
   933  0215                     	;# 
   934  0215                     	;# 
   935  0216                     	;# 
   936  0216                     	;# 
   937  0217                     	;# 
   938  0217                     	;# 
   939  0291                     	;# 
   940  0291                     	;# 
   941  0292                     	;# 
   942  0293                     	;# 
   943  0294                     	;# 
   944  0295                     	;# 
   945  0295                     	;# 
   946  0296                     	;# 
   947  0391                     	;# 
   948  0392                     	;# 
   949  0393                     	;# 
   950  039A                     	;# 
   951  039C                     	;# 
   952  039D                     	;# 
   953  039E                     	;# 
   954  039F                     	;# 
   955  0FE4                     	;# 
   956  0FE5                     	;# 
   957  0FE6                     	;# 
   958  0FE7                     	;# 
   959  0FE8                     	;# 
   960  0FE9                     	;# 
   961  0FEA                     	;# 
   962  0FEB                     	;# 
   963  0FED                     	;# 
   964  0FEE                     	;# 
   965  0FEF                     	;# 
   966  0000                     	;# 
   967  0001                     	;# 
   968  0002                     	;# 
   969  0003                     	;# 
   970  0004                     	;# 
   971  0005                     	;# 
   972  0006                     	;# 
   973  0007                     	;# 
   974  0008                     	;# 
   975  0009                     	;# 
   976  000A                     	;# 
   977  000B                     	;# 
   978  000C                     	;# 
   979  000E                     	;# 
   980  0011                     	;# 
   981  0012                     	;# 
   982  0015                     	;# 
   983  0016                     	;# 
   984  0016                     	;# 
   985  0017                     	;# 
   986  0018                     	;# 
   987  0019                     	;# 
   988  001A                     	;# 
   989  001B                     	;# 
   990  001C                     	;# 
   991  001E                     	;# 
   992  001F                     	;# 
   993  008C                     	;# 
   994  008E                     	;# 
   995  0091                     	;# 
   996  0092                     	;# 
   997  0095                     	;# 
   998  0096                     	;# 
   999  0097                     	;# 
  1000  0098                     	;# 
  1001  0099                     	;# 
  1002  009A                     	;# 
  1003  009B                     	;# 
  1004  009B                     	;# 
  1005  009C                     	;# 
  1006  009D                     	;# 
  1007  009E                     	;# 
  1008  010C                     	;# 
  1009  010E                     	;# 
  1010  0111                     	;# 
  1011  0112                     	;# 
  1012  0113                     	;# 
  1013  0114                     	;# 
  1014  0115                     	;# 
  1015  0116                     	;# 
  1016  0117                     	;# 
  1017  0118                     	;# 
  1018  0119                     	;# 
  1019  011A                     	;# 
  1020  011B                     	;# 
  1021  011D                     	;# 
  1022  011D                     	;# 
  1023  018C                     	;# 
  1024  018E                     	;# 
  1025  0191                     	;# 
  1026  0191                     	;# 
  1027  0192                     	;# 
  1028  0193                     	;# 
  1029  0193                     	;# 
  1030  0193                     	;# 
  1031  0194                     	;# 
  1032  0195                     	;# 
  1033  0196                     	;# 
  1034  0199                     	;# 
  1035  019A                     	;# 
  1036  019B                     	;# 
  1037  019B                     	;# 
  1038  019B                     	;# 
  1039  019B                     	;# 
  1040  019C                     	;# 
  1041  019C                     	;# 
  1042  019D                     	;# 
  1043  019E                     	;# 
  1044  019F                     	;# 
  1045  020C                     	;# 
  1046  020E                     	;# 
  1047  0211                     	;# 
  1048  0211                     	;# 
  1049  0212                     	;# 
  1050  0212                     	;# 
  1051  0213                     	;# 
  1052  0213                     	;# 
  1053  0214                     	;# 
  1054  0214                     	;# 
  1055  0215                     	;# 
  1056  0215                     	;# 
  1057  0215                     	;# 
  1058  0216                     	;# 
  1059  0216                     	;# 
  1060  0217                     	;# 
  1061  0217                     	;# 
  1062  0291                     	;# 
  1063  0291                     	;# 
  1064  0292                     	;# 
  1065  0293                     	;# 
  1066  0294                     	;# 
  1067  0295                     	;# 
  1068  0295                     	;# 
  1069  0296                     	;# 
  1070  0391                     	;# 
  1071  0392                     	;# 
  1072  0393                     	;# 
  1073  039A                     	;# 
  1074  039C                     	;# 
  1075  039D                     	;# 
  1076  039E                     	;# 
  1077  039F                     	;# 
  1078  0FE4                     	;# 
  1079  0FE5                     	;# 
  1080  0FE6                     	;# 
  1081  0FE7                     	;# 
  1082  0FE8                     	;# 
  1083  0FE9                     	;# 
  1084  0FEA                     	;# 
  1085  0FEB                     	;# 
  1086  0FED                     	;# 
  1087  0FEE                     	;# 
  1088  0FEF                     	;# 
  1089  0000                     	;# 
  1090  0001                     	;# 
  1091  0002                     	;# 
  1092  0003                     	;# 
  1093  0004                     	;# 
  1094  0005                     	;# 
  1095  0006                     	;# 
  1096  0007                     	;# 
  1097  0008                     	;# 
  1098  0009                     	;# 
  1099  000A                     	;# 
  1100  000B                     	;# 
  1101  000C                     	;# 
  1102  000E                     	;# 
  1103  0011                     	;# 
  1104  0012                     	;# 
  1105  0015                     	;# 
  1106  0016                     	;# 
  1107  0016                     	;# 
  1108  0017                     	;# 
  1109  0018                     	;# 
  1110  0019                     	;# 
  1111  001A                     	;# 
  1112  001B                     	;# 
  1113  001C                     	;# 
  1114  001E                     	;# 
  1115  001F                     	;# 
  1116  008C                     	;# 
  1117  008E                     	;# 
  1118  0091                     	;# 
  1119  0092                     	;# 
  1120  0095                     	;# 
  1121  0096                     	;# 
  1122  0097                     	;# 
  1123  0098                     	;# 
  1124  0099                     	;# 
  1125  009A                     	;# 
  1126  009B                     	;# 
  1127  009B                     	;# 
  1128  009C                     	;# 
  1129  009D                     	;# 
  1130  009E                     	;# 
  1131  010C                     	;# 
  1132  010E                     	;# 
  1133  0111                     	;# 
  1134  0112                     	;# 
  1135  0113                     	;# 
  1136  0114                     	;# 
  1137  0115                     	;# 
  1138  0116                     	;# 
  1139  0117                     	;# 
  1140  0118                     	;# 
  1141  0119                     	;# 
  1142  011A                     	;# 
  1143  011B                     	;# 
  1144  011D                     	;# 
  1145  011D                     	;# 
  1146  018C                     	;# 
  1147  018E                     	;# 
  1148  0191                     	;# 
  1149  0191                     	;# 
  1150  0192                     	;# 
  1151  0193                     	;# 
  1152  0193                     	;# 
  1153  0193                     	;# 
  1154  0194                     	;# 
  1155  0195                     	;# 
  1156  0196                     	;# 
  1157  0199                     	;# 
  1158  019A                     	;# 
  1159  019B                     	;# 
  1160  019B                     	;# 
  1161  019B                     	;# 
  1162  019B                     	;# 
  1163  019C                     	;# 
  1164  019C                     	;# 
  1165  019D                     	;# 
  1166  019E                     	;# 
  1167  019F                     	;# 
  1168  020C                     	;# 
  1169  020E                     	;# 
  1170  0211                     	;# 
  1171  0211                     	;# 
  1172  0212                     	;# 
  1173  0212                     	;# 
  1174  0213                     	;# 
  1175  0213                     	;# 
  1176  0214                     	;# 
  1177  0214                     	;# 
  1178  0215                     	;# 
  1179  0215                     	;# 
  1180  0215                     	;# 
  1181  0216                     	;# 
  1182  0216                     	;# 
  1183  0217                     	;# 
  1184  0217                     	;# 
  1185  0291                     	;# 
  1186  0291                     	;# 
  1187  0292                     	;# 
  1188  0293                     	;# 
  1189  0294                     	;# 
  1190  0295                     	;# 
  1191  0295                     	;# 
  1192  0296                     	;# 
  1193  0391                     	;# 
  1194  0392                     	;# 
  1195  0393                     	;# 
  1196  039A                     	;# 
  1197  039C                     	;# 
  1198  039D                     	;# 
  1199  039E                     	;# 
  1200  039F                     	;# 
  1201  0FE4                     	;# 
  1202  0FE5                     	;# 
  1203  0FE6                     	;# 
  1204  0FE7                     	;# 
  1205  0FE8                     	;# 
  1206  0FE9                     	;# 
  1207  0FEA                     	;# 
  1208  0FEB                     	;# 
  1209  0FED                     	;# 
  1210  0FEE                     	;# 
  1211  0FEF                     	;# 
  1212  0000                     	;# 
  1213  0001                     	;# 
  1214  0002                     	;# 
  1215  0003                     	;# 
  1216  0004                     	;# 
  1217  0005                     	;# 
  1218  0006                     	;# 
  1219  0007                     	;# 
  1220  0008                     	;# 
  1221  0009                     	;# 
  1222  000A                     	;# 
  1223  000B                     	;# 
  1224  000C                     	;# 
  1225  000E                     	;# 
  1226  0011                     	;# 
  1227  0012                     	;# 
  1228  0015                     	;# 
  1229  0016                     	;# 
  1230  0016                     	;# 
  1231  0017                     	;# 
  1232  0018                     	;# 
  1233  0019                     	;# 
  1234  001A                     	;# 
  1235  001B                     	;# 
  1236  001C                     	;# 
  1237  001E                     	;# 
  1238  001F                     	;# 
  1239  008C                     	;# 
  1240  008E                     	;# 
  1241  0091                     	;# 
  1242  0092                     	;# 
  1243  0095                     	;# 
  1244  0096                     	;# 
  1245  0097                     	;# 
  1246  0098                     	;# 
  1247  0099                     	;# 
  1248  009A                     	;# 
  1249  009B                     	;# 
  1250  009B                     	;# 
  1251  009C                     	;# 
  1252  009D                     	;# 
  1253  009E                     	;# 
  1254  010C                     	;# 
  1255  010E                     	;# 
  1256  0111                     	;# 
  1257  0112                     	;# 
  1258  0113                     	;# 
  1259  0114                     	;# 
  1260  0115                     	;# 
  1261  0116                     	;# 
  1262  0117                     	;# 
  1263  0118                     	;# 
  1264  0119                     	;# 
  1265  011A                     	;# 
  1266  011B                     	;# 
  1267  011D                     	;# 
  1268  011D                     	;# 
  1269  018C                     	;# 
  1270  018E                     	;# 
  1271  0191                     	;# 
  1272  0191                     	;# 
  1273  0192                     	;# 
  1274  0193                     	;# 
  1275  0193                     	;# 
  1276  0193                     	;# 
  1277  0194                     	;# 
  1278  0195                     	;# 
  1279  0196                     	;# 
  1280  0199                     	;# 
  1281  019A                     	;# 
  1282  019B                     	;# 
  1283  019B                     	;# 
  1284  019B                     	;# 
  1285  019B                     	;# 
  1286  019C                     	;# 
  1287  019C                     	;# 
  1288  019D                     	;# 
  1289  019E                     	;# 
  1290  019F                     	;# 
  1291  020C                     	;# 
  1292  020E                     	;# 
  1293  0211                     	;# 
  1294  0211                     	;# 
  1295  0212                     	;# 
  1296  0212                     	;# 
  1297  0213                     	;# 
  1298  0213                     	;# 
  1299  0214                     	;# 
  1300  0214                     	;# 
  1301  0215                     	;# 
  1302  0215                     	;# 
  1303  0215                     	;# 
  1304  0216                     	;# 
  1305  0216                     	;# 
  1306  0217                     	;# 
  1307  0217                     	;# 
  1308  0291                     	;# 
  1309  0291                     	;# 
  1310  0292                     	;# 
  1311  0293                     	;# 
  1312  0294                     	;# 
  1313  0295                     	;# 
  1314  0295                     	;# 
  1315  0296                     	;# 
  1316  0391                     	;# 
  1317  0392                     	;# 
  1318  0393                     	;# 
  1319  039A                     	;# 
  1320  039C                     	;# 
  1321  039D                     	;# 
  1322  039E                     	;# 
  1323  039F                     	;# 
  1324  0FE4                     	;# 
  1325  0FE5                     	;# 
  1326  0FE6                     	;# 
  1327  0FE7                     	;# 
  1328  0FE8                     	;# 
  1329  0FE9                     	;# 
  1330  0FEA                     	;# 
  1331  0FEB                     	;# 
  1332  0FED                     	;# 
  1333  0FEE                     	;# 
  1334  0FEF                     	;# 
  1335                           
  1336                           	psect	stringtext1
  1337  0797                     __pstringtext1:
  1338  0797                     _ROTATION_TIME:
  1339  0797  343C               	retlw	60
  1340  0798  3400               	retlw	0
  1341  0799  3400               	retlw	0
  1342  079A                     __end_of_ROTATION_TIME:
  1343                           
  1344                           	psect	stringtext2
  1345  079A                     __pstringtext2:
  1346  079A                     _GOOD_WSP_VOLTAGE:
  1347  079A  3440               	retlw	64
  1348  079B  349C               	retlw	156
  1349  079C  3400               	retlw	0
  1350  079D                     __end_of_GOOD_WSP_VOLTAGE:
  1351                           
  1352                           	psect	stringtext3
  1353  079D                     __pstringtext3:
  1354  079D                     _BAD_WSP_VOLTAGE:
  1355  079D  3420               	retlw	32
  1356  079E  344E               	retlw	78
  1357  079F  3400               	retlw	0
  1358  07A0                     __end_of_BAD_WSP_VOLTAGE:
  1359                           
  1360                           	psect	nvBANK0
  1361  0068                     __pnvBANK0:
  1362  0068                     _TMR0_InterruptHandler:
  1363  0068                     	ds	2
  1364  006A                     _TMR2_InterruptHandler:
  1365  006A                     	ds	2
  1366  006C                     _timer0ReloadVal:
  1367  006C                     	ds	1
  1368  0015                     _TMR0	set	21
  1369  001C                     _T2CONbits	set	28
  1370  001C                     _T2CON	set	28
  1371  001A                     _TMR2	set	26
  1372  001B                     _PR2	set	27
  1373  0011                     _PIR1bits	set	17
  1374  000B                     _INTCONbits	set	11
  1375  005F                     _GIE	set	95
  1376  008E                     _TRISCbits	set	142
  1377  008C                     _TRISAbits	set	140
  1378  0095                     _OPTION_REG	set	149
  1379  0091                     _PIE1bits	set	145
  1380  0095                     _OPTION_REGbits	set	149
  1381  008E                     _TRISC	set	142
  1382  008C                     _TRISA	set	140
  1383  009D                     _ADCON0bits	set	157
  1384  009D                     _ADCON0	set	157
  1385  009C                     _ADRESH	set	156
  1386  009B                     _ADRESL	set	155
  1387  009E                     _ADCON1	set	158
  1388  0097                     _WDTCON	set	151
  1389  0098                     _OSCTUNE	set	152
  1390  0099                     _OSCCON	set	153
  1391  010E                     _LATCbits	set	270
  1392  010C                     _LATAbits	set	268
  1393  0117                     _FVRCONbits	set	279
  1394  0117                     _FVRCON	set	279
  1395  011D                     _APFCON	set	285
  1396  010E                     _LATC	set	270
  1397  010C                     _LATA	set	268
  1398  0116                     _BORCON	set	278
  1399  0191                     _EEADR	set	401
  1400  0196                     _EECON2	set	406
  1401  0193                     _EEDATA	set	403
  1402  018C                     _ANSELAbits	set	396
  1403  018E                     _ANSELCbits	set	398
  1404  018C                     _ANSELA	set	396
  1405  018E                     _ANSELC	set	398
  1406  0CA8                     _RD	set	3240
  1407  0CAA                     _WREN	set	3242
  1408  0CA9                     _WR	set	3241
  1409  020E                     _WPUCbits	set	526
  1410  020C                     _WPUAbits	set	524
  1411  020E                     _WPUC	set	526
  1412  020C                     _WPUA	set	524
  1413                           
  1414                           	psect	cinit
  1415  0027                     start_initialization:	
  1416                           ; #config settings
  1417                           
  1418  0027                     __initialization:
  1419                           
  1420                           ; Clear objects allocated to COMMON
  1421  0027  01F8               	clrf	__pbssCOMMON& (0+127)
  1422  0028  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  1423  0029  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  1424  002A  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  1425  002B  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  1426                           
  1427                           ; Clear objects allocated to BANK0
  1428  002C  304D               	movlw	low __pbssBANK0
  1429  002D  0084               	movwf	4
  1430  002E  3000               	movlw	high __pbssBANK0
  1431  002F  0085               	movwf	5
  1432  0030  301B               	movlw	27
  1433  0031  3187  276E  3180   	fcall	clear_ram0
  1434                           
  1435                           ; Clear objects allocated to BANK1
  1436  0034  30A0               	movlw	low __pbssBANK1
  1437  0035  0084               	movwf	4
  1438  0036  3000               	movlw	high __pbssBANK1
  1439  0037  0085               	movwf	5
  1440  0038  3020               	movlw	32
  1441  0039  3187  276E  3180   	fcall	clear_ram0
  1442  003C                     end_of_initialization:	
  1443                           ;End of C runtime variable initialization code
  1444                           
  1445  003C                     __end_of__initialization:
  1446  003C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1447  003D  0020               	movlb	0
  1448  003E  2E2C               	ljmp	_main	;jump to C main() function
  1449                           
  1450                           	psect	bssCOMMON
  1451  0078                     __pbssCOMMON:
  1452  0078                     TMR2_ISR@CountCallBack:
  1453  0078                     	ds	2
  1454  007A                     sec_tick_work@iled:
  1455  007A                     	ds	1
  1456  007B                     get_measure@measures:
  1457  007B                     	ds	1
  1458  007C                     _FLAGS:
  1459  007C                     	ds	1
  1460                           
  1461                           	psect	bssBANK0
  1462  004D                     __pbssBANK0:
  1463  004D                     get_time@F2660:
  1464  004D                     	ds	12
  1465  0059                     get_time@F2662:
  1466  0059                     	ds	4
  1467  005D                     _time_s:
  1468  005D                     	ds	3
  1469  0060                     _ADC_InterruptHandler:
  1470  0060                     	ds	2
  1471  0062                     get_jump_full@jump_counter:
  1472  0062                     	ds	1
  1473  0063                     get_jump@jump_counter:
  1474  0063                     	ds	1
  1475  0064                     get_fun_full@fun_counter:
  1476  0064                     	ds	1
  1477  0065                     get_fun@fun_counter:
  1478  0065                     	ds	1
  1479  0066                     _time_pow_s:
  1480  0066                     	ds	1
  1481  0067                     _START_EEPROM_ADR:
  1482  0067                     	ds	1
  1483                           
  1484                           	psect	bssBANK1
  1485  00A0                     __pbssBANK1:
  1486  00A0                     get_adr@F2640:
  1487  00A0                     	ds	32
  1488                           
  1489                           	psect	clrtext
  1490  076E                     clear_ram0:	
  1491                           ;	Called with FSR0 containing the base address, and
  1492                           ;	WREG with the size to clear
  1493                           
  1494  076E  0064               	clrwdt	;clear the watchdog before getting into this loop
  1495  076F                     clrloop0:
  1496  076F  0180               	clrf	0	;clear RAM location pointed to by FSR
  1497  0770  3101               	addfsr 0,1
  1498  0771  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1499  0772  2F6F               	goto	clrloop0	;have we reached the end yet?
  1500  0773  3400               	retlw	0	;all done for this memory range, return
  1501                           
  1502                           	psect	cstackCOMMON
  1503  0070                     __pcstackCOMMON:
  1504  0070                     ?_PIN_MANAGER_Initialize:
  1505  0070                     ?_OSCILLATOR_Initialize:	
  1506                           ; 1 bytes @ 0x0
  1507                           
  1508  0070                     ?_WDT_Initialize:	
  1509                           ; 1 bytes @ 0x0
  1510                           
  1511  0070                     ?_FVR_Initialize:	
  1512                           ; 1 bytes @ 0x0
  1513                           
  1514  0070                     ?_ADC_Initialize:	
  1515                           ; 1 bytes @ 0x0
  1516                           
  1517  0070                     ?_TMR2_Initialize:	
  1518                           ; 1 bytes @ 0x0
  1519                           
  1520  0070                     ?_TMR0_Initialize:	
  1521                           ; 1 bytes @ 0x0
  1522                           
  1523  0070                     ?_TMR0_ISR:	
  1524                           ; 1 bytes @ 0x0
  1525                           
  1526  0070                     ??_TMR0_ISR:	
  1527                           ; 1 bytes @ 0x0
  1528                           
  1529  0070                     ?_TMR2_ISR:	
  1530                           ; 1 bytes @ 0x0
  1531                           
  1532  0070                     ?_TMR2_DefaultInterruptHandler:	
  1533                           ; 1 bytes @ 0x0
  1534                           
  1535  0070                     ??_TMR2_DefaultInterruptHandler:	
  1536                           ; 1 bytes @ 0x0
  1537                           
  1538  0070                     ?_TMR2_CallBack:	
  1539                           ; 1 bytes @ 0x0
  1540                           
  1541  0070                     ?_TMR0_DefaultInterruptHandler:	
  1542                           ; 1 bytes @ 0x0
  1543                           
  1544  0070                     ??_TMR0_DefaultInterruptHandler:	
  1545                           ; 1 bytes @ 0x0
  1546                           
  1547  0070                     ?_EEPROM_ReadByte:	
  1548                           ; 1 bytes @ 0x0
  1549                           
  1550  0070                     ?_SYSTEM_Initialize:	
  1551                           ; 1 bytes @ 0x0
  1552                           
  1553  0070                     ?_INTERRUPT_InterruptManager:	
  1554                           ; 1 bytes @ 0x0
  1555                           
  1556  0070                     ?_TMR2_StartTimer:	
  1557                           ; 1 bytes @ 0x0
  1558                           
  1559  0070                     ?_switch_zum:	
  1560                           ; 1 bytes @ 0x0
  1561                           
  1562  0070                     ?_toggle_tone:	
  1563                           ; 1 bytes @ 0x0
  1564                           
  1565  0070                     ??_toggle_tone:	
  1566                           ; 1 bytes @ 0x0
  1567                           
  1568  0070                     ?_go_close:	
  1569                           ; 1 bytes @ 0x0
  1570                           
  1571  0070                     ?_go_open:	
  1572                           ; 1 bytes @ 0x0
  1573                           
  1574  0070                     ?_go_close_alt:	
  1575                           ; 1 bytes @ 0x0
  1576                           
  1577  0070                     ?_go_open_alt:	
  1578                           ; 1 bytes @ 0x0
  1579                           
  1580  0070                     ?_start_alarm:	
  1581                           ; 1 bytes @ 0x0
  1582                           
  1583  0070                     ?_get_measure:	
  1584                           ; 1 bytes @ 0x0
  1585                           
  1586  0070                     ?_get_fun:	
  1587                           ; 1 bytes @ 0x0
  1588                           
  1589  0070                     ?_get_fun_full:	
  1590                           ; 1 bytes @ 0x0
  1591                           
  1592  0070                     ?_get_jump:	
  1593                           ; 1 bytes @ 0x0
  1594                           
  1595  0070                     ?_get_jump_full:	
  1596                           ; 1 bytes @ 0x0
  1597                           
  1598  0070                     ?_rele_tick:	
  1599                           ; 1 bytes @ 0x0
  1600                           
  1601  0070                     ??_rele_tick:	
  1602                           ; 1 bytes @ 0x0
  1603                           
  1604  0070                     ?_sec_tick_work:	
  1605                           ; 1 bytes @ 0x0
  1606                           
  1607  0070                     ?_povorot:	
  1608                           ; 1 bytes @ 0x0
  1609                           
  1610  0070                     ?_fun_work:	
  1611                           ; 1 bytes @ 0x0
  1612                           
  1613  0070                     ?_switch_wm:	
  1614                           ; 1 bytes @ 0x0
  1615                           
  1616  0070                     ?_get_voltage:	
  1617                           ; 1 bytes @ 0x0
  1618                           
  1619  0070                     ?_get_adr:	
  1620                           ; 1 bytes @ 0x0
  1621                           
  1622  0070                     ?_get_time:	
  1623                           ; 1 bytes @ 0x0
  1624                           
  1625  0070                     ?_get_eeprom:	
  1626                           ; 1 bytes @ 0x0
  1627                           
  1628  0070                     ?_start_setup:	
  1629                           ; 1 bytes @ 0x0
  1630                           
  1631  0070                     ?_main:	
  1632                           ; 1 bytes @ 0x0
  1633                           
  1634  0070                     ?i1_switch_zum:	
  1635                           ; 1 bytes @ 0x0
  1636                           
  1637  0070                     ??i1_switch_zum:	
  1638                           ; 1 bytes @ 0x0
  1639                           
  1640  0070                     ?i1_go_close:	
  1641                           ; 1 bytes @ 0x0
  1642                           
  1643  0070                     ??i1_go_close:	
  1644                           ; 1 bytes @ 0x0
  1645                           
  1646  0070                     ?i1_go_close_alt:	
  1647                           ; 1 bytes @ 0x0
  1648                           
  1649  0070                     ??i1_go_close_alt:	
  1650                           ; 1 bytes @ 0x0
  1651                           
  1652  0070                     ?i1_ADC_GetConversion:	
  1653                           ; 1 bytes @ 0x0
  1654                           
  1655                           
  1656                           ; 2 bytes @ 0x0
  1657  0070                     	ds	2
  1658  0072                     ??_start_alarm:
  1659  0072                     ??i1_ADC_GetConversion:	
  1660                           ; 1 bytes @ 0x2
  1661                           
  1662                           
  1663                           ; 1 bytes @ 0x2
  1664  0072                     	ds	1
  1665  0073                     i1ADC_GetConversion@channel:
  1666                           
  1667                           ; 1 bytes @ 0x3
  1668  0073                     	ds	1
  1669  0074                     ??_get_measure:
  1670                           
  1671                           ; 1 bytes @ 0x4
  1672  0074                     	ds	1
  1673  0075                     get_measure@res:
  1674                           
  1675                           ; 2 bytes @ 0x5
  1676  0075                     	ds	2
  1677  0077                     ??_sec_tick_work:
  1678                           
  1679                           ; 1 bytes @ 0x7
  1680  0077                     	ds	1
  1681  0078                     ??_TMR2_ISR:
  1682  0078                     ??_TMR2_CallBack:	
  1683                           ; 1 bytes @ 0x8
  1684                           
  1685  0078                     ??_INTERRUPT_InterruptManager:	
  1686                           ; 1 bytes @ 0x8
  1687                           
  1688                           
  1689                           	psect	cstackBANK0
  1690  0020                     __pcstackBANK0:	
  1691                           ; 1 bytes @ 0x8
  1692                           
  1693  0020                     ??_PIN_MANAGER_Initialize:
  1694  0020                     ??_OSCILLATOR_Initialize:	
  1695                           ; 1 bytes @ 0x0
  1696                           
  1697  0020                     ??_WDT_Initialize:	
  1698                           ; 1 bytes @ 0x0
  1699                           
  1700  0020                     ??_FVR_Initialize:	
  1701                           ; 1 bytes @ 0x0
  1702                           
  1703  0020                     ??_ADC_Initialize:	
  1704                           ; 1 bytes @ 0x0
  1705                           
  1706  0020                     ?_TMR2_SetInterruptHandler:	
  1707                           ; 1 bytes @ 0x0
  1708                           
  1709  0020                     ?_TMR0_SetInterruptHandler:	
  1710                           ; 1 bytes @ 0x0
  1711                           
  1712  0020                     ??_EEPROM_ReadByte:	
  1713                           ; 1 bytes @ 0x0
  1714                           
  1715  0020                     ?_EEPROM_WriteByte:	
  1716                           ; 1 bytes @ 0x0
  1717                           
  1718  0020                     ??_TMR2_StartTimer:	
  1719                           ; 1 bytes @ 0x0
  1720                           
  1721  0020                     ??_switch_zum:	
  1722                           ; 1 bytes @ 0x0
  1723                           
  1724  0020                     ?_beep:	
  1725                           ; 1 bytes @ 0x0
  1726                           
  1727  0020                     ??_go_close:	
  1728                           ; 1 bytes @ 0x0
  1729                           
  1730  0020                     ??_go_open:	
  1731                           ; 1 bytes @ 0x0
  1732                           
  1733  0020                     ??_go_close_alt:	
  1734                           ; 1 bytes @ 0x0
  1735                           
  1736  0020                     ??_go_open_alt:	
  1737                           ; 1 bytes @ 0x0
  1738                           
  1739  0020                     ?___bmul:	
  1740                           ; 1 bytes @ 0x0
  1741                           
  1742  0020                     ?_ADC_GetConversion:	
  1743                           ; 1 bytes @ 0x0
  1744                           
  1745  0020                     EEPROM_WriteByte@dt:	
  1746                           ; 2 bytes @ 0x0
  1747                           
  1748  0020                     ___bmul@multiplicand:	
  1749                           ; 1 bytes @ 0x0
  1750                           
  1751  0020                     TMR2_SetInterruptHandler@InterruptHandler:	
  1752                           ; 1 bytes @ 0x0
  1753                           
  1754  0020                     TMR0_SetInterruptHandler@InterruptHandler:	
  1755                           ; 2 bytes @ 0x0
  1756                           
  1757  0020                     beep@delay:	
  1758                           ; 2 bytes @ 0x0
  1759                           
  1760                           
  1761                           ; 2 bytes @ 0x0
  1762  0020                     	ds	1
  1763  0021                     ??_EEPROM_WriteByte:
  1764  0021                     ??___bmul:	
  1765                           ; 1 bytes @ 0x1
  1766                           
  1767                           
  1768                           ; 1 bytes @ 0x1
  1769  0021                     	ds	1
  1770  0022                     ??_TMR2_Initialize:
  1771  0022                     ??_TMR0_Initialize:	
  1772                           ; 1 bytes @ 0x2
  1773                           
  1774  0022                     ??_TMR2_SetInterruptHandler:	
  1775                           ; 1 bytes @ 0x2
  1776                           
  1777  0022                     ??_TMR0_SetInterruptHandler:	
  1778                           ; 1 bytes @ 0x2
  1779                           
  1780  0022                     ??_ADC_GetConversion:	
  1781                           ; 1 bytes @ 0x2
  1782                           
  1783  0022                     ??_povorot:	
  1784                           ; 1 bytes @ 0x2
  1785                           
  1786  0022                     EEPROM_ReadByte@addr:	
  1787                           ; 1 bytes @ 0x2
  1788                           
  1789  0022                     ___bmul@product:	
  1790                           ; 1 bytes @ 0x2
  1791                           
  1792  0022                     beep@pause:	
  1793                           ; 1 bytes @ 0x2
  1794                           
  1795                           
  1796                           ; 2 bytes @ 0x2
  1797  0022                     	ds	1
  1798  0023                     ??_SYSTEM_Initialize:
  1799  0023                     ??_get_adr:	
  1800                           ; 1 bytes @ 0x3
  1801                           
  1802  0023                     ?_EEPROM_ReadShortLong:	
  1803                           ; 1 bytes @ 0x3
  1804                           
  1805  0023                     ADC_GetConversion@channel:	
  1806                           ; 3 bytes @ 0x3
  1807                           
  1808  0023                     EEPROM_WriteByte@addr:	
  1809                           ; 1 bytes @ 0x3
  1810                           
  1811  0023                     ___bmul@multiplier:	
  1812                           ; 1 bytes @ 0x3
  1813                           
  1814                           
  1815                           ; 1 bytes @ 0x3
  1816  0023                     	ds	1
  1817  0024                     ??_get_fun:
  1818  0024                     ??_get_fun_full:	
  1819                           ; 1 bytes @ 0x4
  1820                           
  1821  0024                     ??_get_jump:	
  1822                           ; 1 bytes @ 0x4
  1823                           
  1824  0024                     ??_get_jump_full:	
  1825                           ; 1 bytes @ 0x4
  1826                           
  1827  0024                     beep@time:	
  1828                           ; 1 bytes @ 0x4
  1829                           
  1830  0024                     EEPROM_WriteByte@status:	
  1831                           ; 1 bytes @ 0x4
  1832                           
  1833  0024                     get_adr@adr:	
  1834                           ; 1 bytes @ 0x4
  1835                           
  1836                           
  1837                           ; 32 bytes @ 0x4
  1838  0024                     	ds	1
  1839  0025                     ?_EEPROM_WriteShortLong:
  1840  0025                     beep@count:	
  1841                           ; 1 bytes @ 0x5
  1842                           
  1843  0025                     get_fun@res:	
  1844                           ; 1 bytes @ 0x5
  1845                           
  1846  0025                     get_fun_full@res:	
  1847                           ; 2 bytes @ 0x5
  1848                           
  1849  0025                     get_jump@res:	
  1850                           ; 2 bytes @ 0x5
  1851                           
  1852  0025                     get_jump_full@res:	
  1853                           ; 2 bytes @ 0x5
  1854                           
  1855  0025                     EEPROM_WriteShortLong@ucData:	
  1856                           ; 2 bytes @ 0x5
  1857                           
  1858                           
  1859                           ; 3 bytes @ 0x5
  1860  0025                     	ds	1
  1861  0026                     ??_EEPROM_ReadShortLong:
  1862  0026                     ??_beep:	
  1863                           ; 1 bytes @ 0x6
  1864                           
  1865                           
  1866                           ; 1 bytes @ 0x6
  1867  0026                     	ds	1
  1868  0027                     get_fun_full@flag:
  1869  0027                     get_jump_full@flag:	
  1870                           ; 1 bytes @ 0x7
  1871                           
  1872                           
  1873                           ; 1 bytes @ 0x7
  1874  0027                     	ds	1
  1875  0028                     ??_EEPROM_WriteShortLong:
  1876  0028                     beep@j:	
  1877                           ; 1 bytes @ 0x8
  1878                           
  1879                           
  1880                           ; 1 bytes @ 0x8
  1881  0028                     	ds	1
  1882  0029                     beep@i:
  1883                           
  1884                           ; 1 bytes @ 0x9
  1885  0029                     	ds	1
  1886  002A                     ??_fun_work:
  1887  002A                     ??_switch_wm:	
  1888                           ; 1 bytes @ 0xA
  1889                           
  1890                           
  1891                           ; 1 bytes @ 0xA
  1892  002A                     	ds	2
  1893  002C                     EEPROM_WriteShortLong@dt:
  1894  002C                     EEPROM_ReadShortLong@dt:	
  1895                           ; 1 bytes @ 0xC
  1896                           
  1897                           
  1898                           ; 3 bytes @ 0xC
  1899  002C                     	ds	1
  1900  002D                     EEPROM_WriteShortLong@addr:
  1901                           
  1902                           ; 1 bytes @ 0xD
  1903  002D                     	ds	1
  1904  002E                     ??_get_voltage:
  1905                           
  1906                           ; 1 bytes @ 0xE
  1907  002E                     	ds	1
  1908  002F                     EEPROM_ReadShortLong@addr:
  1909                           
  1910                           ; 1 bytes @ 0xF
  1911  002F                     	ds	1
  1912  0030                     ??_get_time:
  1913  0030                     get_voltage@res:	
  1914                           ; 1 bytes @ 0x10
  1915                           
  1916                           
  1917                           ; 2 bytes @ 0x10
  1918  0030                     	ds	2
  1919  0032                     get_voltage@buf:
  1920                           
  1921                           ; 1 bytes @ 0x12
  1922  0032                     	ds	1
  1923  0033                     get_voltage@q_804:
  1924                           
  1925                           ; 1 bytes @ 0x13
  1926  0033                     	ds	1
  1927  0034                     get_voltage@q:
  1928  0034                     get_time@times:	
  1929                           ; 1 bytes @ 0x14
  1930                           
  1931                           
  1932                           ; 12 bytes @ 0x14
  1933  0034                     	ds	12
  1934  0040                     get_time@time_count:
  1935                           
  1936                           ; 4 bytes @ 0x20
  1937  0040                     	ds	4
  1938  0044                     get_adr@i:
  1939  0044                     get_time@adr_error:	
  1940                           ; 1 bytes @ 0x24
  1941                           
  1942                           
  1943                           ; 1 bytes @ 0x24
  1944  0044                     	ds	1
  1945  0045                     get_adr@q:
  1946  0045                     get_time@buf2:	
  1947                           ; 1 bytes @ 0x25
  1948                           
  1949                           
  1950                           ; 3 bytes @ 0x25
  1951  0045                     	ds	1
  1952  0046                     get_adr@i_814:
  1953                           
  1954                           ; 1 bytes @ 0x26
  1955  0046                     	ds	1
  1956  0047                     get_adr@q_813:
  1957                           
  1958                           ; 1 bytes @ 0x27
  1959  0047                     	ds	1
  1960  0048                     get_adr@buf:
  1961  0048                     get_time@i:	
  1962                           ; 1 bytes @ 0x28
  1963                           
  1964                           
  1965                           ; 1 bytes @ 0x28
  1966  0048                     	ds	1
  1967  0049                     get_time@buf:
  1968                           
  1969                           ; 1 bytes @ 0x29
  1970  0049                     	ds	1
  1971  004A                     get_time@q:
  1972                           
  1973                           ; 1 bytes @ 0x2A
  1974  004A                     	ds	1
  1975  004B                     get_time@q_826:
  1976                           
  1977                           ; 1 bytes @ 0x2B
  1978  004B                     	ds	1
  1979  004C                     get_time@q_825:
  1980                           
  1981                           ; 1 bytes @ 0x2C
  1982  004C                     	ds	1
  1983  004D                     ??_get_eeprom:
  1984  004D                     ??_start_setup:	
  1985                           ; 1 bytes @ 0x2D
  1986                           
  1987  004D                     ??_main:	
  1988                           ; 1 bytes @ 0x2D
  1989                           
  1990                           
  1991                           	psect	maintext
  1992  062C                     __pmaintext:	
  1993                           ; 1 bytes @ 0x2D
  1994 ;;
  1995 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1996 ;;
  1997 ;; *************** function _main *****************
  1998 ;; Defined at:
  1999 ;;		line 454 in file "main.c"
  2000 ;; Parameters:    Size  Location     Type
  2001 ;;		None
  2002 ;; Auto vars:     Size  Location     Type
  2003 ;;		None
  2004 ;; Return value:  Size  Location     Type
  2005 ;;                  1    wreg      void 
  2006 ;; Registers used:
  2007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2008 ;; Tracked objects:
  2009 ;;		On entry : B1F/0
  2010 ;;		On exit  : 0/0
  2011 ;;		Unchanged: 0/0
  2012 ;; Data sizes:     COMMON   BANK0   BANK1
  2013 ;;      Params:         0       0       0
  2014 ;;      Locals:         0       0       0
  2015 ;;      Temps:          0       0       0
  2016 ;;      Totals:         0       0       0
  2017 ;;Total ram usage:        0 bytes
  2018 ;; Hardware stack levels required when called: 12
  2019 ;; This function calls:
  2020 ;;		_fun_work
  2021 ;;		_get_fun
  2022 ;;		_get_jump
  2023 ;;		_get_voltage
  2024 ;;		_povorot
  2025 ;;		_start_setup
  2026 ;;		_switch_wm
  2027 ;; This function is called by:
  2028 ;;		Startup code after reset
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032  062C                     _main:	
  2033                           ;psect for function _main
  2034                           
  2035  062C                     l2706:	
  2036                           ;incstack = 0
  2037                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2038                           
  2039                           
  2040                           ;main.c: 456:     start_setup();
  2041  062C  3184  24DE  3186   	fcall	_start_setup
  2042  062F                     l2708:
  2043                           
  2044                           ;main.c: 459:         get_voltage();
  2045  062F  3181  21D7  3186   	fcall	_get_voltage
  2046  0632                     l2710:
  2047                           
  2048                           ;main.c: 460:         if (!FLAGS.bits.ALARM) {
  2049  0632  187C               	btfsc	_FLAGS,0
  2050  0633  2E35               	goto	u2101
  2051  0634  2E36               	goto	u2100
  2052  0635                     u2101:
  2053  0635  2E2F               	goto	l2708
  2054  0636                     u2100:
  2055  0636                     l2712:
  2056                           
  2057                           ;main.c: 461:             get_fun();
  2058  0636  3184  2466  3186   	fcall	_get_fun
  2059                           
  2060                           ;main.c: 462:             fun_work();
  2061  0639  3182  2233  3186   	fcall	_fun_work
  2062                           
  2063                           ;main.c: 463:             get_jump();
  2064  063C  3184  24A4  3186   	fcall	_get_jump
  2065                           
  2066                           ;main.c: 464:             switch_wm();
  2067  063F  3182  22D3  3186   	fcall	_switch_wm
  2068                           
  2069                           ;main.c: 465:             povorot();
  2070  0642  3183  235F  3186   	fcall	_povorot
  2071  0645  2E2F               	goto	l2708
  2072  0646  2826               	ljmp	start
  2073  0647                     __end_of_main:
  2074                           
  2075                           	psect	text1
  2076  02D3                     __ptext1:	
  2077 ;; *************** function _switch_wm *****************
  2078 ;; Defined at:
  2079 ;;		line 313 in file "main.c"
  2080 ;; Parameters:    Size  Location     Type
  2081 ;;		None
  2082 ;; Auto vars:     Size  Location     Type
  2083 ;;		None
  2084 ;; Return value:  Size  Location     Type
  2085 ;;                  1    wreg      void 
  2086 ;; Registers used:
  2087 ;;		wreg, status,2, status,0, pclath, cstack
  2088 ;; Tracked objects:
  2089 ;;		On entry : 0/0
  2090 ;;		On exit  : 0/0
  2091 ;;		Unchanged: 0/0
  2092 ;; Data sizes:     COMMON   BANK0   BANK1
  2093 ;;      Params:         0       0       0
  2094 ;;      Locals:         0       0       0
  2095 ;;      Temps:          0       2       0
  2096 ;;      Totals:         0       2       0
  2097 ;;Total ram usage:        2 bytes
  2098 ;; Hardware stack levels used: 1
  2099 ;; Hardware stack levels required when called: 9
  2100 ;; This function calls:
  2101 ;;		_beep
  2102 ;;		_go_close
  2103 ;;		_go_close_alt
  2104 ;; This function is called by:
  2105 ;;		_main
  2106 ;; This function uses a non-reentrant model
  2107 ;;
  2108                           
  2109  02D3                     _switch_wm:	
  2110                           ;psect for function _switch_wm
  2111                           
  2112  02D3                     l2590:	
  2113                           ;incstack = 0
  2114                           ; Regs used in _switch_wm: [wreg+status,2+status,0+pclath+cstack]
  2115                           
  2116                           
  2117                           ;main.c: 314:     if (FLAGS.bits._JUMP_CONNECTED) {
  2118  02D3  1E7C               	btfss	_FLAGS,4
  2119  02D4  2AD6               	goto	u1961
  2120  02D5  2AD7               	goto	u1960
  2121  02D6                     u1961:
  2122  02D6  2AF8               	goto	l448
  2123  02D7                     u1960:
  2124  02D7                     l2592:
  2125                           
  2126                           ;main.c: 315:         if (FLAGS.bits.NORMAL_WORK_MODE) {
  2127  02D7  1CFC               	btfss	_FLAGS,1
  2128  02D8  2ADA               	goto	u1971
  2129  02D9  2ADB               	goto	u1970
  2130  02DA                     u1971:
  2131  02DA  2B18               	goto	l454
  2132  02DB                     u1970:
  2133  02DB                     l2594:
  2134                           
  2135                           ;main.c: 316:             FLAGS.bits.NORMAL_WORK_MODE = 0;
  2136  02DB  10FC               	bcf	_FLAGS,1
  2137                           
  2138                           ;main.c: 317:             if (FLAGS.bits.CLOSED) go_close_alt();
  2139  02DC  1D7C               	btfss	_FLAGS,2
  2140  02DD  2ADF               	goto	u1981
  2141  02DE  2AE0               	goto	u1980
  2142  02DF                     u1981:
  2143  02DF  2AE3               	goto	l2598
  2144  02E0                     u1980:
  2145  02E0                     l2596:
  2146  02E0  3187  2785  3182   	fcall	_go_close_alt
  2147  02E3                     l2598:
  2148                           
  2149                           ;main.c: 319:             beep(250, 100, 40, 3);
  2150  02E3  30FA               	movlw	250
  2151  02E4  0020               	movlb	0	; select bank0
  2152  02E5  00A0               	movwf	beep@delay
  2153  02E6  3000               	movlw	0
  2154  02E7  00A1               	movwf	beep@delay+1
  2155  02E8  3064               	movlw	100
  2156  02E9  00A2               	movwf	beep@pause
  2157  02EA  3000               	movlw	0
  2158  02EB  00A3               	movwf	beep@pause+1
  2159  02EC  3028               	movlw	40
  2160  02ED  00AA               	movwf	??_switch_wm
  2161  02EE  082A               	movf	??_switch_wm,w
  2162  02EF  00A4               	movwf	beep@time
  2163  02F0  3003               	movlw	3
  2164  02F1  00AB               	movwf	??_switch_wm+1
  2165  02F2  082B               	movf	??_switch_wm+1,w
  2166  02F3  00A5               	movwf	beep@count
  2167  02F4  3185  2548  3182   	fcall	_beep
  2168  02F7  2B18               	goto	l454
  2169  02F8                     l448:
  2170                           
  2171                           ;main.c: 322:         if (!FLAGS.bits.NORMAL_WORK_MODE) {
  2172  02F8  18FC               	btfsc	_FLAGS,1
  2173  02F9  2AFB               	goto	u1991
  2174  02FA  2AFC               	goto	u1990
  2175  02FB                     u1991:
  2176  02FB  2B18               	goto	l454
  2177  02FC                     u1990:
  2178  02FC                     l2600:
  2179                           
  2180                           ;main.c: 323:             FLAGS.bits.NORMAL_WORK_MODE = 1;
  2181  02FC  14FC               	bsf	_FLAGS,1
  2182                           
  2183                           ;main.c: 324:             if (FLAGS.bits.CLOSED) go_close();
  2184  02FD  1D7C               	btfss	_FLAGS,2
  2185  02FE  2B00               	goto	u2001
  2186  02FF  2B01               	goto	u2000
  2187  0300                     u2001:
  2188  0300  2B04               	goto	l453
  2189  0301                     u2000:
  2190  0301                     l2602:
  2191  0301  3185  25ED  3182   	fcall	_go_close
  2192  0304                     l453:
  2193                           
  2194                           ;main.c: 326:             beep(250, 100, 40, 2);
  2195  0304  30FA               	movlw	250
  2196  0305  0020               	movlb	0	; select bank0
  2197  0306  00A0               	movwf	beep@delay
  2198  0307  3000               	movlw	0
  2199  0308  00A1               	movwf	beep@delay+1
  2200  0309  3064               	movlw	100
  2201  030A  00A2               	movwf	beep@pause
  2202  030B  3000               	movlw	0
  2203  030C  00A3               	movwf	beep@pause+1
  2204  030D  3028               	movlw	40
  2205  030E  00AA               	movwf	??_switch_wm
  2206  030F  082A               	movf	??_switch_wm,w
  2207  0310  00A4               	movwf	beep@time
  2208  0311  3002               	movlw	2
  2209  0312  00AB               	movwf	??_switch_wm+1
  2210  0313  082B               	movf	??_switch_wm+1,w
  2211  0314  00A5               	movwf	beep@count
  2212  0315  3185  2548  3182   	fcall	_beep
  2213  0318                     l454:
  2214  0318  0008               	return
  2215  0319                     __end_of_switch_wm:
  2216                           
  2217                           	psect	text2
  2218  04DE                     __ptext2:	
  2219 ;; *************** function _start_setup *****************
  2220 ;; Defined at:
  2221 ;;		line 419 in file "main.c"
  2222 ;; Parameters:    Size  Location     Type
  2223 ;;		None
  2224 ;; Auto vars:     Size  Location     Type
  2225 ;;		None
  2226 ;; Return value:  Size  Location     Type
  2227 ;;                  1    wreg      void 
  2228 ;; Registers used:
  2229 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2230 ;; Tracked objects:
  2231 ;;		On entry : 0/0
  2232 ;;		On exit  : 0/0
  2233 ;;		Unchanged: 0/0
  2234 ;; Data sizes:     COMMON   BANK0   BANK1
  2235 ;;      Params:         0       0       0
  2236 ;;      Locals:         0       0       0
  2237 ;;      Temps:          0       0       0
  2238 ;;      Totals:         0       0       0
  2239 ;;Total ram usage:        0 bytes
  2240 ;; Hardware stack levels used: 1
  2241 ;; Hardware stack levels required when called: 11
  2242 ;; This function calls:
  2243 ;;		_SYSTEM_Initialize
  2244 ;;		_TMR0_SetInterruptHandler
  2245 ;;		_TMR2_SetInterruptHandler
  2246 ;;		_TMR2_StartTimer
  2247 ;;		_get_eeprom
  2248 ;;		_get_fun_full
  2249 ;;		_get_jump_full
  2250 ;; This function is called by:
  2251 ;;		_main
  2252 ;; This function uses a non-reentrant model
  2253 ;;
  2254                           
  2255  04DE                     _start_setup:	
  2256                           ;psect for function _start_setup
  2257                           
  2258  04DE                     l2632:	
  2259                           ;incstack = 0
  2260                           ; Regs used in _start_setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2261                           
  2262                           
  2263                           ;main.c: 421:     SYSTEM_Initialize();
  2264  04DE  3186  2691  3184   	fcall	_SYSTEM_Initialize
  2265  04E1                     l2634:
  2266                           
  2267                           ;main.c: 422:     (INTCONbits.GIE = 1);
  2268  04E1  178B               	bsf	11,7	;volatile
  2269  04E2                     l2636:
  2270                           
  2271                           ;main.c: 423:     (INTCONbits.PEIE = 1);
  2272  04E2  170B               	bsf	11,6	;volatile
  2273  04E3                     l2638:
  2274                           
  2275                           ;main.c: 425:     get_eeprom();
  2276  04E3  3187  2760  3184   	fcall	_get_eeprom
  2277  04E6                     l2640:
  2278                           
  2279                           ;main.c: 426:     TMR0_SetInterruptHandler(switch_zum);
  2280  04E6  30FA               	movlw	low _switch_zum
  2281  04E7  0020               	movlb	0	; select bank0
  2282  04E8  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2283  04E9  3006               	movlw	high _switch_zum
  2284  04EA  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2285  04EB  3187  277A  3184   	fcall	_TMR0_SetInterruptHandler
  2286  04EE                     l2642:
  2287                           
  2288                           ;main.c: 427:     TMR2_SetInterruptHandler(sec_tick_work);
  2289  04EE  30E6               	movlw	low _sec_tick_work
  2290  04EF  0020               	movlb	0	; select bank0
  2291  04F0  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  2292  04F1  3003               	movlw	high _sec_tick_work
  2293  04F2  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  2294  04F3  3187  2774  3184   	fcall	_TMR2_SetInterruptHandler
  2295  04F6                     l2644:
  2296                           
  2297                           ;main.c: 428:     TMR2_StartTimer();
  2298  04F6  3187  27A0  3184   	fcall	_TMR2_StartTimer
  2299  04F9                     l2646:
  2300  04F9  0023               	movlb	3	; select bank3
  2301  04FA  118E               	bcf	14,3	;volatile
  2302  04FB                     l2648:
  2303  04FB  108C               	bcf	12,1	;volatile
  2304  04FC                     l2650:
  2305  04FC  110E               	bcf	14,2	;volatile
  2306  04FD                     l2652:
  2307  04FD  0024               	movlb	4	; select bank4
  2308  04FE  108C               	bcf	12,1	;volatile
  2309  04FF                     l2654:
  2310  04FF  0021               	movlb	1	; select bank1
  2311  0500  148C               	bsf	12,1	;volatile
  2312  0501                     l2656:
  2313  0501  0024               	movlb	4	; select bank4
  2314  0502  110E               	bcf	14,2	;volatile
  2315  0503                     l2658:
  2316  0503  0021               	movlb	1	; select bank1
  2317  0504  150E               	bsf	14,2	;volatile
  2318  0505                     l2660:
  2319                           
  2320                           ;main.c: 440:     INTCONbits.TMR0IE = 0;
  2321  0505  128B               	bcf	11,5	;volatile
  2322  0506                     l2662:
  2323                           
  2324                           ;main.c: 441:     FLAGS.value = 0;
  2325  0506  01FC               	clrf	_FLAGS
  2326  0507                     l2664:
  2327  0507  0022               	movlb	2	; select bank2
  2328  0508  128E               	bcf	14,5	;volatile
  2329  0509                     l2666:
  2330  0509  120E               	bcf	14,4	;volatile
  2331  050A                     l2668:
  2332  050A  100E               	bcf	14,0	;volatile
  2333  050B                     l2670:
  2334  050B  0021               	movlb	1	; select bank1
  2335  050C  100E               	bcf	14,0	;volatile
  2336  050D                     l2672:
  2337                           
  2338                           ;main.c: 448:     get_fun_full();
  2339  050D  3182  228C  3184   	fcall	_get_fun_full
  2340  0510                     l2674:
  2341                           
  2342                           ;main.c: 449:     get_jump_full();
  2343  0510  3183  23A3  3184   	fcall	_get_jump_full
  2344  0513                     l2676:
  2345                           
  2346                           ;main.c: 450:     time_pow_s = 0;
  2347  0513  0020               	movlb	0	; select bank0
  2348  0514  01E6               	clrf	_time_pow_s
  2349  0515                     l535:
  2350  0515  0008               	return
  2351  0516                     __end_of_start_setup:
  2352                           
  2353                           	psect	text3
  2354  03A3                     __ptext3:	
  2355 ;; *************** function _get_jump_full *****************
  2356 ;; Defined at:
  2357 ;;		line 207 in file "main.c"
  2358 ;; Parameters:    Size  Location     Type
  2359 ;;		None
  2360 ;; Auto vars:     Size  Location     Type
  2361 ;;  res             2    5[BANK0 ] unsigned int 
  2362 ;;  flag            1    7[BANK0 ] unsigned char 
  2363 ;; Return value:  Size  Location     Type
  2364 ;;                  1    wreg      void 
  2365 ;; Registers used:
  2366 ;;		wreg, status,2, status,0, pclath, cstack
  2367 ;; Tracked objects:
  2368 ;;		On entry : 0/0
  2369 ;;		On exit  : 0/0
  2370 ;;		Unchanged: 0/0
  2371 ;; Data sizes:     COMMON   BANK0   BANK1
  2372 ;;      Params:         0       0       0
  2373 ;;      Locals:         0       3       0
  2374 ;;      Temps:          0       1       0
  2375 ;;      Totals:         0       4       0
  2376 ;;Total ram usage:        4 bytes
  2377 ;; Hardware stack levels used: 1
  2378 ;; Hardware stack levels required when called: 8
  2379 ;; This function calls:
  2380 ;;		_ADC_GetConversion
  2381 ;; This function is called by:
  2382 ;;		_start_setup
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386  03A3                     _get_jump_full:	
  2387                           ;psect for function _get_jump_full
  2388                           
  2389  03A3                     l394:	
  2390                           ;incstack = 0
  2391                           ; Regs used in _get_jump_full: [wreg+status,2+status,0+pclath+cstack]
  2392                           ;main.c: 209:     static signed char jump_counter;;main.c: 210:     do { ANSELAbits.ANSA
      +                          1 = 1; } while(0);
  2393                           
  2394  03A3  0023               	movlb	3	; select bank3
  2395  03A4  148C               	bsf	12,1	;volatile
  2396  03A5                     l2434:
  2397                           
  2398                           ;main.c: 211:     char flag = 0;
  2399  03A5  0020               	movlb	0	; select bank0
  2400  03A6  01A7               	clrf	get_jump_full@flag
  2401  03A7                     l2436:
  2402                           
  2403                           ;main.c: 213:         unsigned res = ADC_GetConversion(PIN_JUMP_STATE);
  2404  03A7  3001               	movlw	1
  2405  03A8  3185  25CC  3183   	fcall	_ADC_GetConversion
  2406  03AB  0020               	movlb	0	; select bank0
  2407  03AC  0821               	movf	?_ADC_GetConversion+1,w
  2408  03AD  00A6               	movwf	get_jump_full@res+1
  2409  03AE  0820               	movf	?_ADC_GetConversion,w
  2410  03AF  00A5               	movwf	get_jump_full@res
  2411  03B0                     l2438:
  2412                           
  2413                           ;main.c: 214:         if (res < 2000) jump_counter--;
  2414  03B0  3007               	movlw	7
  2415  03B1  0226               	subwf	get_jump_full@res+1,w
  2416  03B2  30D0               	movlw	208
  2417  03B3  1903               	skipnz
  2418  03B4  0225               	subwf	get_jump_full@res,w
  2419  03B5  1803               	skipnc
  2420  03B6  2BB8               	goto	u1651
  2421  03B7  2BB9               	goto	u1650
  2422  03B8                     u1651:
  2423  03B8  2BBE               	goto	l2442
  2424  03B9                     u1650:
  2425  03B9                     l2440:
  2426  03B9  30FF               	movlw	255
  2427  03BA  00A4               	movwf	??_get_jump_full
  2428  03BB  0824               	movf	??_get_jump_full,w
  2429  03BC  07E2               	addwf	get_jump_full@jump_counter,f
  2430  03BD  2BC2               	goto	l2444
  2431  03BE                     l2442:
  2432  03BE  3001               	movlw	1
  2433  03BF  00A4               	movwf	??_get_jump_full
  2434  03C0  0824               	movf	??_get_jump_full,w
  2435  03C1  07E2               	addwf	get_jump_full@jump_counter,f
  2436  03C2                     l2444:
  2437                           
  2438                           ;main.c: 217:         if (jump_counter > 10) {
  2439  03C2  0862               	movf	get_jump_full@jump_counter,w
  2440  03C3  3A80               	xorlw	128
  2441  03C4  3E75               	addlw	-139
  2442  03C5  1C03               	skipc
  2443  03C6  2BC8               	goto	u1661
  2444  03C7  2BC9               	goto	u1660
  2445  03C8                     u1661:
  2446  03C8  2BD1               	goto	l2452
  2447  03C9                     u1660:
  2448  03C9                     l2446:
  2449                           
  2450                           ;main.c: 218:             jump_counter = 10;
  2451  03C9  300A               	movlw	10
  2452  03CA  00A4               	movwf	??_get_jump_full
  2453  03CB  0824               	movf	??_get_jump_full,w
  2454  03CC  00E2               	movwf	get_jump_full@jump_counter
  2455  03CD                     l2448:
  2456                           
  2457                           ;main.c: 219:             FLAGS.bits._JUMP_CONNECTED = 0;
  2458  03CD  127C               	bcf	_FLAGS,4
  2459  03CE                     l2450:
  2460                           
  2461                           ;main.c: 220:             flag = 1;
  2462  03CE  01A7               	clrf	get_jump_full@flag
  2463  03CF  0AA7               	incf	get_jump_full@flag,f
  2464                           
  2465                           ;main.c: 221:         } else if (jump_counter<-10) {
  2466  03D0  2BDE               	goto	l2460
  2467  03D1                     l2452:
  2468  03D1  0862               	movf	get_jump_full@jump_counter,w
  2469  03D2  3A80               	xorlw	128
  2470  03D3  3E8A               	addlw	138
  2471  03D4  1803               	skipnc
  2472  03D5  2BD7               	goto	u1671
  2473  03D6  2BD8               	goto	u1670
  2474  03D7                     u1671:
  2475  03D7  2BDE               	goto	l2460
  2476  03D8                     u1670:
  2477  03D8                     l2454:
  2478                           
  2479                           ;main.c: 222:             jump_counter = -10;
  2480  03D8  30F6               	movlw	246
  2481  03D9  00A4               	movwf	??_get_jump_full
  2482  03DA  0824               	movf	??_get_jump_full,w
  2483  03DB  00E2               	movwf	get_jump_full@jump_counter
  2484  03DC                     l2456:
  2485                           
  2486                           ;main.c: 223:             FLAGS.bits._JUMP_CONNECTED = 1;
  2487  03DC  167C               	bsf	_FLAGS,4
  2488  03DD  2BCE               	goto	l2450
  2489  03DE                     l2460:
  2490                           
  2491                           ;main.c: 226:     } while (flag == 0);
  2492  03DE  0827               	movf	get_jump_full@flag,w
  2493  03DF  1903               	btfsc	3,2
  2494  03E0  2BE2               	goto	u1681
  2495  03E1  2BE3               	goto	u1680
  2496  03E2                     u1681:
  2497  03E2  2BA7               	goto	l2436
  2498  03E3                     u1680:
  2499  03E3                     l403:	
  2500                           ;main.c: 227:     do { ANSELAbits.ANSA1 = 0; } while(0);
  2501                           
  2502  03E3  0023               	movlb	3	; select bank3
  2503  03E4  108C               	bcf	12,1	;volatile
  2504  03E5                     l405:
  2505  03E5  0008               	return
  2506  03E6                     __end_of_get_jump_full:
  2507                           
  2508                           	psect	text4
  2509  028C                     __ptext4:	
  2510 ;; *************** function _get_fun_full *****************
  2511 ;; Defined at:
  2512 ;;		line 160 in file "main.c"
  2513 ;; Parameters:    Size  Location     Type
  2514 ;;		None
  2515 ;; Auto vars:     Size  Location     Type
  2516 ;;  res             2    5[BANK0 ] unsigned int 
  2517 ;;  flag            1    7[BANK0 ] unsigned char 
  2518 ;; Return value:  Size  Location     Type
  2519 ;;                  1    wreg      void 
  2520 ;; Registers used:
  2521 ;;		wreg, status,2, status,0, pclath, cstack
  2522 ;; Tracked objects:
  2523 ;;		On entry : 0/0
  2524 ;;		On exit  : 0/0
  2525 ;;		Unchanged: 0/0
  2526 ;; Data sizes:     COMMON   BANK0   BANK1
  2527 ;;      Params:         0       0       0
  2528 ;;      Locals:         0       3       0
  2529 ;;      Temps:          0       1       0
  2530 ;;      Totals:         0       4       0
  2531 ;;Total ram usage:        4 bytes
  2532 ;; Hardware stack levels used: 1
  2533 ;; Hardware stack levels required when called: 8
  2534 ;; This function calls:
  2535 ;;		_ADC_GetConversion
  2536 ;; This function is called by:
  2537 ;;		_start_setup
  2538 ;; This function uses a non-reentrant model
  2539 ;;
  2540                           
  2541  028C                     _get_fun_full:	
  2542                           ;psect for function _get_fun_full
  2543                           
  2544  028C                     l360:	
  2545                           ;incstack = 0
  2546                           ; Regs used in _get_fun_full: [wreg+status,2+status,0+pclath+cstack]
  2547                           ;main.c: 162:     static signed char fun_counter;;main.c: 163:     do { LATCbits.LATC1 =
      +                           1; } while(0);
  2548                           
  2549  028C  0022               	movlb	2	; select bank2
  2550  028D  148E               	bsf	14,1	;volatile
  2551  028E                     l362:	
  2552                           ;main.c: 164:     do { ANSELCbits.ANSC2 = 1; } while(0);
  2553                           
  2554  028E  0023               	movlb	3	; select bank3
  2555  028F  150E               	bsf	14,2	;volatile
  2556  0290                     l2406:
  2557                           
  2558                           ;main.c: 165:     char flag = 0;
  2559  0290  0020               	movlb	0	; select bank0
  2560  0291  01A7               	clrf	get_fun_full@flag
  2561  0292                     l2408:
  2562                           
  2563                           ;main.c: 167:         unsigned res = ADC_GetConversion(PIN_FUN_STATE);
  2564  0292  3006               	movlw	6
  2565  0293  3185  25CC  3182   	fcall	_ADC_GetConversion
  2566  0296  0020               	movlb	0	; select bank0
  2567  0297  0821               	movf	?_ADC_GetConversion+1,w
  2568  0298  00A6               	movwf	get_fun_full@res+1
  2569  0299  0820               	movf	?_ADC_GetConversion,w
  2570  029A  00A5               	movwf	get_fun_full@res
  2571  029B                     l2410:
  2572                           
  2573                           ;main.c: 168:         if (res < 2000) fun_counter--;
  2574  029B  3007               	movlw	7
  2575  029C  0226               	subwf	get_fun_full@res+1,w
  2576  029D  30D0               	movlw	208
  2577  029E  1903               	skipnz
  2578  029F  0225               	subwf	get_fun_full@res,w
  2579  02A0  1803               	skipnc
  2580  02A1  2AA3               	goto	u1611
  2581  02A2  2AA4               	goto	u1610
  2582  02A3                     u1611:
  2583  02A3  2AA9               	goto	l2414
  2584  02A4                     u1610:
  2585  02A4                     l2412:
  2586  02A4  30FF               	movlw	255
  2587  02A5  00A4               	movwf	??_get_fun_full
  2588  02A6  0824               	movf	??_get_fun_full,w
  2589  02A7  07E4               	addwf	get_fun_full@fun_counter,f
  2590  02A8  2AAD               	goto	l2416
  2591  02A9                     l2414:
  2592  02A9  3001               	movlw	1
  2593  02AA  00A4               	movwf	??_get_fun_full
  2594  02AB  0824               	movf	??_get_fun_full,w
  2595  02AC  07E4               	addwf	get_fun_full@fun_counter,f
  2596  02AD                     l2416:
  2597                           
  2598                           ;main.c: 170:         if (fun_counter > 10) {
  2599  02AD  0864               	movf	get_fun_full@fun_counter,w
  2600  02AE  3A80               	xorlw	128
  2601  02AF  3E75               	addlw	-139
  2602  02B0  1C03               	skipc
  2603  02B1  2AB3               	goto	u1621
  2604  02B2  2AB4               	goto	u1620
  2605  02B3                     u1621:
  2606  02B3  2ABC               	goto	l2424
  2607  02B4                     u1620:
  2608  02B4                     l2418:
  2609                           
  2610                           ;main.c: 171:             fun_counter = 10;
  2611  02B4  300A               	movlw	10
  2612  02B5  00A4               	movwf	??_get_fun_full
  2613  02B6  0824               	movf	??_get_fun_full,w
  2614  02B7  00E4               	movwf	get_fun_full@fun_counter
  2615  02B8                     l2420:
  2616                           
  2617                           ;main.c: 172:             FLAGS.bits._FUN_CONNECTED = 0;
  2618  02B8  11FC               	bcf	_FLAGS,3
  2619  02B9                     l2422:
  2620                           
  2621                           ;main.c: 173:             flag = 1;
  2622  02B9  01A7               	clrf	get_fun_full@flag
  2623  02BA  0AA7               	incf	get_fun_full@flag,f
  2624                           
  2625                           ;main.c: 174:         } else if (fun_counter<-10) {
  2626  02BB  2AC9               	goto	l2432
  2627  02BC                     l2424:
  2628  02BC  0864               	movf	get_fun_full@fun_counter,w
  2629  02BD  3A80               	xorlw	128
  2630  02BE  3E8A               	addlw	138
  2631  02BF  1803               	skipnc
  2632  02C0  2AC2               	goto	u1631
  2633  02C1  2AC3               	goto	u1630
  2634  02C2                     u1631:
  2635  02C2  2AC9               	goto	l2432
  2636  02C3                     u1630:
  2637  02C3                     l2426:
  2638                           
  2639                           ;main.c: 175:             fun_counter = -10;
  2640  02C3  30F6               	movlw	246
  2641  02C4  00A4               	movwf	??_get_fun_full
  2642  02C5  0824               	movf	??_get_fun_full,w
  2643  02C6  00E4               	movwf	get_fun_full@fun_counter
  2644  02C7                     l2428:
  2645                           
  2646                           ;main.c: 176:             FLAGS.bits._FUN_CONNECTED = 1;
  2647  02C7  15FC               	bsf	_FLAGS,3
  2648  02C8  2AB9               	goto	l2422
  2649  02C9                     l2432:
  2650                           
  2651                           ;main.c: 179:     } while (flag == 0);
  2652  02C9  0827               	movf	get_fun_full@flag,w
  2653  02CA  1903               	btfsc	3,2
  2654  02CB  2ACD               	goto	u1641
  2655  02CC  2ACE               	goto	u1640
  2656  02CD                     u1641:
  2657  02CD  2A92               	goto	l2408
  2658  02CE                     u1640:
  2659  02CE                     l371:	
  2660                           ;main.c: 181:     do { ANSELCbits.ANSC2 = 0; } while(0);
  2661                           
  2662  02CE  0023               	movlb	3	; select bank3
  2663  02CF  110E               	bcf	14,2	;volatile
  2664  02D0                     l373:	
  2665                           ;main.c: 182:     do { LATCbits.LATC1 = 0; } while(0);
  2666                           
  2667  02D0  0022               	movlb	2	; select bank2
  2668  02D1  108E               	bcf	14,1	;volatile
  2669  02D2                     l375:
  2670  02D2  0008               	return
  2671  02D3                     __end_of_get_fun_full:
  2672                           
  2673                           	psect	text5
  2674  0760                     __ptext5:	
  2675 ;; *************** function _get_eeprom *****************
  2676 ;; Defined at:
  2677 ;;		line 414 in file "main.c"
  2678 ;; Parameters:    Size  Location     Type
  2679 ;;		None
  2680 ;; Auto vars:     Size  Location     Type
  2681 ;;		None
  2682 ;; Return value:  Size  Location     Type
  2683 ;;                  1    wreg      void 
  2684 ;; Registers used:
  2685 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2686 ;; Tracked objects:
  2687 ;;		On entry : 0/0
  2688 ;;		On exit  : 0/0
  2689 ;;		Unchanged: 0/0
  2690 ;; Data sizes:     COMMON   BANK0   BANK1
  2691 ;;      Params:         0       0       0
  2692 ;;      Locals:         0       0       0
  2693 ;;      Temps:          0       0       0
  2694 ;;      Totals:         0       0       0
  2695 ;;Total ram usage:        0 bytes
  2696 ;; Hardware stack levels used: 1
  2697 ;; Hardware stack levels required when called: 10
  2698 ;; This function calls:
  2699 ;;		_get_adr
  2700 ;;		_get_time
  2701 ;; This function is called by:
  2702 ;;		_start_setup
  2703 ;; This function uses a non-reentrant model
  2704 ;;
  2705                           
  2706  0760                     _get_eeprom:	
  2707                           ;psect for function _get_eeprom
  2708                           
  2709  0760                     l2470:	
  2710                           ;incstack = 0
  2711                           ; Regs used in _get_eeprom: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2712                           
  2713                           
  2714                           ;main.c: 415:     get_adr();
  2715  0760  3181  2134  3187   	fcall	_get_adr
  2716                           
  2717                           ;main.c: 416:     get_time();
  2718  0763  3180  203F  3187   	fcall	_get_time
  2719  0766                     l510:
  2720  0766  0008               	return
  2721  0767                     __end_of_get_eeprom:
  2722                           
  2723                           	psect	text6
  2724  003F                     __ptext6:	
  2725 ;; *************** function _get_time *****************
  2726 ;; Defined at:
  2727 ;;		line 377 in file "main.c"
  2728 ;; Parameters:    Size  Location     Type
  2729 ;;		None
  2730 ;; Auto vars:     Size  Location     Type
  2731 ;;  q               1   44[BANK0 ] unsigned char 
  2732 ;;  q               1   42[BANK0 ] unsigned char 
  2733 ;;  q               1   43[BANK0 ] unsigned char 
  2734 ;;  i               1   40[BANK0 ] unsigned char 
  2735 ;;  times          12   20[BANK0 ] unsigned um[4]
  2736 ;;  time_count      4   32[BANK0 ] unsigned char [4]
  2737 ;;  buf2            3   37[BANK0 ] unsigned um
  2738 ;;  buf             1   41[BANK0 ] unsigned char 
  2739 ;;  adr_error       1   36[BANK0 ] unsigned char 
  2740 ;; Return value:  Size  Location     Type
  2741 ;;                  1    wreg      void 
  2742 ;; Registers used:
  2743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2744 ;; Tracked objects:
  2745 ;;		On entry : 0/0
  2746 ;;		On exit  : 0/0
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMMON   BANK0   BANK1
  2749 ;;      Params:         0       0       0
  2750 ;;      Locals:         0      25       0
  2751 ;;      Temps:          0       4       0
  2752 ;;      Totals:         0      29       0
  2753 ;;Total ram usage:       29 bytes
  2754 ;; Hardware stack levels used: 1
  2755 ;; Hardware stack levels required when called: 9
  2756 ;; This function calls:
  2757 ;;		_EEPROM_ReadShortLong
  2758 ;;		___bmul
  2759 ;; This function is called by:
  2760 ;;		_get_eeprom
  2761 ;; This function uses a non-reentrant model
  2762 ;;
  2763                           
  2764  003F                     _get_time:	
  2765                           ;psect for function _get_time
  2766                           
  2767  003F                     l2284:	
  2768                           ;incstack = 0
  2769                           ; Regs used in _get_time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2770                           
  2771                           
  2772                           ;main.c: 379:     char adr_error = 0;
  2773  003F  0020               	movlb	0	; select bank0
  2774  0040  01C4               	clrf	get_time@adr_error
  2775                           
  2776                           ;main.c: 380:     char buf=0;
  2777  0041  01C9               	clrf	get_time@buf
  2778  0042                     l2286:
  2779  0042                     l2288:
  2780                           
  2781                           ;main.c: 382:     __uint24 times[4] = {};
  2782  0042  3034               	movlw	low get_time@times
  2783  0043  0086               	movwf	6
  2784  0044  3000               	movlw	high get_time@times
  2785  0045  0087               	movwf	7
  2786  0046  300C               	movlw	12
  2787  0047  00B0               	movwf	??_get_time
  2788  0048  3000               	movlw	0
  2789  0049                     u1480:
  2790  0049  001E               	movwi fsr1++
  2791  004A  0BB0               	decfsz	??_get_time,f
  2792  004B  2849               	goto	u1480
  2793  004C                     l2290:
  2794                           
  2795                           ;main.c: 383:     char time_count[4]={};
  2796  004C  3000               	movlw	0
  2797  004D  00C3               	movwf	get_time@time_count+3
  2798  004E  3000               	movlw	0
  2799  004F  00C2               	movwf	get_time@time_count+2
  2800  0050  3000               	movlw	0
  2801  0051  00C1               	movwf	get_time@time_count+1
  2802  0052  3000               	movlw	0
  2803  0053  00C0               	movwf	get_time@time_count
  2804  0054                     l2292:
  2805                           
  2806                           ;main.c: 384:     for (unsigned char i = START_EEPROM_ADR; i < START_EEPROM_ADR + 0x10; 
      +                          i += 4) {
  2807  0054  0867               	movf	_START_EEPROM_ADR,w
  2808  0055  00B0               	movwf	??_get_time
  2809  0056  0830               	movf	??_get_time,w
  2810  0057  00C8               	movwf	get_time@i
  2811  0058  28E7               	goto	l2336
  2812  0059                     l2294:
  2813                           
  2814                           ;main.c: 385:         buf2 = EEPROM_ReadShortLong(i);
  2815  0059  0020               	movlb	0	; select bank0
  2816  005A  0848               	movf	get_time@i,w
  2817  005B  3183  2319  3180   	fcall	_EEPROM_ReadShortLong
  2818  005E  0020               	movlb	0	; select bank0
  2819  005F  0823               	movf	?_EEPROM_ReadShortLong,w
  2820  0060  00C5               	movwf	get_time@buf2
  2821  0061  0824               	movf	?_EEPROM_ReadShortLong+1,w
  2822  0062  00C6               	movwf	get_time@buf2+1
  2823  0063  0825               	movf	?_EEPROM_ReadShortLong+2,w
  2824  0064  00C7               	movwf	get_time@buf2+2
  2825  0065                     l2296:
  2826                           
  2827                           ;main.c: 387:         for (char q = 0; q < 4; q++) {
  2828  0065  01CA               	clrf	get_time@q
  2829  0066                     l2302:
  2830                           
  2831                           ;main.c: 388:             if (buf2 == times[q]) {
  2832  0066  3003               	movlw	3
  2833  0067  00B0               	movwf	??_get_time
  2834  0068  0830               	movf	??_get_time,w
  2835  0069  00A0               	movwf	___bmul@multiplicand
  2836  006A  084A               	movf	get_time@q,w
  2837  006B  3186  267B  3180   	fcall	___bmul
  2838  006E  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2839  006F  0086               	movwf	6
  2840  0070  0187               	clrf	7
  2841  0071  3F40               	moviw [0]fsr1
  2842  0072  0020               	movlb	0	; select bank0
  2843  0073  0645               	xorwf	get_time@buf2,w
  2844  0074  1D03               	skipz
  2845  0075  287C               	goto	u1495
  2846  0076  3F41               	moviw [1]fsr1
  2847  0077  0646               	xorwf	get_time@buf2+1,w
  2848  0078  1D03               	skipz
  2849  0079  287C               	goto	u1495
  2850  007A  3F42               	moviw [2]fsr1
  2851  007B  0647               	xorwf	get_time@buf2+2,w
  2852  007C                     u1495:
  2853  007C  1D03               	skipz
  2854  007D  287F               	goto	u1491
  2855  007E  2880               	goto	u1490
  2856  007F                     u1491:
  2857  007F  288E               	goto	l2308
  2858  0080                     u1490:
  2859  0080                     l2304:
  2860                           
  2861                           ;main.c: 389:                 time_count[q]++;
  2862  0080  3001               	movlw	1
  2863  0081  00B0               	movwf	??_get_time
  2864  0082  084A               	movf	get_time@q,w
  2865  0083  3E40               	addlw	(low (get_time@time_count| 0))& (0+255)
  2866  0084  0086               	movwf	6
  2867  0085  0187               	clrf	7
  2868  0086  0830               	movf	??_get_time,w
  2869  0087  0781               	addwf	1,f
  2870  0088                     l2306:
  2871                           
  2872                           ;main.c: 390:                 buf2 = 0;
  2873  0088  3000               	movlw	0
  2874  0089  00C5               	movwf	get_time@buf2
  2875  008A  3000               	movlw	0
  2876  008B  00C6               	movwf	get_time@buf2+1
  2877  008C  3000               	movlw	0
  2878  008D  00C7               	movwf	get_time@buf2+2
  2879  008E                     l2308:
  2880                           
  2881                           ;main.c: 392:         }
  2882  008E  3001               	movlw	1
  2883  008F  00B0               	movwf	??_get_time
  2884  0090  0830               	movf	??_get_time,w
  2885  0091  07CA               	addwf	get_time@q,f
  2886  0092                     l2310:
  2887  0092  3004               	movlw	4
  2888  0093  024A               	subwf	get_time@q,w
  2889  0094  1C03               	skipc
  2890  0095  2897               	goto	u1501
  2891  0096  2898               	goto	u1500
  2892  0097                     u1501:
  2893  0097  2866               	goto	l2302
  2894  0098                     u1500:
  2895  0098                     l2312:
  2896                           
  2897                           ;main.c: 394:         if (buf2 != 0) {
  2898  0098  0847               	movf	get_time@buf2+2,w
  2899  0099  0446               	iorwf	get_time@buf2+1,w
  2900  009A  0445               	iorwf	get_time@buf2,w
  2901  009B  1903               	skipnz
  2902  009C  289E               	goto	u1511
  2903  009D  289F               	goto	u1510
  2904  009E                     u1511:
  2905  009E  28E3               	goto	l2334
  2906  009F                     u1510:
  2907  009F                     l2314:
  2908                           
  2909                           ;main.c: 395:             adr_error = 1;
  2910  009F  01C4               	clrf	get_time@adr_error
  2911  00A0  0AC4               	incf	get_time@adr_error,f
  2912  00A1                     l2316:
  2913                           
  2914                           ;main.c: 396:             for (unsigned char q = 0; q < 4; q++)
  2915  00A1  01CC               	clrf	get_time@q_825
  2916  00A2                     l2322:
  2917                           
  2918                           ;main.c: 397:                 if (times[q]== 0) {
  2919  00A2  3003               	movlw	3
  2920  00A3  00B0               	movwf	??_get_time
  2921  00A4  0830               	movf	??_get_time,w
  2922  00A5  00A0               	movwf	___bmul@multiplicand
  2923  00A6  084C               	movf	get_time@q_825,w
  2924  00A7  3186  267B  3180   	fcall	___bmul
  2925  00AA  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2926  00AB  0086               	movwf	6
  2927  00AC  0187               	clrf	7
  2928  00AD  3F40               	moviw [0]fsr1
  2929  00AE  0020               	movlb	0	; select bank0
  2930  00AF  00B1               	movwf	??_get_time+1
  2931  00B0  3F41               	moviw [1]fsr1
  2932  00B1  00B2               	movwf	??_get_time+2
  2933  00B2  3F42               	moviw [2]fsr1
  2934  00B3  00B3               	movwf	??_get_time+3
  2935  00B4  0833               	movf	??_get_time+3,w
  2936  00B5  0432               	iorwf	??_get_time+2,w
  2937  00B6  0431               	iorwf	??_get_time+1,w
  2938  00B7  1D03               	skipz
  2939  00B8  28BA               	goto	u1521
  2940  00B9  28BB               	goto	u1520
  2941  00BA                     u1521:
  2942  00BA  28D9               	goto	l2330
  2943  00BB                     u1520:
  2944  00BB                     l2324:
  2945                           
  2946                           ;main.c: 398:                     times[q] = buf;
  2947  00BB  0849               	movf	get_time@buf,w
  2948  00BC  00B0               	movwf	??_get_time
  2949  00BD  01B1               	clrf	??_get_time+1
  2950  00BE  01B2               	clrf	??_get_time+2
  2951  00BF  3003               	movlw	3
  2952  00C0  00B3               	movwf	??_get_time+3
  2953  00C1  0833               	movf	??_get_time+3,w
  2954  00C2  00A0               	movwf	___bmul@multiplicand
  2955  00C3  084C               	movf	get_time@q_825,w
  2956  00C4  3186  267B  3180   	fcall	___bmul
  2957  00C7  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2958  00C8  0086               	movwf	6
  2959  00C9  0187               	clrf	7
  2960  00CA  0020               	movlb	0	; select bank0
  2961  00CB  0830               	movf	??_get_time,w
  2962  00CC  3FC0               	movwi [0]fsr1
  2963  00CD  0831               	movf	??_get_time+1,w
  2964  00CE  3FC1               	movwi [1]fsr1
  2965  00CF  0832               	movf	??_get_time+2,w
  2966  00D0  3FC2               	movwi [2]fsr1
  2967  00D1                     l2326:
  2968                           
  2969                           ;main.c: 399:                     time_count[q] = 1;
  2970  00D1  084C               	movf	get_time@q_825,w
  2971  00D2  3E40               	addlw	(low (get_time@time_count| 0))& (0+255)
  2972  00D3  0086               	movwf	6
  2973  00D4  0187               	clrf	7
  2974  00D5  0181               	clrf	1
  2975  00D6  0A81               	incf	1,f
  2976  00D7                     l2328:
  2977                           
  2978                           ;main.c: 400:                     buf = 0;
  2979  00D7  01C9               	clrf	get_time@buf
  2980                           
  2981                           ;main.c: 401:                     break;
  2982  00D8  28E3               	goto	l2334
  2983  00D9                     l2330:
  2984  00D9  3001               	movlw	1
  2985  00DA  00B0               	movwf	??_get_time
  2986  00DB  0830               	movf	??_get_time,w
  2987  00DC  07CC               	addwf	get_time@q_825,f
  2988  00DD                     l2332:
  2989  00DD  3004               	movlw	4
  2990  00DE  024C               	subwf	get_time@q_825,w
  2991  00DF  1C03               	skipc
  2992  00E0  28E2               	goto	u1531
  2993  00E1  28E3               	goto	u1530
  2994  00E2                     u1531:
  2995  00E2  28A2               	goto	l2322
  2996  00E3                     u1530:
  2997  00E3                     l2334:
  2998                           
  2999                           ;main.c: 404:     }
  3000  00E3  3004               	movlw	4
  3001  00E4  00B0               	movwf	??_get_time
  3002  00E5  0830               	movf	??_get_time,w
  3003  00E6  07C8               	addwf	get_time@i,f
  3004  00E7                     l2336:
  3005  00E7  0867               	movf	_START_EEPROM_ADR,w
  3006  00E8  3E10               	addlw	16
  3007  00E9  00B0               	movwf	??_get_time
  3008  00EA  3000               	movlw	0
  3009  00EB  1803               	skipnc
  3010  00EC  3001               	movlw	1
  3011  00ED  00B1               	movwf	??_get_time+1
  3012  00EE  0831               	movf	??_get_time+1,w
  3013  00EF  3A80               	xorlw	128
  3014  00F0  3C80               	sublw	128
  3015  00F1  1D03               	skipz
  3016  00F2  28F5               	goto	u1545
  3017  00F3  0830               	movf	??_get_time,w
  3018  00F4  0248               	subwf	get_time@i,w
  3019  00F5                     u1545:
  3020  00F5  1C03               	skipc
  3021  00F6  28F8               	goto	u1541
  3022  00F7  28F9               	goto	u1540
  3023  00F8                     u1541:
  3024  00F8  2859               	goto	l2294
  3025  00F9                     u1540:
  3026  00F9                     l2338:
  3027                           
  3028                           ;main.c: 405:     buf = 0;
  3029  00F9  0020               	movlb	0	; select bank0
  3030  00FA  01C9               	clrf	get_time@buf
  3031                           
  3032                           ;main.c: 406:     for (unsigned char q = 0; q < 4; q++) {
  3033  00FB  01CB               	clrf	get_time@q_826
  3034  00FC                     l2344:
  3035                           
  3036                           ;main.c: 407:         if (time_count[q] > time_count[buf]) buf = q;
  3037  00FC  0849               	movf	get_time@buf,w
  3038  00FD  3E40               	addlw	(low (get_time@time_count| 0))& (0+255)
  3039  00FE  0086               	movwf	6
  3040  00FF  0187               	clrf	7
  3041  0100  084B               	movf	get_time@q_826,w
  3042  0101  3E40               	addlw	(low (get_time@time_count| 0))& (0+255)
  3043  0102  0084               	movwf	4
  3044  0103  0185               	clrf	5
  3045  0104  0800               	movf	0,w
  3046  0105  0201               	subwf	1,w
  3047  0106  1803               	skipnc
  3048  0107  2909               	goto	u1551
  3049  0108  290A               	goto	u1550
  3050  0109                     u1551:
  3051  0109  290E               	goto	l2348
  3052  010A                     u1550:
  3053  010A                     l2346:
  3054  010A  084B               	movf	get_time@q_826,w
  3055  010B  00B0               	movwf	??_get_time
  3056  010C  0830               	movf	??_get_time,w
  3057  010D  00C9               	movwf	get_time@buf
  3058  010E                     l2348:
  3059                           
  3060                           ;main.c: 408:     }
  3061  010E  3001               	movlw	1
  3062  010F  00B0               	movwf	??_get_time
  3063  0110  0830               	movf	??_get_time,w
  3064  0111  07CB               	addwf	get_time@q_826,f
  3065  0112                     l2350:
  3066  0112  3004               	movlw	4
  3067  0113  024B               	subwf	get_time@q_826,w
  3068  0114  1C03               	skipc
  3069  0115  2917               	goto	u1561
  3070  0116  2918               	goto	u1560
  3071  0117                     u1561:
  3072  0117  28FC               	goto	l2344
  3073  0118                     u1560:
  3074  0118                     l2352:
  3075                           
  3076                           ;main.c: 409:     time_s = times[buf];
  3077  0118  3003               	movlw	3
  3078  0119  00B0               	movwf	??_get_time
  3079  011A  0830               	movf	??_get_time,w
  3080  011B  00A0               	movwf	___bmul@multiplicand
  3081  011C  0849               	movf	get_time@buf,w
  3082  011D  3186  267B  3180   	fcall	___bmul
  3083  0120  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  3084  0121  0086               	movwf	6
  3085  0122  0187               	clrf	7
  3086  0123  3F40               	moviw [0]fsr1
  3087  0124  0020               	movlb	0	; select bank0
  3088  0125  00DD               	movwf	_time_s
  3089  0126  3F41               	moviw [1]fsr1
  3090  0127  00DE               	movwf	_time_s+1
  3091  0128  3F42               	moviw [2]fsr1
  3092  0129  00DF               	movwf	_time_s+2
  3093  012A                     l2354:
  3094                           
  3095                           ;main.c: 411:     if (adr_error) START_EEPROM_ADR += 0x10;
  3096  012A  0844               	movf	get_time@adr_error,w
  3097  012B  1903               	btfsc	3,2
  3098  012C  292E               	goto	u1571
  3099  012D  292F               	goto	u1570
  3100  012E                     u1571:
  3101  012E  2933               	goto	l507
  3102  012F                     u1570:
  3103  012F                     l2356:
  3104  012F  3010               	movlw	16
  3105  0130  00B0               	movwf	??_get_time
  3106  0131  0830               	movf	??_get_time,w
  3107  0132  07E7               	addwf	_START_EEPROM_ADR,f
  3108  0133                     l507:
  3109  0133  0008               	return
  3110  0134                     __end_of_get_time:
  3111                           
  3112                           	psect	text7
  3113  067B                     __ptext7:	
  3114 ;; *************** function ___bmul *****************
  3115 ;; Defined at:
  3116 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul8.c"
  3117 ;; Parameters:    Size  Location     Type
  3118 ;;  multiplier      1    wreg     unsigned char 
  3119 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3120 ;; Auto vars:     Size  Location     Type
  3121 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3122 ;;  product         1    2[BANK0 ] unsigned char 
  3123 ;; Return value:  Size  Location     Type
  3124 ;;                  1    wreg      unsigned char 
  3125 ;; Registers used:
  3126 ;;		wreg, status,2, status,0
  3127 ;; Tracked objects:
  3128 ;;		On entry : 0/0
  3129 ;;		On exit  : 0/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMMON   BANK0   BANK1
  3132 ;;      Params:         0       1       0
  3133 ;;      Locals:         0       2       0
  3134 ;;      Temps:          0       1       0
  3135 ;;      Totals:         0       4       0
  3136 ;;Total ram usage:        4 bytes
  3137 ;; Hardware stack levels used: 1
  3138 ;; Hardware stack levels required when called: 7
  3139 ;; This function calls:
  3140 ;;		Nothing
  3141 ;; This function is called by:
  3142 ;;		_get_time
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146  067B                     ___bmul:	
  3147                           ;psect for function ___bmul
  3148                           
  3149                           
  3150                           ;incstack = 0
  3151                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3152                           ;___bmul@multiplier stored from wreg
  3153  067B  0020               	movlb	0	; select bank0
  3154  067C  00A3               	movwf	___bmul@multiplier
  3155  067D                     l2084:
  3156  067D  01A2               	clrf	___bmul@product
  3157  067E                     l2086:
  3158  067E  1C23               	btfss	___bmul@multiplier,0
  3159  067F  2E81               	goto	u1201
  3160  0680  2E82               	goto	u1200
  3161  0681                     u1201:
  3162  0681  2E86               	goto	l2090
  3163  0682                     u1200:
  3164  0682                     l2088:
  3165  0682  0820               	movf	___bmul@multiplicand,w
  3166  0683  00A1               	movwf	??___bmul
  3167  0684  0821               	movf	??___bmul,w
  3168  0685  07A2               	addwf	___bmul@product,f
  3169  0686                     l2090:
  3170  0686  1003               	clrc
  3171  0687  0DA0               	rlf	___bmul@multiplicand,f
  3172  0688                     l2092:
  3173  0688  1003               	clrc
  3174  0689  0CA3               	rrf	___bmul@multiplier,f
  3175  068A  0823               	movf	___bmul@multiplier,w
  3176  068B  1D03               	btfss	3,2
  3177  068C  2E8E               	goto	u1211
  3178  068D  2E8F               	goto	u1210
  3179  068E                     u1211:
  3180  068E  2E7E               	goto	l2086
  3181  068F                     u1210:
  3182  068F                     l2094:
  3183  068F  0822               	movf	___bmul@product,w
  3184  0690                     l776:
  3185  0690  0008               	return
  3186  0691                     __end_of___bmul:
  3187                           
  3188                           	psect	text8
  3189  0319                     __ptext8:	
  3190 ;; *************** function _EEPROM_ReadShortLong *****************
  3191 ;; Defined at:
  3192 ;;		line 48 in file "eeprom.c"
  3193 ;; Parameters:    Size  Location     Type
  3194 ;;  addr            1    wreg     unsigned char 
  3195 ;; Auto vars:     Size  Location     Type
  3196 ;;  addr            1   15[BANK0 ] unsigned char 
  3197 ;;  dt              3   12[BANK0 ] unsigned um
  3198 ;; Return value:  Size  Location     Type
  3199 ;;                  3    3[BANK0 ] unsigned um
  3200 ;; Registers used:
  3201 ;;		wreg, status,2, status,0, pclath, cstack
  3202 ;; Tracked objects:
  3203 ;;		On entry : 0/0
  3204 ;;		On exit  : 0/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMMON   BANK0   BANK1
  3207 ;;      Params:         0       3       0
  3208 ;;      Locals:         0       4       0
  3209 ;;      Temps:          0       6       0
  3210 ;;      Totals:         0      13       0
  3211 ;;Total ram usage:       13 bytes
  3212 ;; Hardware stack levels used: 1
  3213 ;; Hardware stack levels required when called: 8
  3214 ;; This function calls:
  3215 ;;		_EEPROM_ReadByte
  3216 ;; This function is called by:
  3217 ;;		_get_time
  3218 ;; This function uses a non-reentrant model
  3219 ;;
  3220                           
  3221  0319                     _EEPROM_ReadShortLong:	
  3222                           ;psect for function _EEPROM_ReadShortLong
  3223                           
  3224                           
  3225                           ;incstack = 0
  3226                           ; Regs used in _EEPROM_ReadShortLong: [wreg+status,2+status,0+pclath+cstack]
  3227                           ;EEPROM_ReadShortLong@addr stored from wreg
  3228  0319  0020               	movlb	0	; select bank0
  3229  031A  00AF               	movwf	EEPROM_ReadShortLong@addr
  3230  031B                     l2076:
  3231                           
  3232                           ;eeprom.c: 49:     __uint24 dt = EEPROM_ReadByte(addr + 2)*256*256;
  3233  031B  082F               	movf	EEPROM_ReadShortLong@addr,w
  3234  031C  3E02               	addlw	2
  3235  031D  3186  2662  3183   	fcall	_EEPROM_ReadByte
  3236  0320  0020               	movlb	0	; select bank0
  3237  0321  00A6               	movwf	??_EEPROM_ReadShortLong
  3238  0322  01A7               	clrf	??_EEPROM_ReadShortLong+1
  3239  0323  0826               	movf	??_EEPROM_ReadShortLong,w
  3240  0324  00A7               	movwf	??_EEPROM_ReadShortLong+1
  3241  0325  01A6               	clrf	??_EEPROM_ReadShortLong
  3242  0326  0826               	movf	??_EEPROM_ReadShortLong,w
  3243  0327  00A7               	movwf	??_EEPROM_ReadShortLong+1
  3244  0328  01A6               	clrf	??_EEPROM_ReadShortLong
  3245  0329  0826               	movf	??_EEPROM_ReadShortLong,w
  3246  032A  00AC               	movwf	EEPROM_ReadShortLong@dt
  3247  032B  0827               	movf	??_EEPROM_ReadShortLong+1,w
  3248  032C  00AD               	movwf	EEPROM_ReadShortLong@dt+1
  3249  032D  0D89               	rlf	9,f
  3250  032E  3B89               	subwfb	9,f
  3251  032F  0989               	comf	9,f
  3252  0330  00AE               	movwf	EEPROM_ReadShortLong@dt+2
  3253                           
  3254                           ;eeprom.c: 50:     dt += EEPROM_ReadByte(addr + 1)*256;
  3255  0331  082F               	movf	EEPROM_ReadShortLong@addr,w
  3256  0332  3E01               	addlw	1
  3257  0333  3186  2662  3183   	fcall	_EEPROM_ReadByte
  3258  0336  0020               	movlb	0	; select bank0
  3259  0337  00A6               	movwf	??_EEPROM_ReadShortLong
  3260  0338  01A7               	clrf	??_EEPROM_ReadShortLong+1
  3261  0339  0826               	movf	??_EEPROM_ReadShortLong,w
  3262  033A  00A7               	movwf	??_EEPROM_ReadShortLong+1
  3263  033B  01A6               	clrf	??_EEPROM_ReadShortLong
  3264  033C  0826               	movf	??_EEPROM_ReadShortLong,w
  3265  033D  00A9               	movwf	??_EEPROM_ReadShortLong+3
  3266  033E  0827               	movf	??_EEPROM_ReadShortLong+1,w
  3267  033F  00AA               	movwf	??_EEPROM_ReadShortLong+4
  3268  0340  3000               	movlw	0
  3269  0341  1BAA               	btfsc	??_EEPROM_ReadShortLong+4,7
  3270  0342  30FF               	movlw	255
  3271  0343  00AB               	movwf	??_EEPROM_ReadShortLong+5
  3272  0344  0829               	movf	??_EEPROM_ReadShortLong+3,w
  3273  0345  07AC               	addwf	EEPROM_ReadShortLong@dt,f
  3274  0346  082A               	movf	??_EEPROM_ReadShortLong+4,w
  3275  0347  3DAD               	addwfc	EEPROM_ReadShortLong@dt+1,f
  3276  0348  082B               	movf	??_EEPROM_ReadShortLong+5,w
  3277  0349  3DAE               	addwfc	EEPROM_ReadShortLong@dt+2,f
  3278  034A                     l2078:
  3279                           
  3280                           ;eeprom.c: 51:     dt += EEPROM_ReadByte(addr);
  3281  034A  082F               	movf	EEPROM_ReadShortLong@addr,w
  3282  034B  3186  2662  3183   	fcall	_EEPROM_ReadByte
  3283  034E  0020               	movlb	0	; select bank0
  3284  034F  00A6               	movwf	??_EEPROM_ReadShortLong
  3285  0350  01A7               	clrf	??_EEPROM_ReadShortLong+1
  3286  0351  01A8               	clrf	??_EEPROM_ReadShortLong+2
  3287  0352  0826               	movf	??_EEPROM_ReadShortLong,w
  3288  0353  07AC               	addwf	EEPROM_ReadShortLong@dt,f
  3289  0354  0827               	movf	??_EEPROM_ReadShortLong+1,w
  3290  0355  3DAD               	addwfc	EEPROM_ReadShortLong@dt+1,f
  3291  0356  0828               	movf	??_EEPROM_ReadShortLong+2,w
  3292  0357  3DAE               	addwfc	EEPROM_ReadShortLong@dt+2,f
  3293  0358                     l2080:
  3294                           
  3295                           ;eeprom.c: 52:     return dt;
  3296  0358  082C               	movf	EEPROM_ReadShortLong@dt,w
  3297  0359  00A3               	movwf	?_EEPROM_ReadShortLong
  3298  035A  082D               	movf	EEPROM_ReadShortLong@dt+1,w
  3299  035B  00A4               	movwf	?_EEPROM_ReadShortLong+1
  3300  035C  082E               	movf	EEPROM_ReadShortLong@dt+2,w
  3301  035D  00A5               	movwf	?_EEPROM_ReadShortLong+2
  3302  035E                     l582:
  3303  035E  0008               	return
  3304  035F                     __end_of_EEPROM_ReadShortLong:
  3305                           
  3306                           	psect	text9
  3307  0134                     __ptext9:	
  3308 ;; *************** function _get_adr *****************
  3309 ;; Defined at:
  3310 ;;		line 344 in file "main.c"
  3311 ;; Parameters:    Size  Location     Type
  3312 ;;		None
  3313 ;; Auto vars:     Size  Location     Type
  3314 ;;  q               1   39[BANK0 ] unsigned char 
  3315 ;;  q               1   37[BANK0 ] unsigned char 
  3316 ;;  i               1   38[BANK0 ] unsigned char 
  3317 ;;  i               1   36[BANK0 ] unsigned char 
  3318 ;;  adr            32    4[BANK0 ] unsigned char [2][16]
  3319 ;;  buf             1   40[BANK0 ] unsigned char 
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  1    wreg      void 
  3322 ;; Registers used:
  3323 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3324 ;; Tracked objects:
  3325 ;;		On entry : 0/0
  3326 ;;		On exit  : 0/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMMON   BANK0   BANK1
  3329 ;;      Params:         0       0       0
  3330 ;;      Locals:         0      37       0
  3331 ;;      Temps:          0       1       0
  3332 ;;      Totals:         0      38       0
  3333 ;;Total ram usage:       38 bytes
  3334 ;; Hardware stack levels used: 1
  3335 ;; Hardware stack levels required when called: 8
  3336 ;; This function calls:
  3337 ;;		_EEPROM_ReadByte
  3338 ;; This function is called by:
  3339 ;;		_get_eeprom
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343  0134                     _get_adr:	
  3344                           ;psect for function _get_adr
  3345                           
  3346  0134                     l2208:	
  3347                           ;incstack = 0
  3348                           ; Regs used in _get_adr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3349                           
  3350  0134                     l2210:
  3351                           
  3352                           ;main.c: 346:     char adr[16][2] = {};
  3353  0134  3024               	movlw	low get_adr@adr
  3354  0135  0086               	movwf	6
  3355  0136  3000               	movlw	high get_adr@adr
  3356  0137  0087               	movwf	7
  3357  0138  3020               	movlw	32
  3358  0139  0020               	movlb	0	; select bank0
  3359  013A  00A3               	movwf	??_get_adr
  3360  013B  3000               	movlw	0
  3361  013C                     u1360:
  3362  013C  001E               	movwi fsr1++
  3363  013D  0BA3               	decfsz	??_get_adr,f
  3364  013E  293C               	goto	u1360
  3365  013F                     l2212:
  3366                           
  3367                           ;main.c: 348:     for (unsigned char i = 0; i < 0x10; i++) {
  3368  013F  01C4               	clrf	get_adr@i
  3369  0140                     l2218:
  3370                           
  3371                           ;main.c: 349:         buf = EEPROM_ReadByte(i);
  3372  0140  0844               	movf	get_adr@i,w
  3373  0141  3186  2662  3181   	fcall	_EEPROM_ReadByte
  3374  0144  0020               	movlb	0	; select bank0
  3375  0145  00A3               	movwf	??_get_adr
  3376  0146  0823               	movf	??_get_adr,w
  3377  0147  00C8               	movwf	get_adr@buf
  3378  0148                     l2220:
  3379                           
  3380                           ;main.c: 350:         if (buf == 0) continue;
  3381  0148  0848               	movf	get_adr@buf,w
  3382  0149  1D03               	btfss	3,2
  3383  014A  294C               	goto	u1371
  3384  014B  294D               	goto	u1370
  3385  014C                     u1371:
  3386  014C  294E               	goto	l2224
  3387  014D                     u1370:
  3388  014D  2996               	goto	l2258
  3389  014E                     l2224:
  3390                           
  3391                           ;main.c: 351:         for (unsigned char q = 0; q < 16; q++) {
  3392  014E  01C5               	clrf	get_adr@q
  3393  014F                     l2230:
  3394                           
  3395                           ;main.c: 352:             if (buf == adr[q][0]) {
  3396  014F  3545               	lslf	get_adr@q,w
  3397  0150  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3398  0151  0086               	movwf	6
  3399  0152  0187               	clrf	7
  3400  0153  0801               	movf	1,w
  3401  0154  0648               	xorwf	get_adr@buf,w
  3402  0155  1D03               	skipz
  3403  0156  2958               	goto	u1381
  3404  0157  2959               	goto	u1380
  3405  0158                     u1381:
  3406  0158  2963               	goto	l2236
  3407  0159                     u1380:
  3408  0159                     l2232:
  3409                           
  3410                           ;main.c: 353:                 (adr[q][1])++;
  3411  0159  3001               	movlw	1
  3412  015A  00A3               	movwf	??_get_adr
  3413  015B  1403               	setc
  3414  015C  0D45               	rlf	get_adr@q,w
  3415  015D  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3416  015E  0086               	movwf	6
  3417  015F  0187               	clrf	7
  3418  0160  0823               	movf	??_get_adr,w
  3419  0161  0781               	addwf	1,f
  3420  0162                     l2234:
  3421                           
  3422                           ;main.c: 354:                 buf = 0;
  3423  0162  01C8               	clrf	get_adr@buf
  3424  0163                     l2236:
  3425                           
  3426                           ;main.c: 356:         }
  3427  0163  3001               	movlw	1
  3428  0164  00A3               	movwf	??_get_adr
  3429  0165  0823               	movf	??_get_adr,w
  3430  0166  07C5               	addwf	get_adr@q,f
  3431  0167                     l2238:
  3432  0167  3010               	movlw	16
  3433  0168  0245               	subwf	get_adr@q,w
  3434  0169  1C03               	skipc
  3435  016A  296C               	goto	u1391
  3436  016B  296D               	goto	u1390
  3437  016C                     u1391:
  3438  016C  294F               	goto	l2230
  3439  016D                     u1390:
  3440  016D                     l2240:
  3441                           
  3442                           ;main.c: 358:         if (buf != 0) {
  3443  016D  0848               	movf	get_adr@buf,w
  3444  016E  1903               	btfsc	3,2
  3445  016F  2971               	goto	u1401
  3446  0170  2972               	goto	u1400
  3447  0171                     u1401:
  3448  0171  2996               	goto	l2258
  3449  0172                     u1400:
  3450  0172                     l2242:
  3451                           
  3452                           ;main.c: 359:             for (unsigned char q = 0; q < 16; q++)
  3453  0172  01C7               	clrf	get_adr@q_813
  3454  0173                     l2248:
  3455                           
  3456                           ;main.c: 360:                 if (adr[q][0] == 0) {
  3457  0173  3547               	lslf	get_adr@q_813,w
  3458  0174  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3459  0175  0086               	movwf	6
  3460  0176  0187               	clrf	7
  3461  0177  0801               	movf	1,w
  3462  0178  1D03               	btfss	3,2
  3463  0179  297B               	goto	u1411
  3464  017A  297C               	goto	u1410
  3465  017B                     u1411:
  3466  017B  298C               	goto	l2254
  3467  017C                     u1410:
  3468  017C                     l2250:
  3469                           
  3470                           ;main.c: 361:                     adr[q][0] = buf;
  3471  017C  0848               	movf	get_adr@buf,w
  3472  017D  00A3               	movwf	??_get_adr
  3473  017E  3547               	lslf	get_adr@q_813,w
  3474  017F  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3475  0180  0086               	movwf	6
  3476  0181  0187               	clrf	7
  3477  0182  0823               	movf	??_get_adr,w
  3478  0183  0081               	movwf	1
  3479                           
  3480                           ;main.c: 362:                     adr[q][1] = 1;
  3481  0184  1403               	setc
  3482  0185  0D47               	rlf	get_adr@q_813,w
  3483  0186  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3484  0187  0086               	movwf	6
  3485  0188  0187               	clrf	7
  3486  0189  0181               	clrf	1
  3487  018A  0A81               	incf	1,f
  3488  018B                     l2252:
  3489                           
  3490                           ;main.c: 364:                     break;
  3491  018B  2996               	goto	l2258
  3492  018C                     l2254:
  3493  018C  3001               	movlw	1
  3494  018D  00A3               	movwf	??_get_adr
  3495  018E  0823               	movf	??_get_adr,w
  3496  018F  07C7               	addwf	get_adr@q_813,f
  3497  0190                     l2256:
  3498  0190  3010               	movlw	16
  3499  0191  0247               	subwf	get_adr@q_813,w
  3500  0192  1C03               	skipc
  3501  0193  2995               	goto	u1421
  3502  0194  2996               	goto	u1420
  3503  0195                     u1421:
  3504  0195  2973               	goto	l2248
  3505  0196                     u1420:
  3506  0196                     l2258:
  3507  0196  3001               	movlw	1
  3508  0197  00A3               	movwf	??_get_adr
  3509  0198  0823               	movf	??_get_adr,w
  3510  0199  07C4               	addwf	get_adr@i,f
  3511  019A                     l2260:
  3512  019A  3010               	movlw	16
  3513  019B  0244               	subwf	get_adr@i,w
  3514  019C  1C03               	skipc
  3515  019D  299F               	goto	u1431
  3516  019E  29A0               	goto	u1430
  3517  019F                     u1431:
  3518  019F  2940               	goto	l2218
  3519  01A0                     u1430:
  3520  01A0                     l2262:
  3521                           
  3522                           ;main.c: 368:     buf = 0;
  3523  01A0  01C8               	clrf	get_adr@buf
  3524                           
  3525                           ;main.c: 369:     for (unsigned char i = 0; i < 0x10; i++) {
  3526  01A1  01C6               	clrf	get_adr@i_814
  3527  01A2                     l2268:
  3528                           
  3529                           ;main.c: 370:         if (adr[i][1] > adr[buf][1]) buf = i;
  3530  01A2  1403               	setc
  3531  01A3  0D48               	rlf	get_adr@buf,w
  3532  01A4  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3533  01A5  0086               	movwf	6
  3534  01A6  0187               	clrf	7
  3535  01A7  1403               	setc
  3536  01A8  0D46               	rlf	get_adr@i_814,w
  3537  01A9  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3538  01AA  0084               	movwf	4
  3539  01AB  0185               	clrf	5
  3540  01AC  0800               	movf	0,w
  3541  01AD  0201               	subwf	1,w
  3542  01AE  1803               	skipnc
  3543  01AF  29B1               	goto	u1441
  3544  01B0  29B2               	goto	u1440
  3545  01B1                     u1441:
  3546  01B1  29B6               	goto	l2272
  3547  01B2                     u1440:
  3548  01B2                     l2270:
  3549  01B2  0846               	movf	get_adr@i_814,w
  3550  01B3  00A3               	movwf	??_get_adr
  3551  01B4  0823               	movf	??_get_adr,w
  3552  01B5  00C8               	movwf	get_adr@buf
  3553  01B6                     l2272:
  3554                           
  3555                           ;main.c: 371:     }
  3556  01B6  3001               	movlw	1
  3557  01B7  00A3               	movwf	??_get_adr
  3558  01B8  0823               	movf	??_get_adr,w
  3559  01B9  07C6               	addwf	get_adr@i_814,f
  3560  01BA                     l2274:
  3561  01BA  3010               	movlw	16
  3562  01BB  0246               	subwf	get_adr@i_814,w
  3563  01BC  1C03               	skipc
  3564  01BD  29BF               	goto	u1451
  3565  01BE  29C0               	goto	u1450
  3566  01BF                     u1451:
  3567  01BF  29A2               	goto	l2268
  3568  01C0                     u1450:
  3569  01C0                     l2276:
  3570                           
  3571                           ;main.c: 372:     START_EEPROM_ADR = adr[buf][0];
  3572  01C0  3548               	lslf	get_adr@buf,w
  3573  01C1  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3574  01C2  0086               	movwf	6
  3575  01C3  0187               	clrf	7
  3576  01C4  0801               	movf	1,w
  3577  01C5  00A3               	movwf	??_get_adr
  3578  01C6  0823               	movf	??_get_adr,w
  3579  01C7  00E7               	movwf	_START_EEPROM_ADR
  3580  01C8                     l2278:
  3581                           
  3582                           ;main.c: 373:     if (START_EEPROM_ADR == 0 || START_EEPROM_ADR == 0xFF) START_EEPROM_AD
      +                          R = 0x10;
  3583  01C8  0867               	movf	_START_EEPROM_ADR,w
  3584  01C9  1903               	btfsc	3,2
  3585  01CA  29CC               	goto	u1461
  3586  01CB  29CD               	goto	u1460
  3587  01CC                     u1461:
  3588  01CC  29D2               	goto	l2282
  3589  01CD                     u1460:
  3590  01CD                     l2280:
  3591  01CD  0A67               	incf	_START_EEPROM_ADR,w
  3592  01CE  1D03               	btfss	3,2
  3593  01CF  29D1               	goto	u1471
  3594  01D0  29D2               	goto	u1470
  3595  01D1                     u1471:
  3596  01D1  29D6               	goto	l486
  3597  01D2                     u1470:
  3598  01D2                     l2282:
  3599  01D2  3010               	movlw	16
  3600  01D3  00A3               	movwf	??_get_adr
  3601  01D4  0823               	movf	??_get_adr,w
  3602  01D5  00E7               	movwf	_START_EEPROM_ADR
  3603  01D6                     l486:
  3604  01D6  0008               	return
  3605  01D7                     __end_of_get_adr:
  3606                           
  3607                           	psect	text10
  3608  07A0                     __ptext10:	
  3609 ;; *************** function _TMR2_StartTimer *****************
  3610 ;; Defined at:
  3611 ;;		line 87 in file "mcc_generated_files/tmr2.c"
  3612 ;; Parameters:    Size  Location     Type
  3613 ;;		None
  3614 ;; Auto vars:     Size  Location     Type
  3615 ;;		None
  3616 ;; Return value:  Size  Location     Type
  3617 ;;                  1    wreg      void 
  3618 ;; Registers used:
  3619 ;;		None
  3620 ;; Tracked objects:
  3621 ;;		On entry : 0/0
  3622 ;;		On exit  : 0/0
  3623 ;;		Unchanged: 0/0
  3624 ;; Data sizes:     COMMON   BANK0   BANK1
  3625 ;;      Params:         0       0       0
  3626 ;;      Locals:         0       0       0
  3627 ;;      Temps:          0       0       0
  3628 ;;      Totals:         0       0       0
  3629 ;;Total ram usage:        0 bytes
  3630 ;; Hardware stack levels used: 1
  3631 ;; Hardware stack levels required when called: 7
  3632 ;; This function calls:
  3633 ;;		Nothing
  3634 ;; This function is called by:
  3635 ;;		_start_setup
  3636 ;; This function uses a non-reentrant model
  3637 ;;
  3638                           
  3639  07A0                     _TMR2_StartTimer:	
  3640                           ;psect for function _TMR2_StartTimer
  3641                           
  3642  07A0                     l2360:	
  3643                           ;incstack = 0
  3644                           ; Regs used in _TMR2_StartTimer: []
  3645                           
  3646                           
  3647                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
  3648  07A0  0020               	movlb	0	; select bank0
  3649  07A1  151C               	bsf	28,2	;volatile
  3650  07A2                     l142:
  3651  07A2  0008               	return
  3652  07A3                     __end_of_TMR2_StartTimer:
  3653                           
  3654                           	psect	text11
  3655  0691                     __ptext11:	
  3656 ;; *************** function _SYSTEM_Initialize *****************
  3657 ;; Defined at:
  3658 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3659 ;; Parameters:    Size  Location     Type
  3660 ;;		None
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;		None
  3663 ;; Return value:  Size  Location     Type
  3664 ;;                  1    wreg      void 
  3665 ;; Registers used:
  3666 ;;		wreg, status,2, status,0, pclath, cstack
  3667 ;; Tracked objects:
  3668 ;;		On entry : 0/0
  3669 ;;		On exit  : 0/0
  3670 ;;		Unchanged: 0/0
  3671 ;; Data sizes:     COMMON   BANK0   BANK1
  3672 ;;      Params:         0       0       0
  3673 ;;      Locals:         0       0       0
  3674 ;;      Temps:          0       0       0
  3675 ;;      Totals:         0       0       0
  3676 ;;Total ram usage:        0 bytes
  3677 ;; Hardware stack levels used: 1
  3678 ;; Hardware stack levels required when called: 9
  3679 ;; This function calls:
  3680 ;;		_ADC_Initialize
  3681 ;;		_FVR_Initialize
  3682 ;;		_OSCILLATOR_Initialize
  3683 ;;		_PIN_MANAGER_Initialize
  3684 ;;		_TMR0_Initialize
  3685 ;;		_TMR2_Initialize
  3686 ;;		_WDT_Initialize
  3687 ;; This function is called by:
  3688 ;;		_start_setup
  3689 ;; This function uses a non-reentrant model
  3690 ;;
  3691                           
  3692  0691                     _SYSTEM_Initialize:	
  3693                           ;psect for function _SYSTEM_Initialize
  3694                           
  3695  0691                     l2358:	
  3696                           ;incstack = 0
  3697                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3698                           
  3699                           
  3700                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  3701  0691  3186  26BD  3186   	fcall	_PIN_MANAGER_Initialize
  3702                           
  3703                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  3704  0694  3187  2767  3186   	fcall	_OSCILLATOR_Initialize
  3705                           
  3706                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  3707  0697  3187  278F  3186   	fcall	_WDT_Initialize
  3708                           
  3709                           ;mcc_generated_files/mcc.c: 56:     FVR_Initialize();
  3710  069A  3187  2793  3186   	fcall	_FVR_Initialize
  3711                           
  3712                           ;mcc_generated_files/mcc.c: 57:     ADC_Initialize();
  3713  069D  3187  2758  3186   	fcall	_ADC_Initialize
  3714                           
  3715                           ;mcc_generated_files/mcc.c: 58:     TMR2_Initialize();
  3716  06A0  3186  26E7  3186   	fcall	_TMR2_Initialize
  3717                           
  3718                           ;mcc_generated_files/mcc.c: 59:     TMR0_Initialize();
  3719  06A3  3186  26A7  3186   	fcall	_TMR0_Initialize
  3720  06A6                     l25:
  3721  06A6  0008               	return
  3722  06A7                     __end_of_SYSTEM_Initialize:
  3723                           
  3724                           	psect	text12
  3725  078F                     __ptext12:	
  3726 ;; *************** function _WDT_Initialize *****************
  3727 ;; Defined at:
  3728 ;;		line 72 in file "mcc_generated_files/mcc.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;		None
  3731 ;; Auto vars:     Size  Location     Type
  3732 ;;		None
  3733 ;; Return value:  Size  Location     Type
  3734 ;;                  1    wreg      void 
  3735 ;; Registers used:
  3736 ;;		wreg
  3737 ;; Tracked objects:
  3738 ;;		On entry : 0/0
  3739 ;;		On exit  : 0/0
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:     COMMON   BANK0   BANK1
  3742 ;;      Params:         0       0       0
  3743 ;;      Locals:         0       0       0
  3744 ;;      Temps:          0       0       0
  3745 ;;      Totals:         0       0       0
  3746 ;;Total ram usage:        0 bytes
  3747 ;; Hardware stack levels used: 1
  3748 ;; Hardware stack levels required when called: 7
  3749 ;; This function calls:
  3750 ;;		Nothing
  3751 ;; This function is called by:
  3752 ;;		_SYSTEM_Initialize
  3753 ;; This function uses a non-reentrant model
  3754 ;;
  3755                           
  3756  078F                     _WDT_Initialize:	
  3757                           ;psect for function _WDT_Initialize
  3758                           
  3759  078F                     l2118:	
  3760                           ;incstack = 0
  3761                           ; Regs used in _WDT_Initialize: [wreg]
  3762                           
  3763                           
  3764                           ;mcc_generated_files/mcc.c: 75:     WDTCON = 0x16;
  3765  078F  3016               	movlw	22
  3766  0790  0021               	movlb	1	; select bank1
  3767  0791  0097               	movwf	23	;volatile
  3768  0792                     l31:
  3769  0792  0008               	return
  3770  0793                     __end_of_WDT_Initialize:
  3771                           
  3772                           	psect	text13
  3773  06E7                     __ptext13:	
  3774 ;; *************** function _TMR2_Initialize *****************
  3775 ;; Defined at:
  3776 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  3777 ;; Parameters:    Size  Location     Type
  3778 ;;		None
  3779 ;; Auto vars:     Size  Location     Type
  3780 ;;		None
  3781 ;; Return value:  Size  Location     Type
  3782 ;;                  1    wreg      void 
  3783 ;; Registers used:
  3784 ;;		wreg, status,2, status,0, pclath, cstack
  3785 ;; Tracked objects:
  3786 ;;		On entry : 0/0
  3787 ;;		On exit  : 0/0
  3788 ;;		Unchanged: 0/0
  3789 ;; Data sizes:     COMMON   BANK0   BANK1
  3790 ;;      Params:         0       0       0
  3791 ;;      Locals:         0       0       0
  3792 ;;      Temps:          0       0       0
  3793 ;;      Totals:         0       0       0
  3794 ;;Total ram usage:        0 bytes
  3795 ;; Hardware stack levels used: 1
  3796 ;; Hardware stack levels required when called: 8
  3797 ;; This function calls:
  3798 ;;		_TMR2_SetInterruptHandler
  3799 ;; This function is called by:
  3800 ;;		_SYSTEM_Initialize
  3801 ;; This function uses a non-reentrant model
  3802 ;;
  3803                           
  3804  06E7                     _TMR2_Initialize:	
  3805                           ;psect for function _TMR2_Initialize
  3806                           
  3807  06E7                     l2128:	
  3808                           ;incstack = 0
  3809                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3810                           
  3811                           
  3812                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0xF9;
  3813  06E7  30F9               	movlw	249
  3814  06E8  0020               	movlb	0	; select bank0
  3815  06E9  009B               	movwf	27	;volatile
  3816  06EA                     l2130:
  3817                           
  3818                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  3819  06EA  019A               	clrf	26	;volatile
  3820  06EB                     l2132:
  3821                           
  3822                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  3823  06EB  1091               	bcf	17,1	;volatile
  3824  06EC                     l2134:
  3825                           
  3826                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  3827  06EC  0021               	movlb	1	; select bank1
  3828  06ED  1491               	bsf	17,1	;volatile
  3829  06EE                     l2136:
  3830                           
  3831                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  3832  06EE  30A3               	movlw	low _TMR2_DefaultInterruptHandler
  3833  06EF  0020               	movlb	0	; select bank0
  3834  06F0  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  3835  06F1  3007               	movlw	high _TMR2_DefaultInterruptHandler
  3836  06F2  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  3837  06F3  3187  2774  3186   	fcall	_TMR2_SetInterruptHandler
  3838  06F6                     l2138:
  3839                           
  3840                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x4E;
  3841  06F6  304E               	movlw	78
  3842  06F7  0020               	movlb	0	; select bank0
  3843  06F8  009C               	movwf	28	;volatile
  3844  06F9                     l139:
  3845  06F9  0008               	return
  3846  06FA                     __end_of_TMR2_Initialize:
  3847                           
  3848                           	psect	text14
  3849  0774                     __ptext14:	
  3850 ;; *************** function _TMR2_SetInterruptHandler *****************
  3851 ;; Defined at:
  3852 ;;		line 147 in file "mcc_generated_files/tmr2.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3855 ;;		 -> sec_tick_work(1), TMR2_DefaultInterruptHandler(1), 
  3856 ;; Auto vars:     Size  Location     Type
  3857 ;;		None
  3858 ;; Return value:  Size  Location     Type
  3859 ;;                  1    wreg      void 
  3860 ;; Registers used:
  3861 ;;		wreg
  3862 ;; Tracked objects:
  3863 ;;		On entry : 0/0
  3864 ;;		On exit  : 0/0
  3865 ;;		Unchanged: 0/0
  3866 ;; Data sizes:     COMMON   BANK0   BANK1
  3867 ;;      Params:         0       2       0
  3868 ;;      Locals:         0       0       0
  3869 ;;      Temps:          0       0       0
  3870 ;;      Totals:         0       2       0
  3871 ;;Total ram usage:        2 bytes
  3872 ;; Hardware stack levels used: 1
  3873 ;; Hardware stack levels required when called: 7
  3874 ;; This function calls:
  3875 ;;		Nothing
  3876 ;; This function is called by:
  3877 ;;		_TMR2_Initialize
  3878 ;;		_start_setup
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882  0774                     _TMR2_SetInterruptHandler:	
  3883                           ;psect for function _TMR2_SetInterruptHandler
  3884                           
  3885  0774                     l2034:	
  3886                           ;incstack = 0
  3887                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  3888                           
  3889                           
  3890                           ;mcc_generated_files/tmr2.c: 148:     TMR2_InterruptHandler = InterruptHandler;
  3891  0774  0020               	movlb	0	; select bank0
  3892  0775  0821               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  3893  0776  00EB               	movwf	_TMR2_InterruptHandler+1
  3894  0777  0820               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  3895  0778  00EA               	movwf	_TMR2_InterruptHandler
  3896  0779                     l167:
  3897  0779  0008               	return
  3898  077A                     __end_of_TMR2_SetInterruptHandler:
  3899                           
  3900                           	psect	text15
  3901  06A7                     __ptext15:	
  3902 ;; *************** function _TMR0_Initialize *****************
  3903 ;; Defined at:
  3904 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  3905 ;; Parameters:    Size  Location     Type
  3906 ;;		None
  3907 ;; Auto vars:     Size  Location     Type
  3908 ;;		None
  3909 ;; Return value:  Size  Location     Type
  3910 ;;                  1    wreg      void 
  3911 ;; Registers used:
  3912 ;;		wreg, status,2, status,0, pclath, cstack
  3913 ;; Tracked objects:
  3914 ;;		On entry : 0/0
  3915 ;;		On exit  : 0/0
  3916 ;;		Unchanged: 0/0
  3917 ;; Data sizes:     COMMON   BANK0   BANK1
  3918 ;;      Params:         0       0       0
  3919 ;;      Locals:         0       0       0
  3920 ;;      Temps:          0       1       0
  3921 ;;      Totals:         0       1       0
  3922 ;;Total ram usage:        1 bytes
  3923 ;; Hardware stack levels used: 1
  3924 ;; Hardware stack levels required when called: 8
  3925 ;; This function calls:
  3926 ;;		_TMR0_SetInterruptHandler
  3927 ;; This function is called by:
  3928 ;;		_SYSTEM_Initialize
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932  06A7                     _TMR0_Initialize:	
  3933                           ;psect for function _TMR0_Initialize
  3934                           
  3935  06A7                     l2140:	
  3936                           ;incstack = 0
  3937                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3938                           
  3939                           
  3940                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD2 
      +                          & 0x3F));
  3941  06A7  0021               	movlb	1	; select bank1
  3942  06A8  0815               	movf	21,w	;volatile
  3943  06A9  39C0               	andlw	192
  3944  06AA  3812               	iorlw	18
  3945  06AB  0095               	movwf	21	;volatile
  3946  06AC                     l2142:
  3947                           
  3948                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x9C;
  3949  06AC  309C               	movlw	156
  3950  06AD  0020               	movlb	0	; select bank0
  3951  06AE  0095               	movwf	21	;volatile
  3952  06AF                     l2144:
  3953                           
  3954                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 156;
  3955  06AF  309C               	movlw	156
  3956  06B0  00A2               	movwf	??_TMR0_Initialize
  3957  06B1  0822               	movf	??_TMR0_Initialize,w
  3958  06B2  00EC               	movwf	_timer0ReloadVal	;volatile
  3959  06B3                     l2146:
  3960                           
  3961                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  3962  06B3  110B               	bcf	11,2	;volatile
  3963  06B4                     l2148:
  3964                           
  3965                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  3966  06B4  168B               	bsf	11,5	;volatile
  3967  06B5                     l2150:
  3968                           
  3969                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  3970  06B5  30A4               	movlw	low _TMR0_DefaultInterruptHandler
  3971  06B6  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  3972  06B7  3007               	movlw	high _TMR0_DefaultInterruptHandler
  3973  06B8  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  3974  06B9  3187  277A  3186   	fcall	_TMR0_SetInterruptHandler
  3975  06BC                     l187:
  3976  06BC  0008               	return
  3977  06BD                     __end_of_TMR0_Initialize:
  3978                           
  3979                           	psect	text16
  3980  077A                     __ptext16:	
  3981 ;; *************** function _TMR0_SetInterruptHandler *****************
  3982 ;; Defined at:
  3983 ;;		line 125 in file "mcc_generated_files/tmr0.c"
  3984 ;; Parameters:    Size  Location     Type
  3985 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3986 ;;		 -> switch_zum(1), TMR0_DefaultInterruptHandler(1), 
  3987 ;; Auto vars:     Size  Location     Type
  3988 ;;		None
  3989 ;; Return value:  Size  Location     Type
  3990 ;;                  1    wreg      void 
  3991 ;; Registers used:
  3992 ;;		wreg
  3993 ;; Tracked objects:
  3994 ;;		On entry : 0/0
  3995 ;;		On exit  : 0/0
  3996 ;;		Unchanged: 0/0
  3997 ;; Data sizes:     COMMON   BANK0   BANK1
  3998 ;;      Params:         0       2       0
  3999 ;;      Locals:         0       0       0
  4000 ;;      Temps:          0       0       0
  4001 ;;      Totals:         0       2       0
  4002 ;;Total ram usage:        2 bytes
  4003 ;; Hardware stack levels used: 1
  4004 ;; Hardware stack levels required when called: 7
  4005 ;; This function calls:
  4006 ;;		Nothing
  4007 ;; This function is called by:
  4008 ;;		_TMR0_Initialize
  4009 ;;		_start_setup
  4010 ;; This function uses a non-reentrant model
  4011 ;;
  4012                           
  4013  077A                     _TMR0_SetInterruptHandler:	
  4014                           ;psect for function _TMR0_SetInterruptHandler
  4015                           
  4016  077A                     l2036:	
  4017                           ;incstack = 0
  4018                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  4019                           
  4020                           
  4021                           ;mcc_generated_files/tmr0.c: 126:     TMR0_InterruptHandler = InterruptHandler;
  4022  077A  0020               	movlb	0	; select bank0
  4023  077B  0821               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  4024  077C  00E9               	movwf	_TMR0_InterruptHandler+1
  4025  077D  0820               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  4026  077E  00E8               	movwf	_TMR0_InterruptHandler
  4027  077F                     l203:
  4028  077F  0008               	return
  4029  0780                     __end_of_TMR0_SetInterruptHandler:
  4030                           
  4031                           	psect	text17
  4032  06BD                     __ptext17:	
  4033 ;; *************** function _PIN_MANAGER_Initialize *****************
  4034 ;; Defined at:
  4035 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4036 ;; Parameters:    Size  Location     Type
  4037 ;;		None
  4038 ;; Auto vars:     Size  Location     Type
  4039 ;;		None
  4040 ;; Return value:  Size  Location     Type
  4041 ;;                  1    wreg      void 
  4042 ;; Registers used:
  4043 ;;		wreg, status,2
  4044 ;; Tracked objects:
  4045 ;;		On entry : 0/0
  4046 ;;		On exit  : 0/0
  4047 ;;		Unchanged: 0/0
  4048 ;; Data sizes:     COMMON   BANK0   BANK1
  4049 ;;      Params:         0       0       0
  4050 ;;      Locals:         0       0       0
  4051 ;;      Temps:          0       0       0
  4052 ;;      Totals:         0       0       0
  4053 ;;Total ram usage:        0 bytes
  4054 ;; Hardware stack levels used: 1
  4055 ;; Hardware stack levels required when called: 7
  4056 ;; This function calls:
  4057 ;;		Nothing
  4058 ;; This function is called by:
  4059 ;;		_SYSTEM_Initialize
  4060 ;; This function uses a non-reentrant model
  4061 ;;
  4062                           
  4063  06BD                     _PIN_MANAGER_Initialize:	
  4064                           ;psect for function _PIN_MANAGER_Initialize
  4065                           
  4066  06BD                     l2100:	
  4067                           ;incstack = 0
  4068                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4069                           
  4070                           
  4071                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  4072  06BD  0022               	movlb	2	; select bank2
  4073  06BE  018C               	clrf	12	;volatile
  4074                           
  4075                           ;mcc_generated_files/pin_manager.c: 61:     LATC = 0x00;
  4076  06BF  018E               	clrf	14	;volatile
  4077  06C0                     l2102:
  4078                           
  4079                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0x0F;
  4080  06C0  300F               	movlw	15
  4081  06C1  0021               	movlb	1	; select bank1
  4082  06C2  008C               	movwf	12	;volatile
  4083  06C3                     l2104:
  4084                           
  4085                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0x0C;
  4086  06C3  300C               	movlw	12
  4087  06C4  008E               	movwf	14	;volatile
  4088  06C5                     l2106:
  4089                           
  4090                           ;mcc_generated_files/pin_manager.c: 72:     ANSELC = 0x0C;
  4091  06C5  300C               	movlw	12
  4092  06C6  0023               	movlb	3	; select bank3
  4093  06C7  008E               	movwf	14	;volatile
  4094  06C8                     l2108:
  4095                           
  4096                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x07;
  4097  06C8  3007               	movlw	7
  4098  06C9  008C               	movwf	12	;volatile
  4099                           
  4100                           ;mcc_generated_files/pin_manager.c: 78:     WPUA = 0x00;
  4101  06CA  0024               	movlb	4	; select bank4
  4102  06CB  018C               	clrf	12	;volatile
  4103                           
  4104                           ;mcc_generated_files/pin_manager.c: 79:     WPUC = 0x00;
  4105  06CC  018E               	clrf	14	;volatile
  4106  06CD                     l2110:
  4107                           
  4108                           ;mcc_generated_files/pin_manager.c: 80:     OPTION_REGbits.nWPUEN = 1;
  4109  06CD  0021               	movlb	1	; select bank1
  4110  06CE  1795               	bsf	21,7	;volatile
  4111                           
  4112                           ;mcc_generated_files/pin_manager.c: 86:     APFCON = 0x00;
  4113  06CF  0022               	movlb	2	; select bank2
  4114  06D0  019D               	clrf	29	;volatile
  4115  06D1                     l92:
  4116  06D1  0008               	return
  4117  06D2                     __end_of_PIN_MANAGER_Initialize:
  4118                           
  4119                           	psect	text18
  4120  0767                     __ptext18:	
  4121 ;; *************** function _OSCILLATOR_Initialize *****************
  4122 ;; Defined at:
  4123 ;;		line 62 in file "mcc_generated_files/mcc.c"
  4124 ;; Parameters:    Size  Location     Type
  4125 ;;		None
  4126 ;; Auto vars:     Size  Location     Type
  4127 ;;		None
  4128 ;; Return value:  Size  Location     Type
  4129 ;;                  1    wreg      void 
  4130 ;; Registers used:
  4131 ;;		wreg, status,2
  4132 ;; Tracked objects:
  4133 ;;		On entry : 0/0
  4134 ;;		On exit  : 0/0
  4135 ;;		Unchanged: 0/0
  4136 ;; Data sizes:     COMMON   BANK0   BANK1
  4137 ;;      Params:         0       0       0
  4138 ;;      Locals:         0       0       0
  4139 ;;      Temps:          0       0       0
  4140 ;;      Totals:         0       0       0
  4141 ;;Total ram usage:        0 bytes
  4142 ;; Hardware stack levels used: 1
  4143 ;; Hardware stack levels required when called: 7
  4144 ;; This function calls:
  4145 ;;		Nothing
  4146 ;; This function is called by:
  4147 ;;		_SYSTEM_Initialize
  4148 ;; This function uses a non-reentrant model
  4149 ;;
  4150                           
  4151  0767                     _OSCILLATOR_Initialize:	
  4152                           ;psect for function _OSCILLATOR_Initialize
  4153                           
  4154  0767                     l2112:	
  4155                           ;incstack = 0
  4156                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4157                           
  4158                           
  4159                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x78;
  4160  0767  3078               	movlw	120
  4161  0768  0021               	movlb	1	; select bank1
  4162  0769  0099               	movwf	25	;volatile
  4163  076A                     l2114:
  4164                           
  4165                           ;mcc_generated_files/mcc.c: 67:     OSCTUNE = 0x00;
  4166  076A  0198               	clrf	24	;volatile
  4167  076B                     l2116:
  4168                           
  4169                           ;mcc_generated_files/mcc.c: 69:     BORCON = 0x00;
  4170  076B  0022               	movlb	2	; select bank2
  4171  076C  0196               	clrf	22	;volatile
  4172  076D                     l28:
  4173  076D  0008               	return
  4174  076E                     __end_of_OSCILLATOR_Initialize:
  4175                           
  4176                           	psect	text19
  4177  0793                     __ptext19:	
  4178 ;; *************** function _FVR_Initialize *****************
  4179 ;; Defined at:
  4180 ;;		line 58 in file "mcc_generated_files/fvr.c"
  4181 ;; Parameters:    Size  Location     Type
  4182 ;;		None
  4183 ;; Auto vars:     Size  Location     Type
  4184 ;;		None
  4185 ;; Return value:  Size  Location     Type
  4186 ;;                  1    wreg      void 
  4187 ;; Registers used:
  4188 ;;		wreg
  4189 ;; Tracked objects:
  4190 ;;		On entry : 0/0
  4191 ;;		On exit  : 0/0
  4192 ;;		Unchanged: 0/0
  4193 ;; Data sizes:     COMMON   BANK0   BANK1
  4194 ;;      Params:         0       0       0
  4195 ;;      Locals:         0       0       0
  4196 ;;      Temps:          0       0       0
  4197 ;;      Totals:         0       0       0
  4198 ;;Total ram usage:        0 bytes
  4199 ;; Hardware stack levels used: 1
  4200 ;; Hardware stack levels required when called: 7
  4201 ;; This function calls:
  4202 ;;		Nothing
  4203 ;; This function is called by:
  4204 ;;		_SYSTEM_Initialize
  4205 ;; This function uses a non-reentrant model
  4206 ;;
  4207                           
  4208  0793                     _FVR_Initialize:	
  4209                           ;psect for function _FVR_Initialize
  4210                           
  4211  0793                     l2120:	
  4212                           ;incstack = 0
  4213                           ; Regs used in _FVR_Initialize: [wreg]
  4214                           
  4215                           
  4216                           ;mcc_generated_files/fvr.c: 61:     FVRCON = 0x82;
  4217  0793  3082               	movlw	130
  4218  0794  0022               	movlb	2	; select bank2
  4219  0795  0097               	movwf	23	;volatile
  4220  0796                     l213:
  4221  0796  0008               	return
  4222  0797                     __end_of_FVR_Initialize:
  4223                           
  4224                           	psect	text20
  4225  0758                     __ptext20:	
  4226 ;; *************** function _ADC_Initialize *****************
  4227 ;; Defined at:
  4228 ;;		line 67 in file "mcc_generated_files/adc.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;		None
  4231 ;; Auto vars:     Size  Location     Type
  4232 ;;		None
  4233 ;; Return value:  Size  Location     Type
  4234 ;;                  1    wreg      void 
  4235 ;; Registers used:
  4236 ;;		wreg, status,2
  4237 ;; Tracked objects:
  4238 ;;		On entry : 0/0
  4239 ;;		On exit  : 0/0
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:     COMMON   BANK0   BANK1
  4242 ;;      Params:         0       0       0
  4243 ;;      Locals:         0       0       0
  4244 ;;      Temps:          0       0       0
  4245 ;;      Totals:         0       0       0
  4246 ;;Total ram usage:        0 bytes
  4247 ;; Hardware stack levels used: 1
  4248 ;; Hardware stack levels required when called: 7
  4249 ;; This function calls:
  4250 ;;		Nothing
  4251 ;; This function is called by:
  4252 ;;		_SYSTEM_Initialize
  4253 ;; This function uses a non-reentrant model
  4254 ;;
  4255                           
  4256  0758                     _ADC_Initialize:	
  4257                           ;psect for function _ADC_Initialize
  4258                           
  4259  0758                     l2122:	
  4260                           ;incstack = 0
  4261                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4262                           
  4263                           
  4264                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0x40;
  4265  0758  3040               	movlw	64
  4266  0759  0021               	movlb	1	; select bank1
  4267  075A  009E               	movwf	30	;volatile
  4268  075B                     l2124:
  4269                           
  4270                           ;mcc_generated_files/adc.c: 75:     ADRESL = 0x00;
  4271  075B  019B               	clrf	27	;volatile
  4272  075C                     l2126:
  4273                           
  4274                           ;mcc_generated_files/adc.c: 78:     ADRESH = 0x00;
  4275  075C  019C               	clrf	28	;volatile
  4276                           
  4277                           ;mcc_generated_files/adc.c: 81:     ADCON0 = 0x7D;
  4278  075D  307D               	movlw	125
  4279  075E  009D               	movwf	29	;volatile
  4280  075F                     l48:
  4281  075F  0008               	return
  4282  0760                     __end_of_ADC_Initialize:
  4283                           
  4284                           	psect	text21
  4285  035F                     __ptext21:	
  4286 ;; *************** function _povorot *****************
  4287 ;; Defined at:
  4288 ;;		line 272 in file "main.c"
  4289 ;; Parameters:    Size  Location     Type
  4290 ;;		None
  4291 ;; Auto vars:     Size  Location     Type
  4292 ;;		None
  4293 ;; Return value:  Size  Location     Type
  4294 ;;                  1    wreg      void 
  4295 ;; Registers used:
  4296 ;;		wreg, status,2, status,0, pclath, cstack
  4297 ;; Tracked objects:
  4298 ;;		On entry : 0/0
  4299 ;;		On exit  : 0/0
  4300 ;;		Unchanged: 0/0
  4301 ;; Data sizes:     COMMON   BANK0   BANK1
  4302 ;;      Params:         0       0       0
  4303 ;;      Locals:         0       0       0
  4304 ;;      Temps:          0       0       0
  4305 ;;      Totals:         0       0       0
  4306 ;;Total ram usage:        0 bytes
  4307 ;; Hardware stack levels used: 1
  4308 ;; Hardware stack levels required when called: 8
  4309 ;; This function calls:
  4310 ;;		_go_close
  4311 ;;		_go_open
  4312 ;; This function is called by:
  4313 ;;		_main
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317  035F                     _povorot:	
  4318                           ;psect for function _povorot
  4319                           
  4320  035F                     l2538:	
  4321                           ;incstack = 0
  4322                           ; Regs used in _povorot: [wreg+status,2+status,0+pclath+cstack]
  4323                           
  4324                           
  4325                           ;main.c: 273:     if ((time_s > ROTATION_TIME) &&
  4326  035F  3000               	movlw	0
  4327  0360  0020               	movlb	0	; select bank0
  4328  0361  025F               	subwf	_time_s+2,w
  4329  0362  1D03               	skipz
  4330  0363  2B6A               	goto	u1795
  4331  0364  3000               	movlw	0
  4332  0365  025E               	subwf	_time_s+1,w
  4333  0366  1D03               	skipz
  4334  0367  2B6A               	goto	u1795
  4335  0368  303D               	movlw	61
  4336  0369  025D               	subwf	_time_s,w
  4337  036A                     u1795:
  4338  036A  1C03               	skipc
  4339  036B  2B6D               	goto	u1791
  4340  036C  2B6E               	goto	u1790
  4341  036D                     u1791:
  4342  036D  2B7D               	goto	l2548
  4343  036E                     u1790:
  4344  036E                     l2540:
  4345  036E  197C               	btfsc	_FLAGS,2
  4346  036F  2B71               	goto	u1801
  4347  0370  2B72               	goto	u1800
  4348  0371                     u1801:
  4349  0371  2B7D               	goto	l2548
  4350  0372                     u1800:
  4351  0372                     l2542:
  4352  0372  187C               	btfsc	_FLAGS,0
  4353  0373  2B75               	goto	u1811
  4354  0374  2B76               	goto	u1810
  4355  0375                     u1811:
  4356  0375  2B7D               	goto	l2548
  4357  0376                     u1810:
  4358  0376                     l2544:
  4359  0376  1CFC               	btfss	_FLAGS,1
  4360  0377  2B79               	goto	u1821
  4361  0378  2B7A               	goto	u1820
  4362  0379                     u1821:
  4363  0379  2B7D               	goto	l2548
  4364  037A                     u1820:
  4365  037A                     l2546:
  4366                           
  4367                           ;main.c: 277:             ) {;main.c: 278:         go_close();
  4368  037A  3185  25ED  3183   	fcall	_go_close
  4369  037D                     l2548:
  4370                           
  4371                           ;main.c: 280:     if ((time_s > (ROTATION_TIME + 10 + 1 * 2)) &&
  4372  037D  3000               	movlw	0
  4373  037E  0020               	movlb	0	; select bank0
  4374  037F  025F               	subwf	_time_s+2,w
  4375  0380  1D03               	skipz
  4376  0381  2B88               	goto	u1835
  4377  0382  3000               	movlw	0
  4378  0383  025E               	subwf	_time_s+1,w
  4379  0384  1D03               	skipz
  4380  0385  2B88               	goto	u1835
  4381  0386  3049               	movlw	73
  4382  0387  025D               	subwf	_time_s,w
  4383  0388                     u1835:
  4384  0388  1C03               	skipc
  4385  0389  2B8B               	goto	u1831
  4386  038A  2B8C               	goto	u1830
  4387  038B                     u1831:
  4388  038B  2BA2               	goto	l436
  4389  038C                     u1830:
  4390  038C                     l2550:
  4391  038C  1D7C               	btfss	_FLAGS,2
  4392  038D  2B8F               	goto	u1841
  4393  038E  2B90               	goto	u1840
  4394  038F                     u1841:
  4395  038F  2BA2               	goto	l436
  4396  0390                     u1840:
  4397  0390                     l2552:
  4398  0390  187C               	btfsc	_FLAGS,0
  4399  0391  2B93               	goto	u1851
  4400  0392  2B94               	goto	u1850
  4401  0393                     u1851:
  4402  0393  2BA2               	goto	l436
  4403  0394                     u1850:
  4404  0394                     l2554:
  4405  0394  1CFC               	btfss	_FLAGS,1
  4406  0395  2B97               	goto	u1861
  4407  0396  2B98               	goto	u1860
  4408  0397                     u1861:
  4409  0397  2BA2               	goto	l436
  4410  0398                     u1860:
  4411  0398                     l2556:
  4412                           
  4413                           ;main.c: 284:             ) {;main.c: 285:         go_open();
  4414  0398  3187  2744  3183   	fcall	_go_open
  4415  039B                     l2558:
  4416                           
  4417                           ;main.c: 286:         time_s = 0;
  4418  039B  3000               	movlw	0
  4419  039C  0020               	movlb	0	; select bank0
  4420  039D  00DD               	movwf	_time_s
  4421  039E  3000               	movlw	0
  4422  039F  00DE               	movwf	_time_s+1
  4423  03A0  3000               	movlw	0
  4424  03A1  00DF               	movwf	_time_s+2
  4425  03A2                     l436:
  4426  03A2  0008               	return
  4427  03A3                     __end_of_povorot:
  4428                           
  4429                           	psect	text22
  4430  01D7                     __ptext22:	
  4431 ;; *************** function _get_voltage *****************
  4432 ;; Defined at:
  4433 ;;		line 331 in file "main.c"
  4434 ;; Parameters:    Size  Location     Type
  4435 ;;		None
  4436 ;; Auto vars:     Size  Location     Type
  4437 ;;  buf             1   18[BANK0 ] unsigned char 
  4438 ;;  q               1   19[BANK0 ] unsigned char 
  4439 ;;  q               1   20[BANK0 ] unsigned char 
  4440 ;;  res             2   16[BANK0 ] unsigned int 
  4441 ;; Return value:  Size  Location     Type
  4442 ;;                  1    wreg      void 
  4443 ;; Registers used:
  4444 ;;		wreg, status,2, status,0, pclath, cstack
  4445 ;; Tracked objects:
  4446 ;;		On entry : 0/0
  4447 ;;		On exit  : 0/0
  4448 ;;		Unchanged: 0/0
  4449 ;; Data sizes:     COMMON   BANK0   BANK1
  4450 ;;      Params:         0       0       0
  4451 ;;      Locals:         0       5       0
  4452 ;;      Temps:          0       2       0
  4453 ;;      Totals:         0       7       0
  4454 ;;Total ram usage:        7 bytes
  4455 ;; Hardware stack levels used: 1
  4456 ;; Hardware stack levels required when called: 9
  4457 ;; This function calls:
  4458 ;;		_ADC_GetConversion
  4459 ;;		_EEPROM_ReadByte
  4460 ;;		_EEPROM_WriteByte
  4461 ;;		_EEPROM_WriteShortLong
  4462 ;; This function is called by:
  4463 ;;		_main
  4464 ;; This function uses a non-reentrant model
  4465 ;;
  4466                           
  4467  01D7                     _get_voltage:	
  4468                           ;psect for function _get_voltage
  4469                           
  4470  01D7                     l2604:	
  4471                           ;incstack = 0
  4472                           ; Regs used in _get_voltage: [wreg+status,2+status,0+pclath+cstack]
  4473                           
  4474                           
  4475                           ;main.c: 332:     unsigned res = ADC_GetConversion(channel_FVR);
  4476  01D7  301F               	movlw	31
  4477  01D8  3185  25CC  3181   	fcall	_ADC_GetConversion
  4478  01DB  0020               	movlb	0	; select bank0
  4479  01DC  0821               	movf	?_ADC_GetConversion+1,w
  4480  01DD  00B1               	movwf	get_voltage@res+1
  4481  01DE  0820               	movf	?_ADC_GetConversion,w
  4482  01DF  00B0               	movwf	get_voltage@res
  4483  01E0                     l2606:
  4484                           
  4485                           ;main.c: 333:     if (res > 46200) {
  4486  01E0  30B4               	movlw	180
  4487  01E1  0231               	subwf	get_voltage@res+1,w
  4488  01E2  3079               	movlw	121
  4489  01E3  1903               	skipnz
  4490  01E4  0230               	subwf	get_voltage@res,w
  4491  01E5  1C03               	skipc
  4492  01E6  29E8               	goto	u2011
  4493  01E7  29E9               	goto	u2010
  4494  01E8                     u2011:
  4495  01E8  2A32               	goto	l464
  4496  01E9                     u2010:
  4497  01E9                     l2608:
  4498                           
  4499                           ;main.c: 334:         for (char q = 0; q < 0x10; q++) {
  4500  01E9  01B4               	clrf	get_voltage@q
  4501  01EA                     l2614:
  4502                           
  4503                           ;main.c: 335:             char buf = EEPROM_ReadByte(q);
  4504  01EA  0834               	movf	get_voltage@q,w
  4505  01EB  3186  2662  3181   	fcall	_EEPROM_ReadByte
  4506  01EE  0020               	movlb	0	; select bank0
  4507  01EF  00AE               	movwf	??_get_voltage
  4508  01F0  082E               	movf	??_get_voltage,w
  4509  01F1  00B2               	movwf	get_voltage@buf
  4510  01F2                     l2616:
  4511                           
  4512                           ;main.c: 336:             if (buf != START_EEPROM_ADR) EEPROM_WriteByte(q, START_EEPROM_
      +                          ADR);
  4513  01F2  0832               	movf	get_voltage@buf,w
  4514  01F3  0667               	xorwf	_START_EEPROM_ADR,w
  4515  01F4  1903               	skipnz
  4516  01F5  29F7               	goto	u2021
  4517  01F6  29F8               	goto	u2020
  4518  01F7                     u2021:
  4519  01F7  2A00               	goto	l2620
  4520  01F8                     u2020:
  4521  01F8                     l2618:
  4522  01F8  0867               	movf	_START_EEPROM_ADR,w
  4523  01F9  00AE               	movwf	??_get_voltage
  4524  01FA  082E               	movf	??_get_voltage,w
  4525  01FB  00A0               	movwf	EEPROM_WriteByte@dt
  4526  01FC  0834               	movf	get_voltage@q,w
  4527  01FD  3185  2577  3181   	fcall	_EEPROM_WriteByte
  4528  0200                     l2620:
  4529                           
  4530                           ;main.c: 337:         }
  4531  0200  3001               	movlw	1
  4532  0201  0020               	movlb	0	; select bank0
  4533  0202  00AE               	movwf	??_get_voltage
  4534  0203  082E               	movf	??_get_voltage,w
  4535  0204  07B4               	addwf	get_voltage@q,f
  4536  0205                     l2622:
  4537  0205  3010               	movlw	16
  4538  0206  0234               	subwf	get_voltage@q,w
  4539  0207  1C03               	skipc
  4540  0208  2A0A               	goto	u2031
  4541  0209  2A0B               	goto	u2030
  4542  020A                     u2031:
  4543  020A  29EA               	goto	l2614
  4544  020B                     u2030:
  4545  020B                     l2624:
  4546                           
  4547                           ;main.c: 338:         for (char q = START_EEPROM_ADR; q < START_EEPROM_ADR + 16; q += 4)
      +                           {
  4548  020B  0867               	movf	_START_EEPROM_ADR,w
  4549  020C  00AE               	movwf	??_get_voltage
  4550  020D  082E               	movf	??_get_voltage,w
  4551  020E  00B3               	movwf	get_voltage@q_804
  4552  020F  2A20               	goto	l2630
  4553  0210                     l2626:
  4554                           
  4555                           ;main.c: 339:             EEPROM_WriteShortLong(q, time_s);
  4556  0210  0020               	movlb	0	; select bank0
  4557  0211  085D               	movf	_time_s,w
  4558  0212  00A5               	movwf	EEPROM_WriteShortLong@ucData
  4559  0213  085E               	movf	_time_s+1,w
  4560  0214  00A6               	movwf	EEPROM_WriteShortLong@ucData+1
  4561  0215  085F               	movf	_time_s+2,w
  4562  0216  00A7               	movwf	EEPROM_WriteShortLong@ucData+2
  4563  0217  0833               	movf	get_voltage@q_804,w
  4564  0218  3184  2427  3181   	fcall	_EEPROM_WriteShortLong
  4565  021B                     l2628:
  4566                           
  4567                           ;main.c: 340:         }
  4568  021B  3004               	movlw	4
  4569  021C  0020               	movlb	0	; select bank0
  4570  021D  00AE               	movwf	??_get_voltage
  4571  021E  082E               	movf	??_get_voltage,w
  4572  021F  07B3               	addwf	get_voltage@q_804,f
  4573  0220                     l2630:
  4574  0220  0867               	movf	_START_EEPROM_ADR,w
  4575  0221  3E10               	addlw	16
  4576  0222  00AE               	movwf	??_get_voltage
  4577  0223  3000               	movlw	0
  4578  0224  1803               	skipnc
  4579  0225  3001               	movlw	1
  4580  0226  00AF               	movwf	??_get_voltage+1
  4581  0227  082F               	movf	??_get_voltage+1,w
  4582  0228  3A80               	xorlw	128
  4583  0229  3C80               	sublw	128
  4584  022A  1D03               	skipz
  4585  022B  2A2E               	goto	u2045
  4586  022C  082E               	movf	??_get_voltage,w
  4587  022D  0233               	subwf	get_voltage@q_804,w
  4588  022E                     u2045:
  4589  022E  1C03               	skipc
  4590  022F  2A31               	goto	u2041
  4591  0230  2A32               	goto	u2040
  4592  0231                     u2041:
  4593  0231  2A10               	goto	l2626
  4594  0232                     u2040:
  4595  0232                     l464:
  4596  0232  0008               	return
  4597  0233                     __end_of_get_voltage:
  4598                           
  4599                           	psect	text23
  4600  0427                     __ptext23:	
  4601 ;; *************** function _EEPROM_WriteShortLong *****************
  4602 ;; Defined at:
  4603 ;;		line 40 in file "eeprom.c"
  4604 ;; Parameters:    Size  Location     Type
  4605 ;;  addr            1    wreg     unsigned char 
  4606 ;;  ucData          3    5[BANK0 ] unsigned um
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;  addr            1   13[BANK0 ] unsigned char 
  4609 ;;  dt              1   12[BANK0 ] unsigned char 
  4610 ;; Return value:  Size  Location     Type
  4611 ;;                  1    wreg      void 
  4612 ;; Registers used:
  4613 ;;		wreg, status,2, status,0, pclath, cstack
  4614 ;; Tracked objects:
  4615 ;;		On entry : 0/0
  4616 ;;		On exit  : 0/0
  4617 ;;		Unchanged: 0/0
  4618 ;; Data sizes:     COMMON   BANK0   BANK1
  4619 ;;      Params:         0       3       0
  4620 ;;      Locals:         0       2       0
  4621 ;;      Temps:          0       4       0
  4622 ;;      Totals:         0       9       0
  4623 ;;Total ram usage:        9 bytes
  4624 ;; Hardware stack levels used: 1
  4625 ;; Hardware stack levels required when called: 8
  4626 ;; This function calls:
  4627 ;;		_EEPROM_WriteByte
  4628 ;; This function is called by:
  4629 ;;		_get_voltage
  4630 ;; This function uses a non-reentrant model
  4631 ;;
  4632                           
  4633  0427                     _EEPROM_WriteShortLong:	
  4634                           ;psect for function _EEPROM_WriteShortLong
  4635                           
  4636                           
  4637                           ;incstack = 0
  4638                           ; Regs used in _EEPROM_WriteShortLong: [wreg+status,2+status,0+pclath+cstack]
  4639                           ;EEPROM_WriteShortLong@addr stored from wreg
  4640  0427  0020               	movlb	0	; select bank0
  4641  0428  00AD               	movwf	EEPROM_WriteShortLong@addr
  4642  0429                     l2462:
  4643                           
  4644                           ;eeprom.c: 41:     EEPROM_WriteByte(addr, (unsigned char) ucData);
  4645  0429  0825               	movf	EEPROM_WriteShortLong@ucData,w
  4646  042A  00A8               	movwf	??_EEPROM_WriteShortLong
  4647  042B  0828               	movf	??_EEPROM_WriteShortLong,w
  4648  042C  00A0               	movwf	EEPROM_WriteByte@dt
  4649  042D  082D               	movf	EEPROM_WriteShortLong@addr,w
  4650  042E  3185  2577  3184   	fcall	_EEPROM_WriteByte
  4651  0431                     l2464:
  4652                           
  4653                           ;eeprom.c: 42:      char dt = ucData >> 8;
  4654  0431  0020               	movlb	0	; select bank0
  4655  0432  0825               	movf	EEPROM_WriteShortLong@ucData,w
  4656  0433  00A8               	movwf	??_EEPROM_WriteShortLong
  4657  0434  0826               	movf	EEPROM_WriteShortLong@ucData+1,w
  4658  0435  00A9               	movwf	??_EEPROM_WriteShortLong+1
  4659  0436  0827               	movf	EEPROM_WriteShortLong@ucData+2,w
  4660  0437  00AA               	movwf	??_EEPROM_WriteShortLong+2
  4661  0438  3008               	movlw	8
  4662  0439                     u1695:
  4663  0439  36AA               	lsrf	??_EEPROM_WriteShortLong+2,f
  4664  043A  0CA9               	rrf	??_EEPROM_WriteShortLong+1,f
  4665  043B  0CA8               	rrf	??_EEPROM_WriteShortLong,f
  4666  043C                     u1690:
  4667  043C  0B89               	decfsz	9,f
  4668  043D  2C39               	goto	u1695
  4669  043E  0828               	movf	??_EEPROM_WriteShortLong,w
  4670  043F  00AB               	movwf	??_EEPROM_WriteShortLong+3
  4671  0440  082B               	movf	??_EEPROM_WriteShortLong+3,w
  4672  0441  00AC               	movwf	EEPROM_WriteShortLong@dt
  4673  0442                     l2466:
  4674                           
  4675                           ;eeprom.c: 43:     EEPROM_WriteByte(addr + 1, dt);
  4676  0442  082C               	movf	EEPROM_WriteShortLong@dt,w
  4677  0443  00A8               	movwf	??_EEPROM_WriteShortLong
  4678  0444  0828               	movf	??_EEPROM_WriteShortLong,w
  4679  0445  00A0               	movwf	EEPROM_WriteByte@dt
  4680  0446  082D               	movf	EEPROM_WriteShortLong@addr,w
  4681  0447  3E01               	addlw	1
  4682  0448  3185  2577  3184   	fcall	_EEPROM_WriteByte
  4683                           
  4684                           ;eeprom.c: 44:     dt = ucData >> 16;
  4685  044B  0020               	movlb	0	; select bank0
  4686  044C  0825               	movf	EEPROM_WriteShortLong@ucData,w
  4687  044D  00A8               	movwf	??_EEPROM_WriteShortLong
  4688  044E  0826               	movf	EEPROM_WriteShortLong@ucData+1,w
  4689  044F  00A9               	movwf	??_EEPROM_WriteShortLong+1
  4690  0450  0827               	movf	EEPROM_WriteShortLong@ucData+2,w
  4691  0451  00AA               	movwf	??_EEPROM_WriteShortLong+2
  4692  0452  3010               	movlw	16
  4693  0453                     u1705:
  4694  0453  36AA               	lsrf	??_EEPROM_WriteShortLong+2,f
  4695  0454  0CA9               	rrf	??_EEPROM_WriteShortLong+1,f
  4696  0455  0CA8               	rrf	??_EEPROM_WriteShortLong,f
  4697  0456                     u1700:
  4698  0456  0B89               	decfsz	9,f
  4699  0457  2C53               	goto	u1705
  4700  0458  0828               	movf	??_EEPROM_WriteShortLong,w
  4701  0459  00AB               	movwf	??_EEPROM_WriteShortLong+3
  4702  045A  082B               	movf	??_EEPROM_WriteShortLong+3,w
  4703  045B  00AC               	movwf	EEPROM_WriteShortLong@dt
  4704  045C                     l2468:
  4705                           
  4706                           ;eeprom.c: 45:     EEPROM_WriteByte(addr + 2, dt);
  4707  045C  082C               	movf	EEPROM_WriteShortLong@dt,w
  4708  045D  00A8               	movwf	??_EEPROM_WriteShortLong
  4709  045E  0828               	movf	??_EEPROM_WriteShortLong,w
  4710  045F  00A0               	movwf	EEPROM_WriteByte@dt
  4711  0460  082D               	movf	EEPROM_WriteShortLong@addr,w
  4712  0461  3E02               	addlw	2
  4713  0462  3185  2577  3184   	fcall	_EEPROM_WriteByte
  4714  0465                     l579:
  4715  0465  0008               	return
  4716  0466                     __end_of_EEPROM_WriteShortLong:
  4717                           
  4718                           	psect	text24
  4719  0577                     __ptext24:	
  4720 ;; *************** function _EEPROM_WriteByte *****************
  4721 ;; Defined at:
  4722 ;;		line 6 in file "eeprom.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;  addr            1    wreg     unsigned char 
  4725 ;;  dt              1    0[BANK0 ] unsigned char 
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;  addr            1    3[BANK0 ] unsigned char 
  4728 ;;  status          1    4[BANK0 ] unsigned char 
  4729 ;; Return value:  Size  Location     Type
  4730 ;;                  1    wreg      void 
  4731 ;; Registers used:
  4732 ;;		wreg, status,2
  4733 ;; Tracked objects:
  4734 ;;		On entry : 0/0
  4735 ;;		On exit  : 0/0
  4736 ;;		Unchanged: 0/0
  4737 ;; Data sizes:     COMMON   BANK0   BANK1
  4738 ;;      Params:         0       1       0
  4739 ;;      Locals:         0       2       0
  4740 ;;      Temps:          0       2       0
  4741 ;;      Totals:         0       5       0
  4742 ;;Total ram usage:        5 bytes
  4743 ;; Hardware stack levels used: 1
  4744 ;; Hardware stack levels required when called: 7
  4745 ;; This function calls:
  4746 ;;		Nothing
  4747 ;; This function is called by:
  4748 ;;		_get_voltage
  4749 ;;		_EEPROM_WriteShortLong
  4750 ;;		_EEPROM_WriteWord
  4751 ;;		_EEPROM_WriteString
  4752 ;; This function uses a non-reentrant model
  4753 ;;
  4754                           
  4755  0577                     _EEPROM_WriteByte:	
  4756                           ;psect for function _EEPROM_WriteByte
  4757                           
  4758                           
  4759                           ;incstack = 0
  4760                           ; Regs used in _EEPROM_WriteByte: [wreg+status,2]
  4761                           ;EEPROM_WriteByte@addr stored from wreg
  4762  0577  0020               	movlb	0	; select bank0
  4763  0578  00A3               	movwf	EEPROM_WriteByte@addr
  4764  0579                     l2186:
  4765  0579                     l561:	
  4766                           ;eeprom.c: 7:     unsigned char status;;eeprom.c: 8:     while (WR);
  4767                           
  4768  0579  0023               	movlb	3	; select bank3
  4769  057A  1895               	btfsc	21,1	;volsfr
  4770  057B  2D7D               	goto	u1331
  4771  057C  2D7E               	goto	u1330
  4772  057D                     u1331:
  4773  057D  2D79               	goto	l561
  4774  057E                     u1330:
  4775  057E                     l2188:
  4776                           
  4777                           ;eeprom.c: 9:     status = GIE;
  4778  057E  3000               	movlw	0
  4779  057F  1B8B               	btfsc	11,7	;volatile
  4780  0580  3001               	movlw	1
  4781  0581  0020               	movlb	0	; select bank0
  4782  0582  00A4               	movwf	EEPROM_WriteByte@status
  4783  0583                     l2190:
  4784                           
  4785                           ;eeprom.c: 10:     GIE = 0;
  4786  0583  138B               	bcf	11,7	;volatile
  4787  0584                     l2192:
  4788                           
  4789                           ;eeprom.c: 11:     EEADR = addr;
  4790  0584  0823               	movf	EEPROM_WriteByte@addr,w
  4791  0585  00A1               	movwf	??_EEPROM_WriteByte
  4792  0586  01A2               	clrf	??_EEPROM_WriteByte+1
  4793  0587  0821               	movf	??_EEPROM_WriteByte,w
  4794  0588  0023               	movlb	3	; select bank3
  4795  0589  0091               	movwf	17	;volatile
  4796  058A  0020               	movlb	0	; select bank0
  4797  058B  0822               	movf	??_EEPROM_WriteByte+1,w
  4798  058C  0023               	movlb	3	; select bank3
  4799  058D  0092               	movwf	18	;volatile
  4800  058E                     l2194:
  4801                           
  4802                           ;eeprom.c: 12:     EEDATA = dt;
  4803  058E  0020               	movlb	0	; select bank0
  4804  058F  0820               	movf	EEPROM_WriteByte@dt,w
  4805  0590  0023               	movlb	3	; select bank3
  4806  0591  0093               	movwf	19	;volatile
  4807  0592                     l2196:
  4808                           
  4809                           ;eeprom.c: 13:     WREN = 1;
  4810  0592  1515               	bsf	21,2	;volsfr
  4811  0593                     l2198:
  4812                           
  4813                           ;eeprom.c: 14:     EECON2 = 0x55;
  4814  0593  3055               	movlw	85
  4815  0594  0096               	movwf	22	;volsfr
  4816  0595                     l2200:
  4817                           
  4818                           ;eeprom.c: 15:     EECON2 = 0xAA;
  4819  0595  30AA               	movlw	170
  4820  0596  0096               	movwf	22	;volsfr
  4821  0597                     l2202:
  4822                           
  4823                           ;eeprom.c: 16:     WR = 1;
  4824  0597  1495               	bsf	21,1	;volsfr
  4825  0598                     l2204:
  4826                           
  4827                           ;eeprom.c: 17:     GIE = status;
  4828  0598  0020               	movlb	0	; select bank0
  4829  0599  1824               	btfsc	EEPROM_WriteByte@status,0
  4830  059A  2D9C               	goto	u1341
  4831  059B  2D9E               	goto	u1340
  4832  059C                     u1341:
  4833  059C  178B               	bsf	11,7	;volatile
  4834  059D  2D9F               	goto	u1354
  4835  059E                     u1340:
  4836  059E  138B               	bcf	11,7	;volatile
  4837  059F                     u1354:
  4838  059F                     l2206:
  4839                           
  4840                           ;eeprom.c: 18:     WREN = 0;
  4841  059F  0023               	movlb	3	; select bank3
  4842  05A0  1115               	bcf	21,2	;volsfr
  4843  05A1                     l564:
  4844  05A1  0008               	return
  4845  05A2                     __end_of_EEPROM_WriteByte:
  4846                           
  4847                           	psect	text25
  4848  0662                     __ptext25:	
  4849 ;; *************** function _EEPROM_ReadByte *****************
  4850 ;; Defined at:
  4851 ;;		line 21 in file "eeprom.c"
  4852 ;; Parameters:    Size  Location     Type
  4853 ;;  addr            1    wreg     unsigned char 
  4854 ;; Auto vars:     Size  Location     Type
  4855 ;;  addr            1    2[BANK0 ] unsigned char 
  4856 ;; Return value:  Size  Location     Type
  4857 ;;                  1    wreg      unsigned char 
  4858 ;; Registers used:
  4859 ;;		wreg
  4860 ;; Tracked objects:
  4861 ;;		On entry : 0/0
  4862 ;;		On exit  : 0/0
  4863 ;;		Unchanged: 0/0
  4864 ;; Data sizes:     COMMON   BANK0   BANK1
  4865 ;;      Params:         0       0       0
  4866 ;;      Locals:         0       1       0
  4867 ;;      Temps:          0       2       0
  4868 ;;      Totals:         0       3       0
  4869 ;;Total ram usage:        3 bytes
  4870 ;; Hardware stack levels used: 1
  4871 ;; Hardware stack levels required when called: 7
  4872 ;; This function calls:
  4873 ;;		Nothing
  4874 ;; This function is called by:
  4875 ;;		_get_voltage
  4876 ;;		_get_adr
  4877 ;;		_EEPROM_ReadShortLong
  4878 ;;		_EEPROM_ReadWord
  4879 ;;		_EEPROM_ReadString
  4880 ;; This function uses a non-reentrant model
  4881 ;;
  4882                           
  4883  0662                     _EEPROM_ReadByte:	
  4884                           ;psect for function _EEPROM_ReadByte
  4885                           
  4886                           
  4887                           ;incstack = 0
  4888                           ; Regs used in _EEPROM_ReadByte: [wreg]
  4889                           ;EEPROM_ReadByte@addr stored from wreg
  4890  0662  0020               	movlb	0	; select bank0
  4891  0663  00A2               	movwf	EEPROM_ReadByte@addr
  4892  0664                     l2012:
  4893  0664                     l567:	
  4894                           ;eeprom.c: 22:     while (RD || WR);
  4895                           
  4896  0664  0023               	movlb	3	; select bank3
  4897  0665  1815               	btfsc	21,0	;volsfr
  4898  0666  2E68               	goto	u1091
  4899  0667  2E69               	goto	u1090
  4900  0668                     u1091:
  4901  0668  2E64               	goto	l567
  4902  0669                     u1090:
  4903  0669                     l2014:
  4904  0669  1895               	btfsc	21,1	;volsfr
  4905  066A  2E6C               	goto	u1101
  4906  066B  2E6D               	goto	u1100
  4907  066C                     u1101:
  4908  066C  2E64               	goto	l567
  4909  066D                     u1100:
  4910  066D                     l2016:
  4911                           
  4912                           ;eeprom.c: 23:     EEADR = addr;
  4913  066D  0020               	movlb	0	; select bank0
  4914  066E  0822               	movf	EEPROM_ReadByte@addr,w
  4915  066F  00A0               	movwf	??_EEPROM_ReadByte
  4916  0670  01A1               	clrf	??_EEPROM_ReadByte+1
  4917  0671  0820               	movf	??_EEPROM_ReadByte,w
  4918  0672  0023               	movlb	3	; select bank3
  4919  0673  0091               	movwf	17	;volatile
  4920  0674  0020               	movlb	0	; select bank0
  4921  0675  0821               	movf	??_EEPROM_ReadByte+1,w
  4922  0676  0023               	movlb	3	; select bank3
  4923  0677  0092               	movwf	18	;volatile
  4924  0678                     l2018:
  4925                           
  4926                           ;eeprom.c: 24:     RD = 1;
  4927  0678  1415               	bsf	21,0	;volsfr
  4928                           
  4929                           ;eeprom.c: 25:     return EEDATA;
  4930  0679  0813               	movf	19,w	;volatile
  4931  067A                     l570:
  4932  067A  0008               	return
  4933  067B                     __end_of_EEPROM_ReadByte:
  4934                           
  4935                           	psect	text26
  4936  04A4                     __ptext26:	
  4937 ;; *************** function _get_jump *****************
  4938 ;; Defined at:
  4939 ;;		line 186 in file "main.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;		None
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;  res             2    5[BANK0 ] unsigned int 
  4944 ;; Return value:  Size  Location     Type
  4945 ;;                  1    wreg      void 
  4946 ;; Registers used:
  4947 ;;		wreg, status,2, status,0, pclath, cstack
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMMON   BANK0   BANK1
  4953 ;;      Params:         0       0       0
  4954 ;;      Locals:         0       2       0
  4955 ;;      Temps:          0       1       0
  4956 ;;      Totals:         0       3       0
  4957 ;;Total ram usage:        3 bytes
  4958 ;; Hardware stack levels used: 1
  4959 ;; Hardware stack levels required when called: 8
  4960 ;; This function calls:
  4961 ;;		_ADC_GetConversion
  4962 ;; This function is called by:
  4963 ;;		_main
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966                           
  4967  04A4                     _get_jump:	
  4968                           ;psect for function _get_jump
  4969                           
  4970  04A4                     l380:	
  4971                           ;incstack = 0
  4972                           ; Regs used in _get_jump: [wreg+status,2+status,0+pclath+cstack]
  4973                           ;main.c: 188:     static signed char jump_counter;;main.c: 189:     do { ANSELAbits.ANSA
      +                          1 = 1; } while(0);
  4974                           
  4975  04A4  0023               	movlb	3	; select bank3
  4976  04A5  148C               	bsf	12,1	;volatile
  4977  04A6                     l2514:
  4978                           
  4979                           ;main.c: 190:     unsigned res = ADC_GetConversion(PIN_JUMP_STATE);
  4980  04A6  3001               	movlw	1
  4981  04A7  3185  25CC  3184   	fcall	_ADC_GetConversion
  4982  04AA  0020               	movlb	0	; select bank0
  4983  04AB  0821               	movf	?_ADC_GetConversion+1,w
  4984  04AC  00A6               	movwf	get_jump@res+1
  4985  04AD  0820               	movf	?_ADC_GetConversion,w
  4986  04AE  00A5               	movwf	get_jump@res
  4987  04AF                     l2516:
  4988  04AF  0023               	movlb	3	; select bank3
  4989  04B0  108C               	bcf	12,1	;volatile
  4990  04B1                     l2518:
  4991                           
  4992                           ;main.c: 194:     if (res < 2000) jump_counter--;
  4993  04B1  3007               	movlw	7
  4994  04B2  0020               	movlb	0	; select bank0
  4995  04B3  0226               	subwf	get_jump@res+1,w
  4996  04B4  30D0               	movlw	208
  4997  04B5  1903               	skipnz
  4998  04B6  0225               	subwf	get_jump@res,w
  4999  04B7  1803               	skipnc
  5000  04B8  2CBA               	goto	u1761
  5001  04B9  2CBB               	goto	u1760
  5002  04BA                     u1761:
  5003  04BA  2CC0               	goto	l2522
  5004  04BB                     u1760:
  5005  04BB                     l2520:
  5006  04BB  30FF               	movlw	255
  5007  04BC  00A4               	movwf	??_get_jump
  5008  04BD  0824               	movf	??_get_jump,w
  5009  04BE  07E3               	addwf	get_jump@jump_counter,f
  5010  04BF  2CC4               	goto	l2524
  5011  04C0                     l2522:
  5012  04C0  3001               	movlw	1
  5013  04C1  00A4               	movwf	??_get_jump
  5014  04C2  0824               	movf	??_get_jump,w
  5015  04C3  07E3               	addwf	get_jump@jump_counter,f
  5016  04C4                     l2524:
  5017                           
  5018                           ;main.c: 197:     if (jump_counter > 10) {
  5019  04C4  0863               	movf	get_jump@jump_counter,w
  5020  04C5  3A80               	xorlw	128
  5021  04C6  3E75               	addlw	-139
  5022  04C7  1C03               	skipc
  5023  04C8  2CCA               	goto	u1771
  5024  04C9  2CCB               	goto	u1770
  5025  04CA                     u1771:
  5026  04CA  2CD1               	goto	l2530
  5027  04CB                     u1770:
  5028  04CB                     l2526:
  5029                           
  5030                           ;main.c: 198:         jump_counter = 10;
  5031  04CB  300A               	movlw	10
  5032  04CC  00A4               	movwf	??_get_jump
  5033  04CD  0824               	movf	??_get_jump,w
  5034  04CE  00E3               	movwf	get_jump@jump_counter
  5035  04CF                     l2528:
  5036                           
  5037                           ;main.c: 199:         FLAGS.bits._JUMP_CONNECTED = 0;
  5038  04CF  127C               	bcf	_FLAGS,4
  5039                           
  5040                           ;main.c: 200:     } else if (jump_counter<-10) {
  5041  04D0  2CDD               	goto	l389
  5042  04D1                     l2530:
  5043  04D1  0863               	movf	get_jump@jump_counter,w
  5044  04D2  3A80               	xorlw	128
  5045  04D3  3E8A               	addlw	138
  5046  04D4  1803               	skipnc
  5047  04D5  2CD7               	goto	u1781
  5048  04D6  2CD8               	goto	u1780
  5049  04D7                     u1781:
  5050  04D7  2CDD               	goto	l389
  5051  04D8                     u1780:
  5052  04D8                     l2532:
  5053                           
  5054                           ;main.c: 201:         jump_counter = -10;
  5055  04D8  30F6               	movlw	246
  5056  04D9  00A4               	movwf	??_get_jump
  5057  04DA  0824               	movf	??_get_jump,w
  5058  04DB  00E3               	movwf	get_jump@jump_counter
  5059  04DC                     l2534:
  5060                           
  5061                           ;main.c: 202:         FLAGS.bits._JUMP_CONNECTED = 1;
  5062  04DC  167C               	bsf	_FLAGS,4
  5063  04DD                     l389:
  5064  04DD  0008               	return
  5065  04DE                     __end_of_get_jump:
  5066                           
  5067                           	psect	text27
  5068  0466                     __ptext27:	
  5069 ;; *************** function _get_fun *****************
  5070 ;; Defined at:
  5071 ;;		line 139 in file "main.c"
  5072 ;; Parameters:    Size  Location     Type
  5073 ;;		None
  5074 ;; Auto vars:     Size  Location     Type
  5075 ;;  res             2    5[BANK0 ] unsigned int 
  5076 ;; Return value:  Size  Location     Type
  5077 ;;                  1    wreg      void 
  5078 ;; Registers used:
  5079 ;;		wreg, status,2, status,0, pclath, cstack
  5080 ;; Tracked objects:
  5081 ;;		On entry : 0/0
  5082 ;;		On exit  : 0/0
  5083 ;;		Unchanged: 0/0
  5084 ;; Data sizes:     COMMON   BANK0   BANK1
  5085 ;;      Params:         0       0       0
  5086 ;;      Locals:         0       2       0
  5087 ;;      Temps:          0       1       0
  5088 ;;      Totals:         0       3       0
  5089 ;;Total ram usage:        3 bytes
  5090 ;; Hardware stack levels used: 1
  5091 ;; Hardware stack levels required when called: 8
  5092 ;; This function calls:
  5093 ;;		_ADC_GetConversion
  5094 ;; This function is called by:
  5095 ;;		_main
  5096 ;; This function uses a non-reentrant model
  5097 ;;
  5098                           
  5099  0466                     _get_fun:	
  5100                           ;psect for function _get_fun
  5101                           
  5102  0466                     l342:	
  5103                           ;incstack = 0
  5104                           ; Regs used in _get_fun: [wreg+status,2+status,0+pclath+cstack]
  5105                           ;main.c: 141:     static signed char fun_counter;;main.c: 142:     do { LATCbits.LATC1 =
      +                           1; } while(0);
  5106                           
  5107  0466  0022               	movlb	2	; select bank2
  5108  0467  148E               	bsf	14,1	;volatile
  5109  0468                     l344:	
  5110                           ;main.c: 143:     do { ANSELCbits.ANSC2 = 1; } while(0);
  5111                           
  5112  0468  0023               	movlb	3	; select bank3
  5113  0469  150E               	bsf	14,2	;volatile
  5114  046A                     l2488:
  5115                           
  5116                           ;main.c: 144:     unsigned res = ADC_GetConversion(PIN_FUN_STATE);
  5117  046A  3006               	movlw	6
  5118  046B  3185  25CC  3184   	fcall	_ADC_GetConversion
  5119  046E  0020               	movlb	0	; select bank0
  5120  046F  0821               	movf	?_ADC_GetConversion+1,w
  5121  0470  00A6               	movwf	get_fun@res+1
  5122  0471  0820               	movf	?_ADC_GetConversion,w
  5123  0472  00A5               	movwf	get_fun@res
  5124  0473                     l2490:
  5125  0473  0023               	movlb	3	; select bank3
  5126  0474  110E               	bcf	14,2	;volatile
  5127  0475                     l2492:
  5128  0475  0022               	movlb	2	; select bank2
  5129  0476  108E               	bcf	14,1	;volatile
  5130  0477                     l2494:
  5131                           
  5132                           ;main.c: 147:     if (res < 2000) fun_counter--;
  5133  0477  3007               	movlw	7
  5134  0478  0020               	movlb	0	; select bank0
  5135  0479  0226               	subwf	get_fun@res+1,w
  5136  047A  30D0               	movlw	208
  5137  047B  1903               	skipnz
  5138  047C  0225               	subwf	get_fun@res,w
  5139  047D  1803               	skipnc
  5140  047E  2C80               	goto	u1731
  5141  047F  2C81               	goto	u1730
  5142  0480                     u1731:
  5143  0480  2C86               	goto	l2498
  5144  0481                     u1730:
  5145  0481                     l2496:
  5146  0481  30FF               	movlw	255
  5147  0482  00A4               	movwf	??_get_fun
  5148  0483  0824               	movf	??_get_fun,w
  5149  0484  07E5               	addwf	get_fun@fun_counter,f
  5150  0485  2C8A               	goto	l2500
  5151  0486                     l2498:
  5152  0486  3001               	movlw	1
  5153  0487  00A4               	movwf	??_get_fun
  5154  0488  0824               	movf	??_get_fun,w
  5155  0489  07E5               	addwf	get_fun@fun_counter,f
  5156  048A                     l2500:
  5157                           
  5158                           ;main.c: 150:     if (fun_counter > 10) {
  5159  048A  0865               	movf	get_fun@fun_counter,w
  5160  048B  3A80               	xorlw	128
  5161  048C  3E75               	addlw	-139
  5162  048D  1C03               	skipc
  5163  048E  2C90               	goto	u1741
  5164  048F  2C91               	goto	u1740
  5165  0490                     u1741:
  5166  0490  2C97               	goto	l2506
  5167  0491                     u1740:
  5168  0491                     l2502:
  5169                           
  5170                           ;main.c: 151:         fun_counter = 10;
  5171  0491  300A               	movlw	10
  5172  0492  00A4               	movwf	??_get_fun
  5173  0493  0824               	movf	??_get_fun,w
  5174  0494  00E5               	movwf	get_fun@fun_counter
  5175  0495                     l2504:
  5176                           
  5177                           ;main.c: 152:         FLAGS.bits._FUN_CONNECTED = 0;
  5178  0495  11FC               	bcf	_FLAGS,3
  5179                           
  5180                           ;main.c: 153:     } else if (fun_counter<-10) {
  5181  0496  2CA3               	goto	l355
  5182  0497                     l2506:
  5183  0497  0865               	movf	get_fun@fun_counter,w
  5184  0498  3A80               	xorlw	128
  5185  0499  3E8A               	addlw	138
  5186  049A  1803               	skipnc
  5187  049B  2C9D               	goto	u1751
  5188  049C  2C9E               	goto	u1750
  5189  049D                     u1751:
  5190  049D  2CA3               	goto	l355
  5191  049E                     u1750:
  5192  049E                     l2508:
  5193                           
  5194                           ;main.c: 154:         fun_counter = -10;
  5195  049E  30F6               	movlw	246
  5196  049F  00A4               	movwf	??_get_fun
  5197  04A0  0824               	movf	??_get_fun,w
  5198  04A1  00E5               	movwf	get_fun@fun_counter
  5199  04A2                     l2510:
  5200                           
  5201                           ;main.c: 155:         FLAGS.bits._FUN_CONNECTED = 1;
  5202  04A2  15FC               	bsf	_FLAGS,3
  5203  04A3                     l355:
  5204  04A3  0008               	return
  5205  04A4                     __end_of_get_fun:
  5206                           
  5207                           	psect	text28
  5208  05CC                     __ptext28:	
  5209 ;; *************** function _ADC_GetConversion *****************
  5210 ;; Defined at:
  5211 ;;		line 112 in file "mcc_generated_files/adc.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;  channel         1    wreg     enum E2178
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;  channel         1    3[BANK0 ] enum E2178
  5216 ;; Return value:  Size  Location     Type
  5217 ;;                  2    0[BANK0 ] unsigned short 
  5218 ;; Registers used:
  5219 ;;		wreg, status,2, status,0
  5220 ;; Tracked objects:
  5221 ;;		On entry : 0/0
  5222 ;;		On exit  : 0/0
  5223 ;;		Unchanged: 0/0
  5224 ;; Data sizes:     COMMON   BANK0   BANK1
  5225 ;;      Params:         0       2       0
  5226 ;;      Locals:         0       1       0
  5227 ;;      Temps:          0       1       0
  5228 ;;      Totals:         0       4       0
  5229 ;;Total ram usage:        4 bytes
  5230 ;; Hardware stack levels used: 1
  5231 ;; Hardware stack levels required when called: 7
  5232 ;; This function calls:
  5233 ;;		Nothing
  5234 ;; This function is called by:
  5235 ;;		_get_fun
  5236 ;;		_get_fun_full
  5237 ;;		_get_jump
  5238 ;;		_get_jump_full
  5239 ;;		_get_voltage
  5240 ;; This function uses a non-reentrant model
  5241 ;;
  5242                           
  5243  05CC                     _ADC_GetConversion:	
  5244                           ;psect for function _ADC_GetConversion
  5245                           
  5246                           
  5247                           ;incstack = 0
  5248                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  5249                           ;ADC_GetConversion@channel stored from wreg
  5250  05CC  0020               	movlb	0	; select bank0
  5251  05CD  00A3               	movwf	ADC_GetConversion@channel
  5252  05CE                     l2152:
  5253                           
  5254                           ;mcc_generated_files/adc.c: 112: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 113: {;mcc_generated_files/adc.c: 115:     ADCON0bits.CHS = ch
      +                          annel;
  5255  05CE  0823               	movf	ADC_GetConversion@channel,w
  5256  05CF  00A2               	movwf	??_ADC_GetConversion
  5257  05D0  0DA2               	rlf	??_ADC_GetConversion,f
  5258  05D1  0DA2               	rlf	??_ADC_GetConversion,f
  5259  05D2  0021               	movlb	1	; select bank1
  5260  05D3  081D               	movf	29,w	;volatile
  5261  05D4  0020               	movlb	0	; select bank0
  5262  05D5  0622               	xorwf	??_ADC_GetConversion,w
  5263  05D6  3983               	andlw	-125
  5264  05D7  0622               	xorwf	??_ADC_GetConversion,w
  5265  05D8  0021               	movlb	1	; select bank1
  5266  05D9  009D               	movwf	29	;volatile
  5267  05DA                     l2154:
  5268                           
  5269                           ;mcc_generated_files/adc.c: 118:     ADCON0bits.ADON = 1;
  5270  05DA  141D               	bsf	29,0	;volatile
  5271  05DB                     l2156:
  5272                           
  5273                           ;mcc_generated_files/adc.c: 121:     _delay((unsigned long)((5)*(16000000/4000000.0)));
  5274  05DB  3006               	movlw	6
  5275  05DC                     u2157:
  5276  05DC  0B89               	decfsz	9,f
  5277  05DD  2DDC               	goto	u2157
  5278  05DE  3200               	nop2
  5279  05DF                     l2158:
  5280                           
  5281                           ;mcc_generated_files/adc.c: 124:     ADCON0bits.GO_nDONE = 1;
  5282  05DF  0021               	movlb	1	; select bank1
  5283  05E0  149D               	bsf	29,1	;volatile
  5284  05E1                     l63:	
  5285                           ;mcc_generated_files/adc.c: 128:     {;mcc_generated_files/adc.c: 129:     }
  5286                           
  5287                           
  5288                           ;mcc_generated_files/adc.c: 127:     while (ADCON0bits.GO_nDONE)
  5289  05E1  189D               	btfsc	29,1	;volatile
  5290  05E2  2DE4               	goto	u1241
  5291  05E3  2DE5               	goto	u1240
  5292  05E4                     u1241:
  5293  05E4  2DE1               	goto	l63
  5294  05E5                     u1240:
  5295  05E5                     l2160:
  5296                           
  5297                           ;mcc_generated_files/adc.c: 132:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  5298  05E5  081C               	movf	28,w	;volatile
  5299  05E6  0020               	movlb	0	; select bank0
  5300  05E7  00A1               	movwf	?_ADC_GetConversion+1
  5301  05E8  0021               	movlb	1	; select bank1
  5302  05E9  081B               	movf	27,w	;volatile
  5303  05EA  0020               	movlb	0	; select bank0
  5304  05EB  00A0               	movwf	?_ADC_GetConversion
  5305  05EC                     l66:
  5306  05EC  0008               	return
  5307  05ED                     __end_of_ADC_GetConversion:
  5308                           
  5309                           	psect	text29
  5310  0233                     __ptext29:	
  5311 ;; *************** function _fun_work *****************
  5312 ;; Defined at:
  5313 ;;		line 291 in file "main.c"
  5314 ;; Parameters:    Size  Location     Type
  5315 ;;		None
  5316 ;; Auto vars:     Size  Location     Type
  5317 ;;		None
  5318 ;; Return value:  Size  Location     Type
  5319 ;;                  1    wreg      void 
  5320 ;; Registers used:
  5321 ;;		wreg, status,2, status,0, pclath, cstack
  5322 ;; Tracked objects:
  5323 ;;		On entry : 0/0
  5324 ;;		On exit  : 0/0
  5325 ;;		Unchanged: 0/0
  5326 ;; Data sizes:     COMMON   BANK0   BANK1
  5327 ;;      Params:         0       0       0
  5328 ;;      Locals:         0       0       0
  5329 ;;      Temps:          0       2       0
  5330 ;;      Totals:         0       2       0
  5331 ;;Total ram usage:        2 bytes
  5332 ;; Hardware stack levels used: 1
  5333 ;; Hardware stack levels required when called: 9
  5334 ;; This function calls:
  5335 ;;		_beep
  5336 ;;		_go_close
  5337 ;;		_go_close_alt
  5338 ;;		_go_open
  5339 ;;		_go_open_alt
  5340 ;; This function is called by:
  5341 ;;		_main
  5342 ;; This function uses a non-reentrant model
  5343 ;;
  5344                           
  5345  0233                     _fun_work:	
  5346                           ;psect for function _fun_work
  5347                           
  5348  0233                     l2560:	
  5349                           ;incstack = 0
  5350                           ; Regs used in _fun_work: [wreg+status,2+status,0+pclath+cstack]
  5351                           
  5352                           
  5353                           ;main.c: 292:     {;main.c: 293:         if (FLAGS.bits._FUN_CONNECTED &&
  5354  0233  1DFC               	btfss	_FLAGS,3
  5355  0234  2A36               	goto	u1871
  5356  0235  2A37               	goto	u1870
  5357  0236                     u1871:
  5358  0236  2A60               	goto	l2576
  5359  0237                     u1870:
  5360  0237                     l2562:
  5361  0237  187C               	btfsc	_FLAGS,0
  5362  0238  2A3A               	goto	u1881
  5363  0239  2A3B               	goto	u1880
  5364  023A                     u1881:
  5365  023A  2A60               	goto	l2576
  5366  023B                     u1880:
  5367  023B                     l2564:
  5368  023B  1D7C               	btfss	_FLAGS,2
  5369  023C  2A3E               	goto	u1891
  5370  023D  2A3F               	goto	u1890
  5371  023E                     u1891:
  5372  023E  2A60               	goto	l2576
  5373  023F                     u1890:
  5374  023F                     l2566:
  5375  023F  1AFC               	btfsc	_FLAGS,5
  5376  0240  2A42               	goto	u1901
  5377  0241  2A43               	goto	u1900
  5378  0242                     u1901:
  5379  0242  2A60               	goto	l2576
  5380  0243                     u1900:
  5381  0243                     l2568:
  5382                           
  5383                           ;main.c: 296:                 !FLAGS.bits.RELE_POW_WAIT) {;main.c: 297:             if (
      +                          FLAGS.bits.NORMAL_WORK_MODE) go_open();
  5384  0243  1CFC               	btfss	_FLAGS,1
  5385  0244  2A46               	goto	u1911
  5386  0245  2A47               	goto	u1910
  5387  0246                     u1911:
  5388  0246  2A4B               	goto	l2572
  5389  0247                     u1910:
  5390  0247                     l2570:
  5391  0247  3187  2744  3182   	fcall	_go_open
  5392  024A  2A4E               	goto	l2574
  5393  024B                     l2572:
  5394  024B  3187  2780  3182   	fcall	_go_open_alt
  5395  024E                     l2574:
  5396                           
  5397                           ;main.c: 300:             beep(500, 100, 40, 1);
  5398  024E  30F4               	movlw	244
  5399  024F  0020               	movlb	0	; select bank0
  5400  0250  00A0               	movwf	beep@delay
  5401  0251  3001               	movlw	1
  5402  0252  00A1               	movwf	beep@delay+1
  5403  0253  3064               	movlw	100
  5404  0254  00A2               	movwf	beep@pause
  5405  0255  3000               	movlw	0
  5406  0256  00A3               	movwf	beep@pause+1
  5407  0257  3028               	movlw	40
  5408  0258  00AA               	movwf	??_fun_work
  5409  0259  082A               	movf	??_fun_work,w
  5410  025A  00A4               	movwf	beep@time
  5411  025B  01A5               	clrf	beep@count
  5412  025C  0AA5               	incf	beep@count,f
  5413  025D  3185  2548  3182   	fcall	_beep
  5414  0260                     l2576:
  5415                           
  5416                           ;main.c: 302:         if (!FLAGS.bits._FUN_CONNECTED &&
  5417  0260  19FC               	btfsc	_FLAGS,3
  5418  0261  2A63               	goto	u1921
  5419  0262  2A64               	goto	u1920
  5420  0263                     u1921:
  5421  0263  2A8B               	goto	l445
  5422  0264                     u1920:
  5423  0264                     l2578:
  5424  0264  197C               	btfsc	_FLAGS,2
  5425  0265  2A67               	goto	u1931
  5426  0266  2A68               	goto	u1930
  5427  0267                     u1931:
  5428  0267  2A8B               	goto	l445
  5429  0268                     u1930:
  5430  0268                     l2580:
  5431  0268  1AFC               	btfsc	_FLAGS,5
  5432  0269  2A6B               	goto	u1941
  5433  026A  2A6C               	goto	u1940
  5434  026B                     u1941:
  5435  026B  2A8B               	goto	l445
  5436  026C                     u1940:
  5437  026C                     l2582:
  5438                           
  5439                           ;main.c: 304:                 !FLAGS.bits.RELE_POW_WAIT) {;main.c: 305:             if (
      +                          FLAGS.bits.NORMAL_WORK_MODE) go_close();
  5440  026C  1CFC               	btfss	_FLAGS,1
  5441  026D  2A6F               	goto	u1951
  5442  026E  2A70               	goto	u1950
  5443  026F                     u1951:
  5444  026F  2A74               	goto	l2586
  5445  0270                     u1950:
  5446  0270                     l2584:
  5447  0270  3185  25ED  3182   	fcall	_go_close
  5448  0273  2A77               	goto	l2588
  5449  0274                     l2586:
  5450  0274  3187  2785  3182   	fcall	_go_close_alt
  5451  0277                     l2588:
  5452                           
  5453                           ;main.c: 308:             beep(500, 100, 40, 2);
  5454  0277  30F4               	movlw	244
  5455  0278  0020               	movlb	0	; select bank0
  5456  0279  00A0               	movwf	beep@delay
  5457  027A  3001               	movlw	1
  5458  027B  00A1               	movwf	beep@delay+1
  5459  027C  3064               	movlw	100
  5460  027D  00A2               	movwf	beep@pause
  5461  027E  3000               	movlw	0
  5462  027F  00A3               	movwf	beep@pause+1
  5463  0280  3028               	movlw	40
  5464  0281  00AA               	movwf	??_fun_work
  5465  0282  082A               	movf	??_fun_work,w
  5466  0283  00A4               	movwf	beep@time
  5467  0284  3002               	movlw	2
  5468  0285  00AB               	movwf	??_fun_work+1
  5469  0286  082B               	movf	??_fun_work+1,w
  5470  0287  00A5               	movwf	beep@count
  5471  0288  3185  2548  3182   	fcall	_beep
  5472  028B                     l445:
  5473  028B  0008               	return
  5474  028C                     __end_of_fun_work:
  5475                           
  5476                           	psect	text30
  5477  0780                     __ptext30:	
  5478 ;; *************** function _go_open_alt *****************
  5479 ;; Defined at:
  5480 ;;		line 108 in file "main.c"
  5481 ;; Parameters:    Size  Location     Type
  5482 ;;		None
  5483 ;; Auto vars:     Size  Location     Type
  5484 ;;		None
  5485 ;; Return value:  Size  Location     Type
  5486 ;;                  1    wreg      void 
  5487 ;; Registers used:
  5488 ;;		None
  5489 ;; Tracked objects:
  5490 ;;		On entry : 0/0
  5491 ;;		On exit  : 0/0
  5492 ;;		Unchanged: 0/0
  5493 ;; Data sizes:     COMMON   BANK0   BANK1
  5494 ;;      Params:         0       0       0
  5495 ;;      Locals:         0       0       0
  5496 ;;      Temps:          0       0       0
  5497 ;;      Totals:         0       0       0
  5498 ;;Total ram usage:        0 bytes
  5499 ;; Hardware stack levels used: 1
  5500 ;; Hardware stack levels required when called: 7
  5501 ;; This function calls:
  5502 ;;		Nothing
  5503 ;; This function is called by:
  5504 ;;		_fun_work
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508  0780                     _go_open_alt:	
  5509                           ;psect for function _go_open_alt
  5510                           
  5511  0780                     l2404:	
  5512                           ;incstack = 0
  5513                           ; Regs used in _go_open_alt: []
  5514                           
  5515                           
  5516                           ;main.c: 109:     FLAGS.bits.CLOSED = 0;
  5517  0780  117C               	bcf	_FLAGS,2
  5518  0781                     l309:	
  5519                           ;main.c: 110:     do { LATCbits.LATC4 = 0; } while(0);
  5520                           
  5521  0781  0022               	movlb	2	; select bank2
  5522  0782  120E               	bcf	14,4	;volatile
  5523  0783                     l311:	
  5524                           ;main.c: 111:     do { LATCbits.LATC5 = 0; } while(0);
  5525                           
  5526  0783  128E               	bcf	14,5	;volatile
  5527  0784                     l313:
  5528  0784  0008               	return
  5529  0785                     __end_of_go_open_alt:
  5530                           
  5531                           	psect	text31
  5532  0744                     __ptext31:	
  5533 ;; *************** function _go_open *****************
  5534 ;; Defined at:
  5535 ;;		line 94 in file "main.c"
  5536 ;; Parameters:    Size  Location     Type
  5537 ;;		None
  5538 ;; Auto vars:     Size  Location     Type
  5539 ;;		None
  5540 ;; Return value:  Size  Location     Type
  5541 ;;                  1    wreg      void 
  5542 ;; Registers used:
  5543 ;;		wreg
  5544 ;; Tracked objects:
  5545 ;;		On entry : 0/0
  5546 ;;		On exit  : 0/0
  5547 ;;		Unchanged: 0/0
  5548 ;; Data sizes:     COMMON   BANK0   BANK1
  5549 ;;      Params:         0       0       0
  5550 ;;      Locals:         0       0       0
  5551 ;;      Temps:          0       1       0
  5552 ;;      Totals:         0       1       0
  5553 ;;Total ram usage:        1 bytes
  5554 ;; Hardware stack levels used: 1
  5555 ;; Hardware stack levels required when called: 7
  5556 ;; This function calls:
  5557 ;;		Nothing
  5558 ;; This function is called by:
  5559 ;;		_povorot
  5560 ;;		_fun_work
  5561 ;; This function uses a non-reentrant model
  5562 ;;
  5563                           
  5564  0744                     _go_open:	
  5565                           ;psect for function _go_open
  5566                           
  5567  0744                     l295:	
  5568                           ;incstack = 0
  5569                           ; Regs used in _go_open: [wreg]
  5570                           ;main.c: 95:     do { LATCbits.LATC4 = 0; } while(0);
  5571                           
  5572  0744  0022               	movlb	2	; select bank2
  5573  0745  120E               	bcf	14,4	;volatile
  5574  0746                     l297:	
  5575                           ;main.c: 96:     do { LATCbits.LATC5 = 1; } while(0);
  5576                           
  5577  0746  168E               	bsf	14,5	;volatile
  5578  0747                     l2396:
  5579                           
  5580                           ;main.c: 97:     time_pow_s = 10;
  5581  0747  300A               	movlw	10
  5582  0748  0020               	movlb	0	; select bank0
  5583  0749  00A0               	movwf	??_go_open
  5584  074A  0820               	movf	??_go_open,w
  5585  074B  00E6               	movwf	_time_pow_s
  5586  074C                     l2398:
  5587                           
  5588                           ;main.c: 98:     FLAGS.bits.RELE_POW_WAIT = 1;
  5589  074C  16FC               	bsf	_FLAGS,5
  5590  074D                     l299:
  5591  074D  0008               	return
  5592  074E                     __end_of_go_open:
  5593                           
  5594                           	psect	text32
  5595  0785                     __ptext32:	
  5596 ;; *************** function _go_close_alt *****************
  5597 ;; Defined at:
  5598 ;;		line 102 in file "main.c"
  5599 ;; Parameters:    Size  Location     Type
  5600 ;;		None
  5601 ;; Auto vars:     Size  Location     Type
  5602 ;;		None
  5603 ;; Return value:  Size  Location     Type
  5604 ;;                  1    wreg      void 
  5605 ;; Registers used:
  5606 ;;		None
  5607 ;; Tracked objects:
  5608 ;;		On entry : 0/0
  5609 ;;		On exit  : 0/0
  5610 ;;		Unchanged: 0/0
  5611 ;; Data sizes:     COMMON   BANK0   BANK1
  5612 ;;      Params:         0       0       0
  5613 ;;      Locals:         0       0       0
  5614 ;;      Temps:          0       0       0
  5615 ;;      Totals:         0       0       0
  5616 ;;Total ram usage:        0 bytes
  5617 ;; Hardware stack levels used: 1
  5618 ;; Hardware stack levels required when called: 7
  5619 ;; This function calls:
  5620 ;;		Nothing
  5621 ;; This function is called by:
  5622 ;;		_fun_work
  5623 ;;		_switch_wm
  5624 ;; This function uses a non-reentrant model
  5625 ;;
  5626                           
  5627  0785                     _go_close_alt:	
  5628                           ;psect for function _go_close_alt
  5629                           
  5630  0785                     l2402:	
  5631                           ;incstack = 0
  5632                           ; Regs used in _go_close_alt: []
  5633                           
  5634                           
  5635                           ;main.c: 103:     FLAGS.bits.CLOSED = 1;
  5636  0785  157C               	bsf	_FLAGS,2
  5637  0786                     l302:	
  5638                           ;main.c: 104:     do { LATCbits.LATC4 = 0; } while(0);
  5639                           
  5640  0786  0022               	movlb	2	; select bank2
  5641  0787  120E               	bcf	14,4	;volatile
  5642  0788                     l304:	
  5643                           ;main.c: 105:     do { LATCbits.LATC5 = 1; } while(0);
  5644                           
  5645  0788  168E               	bsf	14,5	;volatile
  5646  0789                     l306:
  5647  0789  0008               	return
  5648  078A                     __end_of_go_close_alt:
  5649                           
  5650                           	psect	text33
  5651  05ED                     __ptext33:	
  5652 ;; *************** function _go_close *****************
  5653 ;; Defined at:
  5654 ;;		line 83 in file "main.c"
  5655 ;; Parameters:    Size  Location     Type
  5656 ;;		None
  5657 ;; Auto vars:     Size  Location     Type
  5658 ;;		None
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  1    wreg      void 
  5661 ;; Registers used:
  5662 ;;		wreg
  5663 ;; Tracked objects:
  5664 ;;		On entry : 0/0
  5665 ;;		On exit  : 0/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMMON   BANK0   BANK1
  5668 ;;      Params:         0       0       0
  5669 ;;      Locals:         0       0       0
  5670 ;;      Temps:          0       2       0
  5671 ;;      Totals:         0       2       0
  5672 ;;Total ram usage:        2 bytes
  5673 ;; Hardware stack levels used: 1
  5674 ;; Hardware stack levels required when called: 7
  5675 ;; This function calls:
  5676 ;;		Nothing
  5677 ;; This function is called by:
  5678 ;;		_povorot
  5679 ;;		_fun_work
  5680 ;;		_switch_wm
  5681 ;; This function uses a non-reentrant model
  5682 ;;
  5683                           
  5684  05ED                     _go_close:	
  5685                           ;psect for function _go_close
  5686                           
  5687  05ED                     l2384:	
  5688                           ;incstack = 0
  5689                           ; Regs used in _go_close: [wreg]
  5690                           
  5691                           
  5692                           ;main.c: 84:     time_s = 0;
  5693  05ED  3000               	movlw	0
  5694  05EE  0020               	movlb	0	; select bank0
  5695  05EF  00DD               	movwf	_time_s
  5696  05F0  3000               	movlw	0
  5697  05F1  00DE               	movwf	_time_s+1
  5698  05F2  3000               	movlw	0
  5699  05F3  00DF               	movwf	_time_s+2
  5700  05F4                     l2386:
  5701  05F4  0022               	movlb	2	; select bank2
  5702  05F5  160E               	bsf	14,4	;volatile
  5703  05F6                     l289:
  5704                           
  5705                           ;main.c: 86:     _delay((unsigned long)((1 * 1000)*(16000000/4000.0)));
  5706  05F6  3015               	movlw	21
  5707  05F7  0020               	movlb	0	; select bank0
  5708  05F8  00A1               	movwf	??_go_close+1
  5709  05F9  304B               	movlw	75
  5710  05FA  00A0               	movwf	??_go_close
  5711  05FB  30BE               	movlw	190
  5712  05FC                     u2167:
  5713  05FC  0B89               	decfsz	9,f
  5714  05FD  2DFC               	goto	u2167
  5715  05FE  0BA0               	decfsz	??_go_close,f
  5716  05FF  2DFC               	goto	u2167
  5717  0600  0BA1               	decfsz	??_go_close+1,f
  5718  0601  2DFC               	goto	u2167
  5719  0602  0000               	nop
  5720  0603                     l2388:
  5721  0603  0022               	movlb	2	; select bank2
  5722  0604  168E               	bsf	14,5	;volatile
  5723  0605                     l291:
  5724                           
  5725                           ;main.c: 88:     time_pow_s = 10;
  5726  0605  300A               	movlw	10
  5727  0606  0020               	movlb	0	; select bank0
  5728  0607  00A0               	movwf	??_go_close
  5729  0608  0820               	movf	??_go_close,w
  5730  0609  00E6               	movwf	_time_pow_s
  5731  060A                     l2390:
  5732                           
  5733                           ;main.c: 89:     FLAGS.bits.RELE_POW_WAIT = 1;
  5734  060A  16FC               	bsf	_FLAGS,5
  5735  060B                     l2392:
  5736                           
  5737                           ;main.c: 90:     FLAGS.bits.RELE_CON_WAIT = 1;
  5738  060B  177C               	bsf	_FLAGS,6
  5739  060C                     l292:
  5740  060C  0008               	return
  5741  060D                     __end_of_go_close:
  5742                           
  5743                           	psect	text34
  5744  0548                     __ptext34:	
  5745 ;; *************** function _beep *****************
  5746 ;; Defined at:
  5747 ;;		line 73 in file "main.c"
  5748 ;; Parameters:    Size  Location     Type
  5749 ;;  delay           2    0[BANK0 ] unsigned int 
  5750 ;;  pause           2    2[BANK0 ] unsigned int 
  5751 ;;  time            1    4[BANK0 ] unsigned char 
  5752 ;;  count           1    5[BANK0 ] unsigned char 
  5753 ;; Auto vars:     Size  Location     Type
  5754 ;;  i               1    9[BANK0 ] unsigned char 
  5755 ;;  j               1    8[BANK0 ] unsigned char 
  5756 ;; Return value:  Size  Location     Type
  5757 ;;                  1    wreg      void 
  5758 ;; Registers used:
  5759 ;;		wreg, status,2, status,0, pclath, cstack
  5760 ;; Tracked objects:
  5761 ;;		On entry : 0/0
  5762 ;;		On exit  : 0/0
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMMON   BANK0   BANK1
  5765 ;;      Params:         0       6       0
  5766 ;;      Locals:         0       2       0
  5767 ;;      Temps:          0       2       0
  5768 ;;      Totals:         0      10       0
  5769 ;;Total ram usage:       10 bytes
  5770 ;; Hardware stack levels used: 1
  5771 ;; Hardware stack levels required when called: 8
  5772 ;; This function calls:
  5773 ;;		_switch_zum
  5774 ;; This function is called by:
  5775 ;;		_fun_work
  5776 ;;		_switch_wm
  5777 ;; This function uses a non-reentrant model
  5778 ;;
  5779                           
  5780  0548                     _beep:	
  5781                           ;psect for function _beep
  5782                           
  5783  0548                     l2366:	
  5784                           ;incstack = 0
  5785                           ; Regs used in _beep: [wreg+status,2+status,0+pclath+cstack]
  5786                           
  5787                           
  5788                           ;main.c: 74:     for (char j = 0; j < count; j++) {
  5789  0548  0020               	movlb	0	; select bank0
  5790  0549  01A8               	clrf	beep@j
  5791  054A  2D70               	goto	l2382
  5792  054B                     l2368:
  5793                           
  5794                           ;main.c: 75:         for (char i = 0; i < time; i++) {
  5795  054B  01A9               	clrf	beep@i
  5796  054C  2D59               	goto	l2376
  5797  054D                     l2370:
  5798                           
  5799                           ;main.c: 76:             switch_zum();
  5800  054D  3186  26FA  3185   	fcall	_switch_zum
  5801  0550                     l2372:
  5802                           
  5803                           ;main.c: 77:             _delay((unsigned long)((300)*(16000000/4000000.0)));
  5804  0550  30F0               	movlw	240
  5805  0551                     u2177:
  5806  0551  3200               	nop2
  5807  0552  0B89               	decfsz	9,f
  5808  0553  2D51               	goto	u2177
  5809  0554                     l2374:
  5810                           
  5811                           ;main.c: 78:         }
  5812  0554  3001               	movlw	1
  5813  0555  0020               	movlb	0	; select bank0
  5814  0556  00A6               	movwf	??_beep
  5815  0557  0826               	movf	??_beep,w
  5816  0558  07A9               	addwf	beep@i,f
  5817  0559                     l2376:
  5818  0559  0824               	movf	beep@time,w
  5819  055A  0229               	subwf	beep@i,w
  5820  055B  1C03               	skipc
  5821  055C  2D5E               	goto	u1591
  5822  055D  2D5F               	goto	u1590
  5823  055E                     u1591:
  5824  055E  2D4D               	goto	l2370
  5825  055F                     u1590:
  5826  055F                     l2378:
  5827                           
  5828                           ;main.c: 79:         _delay((unsigned long)((100)*(16000000/4000.0)));
  5829  055F  3003               	movlw	3
  5830  0560  0020               	movlb	0	; select bank0
  5831  0561  00A7               	movwf	??_beep+1
  5832  0562  3008               	movlw	8
  5833  0563  00A6               	movwf	??_beep
  5834  0564  3077               	movlw	119
  5835  0565                     u2187:
  5836  0565  0B89               	decfsz	9,f
  5837  0566  2D65               	goto	u2187
  5838  0567  0BA6               	decfsz	??_beep,f
  5839  0568  2D65               	goto	u2187
  5840  0569  0BA7               	decfsz	??_beep+1,f
  5841  056A  2D65               	goto	u2187
  5842  056B                     l2380:
  5843                           
  5844                           ;main.c: 80:     }
  5845  056B  3001               	movlw	1
  5846  056C  0020               	movlb	0	; select bank0
  5847  056D  00A6               	movwf	??_beep
  5848  056E  0826               	movf	??_beep,w
  5849  056F  07A8               	addwf	beep@j,f
  5850  0570                     l2382:
  5851  0570  0825               	movf	beep@count,w
  5852  0571  0228               	subwf	beep@j,w
  5853  0572  1C03               	skipc
  5854  0573  2D75               	goto	u1601
  5855  0574  2D76               	goto	u1600
  5856  0575                     u1601:
  5857  0575  2D4B               	goto	l2368
  5858  0576                     u1600:
  5859  0576                     l285:
  5860  0576  0008               	return
  5861  0577                     __end_of_beep:
  5862                           
  5863                           	psect	text35
  5864  06FA                     __ptext35:	
  5865 ;; *************** function _switch_zum *****************
  5866 ;; Defined at:
  5867 ;;		line 65 in file "main.c"
  5868 ;; Parameters:    Size  Location     Type
  5869 ;;		None
  5870 ;; Auto vars:     Size  Location     Type
  5871 ;;		None
  5872 ;; Return value:  Size  Location     Type
  5873 ;;                  1    wreg      void 
  5874 ;; Registers used:
  5875 ;;		status,0
  5876 ;; Tracked objects:
  5877 ;;		On entry : 0/0
  5878 ;;		On exit  : 0/0
  5879 ;;		Unchanged: 0/0
  5880 ;; Data sizes:     COMMON   BANK0   BANK1
  5881 ;;      Params:         0       0       0
  5882 ;;      Locals:         0       0       0
  5883 ;;      Temps:          0       0       0
  5884 ;;      Totals:         0       0       0
  5885 ;;Total ram usage:        0 bytes
  5886 ;; Hardware stack levels used: 1
  5887 ;; Hardware stack levels required when called: 7
  5888 ;; This function calls:
  5889 ;;		Nothing
  5890 ;; This function is called by:
  5891 ;;		_beep
  5892 ;;		_start_setup
  5893 ;;		_TMR0_ISR
  5894 ;; This function uses a non-reentrant model
  5895 ;;
  5896                           
  5897  06FA                     _switch_zum:	
  5898                           ;psect for function _switch_zum
  5899                           
  5900                           
  5901                           ;Skip over the trampoline to the duplicate function for level 1
  5902  06FA  1C7E               	btfss	int$flags,0
  5903  06FB  2EFD               	goto	_switch_zum$intlevel0
  5904  06FC  2F37               	ljmp	i1_switch_zum
  5905  06FD                     _switch_zum$intlevel0:
  5906  06FD                     l271:	
  5907                           ;incstack = 0
  5908                           ; Regs used in _switch_zum: [status,0]
  5909                           ;main.c: 66:     do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  5910                           
  5911  06FD                     l2164:
  5912  06FD  1003               	clrc
  5913  06FE  0022               	movlb	2	; select bank2
  5914  06FF  1E8C               	btfss	12,5	;volatile
  5915  0700  1403               	setc
  5916  0701  1803               	btfsc	3,0
  5917  0702  2F04               	goto	u1251
  5918  0703  2F07               	goto	u1250
  5919  0704                     u1251:
  5920  0704  0022               	movlb	2	; select bank2
  5921  0705  168C               	bsf	12,5	;volatile
  5922  0706  2F09               	goto	u1264
  5923  0707                     u1250:
  5924  0707  0022               	movlb	2	; select bank2
  5925  0708  128C               	bcf	12,5	;volatile
  5926  0709                     u1264:
  5927  0709                     l273:
  5928  0709  0008               	return
  5929  070A                     __end_of_switch_zum:
  5930                           
  5931                           	psect	intentry
  5932  0004                     __pintentry:	
  5933 ;; *************** function _INTERRUPT_InterruptManager *****************
  5934 ;; Defined at:
  5935 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5936 ;; Parameters:    Size  Location     Type
  5937 ;;		None
  5938 ;; Auto vars:     Size  Location     Type
  5939 ;;		None
  5940 ;; Return value:  Size  Location     Type
  5941 ;;                  1    wreg      void 
  5942 ;; Registers used:
  5943 ;;		wreg, status,2, status,0, pclath, cstack
  5944 ;; Tracked objects:
  5945 ;;		On entry : 0/0
  5946 ;;		On exit  : 0/0
  5947 ;;		Unchanged: 0/0
  5948 ;; Data sizes:     COMMON   BANK0   BANK1
  5949 ;;      Params:         0       0       0
  5950 ;;      Locals:         0       0       0
  5951 ;;      Temps:          0       0       0
  5952 ;;      Totals:         0       0       0
  5953 ;;Total ram usage:        0 bytes
  5954 ;; Hardware stack levels used: 1
  5955 ;; Hardware stack levels required when called: 6
  5956 ;; This function calls:
  5957 ;;		_TMR0_ISR
  5958 ;;		_TMR2_ISR
  5959 ;; This function is called by:
  5960 ;;		Interrupt level 1
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964  0004                     _INTERRUPT_InterruptManager:
  5965                           
  5966                           ;incstack = 0
  5967  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  5968                           
  5969                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  5970  0005  3180               	pagesel	$
  5971  0006                     i1l2692:
  5972                           
  5973                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  5974  0006  1E8B               	btfss	11,5	;volatile
  5975  0007  2809               	goto	u205_21
  5976  0008  280A               	goto	u205_20
  5977  0009                     u205_21:
  5978  0009  2812               	goto	i1l110
  5979  000A                     u205_20:
  5980  000A                     i1l2694:
  5981  000A  1D0B               	btfss	11,2	;volatile
  5982  000B  280D               	goto	u206_21
  5983  000C  280E               	goto	u206_20
  5984  000D                     u206_21:
  5985  000D  2812               	goto	i1l110
  5986  000E                     u206_20:
  5987  000E                     i1l2696:
  5988                           
  5989                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
  5990  000E  3187  271A  3180   	fcall	_TMR0_ISR
  5991                           
  5992                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  5993  0011  2824               	goto	i1l116
  5994  0012                     i1l110:	
  5995                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
  5996                           
  5997  0012  1F0B               	btfss	11,6	;volatile
  5998  0013  2815               	goto	u207_21
  5999  0014  2816               	goto	u207_20
  6000  0015                     u207_21:
  6001  0015  2824               	goto	i1l116
  6002  0016                     u207_20:
  6003  0016                     i1l2698:
  6004                           
  6005                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  6006  0016  0021               	movlb	1	; select bank1
  6007  0017  1C91               	btfss	17,1	;volatile
  6008  0018  281A               	goto	u208_21
  6009  0019  281B               	goto	u208_20
  6010  001A                     u208_21:
  6011  001A  2824               	goto	i1l115
  6012  001B                     u208_20:
  6013  001B                     i1l2700:
  6014  001B  0020               	movlb	0	; select bank0
  6015  001C  1C91               	btfss	17,1	;volatile
  6016  001D  281F               	goto	u209_21
  6017  001E  2820               	goto	u209_20
  6018  001F                     u209_21:
  6019  001F  2824               	goto	i1l115
  6020  0020                     u209_20:
  6021  0020                     i1l2702:
  6022                           
  6023                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR2_ISR();
  6024  0020  3186  26D2  3180   	fcall	_TMR2_ISR
  6025                           
  6026                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  6027  0023  2824               	goto	i1l116
  6028  0024                     i1l115:	
  6029                           ;mcc_generated_files/interrupt_manager.c: 71:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 73:     }
  6030                           
  6031  0024                     i1l116:
  6032  0024  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  6033  0025  0009               	retfie
  6034  0026                     __end_of_INTERRUPT_InterruptManager:
  6035                           
  6036                           	psect	text37
  6037  06D2                     __ptext37:	
  6038 ;; *************** function _TMR2_ISR *****************
  6039 ;; Defined at:
  6040 ;;		line 119 in file "mcc_generated_files/tmr2.c"
  6041 ;; Parameters:    Size  Location     Type
  6042 ;;		None
  6043 ;; Auto vars:     Size  Location     Type
  6044 ;;		None
  6045 ;; Return value:  Size  Location     Type
  6046 ;;                  1    wreg      void 
  6047 ;; Registers used:
  6048 ;;		wreg, status,2, status,0, pclath, cstack
  6049 ;; Tracked objects:
  6050 ;;		On entry : 0/0
  6051 ;;		On exit  : 0/0
  6052 ;;		Unchanged: 0/0
  6053 ;; Data sizes:     COMMON   BANK0   BANK1
  6054 ;;      Params:         0       0       0
  6055 ;;      Locals:         0       0       0
  6056 ;;      Temps:          0       0       0
  6057 ;;      Totals:         0       0       0
  6058 ;;Total ram usage:        0 bytes
  6059 ;; Hardware stack levels used: 1
  6060 ;; Hardware stack levels required when called: 5
  6061 ;; This function calls:
  6062 ;;		_TMR2_CallBack
  6063 ;; This function is called by:
  6064 ;;		_INTERRUPT_InterruptManager
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068  06D2                     _TMR2_ISR:	
  6069                           ;psect for function _TMR2_ISR
  6070                           
  6071  06D2                     i1l2480:	
  6072                           ;incstack = 0
  6073                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
  6074                           
  6075                           
  6076                           ;mcc_generated_files/tmr2.c: 121:     static volatile unsigned int CountCallBack = 0;;mc
      +                          c_generated_files/tmr2.c: 124:     PIR1bits.TMR2IF = 0;
  6077  06D2  0020               	movlb	0	; select bank0
  6078  06D3  1091               	bcf	17,1	;volatile
  6079  06D4                     i1l2482:
  6080                           
  6081                           ;mcc_generated_files/tmr2.c: 127:     if (++CountCallBack >= 100)
  6082  06D4  3001               	movlw	1
  6083  06D5  07F8               	addwf	TMR2_ISR@CountCallBack,f	;volatile
  6084  06D6  3000               	movlw	0
  6085  06D7  3DF9               	addwfc	TMR2_ISR@CountCallBack+1,f	;volatile
  6086  06D8  3000               	movlw	0
  6087  06D9  0279               	subwf	TMR2_ISR@CountCallBack+1,w	;volatile
  6088  06DA  3064               	movlw	100
  6089  06DB  1903               	skipnz
  6090  06DC  0278               	subwf	TMR2_ISR@CountCallBack,w	;volatile
  6091  06DD  1C03               	skipc
  6092  06DE  2EE0               	goto	u172_21
  6093  06DF  2EE1               	goto	u172_20
  6094  06E0                     u172_21:
  6095  06E0  2EE6               	goto	i1l160
  6096  06E1                     u172_20:
  6097  06E1                     i1l2484:
  6098                           
  6099                           ;mcc_generated_files/tmr2.c: 128:     {;mcc_generated_files/tmr2.c: 130:         TMR2_Ca
      +                          llBack();
  6100  06E1  3187  272A  3186   	fcall	_TMR2_CallBack
  6101  06E4                     i1l2486:
  6102                           
  6103                           ;mcc_generated_files/tmr2.c: 133:         CountCallBack = 0;
  6104  06E4  01F8               	clrf	TMR2_ISR@CountCallBack	;volatile
  6105  06E5  01F9               	clrf	TMR2_ISR@CountCallBack+1	;volatile
  6106  06E6                     i1l160:
  6107  06E6  0008               	return
  6108  06E7                     __end_of_TMR2_ISR:
  6109                           
  6110                           	psect	text38
  6111  072A                     __ptext38:	
  6112 ;; *************** function _TMR2_CallBack *****************
  6113 ;; Defined at:
  6114 ;;		line 137 in file "mcc_generated_files/tmr2.c"
  6115 ;; Parameters:    Size  Location     Type
  6116 ;;		None
  6117 ;; Auto vars:     Size  Location     Type
  6118 ;;		None
  6119 ;; Return value:  Size  Location     Type
  6120 ;;                  1    wreg      void 
  6121 ;; Registers used:
  6122 ;;		wreg, status,2, status,0, pclath, cstack
  6123 ;; Tracked objects:
  6124 ;;		On entry : 0/0
  6125 ;;		On exit  : 0/0
  6126 ;;		Unchanged: 0/0
  6127 ;; Data sizes:     COMMON   BANK0   BANK1
  6128 ;;      Params:         0       0       0
  6129 ;;      Locals:         0       0       0
  6130 ;;      Temps:          0       0       0
  6131 ;;      Totals:         0       0       0
  6132 ;;Total ram usage:        0 bytes
  6133 ;; Hardware stack levels used: 1
  6134 ;; Hardware stack levels required when called: 4
  6135 ;; This function calls:
  6136 ;;		Absolute function
  6137 ;;		_TMR2_DefaultInterruptHandler
  6138 ;;		_sec_tick_work
  6139 ;; This function is called by:
  6140 ;;		_TMR2_ISR
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143                           
  6144  072A                     _TMR2_CallBack:	
  6145                           ;psect for function _TMR2_CallBack
  6146                           
  6147  072A                     i1l2362:	
  6148                           ;incstack = 0
  6149                           ; Regs used in _TMR2_CallBack: [wreg+status,2+status,0+pclath+cstack]
  6150                           
  6151                           
  6152                           ;mcc_generated_files/tmr2.c: 141:     if(TMR2_InterruptHandler)
  6153  072A  0020               	movlb	0	; select bank0
  6154  072B  086A               	movf	_TMR2_InterruptHandler,w
  6155  072C  046B               	iorwf	_TMR2_InterruptHandler+1,w
  6156  072D  1903               	btfsc	3,2
  6157  072E  2F30               	goto	u158_21
  6158  072F  2F31               	goto	u158_20
  6159  0730                     u158_21:
  6160  0730  2F36               	goto	i1l164
  6161  0731                     u158_20:
  6162  0731                     i1l2364:
  6163                           
  6164                           ;mcc_generated_files/tmr2.c: 142:     {;mcc_generated_files/tmr2.c: 143:         TMR2_In
      +                          terruptHandler();
  6165  0731  086B               	movf	_TMR2_InterruptHandler+1,w
  6166  0732  008A               	movwf	10
  6167  0733  086A               	movf	_TMR2_InterruptHandler,w
  6168  0734  000A               	callw
  6169  0735  3187               	pagesel	$
  6170  0736                     i1l164:
  6171  0736  0008               	return
  6172  0737                     __end_of_TMR2_CallBack:
  6173                           
  6174                           	psect	text39
  6175  07A3                     __ptext39:	
  6176 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  6177 ;; Defined at:
  6178 ;;		line 151 in file "mcc_generated_files/tmr2.c"
  6179 ;; Parameters:    Size  Location     Type
  6180 ;;		None
  6181 ;; Auto vars:     Size  Location     Type
  6182 ;;		None
  6183 ;; Return value:  Size  Location     Type
  6184 ;;                  1    wreg      void 
  6185 ;; Registers used:
  6186 ;;		None
  6187 ;; Tracked objects:
  6188 ;;		On entry : 0/0
  6189 ;;		On exit  : 0/0
  6190 ;;		Unchanged: 0/0
  6191 ;; Data sizes:     COMMON   BANK0   BANK1
  6192 ;;      Params:         0       0       0
  6193 ;;      Locals:         0       0       0
  6194 ;;      Temps:          0       0       0
  6195 ;;      Totals:         0       0       0
  6196 ;;Total ram usage:        0 bytes
  6197 ;; Hardware stack levels used: 1
  6198 ;; This function calls:
  6199 ;;		Nothing
  6200 ;; This function is called by:
  6201 ;;		_TMR2_Initialize
  6202 ;;		_TMR2_CallBack
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206  07A3                     _TMR2_DefaultInterruptHandler:	
  6207                           ;psect for function _TMR2_DefaultInterruptHandler
  6208                           
  6209  07A3                     i1l170:	
  6210                           ;incstack = 0
  6211                           ; Regs used in _TMR2_DefaultInterruptHandler: []
  6212                           
  6213  07A3  0008               	return
  6214  07A4                     __end_of_TMR2_DefaultInterruptHandler:
  6215                           
  6216                           	psect	text40
  6217  03E6                     __ptext40:	
  6218 ;; *************** function _sec_tick_work *****************
  6219 ;; Defined at:
  6220 ;;		line 251 in file "main.c"
  6221 ;; Parameters:    Size  Location     Type
  6222 ;;		None
  6223 ;; Auto vars:     Size  Location     Type
  6224 ;;		None
  6225 ;; Return value:  Size  Location     Type
  6226 ;;                  1    wreg      void 
  6227 ;; Registers used:
  6228 ;;		wreg, status,2, status,0, pclath, cstack
  6229 ;; Tracked objects:
  6230 ;;		On entry : 0/0
  6231 ;;		On exit  : 0/0
  6232 ;;		Unchanged: 0/0
  6233 ;; Data sizes:     COMMON   BANK0   BANK1
  6234 ;;      Params:         0       0       0
  6235 ;;      Locals:         0       0       0
  6236 ;;      Temps:          1       0       0
  6237 ;;      Totals:         1       0       0
  6238 ;;Total ram usage:        1 bytes
  6239 ;; Hardware stack levels used: 1
  6240 ;; Hardware stack levels required when called: 3
  6241 ;; This function calls:
  6242 ;;		_get_measure
  6243 ;;		_rele_tick
  6244 ;;		_toggle_tone
  6245 ;;		i1_switch_zum
  6246 ;; This function is called by:
  6247 ;;		_start_setup
  6248 ;;		_TMR2_CallBack
  6249 ;; This function uses a non-reentrant model
  6250 ;;
  6251                           
  6252  03E6                     _sec_tick_work:	
  6253                           ;psect for function _sec_tick_work
  6254                           
  6255  03E6                     i1l2166:	
  6256                           ;incstack = 0
  6257                           ; Regs used in _sec_tick_work: [wreg+status,2+status,0+pclath+cstack]
  6258                           
  6259                           
  6260                           ;main.c: 253:     switch_zum();
  6261  03E6  3187  2737  3183   	fcall	i1_switch_zum
  6262  03E9                     i1l2168:
  6263                           
  6264                           ;main.c: 255:     time_s++;
  6265  03E9  3001               	movlw	1
  6266  03EA  0020               	movlb	0	; select bank0
  6267  03EB  07DD               	addwf	_time_s,f
  6268  03EC  3000               	movlw	0
  6269  03ED  1803               	skipnc
  6270  03EE  3001               	movlw	1
  6271  03EF  07DE               	addwf	_time_s+1,f
  6272  03F0  3000               	movlw	0
  6273  03F1  1803               	skipnc
  6274  03F2  3001               	movlw	1
  6275  03F3  07DF               	addwf	_time_s+2,f
  6276                           
  6277                           ;main.c: 256:     rele_tick();
  6278  03F4  3185  25A2  3183   	fcall	_rele_tick
  6279  03F7  0064               	clrwdt	;# 
  6280  03F8                     i1l2170:
  6281                           
  6282                           ;main.c: 258:     if (FLAGS.bits.ALARM) {
  6283  03F8  1C7C               	btfss	_FLAGS,0
  6284  03F9  2BFB               	goto	u127_21
  6285  03FA  2BFC               	goto	u127_20
  6286  03FB                     u127_21:
  6287  03FB  2C0C               	goto	i1l2176
  6288  03FC                     u127_20:
  6289  03FC                     i1l2172:
  6290  03FC  1003               	clrc
  6291  03FD  0022               	movlb	2	; select bank2
  6292  03FE  1E0C               	btfss	12,4	;volatile
  6293  03FF  1403               	setc
  6294  0400  1803               	btfsc	3,0
  6295  0401  2C03               	goto	u128_21
  6296  0402  2C06               	goto	u128_20
  6297  0403                     u128_21:
  6298  0403  0022               	movlb	2	; select bank2
  6299  0404  160C               	bsf	12,4	;volatile
  6300  0405  2C08               	goto	u129_24
  6301  0406                     u128_20:
  6302  0406  0022               	movlb	2	; select bank2
  6303  0407  120C               	bcf	12,4	;volatile
  6304  0408                     u129_24:
  6305  0408                     i1l2174:
  6306                           
  6307                           ;main.c: 260:         toggle_tone();
  6308  0408  3187  274E  3183   	fcall	_toggle_tone
  6309                           
  6310                           ;main.c: 261:     } else {
  6311  040B  2C26               	goto	i1l431
  6312  040C                     i1l2176:
  6313                           
  6314                           ;main.c: 262:         get_measure();
  6315  040C  3185  2516  3183   	fcall	_get_measure
  6316  040F                     i1l2178:
  6317                           
  6318                           ;main.c: 263:         static char iled;;main.c: 264:         iled++;
  6319  040F  3001               	movlw	1
  6320  0410  00F7               	movwf	??_sec_tick_work
  6321  0411  0877               	movf	??_sec_tick_work,w
  6322  0412  07FA               	addwf	sec_tick_work@iled,f
  6323  0413                     i1l2180:
  6324                           
  6325                           ;main.c: 265:         if (iled > 2) {
  6326  0413  3003               	movlw	3
  6327  0414  027A               	subwf	sec_tick_work@iled,w
  6328  0415  1C03               	skipc
  6329  0416  2C18               	goto	u130_21
  6330  0417  2C19               	goto	u130_20
  6331  0418                     u130_21:
  6332  0418  2C26               	goto	i1l431
  6333  0419                     u130_20:
  6334  0419                     i1l2182:
  6335  0419  1003               	clrc
  6336  041A  0022               	movlb	2	; select bank2
  6337  041B  1E0C               	btfss	12,4	;volatile
  6338  041C  1403               	setc
  6339  041D  1803               	btfsc	3,0
  6340  041E  2C20               	goto	u131_21
  6341  041F  2C23               	goto	u131_20
  6342  0420                     u131_21:
  6343  0420  0022               	movlb	2	; select bank2
  6344  0421  160C               	bsf	12,4	;volatile
  6345  0422  2C25               	goto	u132_24
  6346  0423                     u131_20:
  6347  0423  0022               	movlb	2	; select bank2
  6348  0424  120C               	bcf	12,4	;volatile
  6349  0425                     u132_24:
  6350  0425                     i1l2184:
  6351                           
  6352                           ;main.c: 267:             iled = 0;
  6353  0425  01FA               	clrf	sec_tick_work@iled
  6354  0426                     i1l431:
  6355  0426  0008               	return
  6356  0427                     __end_of_sec_tick_work:
  6357                           
  6358                           	psect	text41
  6359  074E                     __ptext41:	
  6360 ;; *************** function _toggle_tone *****************
  6361 ;; Defined at:
  6362 ;;		line 69 in file "main.c"
  6363 ;; Parameters:    Size  Location     Type
  6364 ;;		None
  6365 ;; Auto vars:     Size  Location     Type
  6366 ;;		None
  6367 ;; Return value:  Size  Location     Type
  6368 ;;                  1    wreg      void 
  6369 ;; Registers used:
  6370 ;;		status,0
  6371 ;; Tracked objects:
  6372 ;;		On entry : 0/0
  6373 ;;		On exit  : 0/0
  6374 ;;		Unchanged: 0/0
  6375 ;; Data sizes:     COMMON   BANK0   BANK1
  6376 ;;      Params:         0       0       0
  6377 ;;      Locals:         0       0       0
  6378 ;;      Temps:          0       0       0
  6379 ;;      Totals:         0       0       0
  6380 ;;Total ram usage:        0 bytes
  6381 ;; Hardware stack levels used: 1
  6382 ;; This function calls:
  6383 ;;		Nothing
  6384 ;; This function is called by:
  6385 ;;		_sec_tick_work
  6386 ;; This function uses a non-reentrant model
  6387 ;;
  6388                           
  6389  074E                     _toggle_tone:	
  6390                           ;psect for function _toggle_tone
  6391                           
  6392  074E                     i1l2038:	
  6393                           ;incstack = 0
  6394                           ; Regs used in _toggle_tone: [status,0]
  6395                           
  6396                           
  6397                           ;main.c: 70:     INTCONbits.TMR0IE = ~INTCONbits.TMR0IE;
  6398  074E  1003               	clrc
  6399  074F  1E8B               	btfss	11,5	;volatile
  6400  0750  1403               	setc
  6401  0751  1803               	btfsc	3,0
  6402  0752  2F54               	goto	u112_21
  6403  0753  2F56               	goto	u112_20
  6404  0754                     u112_21:
  6405  0754  168B               	bsf	11,5	;volatile
  6406  0755  2F57               	goto	u113_24
  6407  0756                     u112_20:
  6408  0756  128B               	bcf	11,5	;volatile
  6409  0757                     u113_24:
  6410  0757                     i1l276:
  6411  0757  0008               	return
  6412  0758                     __end_of_toggle_tone:
  6413                           
  6414                           	psect	text42
  6415  05A2                     __ptext42:	
  6416 ;; *************** function _rele_tick *****************
  6417 ;; Defined at:
  6418 ;;		line 230 in file "main.c"
  6419 ;; Parameters:    Size  Location     Type
  6420 ;;		None
  6421 ;; Auto vars:     Size  Location     Type
  6422 ;;		None
  6423 ;; Return value:  Size  Location     Type
  6424 ;;                  1    wreg      void 
  6425 ;; Registers used:
  6426 ;;		wreg, status,2, status,0
  6427 ;; Tracked objects:
  6428 ;;		On entry : 0/0
  6429 ;;		On exit  : 0/0
  6430 ;;		Unchanged: 0/0
  6431 ;; Data sizes:     COMMON   BANK0   BANK1
  6432 ;;      Params:         0       0       0
  6433 ;;      Locals:         0       0       0
  6434 ;;      Temps:          2       0       0
  6435 ;;      Totals:         2       0       0
  6436 ;;Total ram usage:        2 bytes
  6437 ;; Hardware stack levels used: 1
  6438 ;; This function calls:
  6439 ;;		Nothing
  6440 ;; This function is called by:
  6441 ;;		_sec_tick_work
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445  05A2                     _rele_tick:	
  6446                           ;psect for function _rele_tick
  6447                           
  6448  05A2                     i1l2060:	
  6449                           ;incstack = 0
  6450                           ; Regs used in _rele_tick: [wreg+status,2+status,0]
  6451                           
  6452                           
  6453                           ;main.c: 231:     if (FLAGS.bits.RELE_POW_WAIT) {
  6454  05A2  1EFC               	btfss	_FLAGS,5
  6455  05A3  2DA5               	goto	u117_21
  6456  05A4  2DA6               	goto	u117_20
  6457  05A5                     u117_21:
  6458  05A5  2DCB               	goto	i1l419
  6459  05A6                     u117_20:
  6460  05A6                     i1l2062:
  6461                           
  6462                           ;main.c: 232:         if (time_pow_s > 0) {
  6463  05A6  0020               	movlb	0	; select bank0
  6464  05A7  0866               	movf	_time_pow_s,w
  6465  05A8  1903               	btfsc	3,2
  6466  05A9  2DAB               	goto	u118_21
  6467  05AA  2DAC               	goto	u118_20
  6468  05AB                     u118_21:
  6469  05AB  2DAF               	goto	i1l409
  6470  05AC                     u118_20:
  6471  05AC                     i1l2064:
  6472                           
  6473                           ;main.c: 233:             time_pow_s--;
  6474  05AC  3001               	movlw	1
  6475  05AD  02E6               	subwf	_time_pow_s,f
  6476                           
  6477                           ;main.c: 234:         } else {
  6478  05AE  2DCB               	goto	i1l419
  6479  05AF                     i1l409:
  6480                           
  6481                           ;main.c: 235:             if (FLAGS.bits.RELE_CON_WAIT) {
  6482  05AF  1F7C               	btfss	_FLAGS,6
  6483  05B0  2DB2               	goto	u119_21
  6484  05B1  2DB3               	goto	u119_20
  6485  05B2                     u119_21:
  6486  05B2  2DC7               	goto	i1l417
  6487  05B3                     u119_20:
  6488  05B3                     i1l412:	
  6489                           ;main.c: 236:                 do { LATCbits.LATC5 = 0; } while(0);
  6490                           
  6491  05B3  0022               	movlb	2	; select bank2
  6492  05B4  128E               	bcf	14,5	;volatile
  6493  05B5                     i1l2066:
  6494                           
  6495                           ;main.c: 237:                 _delay((unsigned long)((1 * 1000)*(16000000/4000.0)));
  6496  05B5  3015               	movlw	21
  6497  05B6  00F1               	movwf	??_rele_tick+1
  6498  05B7  304B               	movlw	75
  6499  05B8  00F0               	movwf	??_rele_tick
  6500  05B9  30BE               	movlw	190
  6501  05BA                     u219_27:
  6502  05BA  0B89               	decfsz	9,f
  6503  05BB  2DBA               	goto	u219_27
  6504  05BC  0BF0               	decfsz	??_rele_tick,f
  6505  05BD  2DBA               	goto	u219_27
  6506  05BE  0BF1               	decfsz	??_rele_tick+1,f
  6507  05BF  2DBA               	goto	u219_27
  6508  05C0  3200               	nop2
  6509  05C1                     i1l2068:
  6510  05C1  0022               	movlb	2	; select bank2
  6511  05C2  120E               	bcf	14,4	;volatile
  6512  05C3                     i1l2070:
  6513                           
  6514                           ;main.c: 239:                 FLAGS.bits.CLOSED = 1;
  6515  05C3  157C               	bsf	_FLAGS,2
  6516  05C4                     i1l2072:
  6517                           
  6518                           ;main.c: 240:                 FLAGS.bits.RELE_CON_WAIT = 0;
  6519  05C4  137C               	bcf	_FLAGS,6
  6520  05C5                     i1l2074:
  6521                           
  6522                           ;main.c: 241:                 FLAGS.bits.RELE_POW_WAIT = 0;
  6523  05C5  12FC               	bcf	_FLAGS,5
  6524                           
  6525                           ;main.c: 242:             } else {
  6526  05C6  2DCB               	goto	i1l419
  6527  05C7                     i1l417:	
  6528                           ;main.c: 243:                 do { LATCbits.LATC5 = 0; } while(0);
  6529                           
  6530  05C7  0022               	movlb	2	; select bank2
  6531  05C8  128E               	bcf	14,5	;volatile
  6532  05C9                     i1l418:
  6533                           
  6534                           ;main.c: 244:                 FLAGS.bits.CLOSED = 0;
  6535  05C9  117C               	bcf	_FLAGS,2
  6536                           
  6537                           ;main.c: 245:                 FLAGS.bits.RELE_POW_WAIT = 0;
  6538  05CA  12FC               	bcf	_FLAGS,5
  6539  05CB                     i1l419:
  6540  05CB  0008               	return
  6541  05CC                     __end_of_rele_tick:
  6542                           
  6543                           	psect	text43
  6544  0516                     __ptext43:	
  6545 ;; *************** function _get_measure *****************
  6546 ;; Defined at:
  6547 ;;		line 126 in file "main.c"
  6548 ;; Parameters:    Size  Location     Type
  6549 ;;		None
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;  res             2    5[COMMON] unsigned int 
  6552 ;; Return value:  Size  Location     Type
  6553 ;;                  1    wreg      void 
  6554 ;; Registers used:
  6555 ;;		wreg, status,2, status,0, pclath, cstack
  6556 ;; Tracked objects:
  6557 ;;		On entry : 0/0
  6558 ;;		On exit  : 0/0
  6559 ;;		Unchanged: 0/0
  6560 ;; Data sizes:     COMMON   BANK0   BANK1
  6561 ;;      Params:         0       0       0
  6562 ;;      Locals:         2       0       0
  6563 ;;      Temps:          1       0       0
  6564 ;;      Totals:         3       0       0
  6565 ;;Total ram usage:        3 bytes
  6566 ;; Hardware stack levels used: 1
  6567 ;; Hardware stack levels required when called: 2
  6568 ;; This function calls:
  6569 ;;		_start_alarm
  6570 ;;		i1_ADC_GetConversion
  6571 ;; This function is called by:
  6572 ;;		_sec_tick_work
  6573 ;; This function uses a non-reentrant model
  6574 ;;
  6575                           
  6576  0516                     _get_measure:	
  6577                           ;psect for function _get_measure
  6578                           
  6579  0516                     i1l325:	
  6580                           ;incstack = 0
  6581                           ; Regs used in _get_measure: [wreg+status,2+status,0+pclath+cstack]
  6582                           ;main.c: 127:     static unsigned char measures;;main.c: 128:     do { LATCbits.LATC1 = 
      +                          1; } while(0);
  6583                           
  6584  0516  0022               	movlb	2	; select bank2
  6585  0517  148E               	bsf	14,1	;volatile
  6586  0518                     i1l327:	
  6587                           ;main.c: 129:     do { ANSELCbits.ANSC3 = 1; } while(0);
  6588                           
  6589  0518  0023               	movlb	3	; select bank3
  6590  0519  158E               	bsf	14,3	;volatile
  6591  051A                     i1l2040:
  6592                           
  6593                           ;main.c: 130:     unsigned res = ADC_GetConversion(PIN_WSP_STATE);
  6594  051A  3007               	movlw	7
  6595  051B  3186  2647  3185   	fcall	i1_ADC_GetConversion
  6596  051E  0871               	movf	?i1_ADC_GetConversion+1,w
  6597  051F  00F6               	movwf	get_measure@res+1
  6598  0520  0870               	movf	?i1_ADC_GetConversion,w
  6599  0521  00F5               	movwf	get_measure@res
  6600  0522                     i1l2042:
  6601  0522  0023               	movlb	3	; select bank3
  6602  0523  118E               	bcf	14,3	;volatile
  6603  0524                     i1l2044:
  6604  0524  0022               	movlb	2	; select bank2
  6605  0525  108E               	bcf	14,1	;volatile
  6606  0526                     i1l2046:
  6607                           
  6608                           ;main.c: 133:     if (res < BAD_WSP_VOLTAGE) measures++;
  6609  0526  304E               	movlw	78
  6610  0527  0276               	subwf	get_measure@res+1,w
  6611  0528  3020               	movlw	32
  6612  0529  1903               	skipnz
  6613  052A  0275               	subwf	get_measure@res,w
  6614  052B  1803               	skipnc
  6615  052C  2D2E               	goto	u114_21
  6616  052D  2D2F               	goto	u114_20
  6617  052E                     u114_21:
  6618  052E  2D34               	goto	i1l2050
  6619  052F                     u114_20:
  6620  052F                     i1l2048:
  6621  052F  3001               	movlw	1
  6622  0530  00F4               	movwf	??_get_measure
  6623  0531  0874               	movf	??_get_measure,w
  6624  0532  07FB               	addwf	get_measure@measures,f
  6625  0533  2D3E               	goto	i1l2054
  6626  0534                     i1l2050:
  6627  0534  309C               	movlw	156
  6628  0535  0276               	subwf	get_measure@res+1,w
  6629  0536  3041               	movlw	65
  6630  0537  1903               	skipnz
  6631  0538  0275               	subwf	get_measure@res,w
  6632  0539  1C03               	skipc
  6633  053A  2D3C               	goto	u115_21
  6634  053B  2D3D               	goto	u115_20
  6635  053C                     u115_21:
  6636  053C  2D3E               	goto	i1l2054
  6637  053D                     u115_20:
  6638  053D                     i1l2052:
  6639  053D  01FB               	clrf	get_measure@measures
  6640  053E                     i1l2054:
  6641                           
  6642                           ;main.c: 135:     if (measures > 2) start_alarm();
  6643  053E  3003               	movlw	3
  6644  053F  027B               	subwf	get_measure@measures,w
  6645  0540  1C03               	skipc
  6646  0541  2D43               	goto	u116_21
  6647  0542  2D44               	goto	u116_20
  6648  0543                     u116_21:
  6649  0543  2D47               	goto	i1l337
  6650  0544                     u116_20:
  6651  0544                     i1l2056:
  6652  0544  3187  270A  3185   	fcall	_start_alarm
  6653  0547                     i1l337:
  6654  0547  0008               	return
  6655  0548                     __end_of_get_measure:
  6656                           
  6657                           	psect	text44
  6658  0647                     __ptext44:	
  6659 ;; *************** function i1_ADC_GetConversion *****************
  6660 ;; Defined at:
  6661 ;;		line 112 in file "mcc_generated_files/adc.c"
  6662 ;; Parameters:    Size  Location     Type
  6663 ;;  channel         1    wreg     enum E2178
  6664 ;; Auto vars:     Size  Location     Type
  6665 ;;  channel         1    3[COMMON] enum E2178
  6666 ;; Return value:  Size  Location     Type
  6667 ;;                  2    0[COMMON] unsigned short 
  6668 ;; Registers used:
  6669 ;;		wreg, status,2, status,0
  6670 ;; Tracked objects:
  6671 ;;		On entry : 0/0
  6672 ;;		On exit  : 0/0
  6673 ;;		Unchanged: 0/0
  6674 ;; Data sizes:     COMMON   BANK0   BANK1
  6675 ;;      Params:         2       0       0
  6676 ;;      Locals:         1       0       0
  6677 ;;      Temps:          1       0       0
  6678 ;;      Totals:         4       0       0
  6679 ;;Total ram usage:        4 bytes
  6680 ;; Hardware stack levels used: 1
  6681 ;; This function calls:
  6682 ;;		Nothing
  6683 ;; This function is called by:
  6684 ;;		_get_measure
  6685 ;; This function uses a non-reentrant model
  6686 ;;
  6687                           
  6688  0647                     i1_ADC_GetConversion:	
  6689                           ;psect for function i1_ADC_GetConversion
  6690                           
  6691                           
  6692                           ;incstack = 0
  6693                           ; Regs used in i1_ADC_GetConversion: [wreg+status,2+status,0]
  6694                           ;i1ADC_GetConversion@channel stored from wreg
  6695  0647  00F3               	movwf	i1ADC_GetConversion@channel
  6696  0648                     i1l2022:
  6697                           
  6698                           ;mcc_generated_files/adc.c: 112: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 113: {;mcc_generated_files/adc.c: 115:     ADCON0bits.CHS = ch
      +                          annel;
  6699  0648  0873               	movf	i1ADC_GetConversion@channel,w
  6700  0649  00F2               	movwf	??i1_ADC_GetConversion
  6701  064A  0DF2               	rlf	??i1_ADC_GetConversion,f
  6702  064B  0DF2               	rlf	??i1_ADC_GetConversion,f
  6703  064C  0021               	movlb	1	; select bank1
  6704  064D  081D               	movf	29,w	;volatile
  6705  064E  0672               	xorwf	??i1_ADC_GetConversion,w
  6706  064F  3983               	andlw	-125
  6707  0650  0672               	xorwf	??i1_ADC_GetConversion,w
  6708  0651  009D               	movwf	29	;volatile
  6709  0652                     i1l2024:
  6710                           
  6711                           ;mcc_generated_files/adc.c: 118:     ADCON0bits.ADON = 1;
  6712  0652  141D               	bsf	29,0	;volatile
  6713  0653                     i1l2026:
  6714                           
  6715                           ;mcc_generated_files/adc.c: 121:     _delay((unsigned long)((5)*(16000000/4000000.0)));
  6716  0653  3006               	movlw	6
  6717  0654                     u220_27:
  6718  0654  0B89               	decfsz	9,f
  6719  0655  2E54               	goto	u220_27
  6720  0656  3200               	nop2
  6721  0657                     i1l2028:
  6722                           
  6723                           ;mcc_generated_files/adc.c: 124:     ADCON0bits.GO_nDONE = 1;
  6724  0657  0021               	movlb	1	; select bank1
  6725  0658  149D               	bsf	29,1	;volatile
  6726  0659                     i1l63:	
  6727                           ;mcc_generated_files/adc.c: 128:     {;mcc_generated_files/adc.c: 129:     }
  6728                           
  6729                           
  6730                           ;mcc_generated_files/adc.c: 127:     while (ADCON0bits.GO_nDONE)
  6731  0659  189D               	btfsc	29,1	;volatile
  6732  065A  2E5C               	goto	u111_21
  6733  065B  2E5D               	goto	u111_20
  6734  065C                     u111_21:
  6735  065C  2E59               	goto	i1l63
  6736  065D                     u111_20:
  6737  065D                     i1l2030:
  6738                           
  6739                           ;mcc_generated_files/adc.c: 132:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  6740  065D  081C               	movf	28,w	;volatile
  6741  065E  00F1               	movwf	?i1_ADC_GetConversion+1
  6742  065F  081B               	movf	27,w	;volatile
  6743  0660  00F0               	movwf	?i1_ADC_GetConversion
  6744  0661                     i1l66:
  6745  0661  0008               	return
  6746  0662                     __end_ofi1_ADC_GetConversion:
  6747                           
  6748                           	psect	text45
  6749  070A                     __ptext45:	
  6750 ;; *************** function _start_alarm *****************
  6751 ;; Defined at:
  6752 ;;		line 115 in file "main.c"
  6753 ;; Parameters:    Size  Location     Type
  6754 ;;		None
  6755 ;; Auto vars:     Size  Location     Type
  6756 ;;		None
  6757 ;; Return value:  Size  Location     Type
  6758 ;;                  1    wreg      void 
  6759 ;; Registers used:
  6760 ;;		wreg, status,2, status,0, pclath, cstack
  6761 ;; Tracked objects:
  6762 ;;		On entry : 0/0
  6763 ;;		On exit  : 0/0
  6764 ;;		Unchanged: 0/0
  6765 ;; Data sizes:     COMMON   BANK0   BANK1
  6766 ;;      Params:         0       0       0
  6767 ;;      Locals:         0       0       0
  6768 ;;      Temps:          0       0       0
  6769 ;;      Totals:         0       0       0
  6770 ;;Total ram usage:        0 bytes
  6771 ;; Hardware stack levels used: 1
  6772 ;; Hardware stack levels required when called: 1
  6773 ;; This function calls:
  6774 ;;		i1_go_close
  6775 ;;		i1_go_close_alt
  6776 ;; This function is called by:
  6777 ;;		_get_measure
  6778 ;; This function uses a non-reentrant model
  6779 ;;
  6780                           
  6781  070A                     _start_alarm:	
  6782                           ;psect for function _start_alarm
  6783                           
  6784  070A                     i1l2006:	
  6785                           ;incstack = 0
  6786                           ; Regs used in _start_alarm: [wreg+status,2+status,0+pclath+cstack]
  6787                           
  6788                           
  6789                           ;main.c: 116:     FLAGS.bits.ALARM = 1;
  6790  070A  147C               	bsf	_FLAGS,0
  6791  070B                     i1l316:	
  6792                           ;main.c: 117:     do { LATCbits.LATC0 = 1; } while(0);
  6793                           
  6794  070B  0022               	movlb	2	; select bank2
  6795  070C  140E               	bsf	14,0	;volatile
  6796  070D                     i1l317:
  6797                           
  6798                           ;main.c: 118:     INTCONbits.TMR0IE = 1;
  6799  070D  168B               	bsf	11,5	;volatile
  6800                           
  6801                           ;main.c: 119:     if (FLAGS.bits.NORMAL_WORK_MODE) {
  6802  070E  1CFC               	btfss	_FLAGS,1
  6803  070F  2F11               	goto	u108_21
  6804  0710  2F12               	goto	u108_20
  6805  0711                     u108_21:
  6806  0711  2F16               	goto	i1l2010
  6807  0712                     u108_20:
  6808  0712                     i1l2008:
  6809                           
  6810                           ;main.c: 120:         go_close();
  6811  0712  3186  260D  3187   	fcall	i1_go_close
  6812                           
  6813                           ;main.c: 121:     } else {
  6814  0715  2F19               	goto	i1l320
  6815  0716                     i1l2010:
  6816                           
  6817                           ;main.c: 122:         go_close_alt();
  6818  0716  3187  278A  3187   	fcall	i1_go_close_alt
  6819  0719                     i1l320:
  6820  0719  0008               	return
  6821  071A                     __end_of_start_alarm:
  6822                           
  6823                           	psect	text46
  6824  078A                     __ptext46:	
  6825 ;; *************** function i1_go_close_alt *****************
  6826 ;; Defined at:
  6827 ;;		line 102 in file "main.c"
  6828 ;; Parameters:    Size  Location     Type
  6829 ;;		None
  6830 ;; Auto vars:     Size  Location     Type
  6831 ;;		None
  6832 ;; Return value:  Size  Location     Type
  6833 ;;                  1    wreg      void 
  6834 ;; Registers used:
  6835 ;;		None
  6836 ;; Tracked objects:
  6837 ;;		On entry : 0/0
  6838 ;;		On exit  : 0/0
  6839 ;;		Unchanged: 0/0
  6840 ;; Data sizes:     COMMON   BANK0   BANK1
  6841 ;;      Params:         0       0       0
  6842 ;;      Locals:         0       0       0
  6843 ;;      Temps:          0       0       0
  6844 ;;      Totals:         0       0       0
  6845 ;;Total ram usage:        0 bytes
  6846 ;; Hardware stack levels used: 1
  6847 ;; This function calls:
  6848 ;;		Nothing
  6849 ;; This function is called by:
  6850 ;;		_start_alarm
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854  078A                     i1_go_close_alt:	
  6855                           ;psect for function i1_go_close_alt
  6856                           
  6857  078A                     i1l2004:	
  6858                           ;incstack = 0
  6859                           ; Regs used in i1_go_close_alt: []
  6860                           
  6861                           
  6862                           ;main.c: 103:     FLAGS.bits.CLOSED = 1;
  6863  078A  157C               	bsf	_FLAGS,2
  6864  078B                     i1l302:	
  6865                           ;main.c: 104:     do { LATCbits.LATC4 = 0; } while(0);
  6866                           
  6867  078B  0022               	movlb	2	; select bank2
  6868  078C  120E               	bcf	14,4	;volatile
  6869  078D                     i1l304:	
  6870                           ;main.c: 105:     do { LATCbits.LATC5 = 1; } while(0);
  6871                           
  6872  078D  168E               	bsf	14,5	;volatile
  6873  078E                     i1l306:
  6874  078E  0008               	return
  6875  078F                     __end_ofi1_go_close_alt:
  6876                           
  6877                           	psect	text47
  6878  060D                     __ptext47:	
  6879 ;; *************** function i1_go_close *****************
  6880 ;; Defined at:
  6881 ;;		line 83 in file "main.c"
  6882 ;; Parameters:    Size  Location     Type
  6883 ;;		None
  6884 ;; Auto vars:     Size  Location     Type
  6885 ;;		None
  6886 ;; Return value:  Size  Location     Type
  6887 ;;                  1    wreg      void 
  6888 ;; Registers used:
  6889 ;;		wreg
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMMON   BANK0   BANK1
  6895 ;;      Params:         0       0       0
  6896 ;;      Locals:         0       0       0
  6897 ;;      Temps:          2       0       0
  6898 ;;      Totals:         2       0       0
  6899 ;;Total ram usage:        2 bytes
  6900 ;; Hardware stack levels used: 1
  6901 ;; This function calls:
  6902 ;;		Nothing
  6903 ;; This function is called by:
  6904 ;;		_start_alarm
  6905 ;; This function uses a non-reentrant model
  6906 ;;
  6907                           
  6908  060D                     i1_go_close:	
  6909                           ;psect for function i1_go_close
  6910                           
  6911  060D                     i1l1992:	
  6912                           ;incstack = 0
  6913                           ; Regs used in i1_go_close: [wreg]
  6914                           
  6915                           
  6916                           ;main.c: 84:     time_s = 0;
  6917  060D  3000               	movlw	0
  6918  060E  0020               	movlb	0	; select bank0
  6919  060F  00DD               	movwf	_time_s
  6920  0610  3000               	movlw	0
  6921  0611  00DE               	movwf	_time_s+1
  6922  0612  3000               	movlw	0
  6923  0613  00DF               	movwf	_time_s+2
  6924  0614                     i1l1994:
  6925  0614  0022               	movlb	2	; select bank2
  6926  0615  160E               	bsf	14,4	;volatile
  6927  0616                     i1l289:
  6928                           
  6929                           ;main.c: 86:     _delay((unsigned long)((1 * 1000)*(16000000/4000.0)));
  6930  0616  3015               	movlw	21
  6931  0617  00F1               	movwf	??i1_go_close+1
  6932  0618  304B               	movlw	75
  6933  0619  00F0               	movwf	??i1_go_close
  6934  061A  30BE               	movlw	190
  6935  061B                     u221_27:
  6936  061B  0B89               	decfsz	9,f
  6937  061C  2E1B               	goto	u221_27
  6938  061D  0BF0               	decfsz	??i1_go_close,f
  6939  061E  2E1B               	goto	u221_27
  6940  061F  0BF1               	decfsz	??i1_go_close+1,f
  6941  0620  2E1B               	goto	u221_27
  6942  0621  3200               	nop2
  6943  0622                     i1l1996:
  6944  0622  0022               	movlb	2	; select bank2
  6945  0623  168E               	bsf	14,5	;volatile
  6946  0624                     i1l291:
  6947                           
  6948                           ;main.c: 88:     time_pow_s = 10;
  6949  0624  300A               	movlw	10
  6950  0625  00F0               	movwf	??i1_go_close
  6951  0626  0870               	movf	??i1_go_close,w
  6952  0627  0020               	movlb	0	; select bank0
  6953  0628  00E6               	movwf	_time_pow_s
  6954  0629                     i1l1998:
  6955                           
  6956                           ;main.c: 89:     FLAGS.bits.RELE_POW_WAIT = 1;
  6957  0629  16FC               	bsf	_FLAGS,5
  6958  062A                     i1l2000:
  6959                           
  6960                           ;main.c: 90:     FLAGS.bits.RELE_CON_WAIT = 1;
  6961  062A  177C               	bsf	_FLAGS,6
  6962  062B                     i1l292:
  6963  062B  0008               	return
  6964  062C                     __end_ofi1_go_close:
  6965                           
  6966                           	psect	text48
  6967  071A                     __ptext48:	
  6968 ;; *************** function _TMR0_ISR *****************
  6969 ;; Defined at:
  6970 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  6971 ;; Parameters:    Size  Location     Type
  6972 ;;		None
  6973 ;; Auto vars:     Size  Location     Type
  6974 ;;		None
  6975 ;; Return value:  Size  Location     Type
  6976 ;;                  1    wreg      void 
  6977 ;; Registers used:
  6978 ;;		wreg, status,2, status,0, pclath, cstack
  6979 ;; Tracked objects:
  6980 ;;		On entry : 0/0
  6981 ;;		On exit  : 0/0
  6982 ;;		Unchanged: 0/0
  6983 ;; Data sizes:     COMMON   BANK0   BANK1
  6984 ;;      Params:         0       0       0
  6985 ;;      Locals:         0       0       0
  6986 ;;      Temps:          0       0       0
  6987 ;;      Totals:         0       0       0
  6988 ;;Total ram usage:        0 bytes
  6989 ;; Hardware stack levels used: 1
  6990 ;; Hardware stack levels required when called: 1
  6991 ;; This function calls:
  6992 ;;		Absolute function
  6993 ;;		_TMR0_DefaultInterruptHandler
  6994 ;;		i1_switch_zum
  6995 ;; This function is called by:
  6996 ;;		_INTERRUPT_InterruptManager
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000  071A                     _TMR0_ISR:	
  7001                           ;psect for function _TMR0_ISR
  7002                           
  7003  071A                     i1l2472:	
  7004                           ;incstack = 0
  7005                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  7006                           
  7007                           
  7008                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
  7009  071A  110B               	bcf	11,2	;volatile
  7010  071B                     i1l2474:
  7011                           
  7012                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
  7013  071B  0020               	movlb	0	; select bank0
  7014  071C  086C               	movf	_timer0ReloadVal,w	;volatile
  7015  071D  0095               	movwf	21	;volatile
  7016  071E                     i1l2476:
  7017                           
  7018                           ;mcc_generated_files/tmr0.c: 116:     if(TMR0_InterruptHandler)
  7019  071E  0868               	movf	_TMR0_InterruptHandler,w
  7020  071F  0469               	iorwf	_TMR0_InterruptHandler+1,w
  7021  0720  1903               	btfsc	3,2
  7022  0721  2F23               	goto	u171_21
  7023  0722  2F24               	goto	u171_20
  7024  0723                     u171_21:
  7025  0723  2F29               	goto	i1l200
  7026  0724                     u171_20:
  7027  0724                     i1l2478:
  7028                           
  7029                           ;mcc_generated_files/tmr0.c: 117:     {;mcc_generated_files/tmr0.c: 118:         TMR0_In
      +                          terruptHandler();
  7030  0724  0869               	movf	_TMR0_InterruptHandler+1,w
  7031  0725  008A               	movwf	10
  7032  0726  0868               	movf	_TMR0_InterruptHandler,w
  7033  0727  000A               	callw
  7034  0728  3187               	pagesel	$
  7035  0729                     i1l200:
  7036  0729  0008               	return
  7037  072A                     __end_of_TMR0_ISR:
  7038                           
  7039                           	psect	text49
  7040  07A4                     __ptext49:	
  7041 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  7042 ;; Defined at:
  7043 ;;		line 129 in file "mcc_generated_files/tmr0.c"
  7044 ;; Parameters:    Size  Location     Type
  7045 ;;		None
  7046 ;; Auto vars:     Size  Location     Type
  7047 ;;		None
  7048 ;; Return value:  Size  Location     Type
  7049 ;;                  1    wreg      void 
  7050 ;; Registers used:
  7051 ;;		None
  7052 ;; Tracked objects:
  7053 ;;		On entry : 0/0
  7054 ;;		On exit  : 0/0
  7055 ;;		Unchanged: 0/0
  7056 ;; Data sizes:     COMMON   BANK0   BANK1
  7057 ;;      Params:         0       0       0
  7058 ;;      Locals:         0       0       0
  7059 ;;      Temps:          0       0       0
  7060 ;;      Totals:         0       0       0
  7061 ;;Total ram usage:        0 bytes
  7062 ;; Hardware stack levels used: 1
  7063 ;; This function calls:
  7064 ;;		Nothing
  7065 ;; This function is called by:
  7066 ;;		_TMR0_Initialize
  7067 ;;		_TMR0_ISR
  7068 ;; This function uses a non-reentrant model
  7069 ;;
  7070                           
  7071  07A4                     _TMR0_DefaultInterruptHandler:	
  7072                           ;psect for function _TMR0_DefaultInterruptHandler
  7073                           
  7074  07A4                     i1l206:	
  7075                           ;incstack = 0
  7076                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  7077                           
  7078  07A4  0008               	return
  7079  07A5                     __end_of_TMR0_DefaultInterruptHandler:
  7080                           
  7081                           	psect	text50
  7082  0737                     __ptext50:	
  7083 ;; *************** function i1_switch_zum *****************
  7084 ;; Defined at:
  7085 ;;		line 65 in file "main.c"
  7086 ;; Parameters:    Size  Location     Type
  7087 ;;		None
  7088 ;; Auto vars:     Size  Location     Type
  7089 ;;		None
  7090 ;; Return value:  Size  Location     Type
  7091 ;;                  1    wreg      void 
  7092 ;; Registers used:
  7093 ;;		status,0
  7094 ;; Tracked objects:
  7095 ;;		On entry : 0/0
  7096 ;;		On exit  : 0/0
  7097 ;;		Unchanged: 0/0
  7098 ;; Data sizes:     COMMON   BANK0   BANK1
  7099 ;;      Params:         0       0       0
  7100 ;;      Locals:         0       0       0
  7101 ;;      Temps:          0       0       0
  7102 ;;      Totals:         0       0       0
  7103 ;;Total ram usage:        0 bytes
  7104 ;; Hardware stack levels used: 1
  7105 ;; This function calls:
  7106 ;;		Nothing
  7107 ;; This function is called by:
  7108 ;;		_sec_tick_work
  7109 ;;		_TMR0_ISR
  7110 ;; This function uses a non-reentrant model
  7111 ;;
  7112                           
  7113  0737                     i1_switch_zum:	
  7114                           ;psect for function i1_switch_zum
  7115                           
  7116  0737                     i1l271:	
  7117                           ;incstack = 0
  7118                           ; Regs used in i1_switch_zum: [status,0]
  7119                           ;main.c: 66:     do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  7120                           
  7121  0737                     i1l2098:
  7122  0737  1003               	clrc
  7123  0738  0022               	movlb	2	; select bank2
  7124  0739  1E8C               	btfss	12,5	;volatile
  7125  073A  1403               	setc
  7126  073B  1803               	btfsc	3,0
  7127  073C  2F3E               	goto	u122_21
  7128  073D  2F41               	goto	u122_20
  7129  073E                     u122_21:
  7130  073E  0022               	movlb	2	; select bank2
  7131  073F  168C               	bsf	12,5	;volatile
  7132  0740  2F43               	goto	u123_24
  7133  0741                     u122_20:
  7134  0741  0022               	movlb	2	; select bank2
  7135  0742  128C               	bcf	12,5	;volatile
  7136  0743                     u123_24:
  7137  0743                     i1l273:
  7138  0743  0008               	return
  7139  0744                     __end_ofi1_switch_zum:
  7140  007E                     btemp	set	126	;btemp
  7141  007E                     int$flags	set	126
  7142  007E                     wtemp0	set	126
  7143                           
  7144                           	psect	idloc
  7145                           
  7146                           ;Config register IDLOC0 @ 0x8000
  7147                           ;	unspecified, using default values
  7148  8000                     	org	32768
  7149  8000  3FFF               	dw	16383
  7150                           
  7151                           ;Config register IDLOC1 @ 0x8001
  7152                           ;	unspecified, using default values
  7153  8001                     	org	32769
  7154  8001  3FFF               	dw	16383
  7155                           
  7156                           ;Config register IDLOC2 @ 0x8002
  7157                           ;	unspecified, using default values
  7158  8002                     	org	32770
  7159  8002  3FFF               	dw	16383
  7160                           
  7161                           ;Config register IDLOC3 @ 0x8003
  7162                           ;	unspecified, using default values
  7163  8003                     	org	32771
  7164  8003  3FFF               	dw	16383
  7165                           
  7166                           	psect	config
  7167                           
  7168                           ;Config register CONFIG1 @ 0x8007
  7169                           ;	Oscillator Selection
  7170                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  7171                           ;	Watchdog Timer Enable
  7172                           ;	WDTE = ON, WDT enabled
  7173                           ;	Power-up Timer Enable
  7174                           ;	PWRTE = OFF, PWRT disabled
  7175                           ;	MCLR Pin Function Select
  7176                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  7177                           ;	Flash Program Memory Code Protection
  7178                           ;	CP = OFF, Program memory code protection is disabled
  7179                           ;	Data Memory Code Protection
  7180                           ;	CPD = OFF, Data memory code protection is disabled
  7181                           ;	Brown-out Reset Enable
  7182                           ;	BOREN = ON, Brown-out Reset enabled
  7183                           ;	Clock Out Enable
  7184                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  7185                           ;	Internal/External Switchover
  7186                           ;	IESO = ON, Internal/External Switchover mode is enabled
  7187                           ;	Fail-Safe Clock Monitor Enable
  7188                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  7189  8007                     	org	32775
  7190  8007  3FFC               	dw	16380
  7191                           
  7192                           ;Config register CONFIG2 @ 0x8008
  7193                           ;	Flash Memory Self-Write Protection
  7194                           ;	WRT = OFF, Write protection off
  7195                           ;	PLL Enable
  7196                           ;	PLLEN = OFF, 4x PLL disabled
  7197                           ;	Stack Overflow/Underflow Reset Enable
  7198                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  7199                           ;	Brown-out Reset Voltage Selection
  7200                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  7201                           ;	Low-Voltage Programming Enable
  7202                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  7203  8008                     	org	32776
  7204  8008  1EFF               	dw	7935

Data Sizes:
    Strings     0
    Constant    9
    Data        0
    BSS         64
    Persistent  37
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80     45      77
    BANK1            32      0      32

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> switch_zum(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> i1_switch_zum(), switch_zum(), TMR0_DefaultInterruptHandler(), Absolute function(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> sec_tick_work(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> sec_tick_work(), Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR2_CallBack->_sec_tick_work
    _sec_tick_work->_get_measure
    _get_measure->i1_ADC_GetConversion
    _start_alarm->i1_go_close

Critical Paths under _main in BANK0

    _switch_wm->_beep
    _get_jump_full->_ADC_GetConversion
    _get_fun_full->_ADC_GetConversion
    _get_eeprom->_get_time
    _get_time->_EEPROM_ReadShortLong
    _EEPROM_ReadShortLong->_EEPROM_ReadByte
    _get_adr->_EEPROM_ReadByte
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _povorot->_go_close
    _get_voltage->_EEPROM_WriteShortLong
    _EEPROM_WriteShortLong->_EEPROM_WriteByte
    _get_jump->_ADC_GetConversion
    _get_fun->_ADC_GetConversion
    _fun_work->_beep

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6905
                           _fun_work
                            _get_fun
                           _get_jump
                        _get_voltage
                            _povorot
                        _start_setup
                          _switch_wm
 ---------------------------------------------------------------------------------
 (1) _switch_wm                                            2     2      0    1308
                                             10 BANK0      2     2      0
                               _beep
                           _go_close
                       _go_close_alt
 ---------------------------------------------------------------------------------
 (1) _start_setup                                          0     0      0    2521
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
                         _get_eeprom
                       _get_fun_full
                      _get_jump_full
 ---------------------------------------------------------------------------------
 (2) _get_jump_full                                        4     4      0      70
                                              4 BANK0      4     4      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (2) _get_fun_full                                         4     4      0      70
                                              4 BANK0      4     4      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (2) _get_eeprom                                           0     0      0    1685
                            _get_adr
                           _get_time
 ---------------------------------------------------------------------------------
 (3) _get_time                                            29    29      0     977
                                             16 BANK0     29    29      0
               _EEPROM_ReadShortLong
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     196
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _EEPROM_ReadShortLong                                13    10      3     113
                                              3 BANK0     13    10      3
                    _EEPROM_ReadByte
 ---------------------------------------------------------------------------------
 (3) _get_adr                                             38    38      0     708
                                              3 BANK0     38    38      0
                    _EEPROM_ReadByte
 ---------------------------------------------------------------------------------
 (2) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     348
                     _ADC_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      1     1      0     174
                                              2 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR0_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _povorot                                              0     0      0       0
                           _go_close
                            _go_open
 ---------------------------------------------------------------------------------
 (1) _get_voltage                                          7     7      0    1678
                                             14 BANK0      7     7      0
                  _ADC_GetConversion
                    _EEPROM_ReadByte
                   _EEPROM_WriteByte
              _EEPROM_WriteShortLong
 ---------------------------------------------------------------------------------
 (2) _EEPROM_WriteShortLong                                9     6      3     853
                                              5 BANK0      9     6      3
                   _EEPROM_WriteByte
 ---------------------------------------------------------------------------------
 (3) _EEPROM_WriteByte                                     5     4      1     599
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (5) _EEPROM_ReadByte                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _get_jump                                             3     3      0      45
                                              4 BANK0      3     3      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (1) _get_fun                                              3     3      0      45
                                              4 BANK0      3     3      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversion                                    4     2      2      22
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _fun_work                                             2     2      0    1308
                                             10 BANK0      2     2      0
                               _beep
                           _go_close
                       _go_close_alt
                            _go_open
                        _go_open_alt
 ---------------------------------------------------------------------------------
 (2) _go_open_alt                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _go_open                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _go_close_alt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _go_close                                             2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _beep                                                10     4      6    1308
                                              0 BANK0     10     4      6
                         _switch_zum
 ---------------------------------------------------------------------------------
 (3) _switch_zum                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           0     0      0      67
                           _TMR0_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR2_ISR                                             0     0      0      67
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (8) _TMR2_CallBack                                        0     0      0      67
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
                      _sec_tick_work *
 ---------------------------------------------------------------------------------
 (9) _sec_tick_work                                        1     1      0      67
                                              7 COMMON     1     1      0
                        _get_measure
                          _rele_tick
                        _toggle_tone
                       i1_switch_zum
 ---------------------------------------------------------------------------------
 (10) _toggle_tone                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _rele_tick                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _get_measure                                         3     3      0      67
                                              4 COMMON     3     3      0
                        _start_alarm
                i1_ADC_GetConversion
 ---------------------------------------------------------------------------------
 (11) i1_ADC_GetConversion                                 4     2      2      22
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (11) _start_alarm                                         0     0      0       0
                         i1_go_close
                     i1_go_close_alt
 ---------------------------------------------------------------------------------
 (12) i1_go_close_alt                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_go_close                                          2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                       i1_switch_zum *
 ---------------------------------------------------------------------------------
 (10) i1_switch_zum                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fun_work
     _beep
       _switch_zum
     _go_close
     _go_close_alt
     _go_open
     _go_open_alt
   _get_fun
     _ADC_GetConversion
   _get_jump
     _ADC_GetConversion
   _get_voltage
     _ADC_GetConversion
     _EEPROM_ReadByte
     _EEPROM_WriteByte
     _EEPROM_WriteShortLong
       _EEPROM_WriteByte
   _povorot
     _go_close
     _go_open
   _start_setup
     _SYSTEM_Initialize
       _ADC_Initialize
       _FVR_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
       _TMR2_Initialize
         _TMR2_SetInterruptHandler
       _WDT_Initialize
     _TMR0_SetInterruptHandler
     _TMR2_SetInterruptHandler
     _TMR2_StartTimer
     _get_eeprom
       _get_adr
         _EEPROM_ReadByte
       _get_time
         _EEPROM_ReadShortLong
           _EEPROM_ReadByte
         ___bmul
     _get_fun_full
       _ADC_GetConversion
     _get_jump_full
       _ADC_GetConversion
   _switch_wm
     _beep
     _go_close
     _go_close_alt

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
     i1_switch_zum *
   _TMR2_ISR
     _TMR2_CallBack
       Absolute function(Fake) *
       _TMR2_DefaultInterruptHandler *
       _sec_tick_work *
         _get_measure
           _start_alarm
             i1_go_close
             i1_go_close_alt
           i1_ADC_GetConversion
         _rele_tick
         _toggle_tone
         i1_switch_zum

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      7A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2D      4D       6       96.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0      20       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      7A       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Fri Apr 29 14:36:15 2022

        __end_of_TMR2_SetInterruptHandler 077A                          get_fun_full@flag 0027  
                      get_fun@fun_counter 0065                            ___bmul@product 0022  
                   __end_of_sec_tick_work 0427                                        l31 0792  
                                      l25 06A6                                        l28 076D  
                                      l63 05E1                                        l48 075F  
                                      l66 05EC                                        l92 06D1  
                                      _RD 0CA8                                        _WR 0CA9  
                           ?_go_close_alt 0070                              ?_get_voltage 0070  
                          ?_get_jump_full 0070                    __end_of_FVR_Initialize 0797  
                         _timer0ReloadVal 006C                                       l203 077F  
                                     l213 0796                                       l302 0786  
                                     l142 07A2                                       l311 0783  
                                     l304 0788                                       l313 0784  
                                     l306 0789                                       l139 06F9  
                                     l403 03E3                                       l309 0781  
                                     l405 03E5                                       l342 0466  
                                     l510 0766                                       l271 06FD  
                                     l167 0779                                       l344 0468  
                                     l360 028C                                       l273 0709  
                                     l362 028E                                       l291 0605  
                                     l355 04A3                                       l187 06BC  
                                     l507 0133                                       l371 02CE  
                                     l292 060C                                       l380 04A4  
                                     l436 03A2                                       l285 0576  
                                     l445 028B                                       l373 02D0  
                                     l453 0304                                       l454 0318  
                                     l295 0744                                       l375 02D2  
                                     l535 0515                                       l464 0232  
                                     l448 02F8                                       l289 05F6  
                                     l297 0746                                       l561 0579  
                                     l570 067A                                       l394 03A3  
                                     l299 074D                                       l564 05A1  
                                     l389 04DD                                       l486 01D6  
                                     l582 035E                                       l567 0664  
                                     l579 0465                                       l776 0690  
                                     _GIE 005F                               _start_alarm 070A  
                                     _PR2 001B                               _start_setup 04DE  
                            ?_go_open_alt 0070                           _TMR2_Initialize 06E7  
                                     wreg 0009                                i1_go_close 060D  
                             get_jump@res 0025                                      l2012 0664  
                                    l2100 06BD                                      l2014 0669  
                                    l2110 06CD                                      l2102 06C0  
                                    l2016 066D                                      l2200 0595  
                                    l2120 0793                                      l2112 0767  
                                    l2104 06C3                                      l2018 0678  
                                    l2202 0597                                      l2122 0758  
                                    l2114 076A                                      l2106 06C5  
                                    l2034 0774                                      l2130 06EA  
                                    l2210 0134                                      l2204 0598  
                                    l2124 075B                                      l2116 076B  
                                    l2108 06C8                                      l2036 077A  
                                    l2140 06A7                                      l2132 06EB  
                                    l2220 0148                                      l2212 013F  
                                    l2206 059F                                      l2126 075C  
                                    l2150 06B5                                      l2142 06AC  
                                    l2134 06EC                                      l2118 078F  
                                    l2230 014F                                      l2310 0092  
                                    l2302 0066                                      l2160 05E5  
                                    l2152 05CE                                      l2144 06AF  
                                    l2136 06EE                                      l2128 06E7  
                                    l2240 016D                                      l2232 0159  
                                    l2224 014E                                      l2208 0134  
                                    l2080 0358                                      l2312 0098  
                                    l2304 0080                                      l2402 0785  
                                    l2154 05DA                                      l2146 06B3  
                                    l2138 06F6                                      l2250 017C  
                                    l2242 0172                                      l2234 0162  
                                    l2218 0140                                      l2090 0686  
                                    l2330 00D9                                      l2322 00A2  
                                    l2314 009F                                      l2306 0088  
                                    l2410 029B                                      l2164 06FD  
                                    l2404 0780                                      l2156 05DB  
                                    l2500 048A                                      l2148 06B4  
                                    l2260 019A                                      l2252 018B  
                                    l2236 0163                                      l2076 031B  
                                    l2092 0688                                      l2084 067D  
                                    l2332 00DD                                      l2324 00BB  
                                    l2316 00A1                                      l2308 008E  
                                    l2420 02B8                                      l2412 02A4  
                                    l2158 05DF                                      l2510 04A2  
                                    l2502 0491                                      l2190 0583  
                                    l2270 01B2                                      l2262 01A0  
                                    l2254 018C                                      l2238 0167  
                                    l2078 034A                                      l2094 068F  
                                    l2086 067E                                      l2350 0112  
                                    l2326 00D1                                      l2334 00E3  
                                    l2422 02B9                                      l2414 02A9  
                                    l2406 0290                                      l2504 0495  
                                    l2520 04BB                                      l2192 0584  
                                    l2360 07A0                                      l2280 01CD  
                                    l2272 01B6                                      l2256 0190  
                                    l2248 0173                                      l2088 0682  
                                    l2352 0118                                      l2344 00FC  
                                    l2328 00D7                                      l2336 00E7  
                                    l2432 02C9                                      l2424 02BC  
                                    l2416 02AD                                      l2408 0292  
                                    l2440 03B9                                      l2600 02FC  
                                    l2370 054D                                      l2506 0497  
                                    l2530 04D1                                      l2522 04C0  
                                    l2514 04A6                                      l2194 058E  
                                    l2186 0579                                      l2282 01D2  
                                    l2274 01BA                                      l2258 0196  
                                    l2354 012A                                      l2346 010A  
                                    l2338 00F9                                      l2290 004C  
                                    l2426 02C3                                      l2418 02B4  
                                    l2450 03CE                                      l2442 03BE  
                                    l2434 03A5                                      l2602 0301  
                                    l2380 056B                                      l2372 0550  
                                    l2508 049E                                      l2532 04D8  
                                    l2524 04C4                                      l2516 04AF  
                                    l2196 0592                                      l2188 057E  
                                    l2620 0200                                      l2604 01D7  
                                    l2540 036E                                      l2276 01C0  
                                    l2268 01A2                                      l2356 012F  
                                    l2348 010E                                      l2292 0054  
                                    l2284 003F                                      l2428 02C7  
                                    l2460 03DE                                      l2452 03D1  
                                    l2444 03C2                                      l2436 03A7  
                                    l2374 0554                                      l2382 0570  
                                    l2366 0548                                      l2390 060A  
                                    l2534 04DC                                      l2526 04CB  
                                    l2518 04B1                                      l2198 0593  
                                    l2462 0429                                      l2630 0220  
                                    l2622 0205                                      l2614 01EA  
                                    l2606 01E0                                      l2550 038C  
                                    l2542 0372                                      l2358 0691  
                                    l2278 01C8                                      l2294 0059  
                                    l2286 0042                                      l2470 0760  
                                    l2454 03D8                                      l2446 03C9  
                                    l2438 03B0                                      l2710 0632  
                                    l2376 0559                                      l2368 054B  
                                    l2392 060B                                      l2384 05ED  
                                    l2560 0233                                      l2528 04CF  
                                    l2464 0431                                      l2624 020B  
                                    l2616 01F2                                      l2608 01E9  
                                    l2552 0390                                      l2544 0376  
                                    l2296 0065                                      l2288 0042  
                                    l2456 03DC                                      l2448 03CD  
                                    l2640 04E6                                      l2632 04DE  
                                    l2712 0636                                      l2378 055F  
                                    l2386 05F4                                      l2570 0247  
                                    l2562 0237                                      l2490 0473  
                                    l2466 0442                                      l2626 0210  
                                    l2618 01F8                                      l2554 0394  
                                    l2546 037A                                      l2538 035F  
                                    l2650 04FC                                      l2642 04EE  
                                    l2634 04E1                                      l2706 062C  
                                    l2388 0603                                      l2396 0747  
                                    l2580 0268                                      l2572 024B  
                                    l2564 023B                                      l2492 0475  
                                    l2468 045C                                      l2628 021B  
                                    l2556 0398                                      l2548 037D  
                                    l2660 0505                                      l2652 04FD  
                                    l2644 04F6                                      l2636 04E2  
                                    l2708 062F                                      l2398 074C  
                                    l2582 026C                                      l2574 024E  
                                    l2566 023F                                      l2494 0477  
                                    l2558 039B                                      l2670 050B  
                                    l2662 0506                                      l2654 04FF  
                                    l2646 04F9                                      l2638 04E3  
                                    l2590 02D3                                      l2584 0270  
                                    l2568 0243                                      l2576 0260  
                                    l2496 0481                                      l2488 046A  
                                    l2672 050D                                      l2664 0507  
                                    l2656 0501                                      l2648 04FB  
                                    l2592 02D7                                      l2586 0274  
                                    l2578 0264                                      l2498 0486  
                                    l2674 0510                                      l2666 0509  
                                    l2658 0503                                      l2594 02DB  
                                    l2588 0277                                      l2676 0513  
                                    l2668 050A                                      l2596 02E0  
                                    l2598 02E3                               get_time@buf 0049  
                                    u1100 066D                                      u1101 066C  
                                    u1200 0682                                      u2000 0301  
                                    u1201 0681                                      u2001 0300  
                                    u2010 01E9                                      u1210 068F  
                                    u2011 01E8                                      u1211 068E  
                                    u2020 01F8                                      u2100 0636  
                                    u2021 01F7                                      u2101 0635  
                                    u2030 020B                                      u2031 020A  
                                    u1240 05E5                                      u2040 0232  
                                    u1400 0172                                      u1241 05E4  
                                    u2041 0231                                      u1401 0171  
                                    u1250 0707                                      u1090 0669  
                                    u1330 057E                                      u1410 017C  
                                    u1251 0704                                      u1091 0668  
                                    u1331 057D                                      u1411 017B  
                                    u1340 059E                                      u1420 0196  
                                    u1500 0098                                      u1341 059C  
                                    u2045 022E                                      u1421 0195  
                                    u1501 0097                                      _LATA 010C  
                                    u1430 01A0                                      u1510 009F  
                                    u1431 019F                                      u1511 009E  
                                    _LATC 010E                                      u1264 0709  
                                    u1600 0576                                      u1440 01B2  
                                    u1360 013C                                      u1520 00BB  
                                    u1601 0575                                      u1441 01B1  
                                    u1521 00BA                                      u1354 059F  
                                    u1450 01C0                                      u1370 014D  
                                    u1530 00E3                                      u1610 02A4  
                                    u1451 01BF                                      u1371 014C  
                                    u1531 00E2                                      u1611 02A3  
                                    u1700 0456                                      u1460 01CD  
                                    u1380 0159                                      u1540 00F9  
                                    u1620 02B4                                      u2157 05DC  
                                    u1461 01CC                                      u1381 0158  
                                    u1541 00F8                                      u1621 02B3  
                                    u1470 01D2                                      u1390 016D  
                                    u1550 010A                                      u1630 02C3  
                                    u2167 05FC                                      u1471 01D1  
                                    u1391 016C                                      u1551 0109  
                                    u1631 02C2                                      u1800 0372  
                                    u1560 0118                                      u1480 0049  
                                    u1640 02CE                                      u2177 0551  
                                    u1705 0453                                      u1801 0371  
                                    u1561 0117                                      u1545 00F5  
                                    u1641 02CD                                      u1730 0481  
                                    u1810 0376                                      u1570 012F  
                                    u1490 0080                                      u1650 03B9  
                                    u2187 0565                                      u1731 0480  
                                    u1811 0375                                      u1571 012E  
                                    u1491 007F                                      u1651 03B8  
                                    u1900 0243                                      u1740 0491  
                                    u1820 037A                                      u1660 03C9  
                                    u1901 0242                                      u1741 0490  
                                    u1821 0379                                      u1661 03C8  
                                    u1590 055F                                      u1910 0247  
                                    u1750 049E                                      u1830 038C  
                                    u1670 03D8                                      u1591 055E  
                                    u1911 0246                                      u1751 049D  
                                    u1831 038B                                      u1495 007C  
                                    u1671 03D7                                      u1920 0264  
                                    u1760 04BB                                      u1840 0390  
                                    u1680 03E3                                      u1921 0263  
                                    u1761 04BA                                      u1841 038F  
                                    u1681 03E2                                      u1930 0268  
                                    u1770 04CB                                      u1690 043C  
                                    u1850 0394                                      u1931 0267  
                                    u1771 04CA                                      u1851 0393  
                                    u1835 0388                                      u1940 026C  
                                    u1780 04D8                                      u1860 0398  
                                    u1941 026B                                      u1781 04D7  
                                    u1861 0397                                      u1950 0270  
                                    u1870 0237                                      u1790 036E  
                                    u1951 026F                                      u1871 0236  
                                    u1695 0439                                      u1791 036D  
                                    u1880 023B                                      u1960 02D7  
                                    u1881 023A                                      u1961 02D6  
                                    u1890 023F                                      u1970 02DB  
                                    u1891 023E                                      u1795 036A  
                                    u1971 02DA                                      u1980 02E0  
                                    u1981 02DF                                      u1990 02FC  
                                    u1991 02FB                                      i1l63 0659  
                                    i1l66 0661                                      _TMR0 0015  
                                    _TMR2 001A                                      _WREN 0CAA  
                                    _WPUA 020C                                      _WPUC 020E  
                                    _beep 0548                                      _main 062C  
                                    fsr0h 0005                                      fsr1h 0007  
                                    indf0 0000                                      fsr0l 0004  
                                    indf1 0001                                      fsr1l 0006  
                    EEPROM_WriteByte@addr 0023                                      btemp 007E  
                          ??_get_fun_full 0024                                      start 0026  
                       ___bmul@multiplier 0023                      __end_ofi1_switch_zum 0744  
                 get_fun_full@fun_counter 0064                            ??_go_close_alt 0020  
                 __end_of_TMR0_Initialize 06BD            ??_TMR0_DefaultInterruptHandler 0070  
                         ?_FVR_Initialize 0070             __end_of_OSCILLATOR_Initialize 076E  
                                   ?_beep 0020                                     ?_main 0070  
                            get_time@buf2 0045                                     _EEADR 0191  
                                   _FLAGS 007C                                     _T2CON 001C  
                                   i1l110 0012                                     i1l200 0729  
                                   i1l115 0024                                     i1l116 0024  
                                   i1l206 07A4                                     i1l302 078B  
                                   i1l304 078D                                     i1l320 0719  
                                   i1l160 06E6                                     i1l306 078E  
                                   i1l170 07A3                                     i1l316 070B  
                                   i1l412 05B3                                     i1l164 0736  
                                   i1l317 070D                                     i1l325 0516  
                                   i1l271 0737                                     i1l327 0518  
                                   i1l431 0426                                     i1l273 0743  
                                   i1l337 0547                                     i1l417 05C7  
                                   i1l409 05AF                                     i1l418 05C9  
                                   i1l291 0624                                     i1l419 05CB  
                                   i1l292 062B                                     i1l276 0757  
                                   i1l289 0616                                     _TRISA 008C  
                                   _TRISC 008E                 ?_TMR0_SetInterruptHandler 0020  
                         __end_of_get_adr 01D7                          __end_of_TMR0_ISR 072A  
                         __end_of_get_fun 04A4                          __end_of_TMR2_ISR 06E7  
                         __end_of_go_open 074E                                     beep@i 0029  
                                   beep@j 0028                            _WDT_Initialize 078F  
                                   pclath 000A                           __end_of_povorot 03A3  
                                   status 0003                                     wtemp0 007E  
                         _TMR2_StartTimer 07A0                              get_voltage@q 0034  
                         __initialization 0027                              __end_of_beep 0577  
                            __end_of_main 0647                           ??_get_jump_full 0024  
                 __end_of_TMR2_Initialize 06FA               ?_INTERRUPT_InterruptManager 0070  
                                  ??_beep 0026                             get_time@F2660 004D  
                _TMR2_SetInterruptHandler 0774                             get_time@F2662 0059  
                                  ??_main 004D                    __end_of_WDT_Initialize 0793  
                             ?i1_go_close 0070                       i1_ADC_GetConversion 0647  
                           get_time@q_825 004C                             get_time@q_826 004B  
                                  _ADCON0 009D                                    _ADCON1 009E  
                                  _ADRESH 009C                                    _ADRESL 009B  
                                  _EEDATA 0193                                    _EECON2 0196  
                                  _APFCON 011D                                    _ANSELA 018C  
                                  _ANSELC 018E                                    _BORCON 0116  
                           get_time@times 0034                                    i1l2000 062A  
                                  i1l2010 0716                                    i1l2004 078A  
                                  i1l2006 070A                                    i1l2030 065D  
                                  i1l2022 0648                                    i1l2008 0712  
                                  u111_20 065D                                    i1l2024 0652  
                                  i1l2040 051A                                    u111_21 065C  
                                  i1l2026 0653                                    i1l2050 0534  
                                  i1l2042 0522                                    i1l2028 0657  
                                  i1l2052 053D                                    i1l2044 0524  
                                  i1l2060 05A2                                    i1l2054 053E  
                                  i1l2046 0526                                    i1l2070 05C3  
                                  i1l2062 05A6                                    i1l2038 074E  
                                  i1l2056 0544                                    i1l2048 052F  
                                  i1l2072 05C4                                    i1l2064 05AC  
                                  u112_20 0756                                    u112_21 0754  
                                  i1l2074 05C5                                    i1l2066 05B5  
                                  i1l2170 03F8                                    i1l2068 05C1  
                                  i1l2180 0413                                    i1l2172 03FC  
                                  i1l2182 0419                                    i1l2174 0408  
                                  i1l2166 03E6                                    i1l2184 0425  
                                  i1l2176 040C                                    i1l2168 03E9  
                                  i1l2098 0737                                    i1l2178 040F  
                                  i1l2362 072A                                    u113_24 0757  
                                  i1l2364 0731                                    i1l2700 001B  
                                  i1l2702 0020                                    u122_20 0741  
                                  i1l2472 071A                                    u114_20 052F  
                                  u130_20 0419                                    i1l2480 06D2  
                                  u122_21 073E                                    u114_21 052E  
                                  u130_21 0418                                    i1l2474 071B  
                                  i1l2482 06D4                                    i1l2476 071E  
                                  i1l2484 06E1                                    i1l2478 0724  
                                  i1l2486 06E4                                    u115_20 053D  
                                  u131_20 0423                                    u115_21 053C  
                                  u131_21 0420                                    u123_24 0743  
                                  i1l2692 0006                                    i1l2694 000A  
                                  i1l1992 060D                                    u108_20 0712  
                                  u116_20 0544                                    i1l2696 000E  
                                  u108_21 0711                                    u116_21 0543  
                                  i1l1994 0614                                    i1l2698 0016  
                                  i1l1996 0622                                    u132_24 0425  
                                  i1l1998 0629                                    u220_27 0654  
                                  u117_20 05A6                                    u205_20 000A  
                                  u117_21 05A5                                    u205_21 0009  
                                  u221_27 061B                                    u118_20 05AC  
                                  u206_20 000E                                    u118_21 05AB  
                                  u206_21 000D                                    u119_20 05B3  
                                  u127_20 03FC                                    u207_20 0016  
                                  u119_21 05B2                                    u127_21 03FB  
                                  u207_21 0015                                    u128_20 0406  
                                  u208_20 001B                                    u128_21 0403  
                                  u208_21 001A                                    u209_20 0020  
                                  u209_21 001F                                    u129_24 0408  
                                  u171_20 0724                                    _FVRCON 0117  
                                  u171_21 0723                                    u219_27 05BA  
                                  u172_20 06E1                                    u172_21 06E0  
                                  u158_20 0731                                    u158_21 0730  
                        _GOOD_WSP_VOLTAGE 079A                                    _OSCCON 0099  
                                  _WDTCON 0097             __end_of_EEPROM_WriteShortLong 0466  
                    ?i1_ADC_GetConversion 0070                          __end_of_get_jump 04DE  
                        __end_of_get_time 0134                          __end_of_go_close 060D  
                                  ___bmul 067B                      _switch_zum$intlevel0 06FD  
                        ?_TMR0_Initialize 0070                         ??_EEPROM_ReadByte 0020  
                        __end_of_fun_work 028C                                    _time_s 005D  
                __end_of_EEPROM_WriteByte 05A2                                 ??_get_adr 0023  
                               ??_get_fun 0024                                 ??_go_open 0020  
                    __end_of_get_fun_full 02D3                           ?_WDT_Initialize 0070  
                          get_measure@res 0075                    EEPROM_WriteByte@status 0024  
                ADC_GetConversion@channel 0023                                 ??_povorot 0022  
                 __end_of_TMR2_StartTimer 07A3  TMR0_SetInterruptHandler@InterruptHandler 0020  
TMR2_SetInterruptHandler@InterruptHandler 0020                      __end_of_go_close_alt 078A  
                       _SYSTEM_Initialize 0691                   __end_of__initialization 003C  
                   __end_of_TMR2_CallBack 0737                        ?_SYSTEM_Initialize 0070  
                            ?_toggle_tone 0070                     ??i1_ADC_GetConversion 0072  
                     ___bmul@multiplicand 0020                  EEPROM_ReadShortLong@addr 002F  
                          __pcstackCOMMON 0070                 get_jump_full@jump_counter 0062  
                     ??_SYSTEM_Initialize 0023                                 ?_TMR0_ISR 0070  
                               ?_TMR2_ISR 0070                     __end_of_ROTATION_TIME 079A  
                        ?_TMR2_Initialize 0070                i1ADC_GetConversion@channel 0073  
                            ?_start_alarm 0070                            _OPTION_REGbits 0095  
                            ?_start_setup 0070                              i1_switch_zum 0737  
               __end_of_SYSTEM_Initialize 06A7                                __pbssBANK0 004D  
                              __pbssBANK1 00A0                          ??_FVR_Initialize 0020  
                              __pmaintext 062C                                   ?___bmul 0020  
        __end_of_TMR0_SetInterruptHandler 0780                                ??_TMR0_ISR 0070  
                              ??_TMR2_ISR 0078                                __pintentry 0004  
                        get_jump_full@res 0025                                _get_eeprom 0760  
                                 _OSCTUNE 0098                          ?_TMR2_StartTimer 0070  
                               ?_get_jump 0070                                 ?_get_time 0070  
                               ?_go_close 0070                                 ?_fun_work 0070  
                    _ADC_InterruptHandler 0060                ??_TMR2_SetInterruptHandler 0022  
                __end_of_GOOD_WSP_VOLTAGE 079D                                   __ptext1 02D3  
                                 __ptext2 04DE                       get_measure@measures 007B  
                                 __ptext3 03A3                                   __ptext4 028C  
                                 __ptext5 0760                                   __ptext6 003F  
                                 __ptext7 067B                                   __ptext8 0319  
                                 __ptext9 0134                                   _get_adr 0134  
                                 _get_fun 0466                                   _go_open 0744  
                   _OSCILLATOR_Initialize 0767                                 _T2CONbits 001C  
                ??_PIN_MANAGER_Initialize 0020                              ??i1_go_close 0070  
                                 _povorot 035F                                   clrloop0 076F  
                              ??_get_jump 0024                                ??_get_time 0030  
                              ??_go_close 0020                         __end_of_rele_tick 05CC  
                    end_of_initialization 003C                                ??_fun_work 002A  
                         _EEPROM_ReadByte 0662                              _get_fun_full 028C  
                      __end_ofi1_go_close 062C                     __end_of_get_jump_full 03E6  
                           _sec_tick_work 03E6                                _time_pow_s 0066  
                            _go_close_alt 0785                          ??_WDT_Initialize 0020  
                _TMR0_SetInterruptHandler 077A                         ?_EEPROM_WriteByte 0020  
                       __end_of_switch_wm 0319                            get_voltage@buf 0032  
                          get_voltage@res 0030                               ?_get_eeprom 0070  
                      ??_EEPROM_WriteByte 0021                                get_adr@adr 0024  
                              get_adr@buf 0048                                 _TRISAbits 008C  
                               _TRISCbits 008E                           get_fun_full@res 0025  
                              get_fun@res 0025                        EEPROM_WriteByte@dt 0020  
            __end_of_EEPROM_ReadShortLong 035F                             ??_get_measure 0074  
                   _EEPROM_WriteShortLong 0427                                _switch_zum 06FA  
    __end_of_TMR2_DefaultInterruptHandler 07A4              _TMR2_DefaultInterruptHandler 07A3  
                          __end_of___bmul 0691                            ?_sec_tick_work 0070  
                           ??_get_voltage 002E                            _ADC_Initialize 0758  
                  ?_OSCILLATOR_Initialize 0070                            i1_go_close_alt 078A  
                           ??_go_open_alt 0020                       start_initialization 0027  
                 __end_of_EEPROM_ReadByte 067B               __end_ofi1_ADC_GetConversion 0662  
                                ??___bmul 0021                    __end_of_ADC_Initialize 0760  
                     __end_of_get_measure 0548                    __end_ofi1_go_close_alt 078F  
           ?_TMR2_DefaultInterruptHandler 0070                               __pbssCOMMON 0078  
                     __end_of_get_voltage 0233                                 ___latbits 0000  
                           __pcstackBANK0 0020                       __end_of_go_open_alt 0785  
                        _START_EEPROM_ADR 0067                     _TMR0_InterruptHandler 0068  
                               __pnvBANK0 0068                    ?_EEPROM_WriteShortLong 0025  
                  _PIN_MANAGER_Initialize 06BD                           ??_sec_tick_work 0077  
                             ?_switch_zum 0070                                 beep@delay 0020  
                         ?_ADC_Initialize 0070                                 beep@count 0025  
                               beep@pause 0022                           ?i1_go_close_alt 0070  
            ??_INTERRUPT_InterruptManager 0078               EEPROM_WriteShortLong@ucData 0025  
                                ?_get_adr 0070                                  ?_get_fun 0070  
                                ?_go_open 0070                      _EEPROM_ReadShortLong 0319  
                       sec_tick_work@iled 007A                                  ?_povorot 0070  
                      get_time@time_count 0040                          ?_EEPROM_ReadByte 0070  
                       ??_TMR0_Initialize 0022                         get_jump_full@flag 0027  
                                _LATAbits 010C                                  _LATCbits 010E  
                               _rele_tick 05A2                                 clear_ram0 076E  
                           _TMR2_CallBack 072A                                  _PIE1bits 0091  
                             _get_measure 0516                ??_TMR0_SetInterruptHandler 0022  
                                _PIR1bits 0011                                  _TMR0_ISR 071A  
                                _TMR2_ISR 06D2                             _ROTATION_TIME 0797  
                             _get_voltage 01D7                                _ADCON0bits 009D  
                   ?_EEPROM_ReadShortLong 0023                                  _WPUAbits 020C  
                                _WPUCbits 020E                                 get_time@i 0048  
                               get_time@q 004A                              ??_get_eeprom 004D  
          ??_TMR2_DefaultInterruptHandler 0070                               _go_open_alt 0780  
               ?_TMR2_SetInterruptHandler 0020                         get_time@adr_error 0044  
                               _switch_wm 02D3                         ??_TMR2_Initialize 0022  
                          ?_TMR2_CallBack 0070                                ?_rele_tick 0070  
                           ??_toggle_tone 0070                         _ADC_GetConversion 05CC  
                      __end_of_get_eeprom 0767                   ??_OSCILLATOR_Initialize 0020  
                      ?_ADC_GetConversion 0020                    EEPROM_ReadShortLong@dt 002C  
                           ??_start_alarm 0072                                _ANSELAbits 018C  
                              _ANSELCbits 018E                       ??_ADC_GetConversion 0022  
                           ??_start_setup 004D                   EEPROM_WriteShortLong@dt 002C  
                              ?_switch_wm 0070                                  __ptext10 07A0  
                                __ptext11 0691                                  __ptext20 0758  
                                __ptext12 078F                                  __ptext21 035F  
                                __ptext13 06E7                                  __ptext30 0780  
                                __ptext22 01D7                                  __ptext14 0774  
                                __ptext31 0744                                  __ptext23 0427  
                                __ptext15 06A7                                  __ptext40 03E6  
                                __ptext32 0785                                  __ptext24 0577  
                                __ptext16 077A                                  __ptext41 074E  
                                __ptext33 05ED                                  __ptext25 0662  
                                __ptext17 06BD                                  __ptext50 0737  
                                __ptext42 05A2                                  __ptext34 0548  
                                __ptext26 04A4                                  __ptext18 0767  
                                __ptext43 0516                                  __ptext35 06FA  
                                __ptext27 0466                                  __ptext19 0793  
                                __ptext44 0647                                  __ptext28 05CC  
                                __ptext45 070A                                  __ptext37 06D2  
                                __ptext29 0233                                  __ptext46 078A  
                                __ptext38 072A                                  __ptext47 060D  
                                __ptext39 07A3                                  __ptext48 071A  
                                __ptext49 07A4                             ?i1_switch_zum 0070  
                                beep@time 0024                                  _get_jump 04A4  
                                _get_time 003F                                  _go_close 05ED  
                         _BAD_WSP_VOLTAGE 079D                                  _fun_work 0233  
    __end_of_TMR0_DefaultInterruptHandler 07A5              _TMR0_DefaultInterruptHandler 07A4  
               __end_of_ADC_GetConversion 05ED                                  int$flags 007E  
                                get_adr@i 0044                                  get_adr@q 0045  
                       ??_TMR2_StartTimer 0020                       __end_of_toggle_tone 0758  
      __end_of_INTERRUPT_InterruptManager 0026                _INTERRUPT_InterruptManager 0004  
                  ??_EEPROM_ReadShortLong 0026                      get_jump@jump_counter 0063  
                              _INTCONbits 000B                                _FVRCONbits 0117  
                          ??i1_switch_zum 0070                       __end_of_start_alarm 071A  
                     __end_of_start_setup 0516                                  intlevel1 0000  
                         ??_TMR2_CallBack 0078                   ??_EEPROM_WriteShortLong 0028  
               EEPROM_WriteShortLong@addr 002D                   ?_PIN_MANAGER_Initialize 0070  
                             ??_rele_tick 0070                       EEPROM_ReadByte@addr 0022  
                        ??_ADC_Initialize 0020             ?_TMR0_DefaultInterruptHandler 0070  
                        ??i1_go_close_alt 0070                              ??_switch_zum 0020  
                           _get_jump_full 03A3                             __pstringtext1 0797  
                           __pstringtext2 079A                             __pstringtext3 079D  
                          _FVR_Initialize 0793                                _OPTION_REG 0095  
                        get_voltage@q_804 0033                     TMR2_ISR@CountCallBack 0078  
                         _TMR0_Initialize 06A7                   __end_of_BAD_WSP_VOLTAGE 07A0  
                             ??_switch_wm 002A                              get_adr@F2640 00A0  
                      __end_of_switch_zum 070A            __end_of_PIN_MANAGER_Initialize 06D2  
                        _EEPROM_WriteByte 0577                              get_adr@i_814 0046  
                            get_adr@q_813 0047                     _TMR2_InterruptHandler 006A  
                             _toggle_tone 074E                             ?_get_fun_full 0070  
                            ?_get_measure 0070  
