

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Fri Apr 29 14:36:55 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og9 
     1                           	processor	16F1823
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	intentry,global,class=CODE,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,delta=2
    60                           	psect	text45,local,class=CODE,merge=1,delta=2
    61                           	psect	text46,local,class=CODE,merge=1,delta=2
    62                           	psect	text47,local,class=CODE,merge=1,delta=2
    63                           	psect	text48,local,class=CODE,merge=1,delta=2
    64                           	psect	text49,local,class=CODE,merge=1,delta=2
    65                           	psect	text50,local,class=CODE,merge=1,delta=2
    66                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    67                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    68                           	dabs	1,0x7E,2
    69  0000                     
    70                           ; Version 2.40
    71                           ; Generated 17/11/2021 GMT
    72                           ; 
    73                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution. Publication is not required when
    87                           ;        this file is used in an embedded application.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC16F1823 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     	;# 
   106  0001                     	;# 
   107  0002                     	;# 
   108  0003                     	;# 
   109  0004                     	;# 
   110  0005                     	;# 
   111  0006                     	;# 
   112  0007                     	;# 
   113  0008                     	;# 
   114  0009                     	;# 
   115  000A                     	;# 
   116  000B                     	;# 
   117  000C                     	;# 
   118  000E                     	;# 
   119  0011                     	;# 
   120  0012                     	;# 
   121  0015                     	;# 
   122  0016                     	;# 
   123  0016                     	;# 
   124  0017                     	;# 
   125  0018                     	;# 
   126  0019                     	;# 
   127  001A                     	;# 
   128  001B                     	;# 
   129  001C                     	;# 
   130  001E                     	;# 
   131  001F                     	;# 
   132  008C                     	;# 
   133  008E                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0095                     	;# 
   137  0096                     	;# 
   138  0097                     	;# 
   139  0098                     	;# 
   140  0099                     	;# 
   141  009A                     	;# 
   142  009B                     	;# 
   143  009B                     	;# 
   144  009C                     	;# 
   145  009D                     	;# 
   146  009E                     	;# 
   147  010C                     	;# 
   148  010E                     	;# 
   149  0111                     	;# 
   150  0112                     	;# 
   151  0113                     	;# 
   152  0114                     	;# 
   153  0115                     	;# 
   154  0116                     	;# 
   155  0117                     	;# 
   156  0118                     	;# 
   157  0119                     	;# 
   158  011A                     	;# 
   159  011B                     	;# 
   160  011D                     	;# 
   161  011D                     	;# 
   162  018C                     	;# 
   163  018E                     	;# 
   164  0191                     	;# 
   165  0191                     	;# 
   166  0192                     	;# 
   167  0193                     	;# 
   168  0193                     	;# 
   169  0193                     	;# 
   170  0194                     	;# 
   171  0195                     	;# 
   172  0196                     	;# 
   173  0199                     	;# 
   174  019A                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019D                     	;# 
   182  019E                     	;# 
   183  019F                     	;# 
   184  020C                     	;# 
   185  020E                     	;# 
   186  0211                     	;# 
   187  0211                     	;# 
   188  0212                     	;# 
   189  0212                     	;# 
   190  0213                     	;# 
   191  0213                     	;# 
   192  0214                     	;# 
   193  0214                     	;# 
   194  0215                     	;# 
   195  0215                     	;# 
   196  0215                     	;# 
   197  0216                     	;# 
   198  0216                     	;# 
   199  0217                     	;# 
   200  0217                     	;# 
   201  0291                     	;# 
   202  0291                     	;# 
   203  0292                     	;# 
   204  0293                     	;# 
   205  0294                     	;# 
   206  0295                     	;# 
   207  0295                     	;# 
   208  0296                     	;# 
   209  0391                     	;# 
   210  0392                     	;# 
   211  0393                     	;# 
   212  039A                     	;# 
   213  039C                     	;# 
   214  039D                     	;# 
   215  039E                     	;# 
   216  039F                     	;# 
   217  0FE4                     	;# 
   218  0FE5                     	;# 
   219  0FE6                     	;# 
   220  0FE7                     	;# 
   221  0FE8                     	;# 
   222  0FE9                     	;# 
   223  0FEA                     	;# 
   224  0FEB                     	;# 
   225  0FED                     	;# 
   226  0FEE                     	;# 
   227  0FEF                     	;# 
   228  0000                     	;# 
   229  0001                     	;# 
   230  0002                     	;# 
   231  0003                     	;# 
   232  0004                     	;# 
   233  0005                     	;# 
   234  0006                     	;# 
   235  0007                     	;# 
   236  0008                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000E                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0015                     	;# 
   245  0016                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001C                     	;# 
   253  001E                     	;# 
   254  001F                     	;# 
   255  008C                     	;# 
   256  008E                     	;# 
   257  0091                     	;# 
   258  0092                     	;# 
   259  0095                     	;# 
   260  0096                     	;# 
   261  0097                     	;# 
   262  0098                     	;# 
   263  0099                     	;# 
   264  009A                     	;# 
   265  009B                     	;# 
   266  009B                     	;# 
   267  009C                     	;# 
   268  009D                     	;# 
   269  009E                     	;# 
   270  010C                     	;# 
   271  010E                     	;# 
   272  0111                     	;# 
   273  0112                     	;# 
   274  0113                     	;# 
   275  0114                     	;# 
   276  0115                     	;# 
   277  0116                     	;# 
   278  0117                     	;# 
   279  0118                     	;# 
   280  0119                     	;# 
   281  011A                     	;# 
   282  011B                     	;# 
   283  011D                     	;# 
   284  011D                     	;# 
   285  018C                     	;# 
   286  018E                     	;# 
   287  0191                     	;# 
   288  0191                     	;# 
   289  0192                     	;# 
   290  0193                     	;# 
   291  0193                     	;# 
   292  0193                     	;# 
   293  0194                     	;# 
   294  0195                     	;# 
   295  0196                     	;# 
   296  0199                     	;# 
   297  019A                     	;# 
   298  019B                     	;# 
   299  019B                     	;# 
   300  019B                     	;# 
   301  019B                     	;# 
   302  019C                     	;# 
   303  019C                     	;# 
   304  019D                     	;# 
   305  019E                     	;# 
   306  019F                     	;# 
   307  020C                     	;# 
   308  020E                     	;# 
   309  0211                     	;# 
   310  0211                     	;# 
   311  0212                     	;# 
   312  0212                     	;# 
   313  0213                     	;# 
   314  0213                     	;# 
   315  0214                     	;# 
   316  0214                     	;# 
   317  0215                     	;# 
   318  0215                     	;# 
   319  0215                     	;# 
   320  0216                     	;# 
   321  0216                     	;# 
   322  0217                     	;# 
   323  0217                     	;# 
   324  0291                     	;# 
   325  0291                     	;# 
   326  0292                     	;# 
   327  0293                     	;# 
   328  0294                     	;# 
   329  0295                     	;# 
   330  0295                     	;# 
   331  0296                     	;# 
   332  0391                     	;# 
   333  0392                     	;# 
   334  0393                     	;# 
   335  039A                     	;# 
   336  039C                     	;# 
   337  039D                     	;# 
   338  039E                     	;# 
   339  039F                     	;# 
   340  0FE4                     	;# 
   341  0FE5                     	;# 
   342  0FE6                     	;# 
   343  0FE7                     	;# 
   344  0FE8                     	;# 
   345  0FE9                     	;# 
   346  0FEA                     	;# 
   347  0FEB                     	;# 
   348  0FED                     	;# 
   349  0FEE                     	;# 
   350  0FEF                     	;# 
   351  0000                     	;# 
   352  0001                     	;# 
   353  0002                     	;# 
   354  0003                     	;# 
   355  0004                     	;# 
   356  0005                     	;# 
   357  0006                     	;# 
   358  0007                     	;# 
   359  0008                     	;# 
   360  0009                     	;# 
   361  000A                     	;# 
   362  000B                     	;# 
   363  000C                     	;# 
   364  000E                     	;# 
   365  0011                     	;# 
   366  0012                     	;# 
   367  0015                     	;# 
   368  0016                     	;# 
   369  0016                     	;# 
   370  0017                     	;# 
   371  0018                     	;# 
   372  0019                     	;# 
   373  001A                     	;# 
   374  001B                     	;# 
   375  001C                     	;# 
   376  001E                     	;# 
   377  001F                     	;# 
   378  008C                     	;# 
   379  008E                     	;# 
   380  0091                     	;# 
   381  0092                     	;# 
   382  0095                     	;# 
   383  0096                     	;# 
   384  0097                     	;# 
   385  0098                     	;# 
   386  0099                     	;# 
   387  009A                     	;# 
   388  009B                     	;# 
   389  009B                     	;# 
   390  009C                     	;# 
   391  009D                     	;# 
   392  009E                     	;# 
   393  010C                     	;# 
   394  010E                     	;# 
   395  0111                     	;# 
   396  0112                     	;# 
   397  0113                     	;# 
   398  0114                     	;# 
   399  0115                     	;# 
   400  0116                     	;# 
   401  0117                     	;# 
   402  0118                     	;# 
   403  0119                     	;# 
   404  011A                     	;# 
   405  011B                     	;# 
   406  011D                     	;# 
   407  011D                     	;# 
   408  018C                     	;# 
   409  018E                     	;# 
   410  0191                     	;# 
   411  0191                     	;# 
   412  0192                     	;# 
   413  0193                     	;# 
   414  0193                     	;# 
   415  0193                     	;# 
   416  0194                     	;# 
   417  0195                     	;# 
   418  0196                     	;# 
   419  0199                     	;# 
   420  019A                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019C                     	;# 
   426  019C                     	;# 
   427  019D                     	;# 
   428  019E                     	;# 
   429  019F                     	;# 
   430  020C                     	;# 
   431  020E                     	;# 
   432  0211                     	;# 
   433  0211                     	;# 
   434  0212                     	;# 
   435  0212                     	;# 
   436  0213                     	;# 
   437  0213                     	;# 
   438  0214                     	;# 
   439  0214                     	;# 
   440  0215                     	;# 
   441  0215                     	;# 
   442  0215                     	;# 
   443  0216                     	;# 
   444  0216                     	;# 
   445  0217                     	;# 
   446  0217                     	;# 
   447  0291                     	;# 
   448  0291                     	;# 
   449  0292                     	;# 
   450  0293                     	;# 
   451  0294                     	;# 
   452  0295                     	;# 
   453  0295                     	;# 
   454  0296                     	;# 
   455  0391                     	;# 
   456  0392                     	;# 
   457  0393                     	;# 
   458  039A                     	;# 
   459  039C                     	;# 
   460  039D                     	;# 
   461  039E                     	;# 
   462  039F                     	;# 
   463  0FE4                     	;# 
   464  0FE5                     	;# 
   465  0FE6                     	;# 
   466  0FE7                     	;# 
   467  0FE8                     	;# 
   468  0FE9                     	;# 
   469  0FEA                     	;# 
   470  0FEB                     	;# 
   471  0FED                     	;# 
   472  0FEE                     	;# 
   473  0FEF                     	;# 
   474  0000                     	;# 
   475  0001                     	;# 
   476  0002                     	;# 
   477  0003                     	;# 
   478  0004                     	;# 
   479  0005                     	;# 
   480  0006                     	;# 
   481  0007                     	;# 
   482  0008                     	;# 
   483  0009                     	;# 
   484  000A                     	;# 
   485  000B                     	;# 
   486  000C                     	;# 
   487  000E                     	;# 
   488  0011                     	;# 
   489  0012                     	;# 
   490  0015                     	;# 
   491  0016                     	;# 
   492  0016                     	;# 
   493  0017                     	;# 
   494  0018                     	;# 
   495  0019                     	;# 
   496  001A                     	;# 
   497  001B                     	;# 
   498  001C                     	;# 
   499  001E                     	;# 
   500  001F                     	;# 
   501  008C                     	;# 
   502  008E                     	;# 
   503  0091                     	;# 
   504  0092                     	;# 
   505  0095                     	;# 
   506  0096                     	;# 
   507  0097                     	;# 
   508  0098                     	;# 
   509  0099                     	;# 
   510  009A                     	;# 
   511  009B                     	;# 
   512  009B                     	;# 
   513  009C                     	;# 
   514  009D                     	;# 
   515  009E                     	;# 
   516  010C                     	;# 
   517  010E                     	;# 
   518  0111                     	;# 
   519  0112                     	;# 
   520  0113                     	;# 
   521  0114                     	;# 
   522  0115                     	;# 
   523  0116                     	;# 
   524  0117                     	;# 
   525  0118                     	;# 
   526  0119                     	;# 
   527  011A                     	;# 
   528  011B                     	;# 
   529  011D                     	;# 
   530  011D                     	;# 
   531  018C                     	;# 
   532  018E                     	;# 
   533  0191                     	;# 
   534  0191                     	;# 
   535  0192                     	;# 
   536  0193                     	;# 
   537  0193                     	;# 
   538  0193                     	;# 
   539  0194                     	;# 
   540  0195                     	;# 
   541  0196                     	;# 
   542  0199                     	;# 
   543  019A                     	;# 
   544  019B                     	;# 
   545  019B                     	;# 
   546  019B                     	;# 
   547  019B                     	;# 
   548  019C                     	;# 
   549  019C                     	;# 
   550  019D                     	;# 
   551  019E                     	;# 
   552  019F                     	;# 
   553  020C                     	;# 
   554  020E                     	;# 
   555  0211                     	;# 
   556  0211                     	;# 
   557  0212                     	;# 
   558  0212                     	;# 
   559  0213                     	;# 
   560  0213                     	;# 
   561  0214                     	;# 
   562  0214                     	;# 
   563  0215                     	;# 
   564  0215                     	;# 
   565  0215                     	;# 
   566  0216                     	;# 
   567  0216                     	;# 
   568  0217                     	;# 
   569  0217                     	;# 
   570  0291                     	;# 
   571  0291                     	;# 
   572  0292                     	;# 
   573  0293                     	;# 
   574  0294                     	;# 
   575  0295                     	;# 
   576  0295                     	;# 
   577  0296                     	;# 
   578  0391                     	;# 
   579  0392                     	;# 
   580  0393                     	;# 
   581  039A                     	;# 
   582  039C                     	;# 
   583  039D                     	;# 
   584  039E                     	;# 
   585  039F                     	;# 
   586  0FE4                     	;# 
   587  0FE5                     	;# 
   588  0FE6                     	;# 
   589  0FE7                     	;# 
   590  0FE8                     	;# 
   591  0FE9                     	;# 
   592  0FEA                     	;# 
   593  0FEB                     	;# 
   594  0FED                     	;# 
   595  0FEE                     	;# 
   596  0FEF                     	;# 
   597  0000                     	;# 
   598  0001                     	;# 
   599  0002                     	;# 
   600  0003                     	;# 
   601  0004                     	;# 
   602  0005                     	;# 
   603  0006                     	;# 
   604  0007                     	;# 
   605  0008                     	;# 
   606  0009                     	;# 
   607  000A                     	;# 
   608  000B                     	;# 
   609  000C                     	;# 
   610  000E                     	;# 
   611  0011                     	;# 
   612  0012                     	;# 
   613  0015                     	;# 
   614  0016                     	;# 
   615  0016                     	;# 
   616  0017                     	;# 
   617  0018                     	;# 
   618  0019                     	;# 
   619  001A                     	;# 
   620  001B                     	;# 
   621  001C                     	;# 
   622  001E                     	;# 
   623  001F                     	;# 
   624  008C                     	;# 
   625  008E                     	;# 
   626  0091                     	;# 
   627  0092                     	;# 
   628  0095                     	;# 
   629  0096                     	;# 
   630  0097                     	;# 
   631  0098                     	;# 
   632  0099                     	;# 
   633  009A                     	;# 
   634  009B                     	;# 
   635  009B                     	;# 
   636  009C                     	;# 
   637  009D                     	;# 
   638  009E                     	;# 
   639  010C                     	;# 
   640  010E                     	;# 
   641  0111                     	;# 
   642  0112                     	;# 
   643  0113                     	;# 
   644  0114                     	;# 
   645  0115                     	;# 
   646  0116                     	;# 
   647  0117                     	;# 
   648  0118                     	;# 
   649  0119                     	;# 
   650  011A                     	;# 
   651  011B                     	;# 
   652  011D                     	;# 
   653  011D                     	;# 
   654  018C                     	;# 
   655  018E                     	;# 
   656  0191                     	;# 
   657  0191                     	;# 
   658  0192                     	;# 
   659  0193                     	;# 
   660  0193                     	;# 
   661  0193                     	;# 
   662  0194                     	;# 
   663  0195                     	;# 
   664  0196                     	;# 
   665  0199                     	;# 
   666  019A                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019B                     	;# 
   671  019C                     	;# 
   672  019C                     	;# 
   673  019D                     	;# 
   674  019E                     	;# 
   675  019F                     	;# 
   676  020C                     	;# 
   677  020E                     	;# 
   678  0211                     	;# 
   679  0211                     	;# 
   680  0212                     	;# 
   681  0212                     	;# 
   682  0213                     	;# 
   683  0213                     	;# 
   684  0214                     	;# 
   685  0214                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0215                     	;# 
   689  0216                     	;# 
   690  0216                     	;# 
   691  0217                     	;# 
   692  0217                     	;# 
   693  0291                     	;# 
   694  0291                     	;# 
   695  0292                     	;# 
   696  0293                     	;# 
   697  0294                     	;# 
   698  0295                     	;# 
   699  0295                     	;# 
   700  0296                     	;# 
   701  0391                     	;# 
   702  0392                     	;# 
   703  0393                     	;# 
   704  039A                     	;# 
   705  039C                     	;# 
   706  039D                     	;# 
   707  039E                     	;# 
   708  039F                     	;# 
   709  0FE4                     	;# 
   710  0FE5                     	;# 
   711  0FE6                     	;# 
   712  0FE7                     	;# 
   713  0FE8                     	;# 
   714  0FE9                     	;# 
   715  0FEA                     	;# 
   716  0FEB                     	;# 
   717  0FED                     	;# 
   718  0FEE                     	;# 
   719  0FEF                     	;# 
   720  0000                     	;# 
   721  0001                     	;# 
   722  0002                     	;# 
   723  0003                     	;# 
   724  0004                     	;# 
   725  0005                     	;# 
   726  0006                     	;# 
   727  0007                     	;# 
   728  0008                     	;# 
   729  0009                     	;# 
   730  000A                     	;# 
   731  000B                     	;# 
   732  000C                     	;# 
   733  000E                     	;# 
   734  0011                     	;# 
   735  0012                     	;# 
   736  0015                     	;# 
   737  0016                     	;# 
   738  0016                     	;# 
   739  0017                     	;# 
   740  0018                     	;# 
   741  0019                     	;# 
   742  001A                     	;# 
   743  001B                     	;# 
   744  001C                     	;# 
   745  001E                     	;# 
   746  001F                     	;# 
   747  008C                     	;# 
   748  008E                     	;# 
   749  0091                     	;# 
   750  0092                     	;# 
   751  0095                     	;# 
   752  0096                     	;# 
   753  0097                     	;# 
   754  0098                     	;# 
   755  0099                     	;# 
   756  009A                     	;# 
   757  009B                     	;# 
   758  009B                     	;# 
   759  009C                     	;# 
   760  009D                     	;# 
   761  009E                     	;# 
   762  010C                     	;# 
   763  010E                     	;# 
   764  0111                     	;# 
   765  0112                     	;# 
   766  0113                     	;# 
   767  0114                     	;# 
   768  0115                     	;# 
   769  0116                     	;# 
   770  0117                     	;# 
   771  0118                     	;# 
   772  0119                     	;# 
   773  011A                     	;# 
   774  011B                     	;# 
   775  011D                     	;# 
   776  011D                     	;# 
   777  018C                     	;# 
   778  018E                     	;# 
   779  0191                     	;# 
   780  0191                     	;# 
   781  0192                     	;# 
   782  0193                     	;# 
   783  0193                     	;# 
   784  0193                     	;# 
   785  0194                     	;# 
   786  0195                     	;# 
   787  0196                     	;# 
   788  0199                     	;# 
   789  019A                     	;# 
   790  019B                     	;# 
   791  019B                     	;# 
   792  019B                     	;# 
   793  019B                     	;# 
   794  019C                     	;# 
   795  019C                     	;# 
   796  019D                     	;# 
   797  019E                     	;# 
   798  019F                     	;# 
   799  020C                     	;# 
   800  020E                     	;# 
   801  0211                     	;# 
   802  0211                     	;# 
   803  0212                     	;# 
   804  0212                     	;# 
   805  0213                     	;# 
   806  0213                     	;# 
   807  0214                     	;# 
   808  0214                     	;# 
   809  0215                     	;# 
   810  0215                     	;# 
   811  0215                     	;# 
   812  0216                     	;# 
   813  0216                     	;# 
   814  0217                     	;# 
   815  0217                     	;# 
   816  0291                     	;# 
   817  0291                     	;# 
   818  0292                     	;# 
   819  0293                     	;# 
   820  0294                     	;# 
   821  0295                     	;# 
   822  0295                     	;# 
   823  0296                     	;# 
   824  0391                     	;# 
   825  0392                     	;# 
   826  0393                     	;# 
   827  039A                     	;# 
   828  039C                     	;# 
   829  039D                     	;# 
   830  039E                     	;# 
   831  039F                     	;# 
   832  0FE4                     	;# 
   833  0FE5                     	;# 
   834  0FE6                     	;# 
   835  0FE7                     	;# 
   836  0FE8                     	;# 
   837  0FE9                     	;# 
   838  0FEA                     	;# 
   839  0FEB                     	;# 
   840  0FED                     	;# 
   841  0FEE                     	;# 
   842  0FEF                     	;# 
   843  0000                     	;# 
   844  0001                     	;# 
   845  0002                     	;# 
   846  0003                     	;# 
   847  0004                     	;# 
   848  0005                     	;# 
   849  0006                     	;# 
   850  0007                     	;# 
   851  0008                     	;# 
   852  0009                     	;# 
   853  000A                     	;# 
   854  000B                     	;# 
   855  000C                     	;# 
   856  000E                     	;# 
   857  0011                     	;# 
   858  0012                     	;# 
   859  0015                     	;# 
   860  0016                     	;# 
   861  0016                     	;# 
   862  0017                     	;# 
   863  0018                     	;# 
   864  0019                     	;# 
   865  001A                     	;# 
   866  001B                     	;# 
   867  001C                     	;# 
   868  001E                     	;# 
   869  001F                     	;# 
   870  008C                     	;# 
   871  008E                     	;# 
   872  0091                     	;# 
   873  0092                     	;# 
   874  0095                     	;# 
   875  0096                     	;# 
   876  0097                     	;# 
   877  0098                     	;# 
   878  0099                     	;# 
   879  009A                     	;# 
   880  009B                     	;# 
   881  009B                     	;# 
   882  009C                     	;# 
   883  009D                     	;# 
   884  009E                     	;# 
   885  010C                     	;# 
   886  010E                     	;# 
   887  0111                     	;# 
   888  0112                     	;# 
   889  0113                     	;# 
   890  0114                     	;# 
   891  0115                     	;# 
   892  0116                     	;# 
   893  0117                     	;# 
   894  0118                     	;# 
   895  0119                     	;# 
   896  011A                     	;# 
   897  011B                     	;# 
   898  011D                     	;# 
   899  011D                     	;# 
   900  018C                     	;# 
   901  018E                     	;# 
   902  0191                     	;# 
   903  0191                     	;# 
   904  0192                     	;# 
   905  0193                     	;# 
   906  0193                     	;# 
   907  0193                     	;# 
   908  0194                     	;# 
   909  0195                     	;# 
   910  0196                     	;# 
   911  0199                     	;# 
   912  019A                     	;# 
   913  019B                     	;# 
   914  019B                     	;# 
   915  019B                     	;# 
   916  019B                     	;# 
   917  019C                     	;# 
   918  019C                     	;# 
   919  019D                     	;# 
   920  019E                     	;# 
   921  019F                     	;# 
   922  020C                     	;# 
   923  020E                     	;# 
   924  0211                     	;# 
   925  0211                     	;# 
   926  0212                     	;# 
   927  0212                     	;# 
   928  0213                     	;# 
   929  0213                     	;# 
   930  0214                     	;# 
   931  0214                     	;# 
   932  0215                     	;# 
   933  0215                     	;# 
   934  0215                     	;# 
   935  0216                     	;# 
   936  0216                     	;# 
   937  0217                     	;# 
   938  0217                     	;# 
   939  0291                     	;# 
   940  0291                     	;# 
   941  0292                     	;# 
   942  0293                     	;# 
   943  0294                     	;# 
   944  0295                     	;# 
   945  0295                     	;# 
   946  0296                     	;# 
   947  0391                     	;# 
   948  0392                     	;# 
   949  0393                     	;# 
   950  039A                     	;# 
   951  039C                     	;# 
   952  039D                     	;# 
   953  039E                     	;# 
   954  039F                     	;# 
   955  0FE4                     	;# 
   956  0FE5                     	;# 
   957  0FE6                     	;# 
   958  0FE7                     	;# 
   959  0FE8                     	;# 
   960  0FE9                     	;# 
   961  0FEA                     	;# 
   962  0FEB                     	;# 
   963  0FED                     	;# 
   964  0FEE                     	;# 
   965  0FEF                     	;# 
   966  0000                     	;# 
   967  0001                     	;# 
   968  0002                     	;# 
   969  0003                     	;# 
   970  0004                     	;# 
   971  0005                     	;# 
   972  0006                     	;# 
   973  0007                     	;# 
   974  0008                     	;# 
   975  0009                     	;# 
   976  000A                     	;# 
   977  000B                     	;# 
   978  000C                     	;# 
   979  000E                     	;# 
   980  0011                     	;# 
   981  0012                     	;# 
   982  0015                     	;# 
   983  0016                     	;# 
   984  0016                     	;# 
   985  0017                     	;# 
   986  0018                     	;# 
   987  0019                     	;# 
   988  001A                     	;# 
   989  001B                     	;# 
   990  001C                     	;# 
   991  001E                     	;# 
   992  001F                     	;# 
   993  008C                     	;# 
   994  008E                     	;# 
   995  0091                     	;# 
   996  0092                     	;# 
   997  0095                     	;# 
   998  0096                     	;# 
   999  0097                     	;# 
  1000  0098                     	;# 
  1001  0099                     	;# 
  1002  009A                     	;# 
  1003  009B                     	;# 
  1004  009B                     	;# 
  1005  009C                     	;# 
  1006  009D                     	;# 
  1007  009E                     	;# 
  1008  010C                     	;# 
  1009  010E                     	;# 
  1010  0111                     	;# 
  1011  0112                     	;# 
  1012  0113                     	;# 
  1013  0114                     	;# 
  1014  0115                     	;# 
  1015  0116                     	;# 
  1016  0117                     	;# 
  1017  0118                     	;# 
  1018  0119                     	;# 
  1019  011A                     	;# 
  1020  011B                     	;# 
  1021  011D                     	;# 
  1022  011D                     	;# 
  1023  018C                     	;# 
  1024  018E                     	;# 
  1025  0191                     	;# 
  1026  0191                     	;# 
  1027  0192                     	;# 
  1028  0193                     	;# 
  1029  0193                     	;# 
  1030  0193                     	;# 
  1031  0194                     	;# 
  1032  0195                     	;# 
  1033  0196                     	;# 
  1034  0199                     	;# 
  1035  019A                     	;# 
  1036  019B                     	;# 
  1037  019B                     	;# 
  1038  019B                     	;# 
  1039  019B                     	;# 
  1040  019C                     	;# 
  1041  019C                     	;# 
  1042  019D                     	;# 
  1043  019E                     	;# 
  1044  019F                     	;# 
  1045  020C                     	;# 
  1046  020E                     	;# 
  1047  0211                     	;# 
  1048  0211                     	;# 
  1049  0212                     	;# 
  1050  0212                     	;# 
  1051  0213                     	;# 
  1052  0213                     	;# 
  1053  0214                     	;# 
  1054  0214                     	;# 
  1055  0215                     	;# 
  1056  0215                     	;# 
  1057  0215                     	;# 
  1058  0216                     	;# 
  1059  0216                     	;# 
  1060  0217                     	;# 
  1061  0217                     	;# 
  1062  0291                     	;# 
  1063  0291                     	;# 
  1064  0292                     	;# 
  1065  0293                     	;# 
  1066  0294                     	;# 
  1067  0295                     	;# 
  1068  0295                     	;# 
  1069  0296                     	;# 
  1070  0391                     	;# 
  1071  0392                     	;# 
  1072  0393                     	;# 
  1073  039A                     	;# 
  1074  039C                     	;# 
  1075  039D                     	;# 
  1076  039E                     	;# 
  1077  039F                     	;# 
  1078  0FE4                     	;# 
  1079  0FE5                     	;# 
  1080  0FE6                     	;# 
  1081  0FE7                     	;# 
  1082  0FE8                     	;# 
  1083  0FE9                     	;# 
  1084  0FEA                     	;# 
  1085  0FEB                     	;# 
  1086  0FED                     	;# 
  1087  0FEE                     	;# 
  1088  0FEF                     	;# 
  1089  0000                     	;# 
  1090  0001                     	;# 
  1091  0002                     	;# 
  1092  0003                     	;# 
  1093  0004                     	;# 
  1094  0005                     	;# 
  1095  0006                     	;# 
  1096  0007                     	;# 
  1097  0008                     	;# 
  1098  0009                     	;# 
  1099  000A                     	;# 
  1100  000B                     	;# 
  1101  000C                     	;# 
  1102  000E                     	;# 
  1103  0011                     	;# 
  1104  0012                     	;# 
  1105  0015                     	;# 
  1106  0016                     	;# 
  1107  0016                     	;# 
  1108  0017                     	;# 
  1109  0018                     	;# 
  1110  0019                     	;# 
  1111  001A                     	;# 
  1112  001B                     	;# 
  1113  001C                     	;# 
  1114  001E                     	;# 
  1115  001F                     	;# 
  1116  008C                     	;# 
  1117  008E                     	;# 
  1118  0091                     	;# 
  1119  0092                     	;# 
  1120  0095                     	;# 
  1121  0096                     	;# 
  1122  0097                     	;# 
  1123  0098                     	;# 
  1124  0099                     	;# 
  1125  009A                     	;# 
  1126  009B                     	;# 
  1127  009B                     	;# 
  1128  009C                     	;# 
  1129  009D                     	;# 
  1130  009E                     	;# 
  1131  010C                     	;# 
  1132  010E                     	;# 
  1133  0111                     	;# 
  1134  0112                     	;# 
  1135  0113                     	;# 
  1136  0114                     	;# 
  1137  0115                     	;# 
  1138  0116                     	;# 
  1139  0117                     	;# 
  1140  0118                     	;# 
  1141  0119                     	;# 
  1142  011A                     	;# 
  1143  011B                     	;# 
  1144  011D                     	;# 
  1145  011D                     	;# 
  1146  018C                     	;# 
  1147  018E                     	;# 
  1148  0191                     	;# 
  1149  0191                     	;# 
  1150  0192                     	;# 
  1151  0193                     	;# 
  1152  0193                     	;# 
  1153  0193                     	;# 
  1154  0194                     	;# 
  1155  0195                     	;# 
  1156  0196                     	;# 
  1157  0199                     	;# 
  1158  019A                     	;# 
  1159  019B                     	;# 
  1160  019B                     	;# 
  1161  019B                     	;# 
  1162  019B                     	;# 
  1163  019C                     	;# 
  1164  019C                     	;# 
  1165  019D                     	;# 
  1166  019E                     	;# 
  1167  019F                     	;# 
  1168  020C                     	;# 
  1169  020E                     	;# 
  1170  0211                     	;# 
  1171  0211                     	;# 
  1172  0212                     	;# 
  1173  0212                     	;# 
  1174  0213                     	;# 
  1175  0213                     	;# 
  1176  0214                     	;# 
  1177  0214                     	;# 
  1178  0215                     	;# 
  1179  0215                     	;# 
  1180  0215                     	;# 
  1181  0216                     	;# 
  1182  0216                     	;# 
  1183  0217                     	;# 
  1184  0217                     	;# 
  1185  0291                     	;# 
  1186  0291                     	;# 
  1187  0292                     	;# 
  1188  0293                     	;# 
  1189  0294                     	;# 
  1190  0295                     	;# 
  1191  0295                     	;# 
  1192  0296                     	;# 
  1193  0391                     	;# 
  1194  0392                     	;# 
  1195  0393                     	;# 
  1196  039A                     	;# 
  1197  039C                     	;# 
  1198  039D                     	;# 
  1199  039E                     	;# 
  1200  039F                     	;# 
  1201  0FE4                     	;# 
  1202  0FE5                     	;# 
  1203  0FE6                     	;# 
  1204  0FE7                     	;# 
  1205  0FE8                     	;# 
  1206  0FE9                     	;# 
  1207  0FEA                     	;# 
  1208  0FEB                     	;# 
  1209  0FED                     	;# 
  1210  0FEE                     	;# 
  1211  0FEF                     	;# 
  1212  0000                     	;# 
  1213  0001                     	;# 
  1214  0002                     	;# 
  1215  0003                     	;# 
  1216  0004                     	;# 
  1217  0005                     	;# 
  1218  0006                     	;# 
  1219  0007                     	;# 
  1220  0008                     	;# 
  1221  0009                     	;# 
  1222  000A                     	;# 
  1223  000B                     	;# 
  1224  000C                     	;# 
  1225  000E                     	;# 
  1226  0011                     	;# 
  1227  0012                     	;# 
  1228  0015                     	;# 
  1229  0016                     	;# 
  1230  0016                     	;# 
  1231  0017                     	;# 
  1232  0018                     	;# 
  1233  0019                     	;# 
  1234  001A                     	;# 
  1235  001B                     	;# 
  1236  001C                     	;# 
  1237  001E                     	;# 
  1238  001F                     	;# 
  1239  008C                     	;# 
  1240  008E                     	;# 
  1241  0091                     	;# 
  1242  0092                     	;# 
  1243  0095                     	;# 
  1244  0096                     	;# 
  1245  0097                     	;# 
  1246  0098                     	;# 
  1247  0099                     	;# 
  1248  009A                     	;# 
  1249  009B                     	;# 
  1250  009B                     	;# 
  1251  009C                     	;# 
  1252  009D                     	;# 
  1253  009E                     	;# 
  1254  010C                     	;# 
  1255  010E                     	;# 
  1256  0111                     	;# 
  1257  0112                     	;# 
  1258  0113                     	;# 
  1259  0114                     	;# 
  1260  0115                     	;# 
  1261  0116                     	;# 
  1262  0117                     	;# 
  1263  0118                     	;# 
  1264  0119                     	;# 
  1265  011A                     	;# 
  1266  011B                     	;# 
  1267  011D                     	;# 
  1268  011D                     	;# 
  1269  018C                     	;# 
  1270  018E                     	;# 
  1271  0191                     	;# 
  1272  0191                     	;# 
  1273  0192                     	;# 
  1274  0193                     	;# 
  1275  0193                     	;# 
  1276  0193                     	;# 
  1277  0194                     	;# 
  1278  0195                     	;# 
  1279  0196                     	;# 
  1280  0199                     	;# 
  1281  019A                     	;# 
  1282  019B                     	;# 
  1283  019B                     	;# 
  1284  019B                     	;# 
  1285  019B                     	;# 
  1286  019C                     	;# 
  1287  019C                     	;# 
  1288  019D                     	;# 
  1289  019E                     	;# 
  1290  019F                     	;# 
  1291  020C                     	;# 
  1292  020E                     	;# 
  1293  0211                     	;# 
  1294  0211                     	;# 
  1295  0212                     	;# 
  1296  0212                     	;# 
  1297  0213                     	;# 
  1298  0213                     	;# 
  1299  0214                     	;# 
  1300  0214                     	;# 
  1301  0215                     	;# 
  1302  0215                     	;# 
  1303  0215                     	;# 
  1304  0216                     	;# 
  1305  0216                     	;# 
  1306  0217                     	;# 
  1307  0217                     	;# 
  1308  0291                     	;# 
  1309  0291                     	;# 
  1310  0292                     	;# 
  1311  0293                     	;# 
  1312  0294                     	;# 
  1313  0295                     	;# 
  1314  0295                     	;# 
  1315  0296                     	;# 
  1316  0391                     	;# 
  1317  0392                     	;# 
  1318  0393                     	;# 
  1319  039A                     	;# 
  1320  039C                     	;# 
  1321  039D                     	;# 
  1322  039E                     	;# 
  1323  039F                     	;# 
  1324  0FE4                     	;# 
  1325  0FE5                     	;# 
  1326  0FE6                     	;# 
  1327  0FE7                     	;# 
  1328  0FE8                     	;# 
  1329  0FE9                     	;# 
  1330  0FEA                     	;# 
  1331  0FEB                     	;# 
  1332  0FED                     	;# 
  1333  0FEE                     	;# 
  1334  0FEF                     	;# 
  1335                           
  1336                           	psect	stringtext1
  1337  05FF                     __pstringtext1:
  1338  05FF                     _ROTATION_TIME:
  1339  05FF  343C               	retlw	60
  1340  0600  3400               	retlw	0
  1341  0601  3400               	retlw	0
  1342  0602                     __end_of_ROTATION_TIME:
  1343                           
  1344                           	psect	stringtext2
  1345  0602                     __pstringtext2:
  1346  0602                     _GOOD_WSP_VOLTAGE:
  1347  0602  3440               	retlw	64
  1348  0603  349C               	retlw	156
  1349  0604  3400               	retlw	0
  1350  0605                     __end_of_GOOD_WSP_VOLTAGE:
  1351                           
  1352                           	psect	stringtext3
  1353  0605                     __pstringtext3:
  1354  0605                     _BAD_WSP_VOLTAGE:
  1355  0605  3420               	retlw	32
  1356  0606  344E               	retlw	78
  1357  0607  3400               	retlw	0
  1358  0608                     __end_of_BAD_WSP_VOLTAGE:
  1359                           
  1360                           	psect	nvBANK0
  1361  0068                     __pnvBANK0:
  1362  0068                     _TMR0_InterruptHandler:
  1363  0068                     	ds	2
  1364  006A                     _TMR2_InterruptHandler:
  1365  006A                     	ds	2
  1366  006C                     _timer0ReloadVal:
  1367  006C                     	ds	1
  1368  0015                     _TMR0	set	21
  1369  001C                     _T2CONbits	set	28
  1370  001C                     _T2CON	set	28
  1371  001A                     _TMR2	set	26
  1372  001B                     _PR2	set	27
  1373  0011                     _PIR1bits	set	17
  1374  000B                     _INTCONbits	set	11
  1375  005F                     _GIE	set	95
  1376  008E                     _TRISCbits	set	142
  1377  008C                     _TRISAbits	set	140
  1378  0095                     _OPTION_REG	set	149
  1379  0091                     _PIE1bits	set	145
  1380  0095                     _OPTION_REGbits	set	149
  1381  008E                     _TRISC	set	142
  1382  008C                     _TRISA	set	140
  1383  009D                     _ADCON0bits	set	157
  1384  009D                     _ADCON0	set	157
  1385  009C                     _ADRESH	set	156
  1386  009B                     _ADRESL	set	155
  1387  009E                     _ADCON1	set	158
  1388  0097                     _WDTCON	set	151
  1389  0098                     _OSCTUNE	set	152
  1390  0099                     _OSCCON	set	153
  1391  010E                     _LATCbits	set	270
  1392  010C                     _LATAbits	set	268
  1393  0117                     _FVRCON	set	279
  1394  011D                     _APFCON	set	285
  1395  010E                     _LATC	set	270
  1396  010C                     _LATA	set	268
  1397  0116                     _BORCON	set	278
  1398  0191                     _EEADR	set	401
  1399  0196                     _EECON2	set	406
  1400  0193                     _EEDATA	set	403
  1401  018C                     _ANSELAbits	set	396
  1402  018E                     _ANSELCbits	set	398
  1403  018C                     _ANSELA	set	396
  1404  018E                     _ANSELC	set	398
  1405  0CA8                     _RD	set	3240
  1406  0CAA                     _WREN	set	3242
  1407  0CA9                     _WR	set	3241
  1408  020E                     _WPUCbits	set	526
  1409  020C                     _WPUAbits	set	524
  1410  020E                     _WPUC	set	526
  1411  020C                     _WPUA	set	524
  1412                           
  1413                           	psect	cinit
  1414  0017                     start_initialization:	
  1415                           ; #config settings
  1416                           
  1417  0017                     __initialization:
  1418                           
  1419                           ; Clear objects allocated to COMMON
  1420  0017  01F8               	clrf	__pbssCOMMON& (0+127)
  1421  0018  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  1422  0019  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  1423  001A  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  1424  001B  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  1425                           
  1426                           ; Clear objects allocated to BANK0
  1427  001C  304D               	movlw	low __pbssBANK0
  1428  001D  0084               	movwf	4
  1429  001E  3000               	movlw	high __pbssBANK0
  1430  001F  0085               	movwf	5
  1431  0020  301B               	movlw	27
  1432  0021  25D9               	fcall	clear_ram0
  1433                           
  1434                           ; Clear objects allocated to BANK1
  1435  0022  30A0               	movlw	low __pbssBANK1
  1436  0023  0084               	movwf	4
  1437  0024  3000               	movlw	high __pbssBANK1
  1438  0025  0085               	movwf	5
  1439  0026  3020               	movlw	32
  1440  0027  25D9               	fcall	clear_ram0
  1441  0028                     end_of_initialization:	
  1442                           ;End of C runtime variable initialization code
  1443                           
  1444  0028                     __end_of__initialization:
  1445  0028  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1446  0029  0020               	movlb	0
  1447  002A  2D92               	ljmp	_main	;jump to C main() function
  1448                           
  1449                           	psect	bssCOMMON
  1450  0078                     __pbssCOMMON:
  1451  0078                     TMR2_ISR@CountCallBack:
  1452  0078                     	ds	2
  1453  007A                     sec_tick_work@iled:
  1454  007A                     	ds	1
  1455  007B                     get_measure@measures:
  1456  007B                     	ds	1
  1457  007C                     _FLAGS:
  1458  007C                     	ds	1
  1459                           
  1460                           	psect	bssBANK0
  1461  004D                     __pbssBANK0:
  1462  004D                     get_time@F2660:
  1463  004D                     	ds	12
  1464  0059                     get_time@F2662:
  1465  0059                     	ds	4
  1466  005D                     _time_s:
  1467  005D                     	ds	3
  1468  0060                     _ADC_InterruptHandler:
  1469  0060                     	ds	2
  1470  0062                     get_jump_full@jump_counter:
  1471  0062                     	ds	1
  1472  0063                     get_jump@jump_counter:
  1473  0063                     	ds	1
  1474  0064                     get_fun_full@fun_counter:
  1475  0064                     	ds	1
  1476  0065                     get_fun@fun_counter:
  1477  0065                     	ds	1
  1478  0066                     _time_pow_s:
  1479  0066                     	ds	1
  1480  0067                     _START_EEPROM_ADR:
  1481  0067                     	ds	1
  1482                           
  1483                           	psect	bssBANK1
  1484  00A0                     __pbssBANK1:
  1485  00A0                     get_adr@F2640:
  1486  00A0                     	ds	32
  1487                           
  1488                           	psect	clrtext
  1489  05D9                     clear_ram0:	
  1490                           ;	Called with FSR0 containing the base address, and
  1491                           ;	WREG with the size to clear
  1492                           
  1493  05D9  0064               	clrwdt	;clear the watchdog before getting into this loop
  1494  05DA                     clrloop0:
  1495  05DA  0180               	clrf	0	;clear RAM location pointed to by FSR
  1496  05DB  3101               	addfsr 0,1
  1497  05DC  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1498  05DD  2DDA               	goto	clrloop0	;have we reached the end yet?
  1499  05DE  3400               	retlw	0	;all done for this memory range, return
  1500                           
  1501                           	psect	cstackCOMMON
  1502  0070                     __pcstackCOMMON:
  1503  0070                     ?_PIN_MANAGER_Initialize:
  1504  0070                     ?_OSCILLATOR_Initialize:	
  1505                           ; 1 bytes @ 0x0
  1506                           
  1507  0070                     ?_WDT_Initialize:	
  1508                           ; 1 bytes @ 0x0
  1509                           
  1510  0070                     ?_FVR_Initialize:	
  1511                           ; 1 bytes @ 0x0
  1512                           
  1513  0070                     ?_ADC_Initialize:	
  1514                           ; 1 bytes @ 0x0
  1515                           
  1516  0070                     ?_TMR2_Initialize:	
  1517                           ; 1 bytes @ 0x0
  1518                           
  1519  0070                     ?_TMR0_Initialize:	
  1520                           ; 1 bytes @ 0x0
  1521                           
  1522  0070                     ?_TMR0_ISR:	
  1523                           ; 1 bytes @ 0x0
  1524                           
  1525  0070                     ??_TMR0_ISR:	
  1526                           ; 1 bytes @ 0x0
  1527                           
  1528  0070                     ?_TMR2_ISR:	
  1529                           ; 1 bytes @ 0x0
  1530                           
  1531  0070                     ?_TMR2_DefaultInterruptHandler:	
  1532                           ; 1 bytes @ 0x0
  1533                           
  1534  0070                     ??_TMR2_DefaultInterruptHandler:	
  1535                           ; 1 bytes @ 0x0
  1536                           
  1537  0070                     ?_TMR2_CallBack:	
  1538                           ; 1 bytes @ 0x0
  1539                           
  1540  0070                     ?_TMR0_DefaultInterruptHandler:	
  1541                           ; 1 bytes @ 0x0
  1542                           
  1543  0070                     ??_TMR0_DefaultInterruptHandler:	
  1544                           ; 1 bytes @ 0x0
  1545                           
  1546  0070                     ?_EEPROM_ReadByte:	
  1547                           ; 1 bytes @ 0x0
  1548                           
  1549  0070                     ?_SYSTEM_Initialize:	
  1550                           ; 1 bytes @ 0x0
  1551                           
  1552  0070                     ?_INTERRUPT_InterruptManager:	
  1553                           ; 1 bytes @ 0x0
  1554                           
  1555  0070                     ?_TMR2_StartTimer:	
  1556                           ; 1 bytes @ 0x0
  1557                           
  1558  0070                     ?_switch_zum:	
  1559                           ; 1 bytes @ 0x0
  1560                           
  1561  0070                     ?_toggle_tone:	
  1562                           ; 1 bytes @ 0x0
  1563                           
  1564  0070                     ??_toggle_tone:	
  1565                           ; 1 bytes @ 0x0
  1566                           
  1567  0070                     ?_go_close:	
  1568                           ; 1 bytes @ 0x0
  1569                           
  1570  0070                     ?_go_open:	
  1571                           ; 1 bytes @ 0x0
  1572                           
  1573  0070                     ?_go_close_alt:	
  1574                           ; 1 bytes @ 0x0
  1575                           
  1576  0070                     ?_go_open_alt:	
  1577                           ; 1 bytes @ 0x0
  1578                           
  1579  0070                     ?_start_alarm:	
  1580                           ; 1 bytes @ 0x0
  1581                           
  1582  0070                     ?_get_measure:	
  1583                           ; 1 bytes @ 0x0
  1584                           
  1585  0070                     ?_get_fun:	
  1586                           ; 1 bytes @ 0x0
  1587                           
  1588  0070                     ?_get_fun_full:	
  1589                           ; 1 bytes @ 0x0
  1590                           
  1591  0070                     ?_get_jump:	
  1592                           ; 1 bytes @ 0x0
  1593                           
  1594  0070                     ?_get_jump_full:	
  1595                           ; 1 bytes @ 0x0
  1596                           
  1597  0070                     ?_rele_tick:	
  1598                           ; 1 bytes @ 0x0
  1599                           
  1600  0070                     ??_rele_tick:	
  1601                           ; 1 bytes @ 0x0
  1602                           
  1603  0070                     ?_sec_tick_work:	
  1604                           ; 1 bytes @ 0x0
  1605                           
  1606  0070                     ?_povorot:	
  1607                           ; 1 bytes @ 0x0
  1608                           
  1609  0070                     ?_fun_work:	
  1610                           ; 1 bytes @ 0x0
  1611                           
  1612  0070                     ?_switch_wm:	
  1613                           ; 1 bytes @ 0x0
  1614                           
  1615  0070                     ?_get_voltage:	
  1616                           ; 1 bytes @ 0x0
  1617                           
  1618  0070                     ?_get_adr:	
  1619                           ; 1 bytes @ 0x0
  1620                           
  1621  0070                     ?_get_time:	
  1622                           ; 1 bytes @ 0x0
  1623                           
  1624  0070                     ?_get_eeprom:	
  1625                           ; 1 bytes @ 0x0
  1626                           
  1627  0070                     ?_start_setup:	
  1628                           ; 1 bytes @ 0x0
  1629                           
  1630  0070                     ?_main:	
  1631                           ; 1 bytes @ 0x0
  1632                           
  1633  0070                     ?i1_switch_zum:	
  1634                           ; 1 bytes @ 0x0
  1635                           
  1636  0070                     ??i1_switch_zum:	
  1637                           ; 1 bytes @ 0x0
  1638                           
  1639  0070                     ?i1_go_close:	
  1640                           ; 1 bytes @ 0x0
  1641                           
  1642  0070                     ??i1_go_close:	
  1643                           ; 1 bytes @ 0x0
  1644                           
  1645  0070                     ?i1_go_close_alt:	
  1646                           ; 1 bytes @ 0x0
  1647                           
  1648  0070                     ??i1_go_close_alt:	
  1649                           ; 1 bytes @ 0x0
  1650                           
  1651  0070                     ?i1_ADC_GetConversion:	
  1652                           ; 1 bytes @ 0x0
  1653                           
  1654                           
  1655                           ; 2 bytes @ 0x0
  1656  0070                     	ds	2
  1657  0072                     ??_start_alarm:
  1658  0072                     ??i1_ADC_GetConversion:	
  1659                           ; 1 bytes @ 0x2
  1660                           
  1661                           
  1662                           ; 1 bytes @ 0x2
  1663  0072                     	ds	1
  1664  0073                     i1ADC_GetConversion@channel:
  1665                           
  1666                           ; 1 bytes @ 0x3
  1667  0073                     	ds	1
  1668  0074                     ??_get_measure:
  1669                           
  1670                           ; 1 bytes @ 0x4
  1671  0074                     	ds	1
  1672  0075                     get_measure@res:
  1673                           
  1674                           ; 2 bytes @ 0x5
  1675  0075                     	ds	2
  1676  0077                     ??_sec_tick_work:
  1677                           
  1678                           ; 1 bytes @ 0x7
  1679  0077                     	ds	1
  1680  0078                     ??_TMR2_ISR:
  1681  0078                     ??_TMR2_CallBack:	
  1682                           ; 1 bytes @ 0x8
  1683                           
  1684  0078                     ??_INTERRUPT_InterruptManager:	
  1685                           ; 1 bytes @ 0x8
  1686                           
  1687                           
  1688                           	psect	cstackBANK0
  1689  0020                     __pcstackBANK0:	
  1690                           ; 1 bytes @ 0x8
  1691                           
  1692  0020                     ??_PIN_MANAGER_Initialize:
  1693  0020                     ??_OSCILLATOR_Initialize:	
  1694                           ; 1 bytes @ 0x0
  1695                           
  1696  0020                     ??_WDT_Initialize:	
  1697                           ; 1 bytes @ 0x0
  1698                           
  1699  0020                     ??_FVR_Initialize:	
  1700                           ; 1 bytes @ 0x0
  1701                           
  1702  0020                     ??_ADC_Initialize:	
  1703                           ; 1 bytes @ 0x0
  1704                           
  1705  0020                     ?_TMR2_SetInterruptHandler:	
  1706                           ; 1 bytes @ 0x0
  1707                           
  1708  0020                     ?_TMR0_SetInterruptHandler:	
  1709                           ; 1 bytes @ 0x0
  1710                           
  1711  0020                     ??_EEPROM_ReadByte:	
  1712                           ; 1 bytes @ 0x0
  1713                           
  1714  0020                     ?_EEPROM_WriteByte:	
  1715                           ; 1 bytes @ 0x0
  1716                           
  1717  0020                     ??_TMR2_StartTimer:	
  1718                           ; 1 bytes @ 0x0
  1719                           
  1720  0020                     ??_switch_zum:	
  1721                           ; 1 bytes @ 0x0
  1722                           
  1723  0020                     ?_beep:	
  1724                           ; 1 bytes @ 0x0
  1725                           
  1726  0020                     ??_go_close:	
  1727                           ; 1 bytes @ 0x0
  1728                           
  1729  0020                     ??_go_open:	
  1730                           ; 1 bytes @ 0x0
  1731                           
  1732  0020                     ??_go_close_alt:	
  1733                           ; 1 bytes @ 0x0
  1734                           
  1735  0020                     ??_go_open_alt:	
  1736                           ; 1 bytes @ 0x0
  1737                           
  1738  0020                     ?___bmul:	
  1739                           ; 1 bytes @ 0x0
  1740                           
  1741  0020                     ?_ADC_GetConversion:	
  1742                           ; 1 bytes @ 0x0
  1743                           
  1744  0020                     EEPROM_WriteByte@dt:	
  1745                           ; 2 bytes @ 0x0
  1746                           
  1747  0020                     ___bmul@multiplicand:	
  1748                           ; 1 bytes @ 0x0
  1749                           
  1750  0020                     TMR2_SetInterruptHandler@InterruptHandler:	
  1751                           ; 1 bytes @ 0x0
  1752                           
  1753  0020                     TMR0_SetInterruptHandler@InterruptHandler:	
  1754                           ; 2 bytes @ 0x0
  1755                           
  1756  0020                     beep@delay:	
  1757                           ; 2 bytes @ 0x0
  1758                           
  1759                           
  1760                           ; 2 bytes @ 0x0
  1761  0020                     	ds	1
  1762  0021                     ??_EEPROM_WriteByte:
  1763  0021                     ??___bmul:	
  1764                           ; 1 bytes @ 0x1
  1765                           
  1766                           
  1767                           ; 1 bytes @ 0x1
  1768  0021                     	ds	1
  1769  0022                     ??_TMR2_Initialize:
  1770  0022                     ??_TMR0_Initialize:	
  1771                           ; 1 bytes @ 0x2
  1772                           
  1773  0022                     ??_TMR2_SetInterruptHandler:	
  1774                           ; 1 bytes @ 0x2
  1775                           
  1776  0022                     ??_TMR0_SetInterruptHandler:	
  1777                           ; 1 bytes @ 0x2
  1778                           
  1779  0022                     ??_ADC_GetConversion:	
  1780                           ; 1 bytes @ 0x2
  1781                           
  1782  0022                     ??_povorot:	
  1783                           ; 1 bytes @ 0x2
  1784                           
  1785  0022                     EEPROM_ReadByte@addr:	
  1786                           ; 1 bytes @ 0x2
  1787                           
  1788  0022                     ___bmul@product:	
  1789                           ; 1 bytes @ 0x2
  1790                           
  1791  0022                     beep@pause:	
  1792                           ; 1 bytes @ 0x2
  1793                           
  1794                           
  1795                           ; 2 bytes @ 0x2
  1796  0022                     	ds	1
  1797  0023                     ??_SYSTEM_Initialize:
  1798  0023                     ??_get_adr:	
  1799                           ; 1 bytes @ 0x3
  1800                           
  1801  0023                     ?_EEPROM_ReadShortLong:	
  1802                           ; 1 bytes @ 0x3
  1803                           
  1804  0023                     ADC_GetConversion@channel:	
  1805                           ; 3 bytes @ 0x3
  1806                           
  1807  0023                     EEPROM_WriteByte@addr:	
  1808                           ; 1 bytes @ 0x3
  1809                           
  1810  0023                     ___bmul@multiplier:	
  1811                           ; 1 bytes @ 0x3
  1812                           
  1813                           
  1814                           ; 1 bytes @ 0x3
  1815  0023                     	ds	1
  1816  0024                     ??_get_fun:
  1817  0024                     ??_get_fun_full:	
  1818                           ; 1 bytes @ 0x4
  1819                           
  1820  0024                     ??_get_jump:	
  1821                           ; 1 bytes @ 0x4
  1822                           
  1823  0024                     ??_get_jump_full:	
  1824                           ; 1 bytes @ 0x4
  1825                           
  1826  0024                     beep@time:	
  1827                           ; 1 bytes @ 0x4
  1828                           
  1829  0024                     EEPROM_WriteByte@status:	
  1830                           ; 1 bytes @ 0x4
  1831                           
  1832  0024                     get_adr@adr:	
  1833                           ; 1 bytes @ 0x4
  1834                           
  1835                           
  1836                           ; 32 bytes @ 0x4
  1837  0024                     	ds	1
  1838  0025                     ?_EEPROM_WriteShortLong:
  1839  0025                     beep@count:	
  1840                           ; 1 bytes @ 0x5
  1841                           
  1842  0025                     get_fun@res:	
  1843                           ; 1 bytes @ 0x5
  1844                           
  1845  0025                     get_fun_full@res:	
  1846                           ; 2 bytes @ 0x5
  1847                           
  1848  0025                     get_jump@res:	
  1849                           ; 2 bytes @ 0x5
  1850                           
  1851  0025                     get_jump_full@res:	
  1852                           ; 2 bytes @ 0x5
  1853                           
  1854  0025                     EEPROM_WriteShortLong@ucData:	
  1855                           ; 2 bytes @ 0x5
  1856                           
  1857                           
  1858                           ; 3 bytes @ 0x5
  1859  0025                     	ds	1
  1860  0026                     ??_EEPROM_ReadShortLong:
  1861  0026                     ??_beep:	
  1862                           ; 1 bytes @ 0x6
  1863                           
  1864                           
  1865                           ; 1 bytes @ 0x6
  1866  0026                     	ds	1
  1867  0027                     get_fun_full@flag:
  1868  0027                     get_jump_full@flag:	
  1869                           ; 1 bytes @ 0x7
  1870                           
  1871                           
  1872                           ; 1 bytes @ 0x7
  1873  0027                     	ds	1
  1874  0028                     ??_EEPROM_WriteShortLong:
  1875  0028                     beep@j:	
  1876                           ; 1 bytes @ 0x8
  1877                           
  1878                           
  1879                           ; 1 bytes @ 0x8
  1880  0028                     	ds	1
  1881  0029                     beep@i:
  1882  0029                     EEPROM_WriteShortLong@dt:	
  1883                           ; 1 bytes @ 0x9
  1884                           
  1885                           
  1886                           ; 1 bytes @ 0x9
  1887  0029                     	ds	1
  1888  002A                     ??_fun_work:
  1889  002A                     ??_switch_wm:	
  1890                           ; 1 bytes @ 0xA
  1891                           
  1892  002A                     EEPROM_WriteShortLong@addr:	
  1893                           ; 1 bytes @ 0xA
  1894                           
  1895                           
  1896                           ; 1 bytes @ 0xA
  1897  002A                     	ds	1
  1898  002B                     ??_get_voltage:
  1899                           
  1900                           ; 1 bytes @ 0xB
  1901  002B                     	ds	1
  1902  002C                     EEPROM_ReadShortLong@dt:
  1903                           
  1904                           ; 3 bytes @ 0xC
  1905  002C                     	ds	1
  1906  002D                     get_voltage@res:
  1907                           
  1908                           ; 2 bytes @ 0xD
  1909  002D                     	ds	2
  1910  002F                     get_voltage@buf:
  1911  002F                     EEPROM_ReadShortLong@addr:	
  1912                           ; 1 bytes @ 0xF
  1913                           
  1914                           
  1915                           ; 1 bytes @ 0xF
  1916  002F                     	ds	1
  1917  0030                     ??_get_time:
  1918  0030                     get_voltage@q_804:	
  1919                           ; 1 bytes @ 0x10
  1920                           
  1921                           
  1922                           ; 1 bytes @ 0x10
  1923  0030                     	ds	1
  1924  0031                     get_voltage@q:
  1925                           
  1926                           ; 1 bytes @ 0x11
  1927  0031                     	ds	3
  1928  0034                     get_time@times:
  1929                           
  1930                           ; 12 bytes @ 0x14
  1931  0034                     	ds	12
  1932  0040                     get_time@time_count:
  1933                           
  1934                           ; 4 bytes @ 0x20
  1935  0040                     	ds	4
  1936  0044                     get_adr@i:
  1937  0044                     get_time@adr_error:	
  1938                           ; 1 bytes @ 0x24
  1939                           
  1940                           
  1941                           ; 1 bytes @ 0x24
  1942  0044                     	ds	1
  1943  0045                     get_adr@q:
  1944  0045                     get_time@buf2:	
  1945                           ; 1 bytes @ 0x25
  1946                           
  1947                           
  1948                           ; 3 bytes @ 0x25
  1949  0045                     	ds	1
  1950  0046                     get_adr@i_814:
  1951                           
  1952                           ; 1 bytes @ 0x26
  1953  0046                     	ds	1
  1954  0047                     get_adr@q_813:
  1955                           
  1956                           ; 1 bytes @ 0x27
  1957  0047                     	ds	1
  1958  0048                     get_adr@buf:
  1959  0048                     get_time@i:	
  1960                           ; 1 bytes @ 0x28
  1961                           
  1962                           
  1963                           ; 1 bytes @ 0x28
  1964  0048                     	ds	1
  1965  0049                     get_time@buf:
  1966                           
  1967                           ; 1 bytes @ 0x29
  1968  0049                     	ds	1
  1969  004A                     get_time@q:
  1970                           
  1971                           ; 1 bytes @ 0x2A
  1972  004A                     	ds	1
  1973  004B                     get_time@q_826:
  1974                           
  1975                           ; 1 bytes @ 0x2B
  1976  004B                     	ds	1
  1977  004C                     get_time@q_825:
  1978                           
  1979                           ; 1 bytes @ 0x2C
  1980  004C                     	ds	1
  1981  004D                     ??_get_eeprom:
  1982  004D                     ??_start_setup:	
  1983                           ; 1 bytes @ 0x2D
  1984                           
  1985  004D                     ??_main:	
  1986                           ; 1 bytes @ 0x2D
  1987                           
  1988                           
  1989                           	psect	maintext
  1990  0592                     __pmaintext:	
  1991                           ; 1 bytes @ 0x2D
  1992 ;;
  1993 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1994 ;;
  1995 ;; *************** function _main *****************
  1996 ;; Defined at:
  1997 ;;		line 454 in file "main.c"
  1998 ;; Parameters:    Size  Location     Type
  1999 ;;		None
  2000 ;; Auto vars:     Size  Location     Type
  2001 ;;		None
  2002 ;; Return value:  Size  Location     Type
  2003 ;;                  1    wreg      void 
  2004 ;; Registers used:
  2005 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2006 ;; Tracked objects:
  2007 ;;		On entry : B1F/0
  2008 ;;		On exit  : 1F/0
  2009 ;;		Unchanged: 0/0
  2010 ;; Data sizes:     COMMON   BANK0   BANK1
  2011 ;;      Params:         0       0       0
  2012 ;;      Locals:         0       0       0
  2013 ;;      Temps:          0       0       0
  2014 ;;      Totals:         0       0       0
  2015 ;;Total ram usage:        0 bytes
  2016 ;; Hardware stack levels required when called: 12
  2017 ;; This function calls:
  2018 ;;		_fun_work
  2019 ;;		_get_fun
  2020 ;;		_get_jump
  2021 ;;		_get_voltage
  2022 ;;		_povorot
  2023 ;;		_start_setup
  2024 ;;		_switch_wm
  2025 ;; This function is called by:
  2026 ;;		Startup code after reset
  2027 ;; This function uses a non-reentrant model
  2028 ;;
  2029                           
  2030  0592                     _main:	
  2031                           ;psect for function _main
  2032                           
  2033                           
  2034                           ;main.c: 456:     start_setup();
  2035                           
  2036                           ;incstack = 0
  2037                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2038  0592  23A5               	fcall	_start_setup
  2039  0593                     l2614:
  2040                           
  2041                           ;main.c: 459:         get_voltage();
  2042  0593  2186               	fcall	_get_voltage
  2043                           
  2044                           ;main.c: 460:         if (!FLAGS.bits.ALARM) {
  2045  0594  187C               	btfsc	_FLAGS,0
  2046  0595  2D93               	goto	l2614
  2047                           
  2048                           ;main.c: 461:             get_fun();
  2049  0596  231A               	fcall	_get_fun
  2050                           
  2051                           ;main.c: 462:             fun_work();
  2052  0597  220F               	fcall	_fun_work
  2053                           
  2054                           ;main.c: 463:             get_jump();
  2055  0598  234C               	fcall	_get_jump
  2056                           
  2057                           ;main.c: 464:             switch_wm();
  2058  0599  22B4               	fcall	_switch_wm
  2059                           
  2060                           ;main.c: 465:             povorot();
  2061  059A  237A               	fcall	_povorot
  2062  059B  2D93               	goto	l2614
  2063  059C                     __end_of_main:
  2064                           
  2065                           	psect	text1
  2066  02B4                     __ptext1:	
  2067 ;; *************** function _switch_wm *****************
  2068 ;; Defined at:
  2069 ;;		line 313 in file "main.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;		None
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;		None
  2074 ;; Return value:  Size  Location     Type
  2075 ;;                  1    wreg      void 
  2076 ;; Registers used:
  2077 ;;		wreg, status,2, status,0, pclath, cstack
  2078 ;; Tracked objects:
  2079 ;;		On entry : 1F/0
  2080 ;;		On exit  : 1F/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMMON   BANK0   BANK1
  2083 ;;      Params:         0       0       0
  2084 ;;      Locals:         0       0       0
  2085 ;;      Temps:          0       2       0
  2086 ;;      Totals:         0       2       0
  2087 ;;Total ram usage:        2 bytes
  2088 ;; Hardware stack levels used: 1
  2089 ;; Hardware stack levels required when called: 9
  2090 ;; This function calls:
  2091 ;;		_beep
  2092 ;;		_go_close
  2093 ;;		_go_close_alt
  2094 ;; This function is called by:
  2095 ;;		_main
  2096 ;; This function uses a non-reentrant model
  2097 ;;
  2098                           
  2099  02B4                     _switch_wm:	
  2100                           ;psect for function _switch_wm
  2101                           
  2102                           
  2103                           ;main.c: 314:     if (FLAGS.bits._JUMP_CONNECTED) {
  2104                           
  2105                           ;incstack = 0
  2106                           ; Regs used in _switch_wm: [wreg+status,2+status,0+pclath+cstack]
  2107  02B4  1E7C               	btfss	_FLAGS,4
  2108  02B5  2ACF               	goto	l448
  2109                           
  2110                           ;main.c: 315:         if (FLAGS.bits.NORMAL_WORK_MODE) {
  2111  02B6  1CFC               	btfss	_FLAGS,1
  2112  02B7  0008               	return
  2113                           
  2114                           ;main.c: 316:             FLAGS.bits.NORMAL_WORK_MODE = 0;
  2115  02B8  10FC               	bcf	_FLAGS,1
  2116                           
  2117                           ;main.c: 317:             if (FLAGS.bits.CLOSED) go_close_alt();
  2118  02B9  1D7C               	btfss	_FLAGS,2
  2119  02BA  2ABC               	goto	l2520
  2120  02BB  25EE               	fcall	_go_close_alt
  2121  02BC                     l2520:
  2122                           
  2123                           ;main.c: 319:             beep(250, 100, 40, 3);
  2124  02BC  30FA               	movlw	250
  2125  02BD  0020               	movlb	0	; select bank0
  2126  02BE  00A0               	movwf	beep@delay
  2127  02BF  3000               	movlw	0
  2128  02C0  00A1               	movwf	beep@delay+1
  2129  02C1  3064               	movlw	100
  2130  02C2  00A2               	movwf	beep@pause
  2131  02C3  3000               	movlw	0
  2132  02C4  00A3               	movwf	beep@pause+1
  2133  02C5  3028               	movlw	40
  2134  02C6  00AA               	movwf	??_switch_wm
  2135  02C7  082A               	movf	??_switch_wm,w
  2136  02C8  00A4               	movwf	beep@time
  2137  02C9  3003               	movlw	3
  2138  02CA  00AB               	movwf	??_switch_wm+1
  2139  02CB  082B               	movf	??_switch_wm+1,w
  2140  02CC  00A5               	movwf	beep@count
  2141  02CD  23F4               	fcall	_beep
  2142  02CE  0008               	return
  2143  02CF                     l448:
  2144                           
  2145                           ;main.c: 322:         if (!FLAGS.bits.NORMAL_WORK_MODE) {
  2146  02CF  18FC               	btfsc	_FLAGS,1
  2147  02D0  0008               	return
  2148                           
  2149                           ;main.c: 323:             FLAGS.bits.NORMAL_WORK_MODE = 1;
  2150  02D1  14FC               	bsf	_FLAGS,1
  2151                           
  2152                           ;main.c: 324:             if (FLAGS.bits.CLOSED) go_close();
  2153  02D2  1D7C               	btfss	_FLAGS,2
  2154  02D3  2AD5               	goto	l453
  2155  02D4  24A4               	fcall	_go_close
  2156  02D5                     l453:
  2157                           
  2158                           ;main.c: 326:             beep(250, 100, 40, 2);
  2159  02D5  30FA               	movlw	250
  2160  02D6  00A0               	movwf	beep@delay
  2161  02D7  3000               	movlw	0
  2162  02D8  00A1               	movwf	beep@delay+1
  2163  02D9  3064               	movlw	100
  2164  02DA  00A2               	movwf	beep@pause
  2165  02DB  3000               	movlw	0
  2166  02DC  00A3               	movwf	beep@pause+1
  2167  02DD  3028               	movlw	40
  2168  02DE  00AA               	movwf	??_switch_wm
  2169  02DF  082A               	movf	??_switch_wm,w
  2170  02E0  00A4               	movwf	beep@time
  2171  02E1  3002               	movlw	2
  2172  02E2  00AB               	movwf	??_switch_wm+1
  2173  02E3  082B               	movf	??_switch_wm+1,w
  2174  02E4  00A5               	movwf	beep@count
  2175  02E5  23F4               	fcall	_beep
  2176  02E6  0008               	return
  2177  02E7                     __end_of_switch_wm:
  2178                           
  2179                           	psect	text2
  2180  03A5                     __ptext2:	
  2181 ;; *************** function _start_setup *****************
  2182 ;; Defined at:
  2183 ;;		line 419 in file "main.c"
  2184 ;; Parameters:    Size  Location     Type
  2185 ;;		None
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;		None
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  1    wreg      void 
  2190 ;; Registers used:
  2191 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2192 ;; Tracked objects:
  2193 ;;		On entry : B1F/0
  2194 ;;		On exit  : 1F/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMMON   BANK0   BANK1
  2197 ;;      Params:         0       0       0
  2198 ;;      Locals:         0       0       0
  2199 ;;      Temps:          0       0       0
  2200 ;;      Totals:         0       0       0
  2201 ;;Total ram usage:        0 bytes
  2202 ;; Hardware stack levels used: 1
  2203 ;; Hardware stack levels required when called: 11
  2204 ;; This function calls:
  2205 ;;		_SYSTEM_Initialize
  2206 ;;		_TMR0_SetInterruptHandler
  2207 ;;		_TMR2_SetInterruptHandler
  2208 ;;		_TMR2_StartTimer
  2209 ;;		_get_eeprom
  2210 ;;		_get_fun_full
  2211 ;;		_get_jump_full
  2212 ;; This function is called by:
  2213 ;;		_main
  2214 ;; This function uses a non-reentrant model
  2215 ;;
  2216                           
  2217  03A5                     _start_setup:	
  2218                           ;psect for function _start_setup
  2219                           
  2220                           
  2221                           ;main.c: 421:     SYSTEM_Initialize();
  2222                           
  2223                           ;incstack = 0
  2224                           ; Regs used in _start_setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2225  03A5  25C2               	fcall	_SYSTEM_Initialize
  2226                           
  2227                           ;main.c: 422:     (INTCONbits.GIE = 1);
  2228  03A6  178B               	bsf	11,7	;volatile
  2229                           
  2230                           ;main.c: 423:     (INTCONbits.PEIE = 1);
  2231  03A7  170B               	bsf	11,6	;volatile
  2232                           
  2233                           ;main.c: 425:     get_eeprom();
  2234  03A8  2608               	fcall	_get_eeprom
  2235                           
  2236                           ;main.c: 426:     TMR0_SetInterruptHandler(switch_zum);
  2237  03A9  3069               	movlw	low _switch_zum
  2238  03AA  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2239  03AB  3005               	movlw	high _switch_zum
  2240  03AC  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2241  03AD  25E4               	fcall	_TMR0_SetInterruptHandler
  2242                           
  2243                           ;main.c: 427:     TMR2_SetInterruptHandler(sec_tick_work);
  2244  03AE  30E7               	movlw	low _sec_tick_work
  2245  03AF  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  2246  03B0  3002               	movlw	high _sec_tick_work
  2247  03B1  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  2248  03B2  25DF               	fcall	_TMR2_SetInterruptHandler
  2249                           
  2250                           ;main.c: 428:     TMR2_StartTimer();
  2251  03B3  260B               	fcall	_TMR2_StartTimer
  2252  03B4  0023               	movlb	3	; select bank3
  2253  03B5  118E               	bcf	14,3	;volatile
  2254  03B6  108C               	bcf	12,1	;volatile
  2255  03B7  110E               	bcf	14,2	;volatile
  2256  03B8  0024               	movlb	4	; select bank4
  2257  03B9  108C               	bcf	12,1	;volatile
  2258  03BA  0021               	movlb	1	; select bank1
  2259  03BB  148C               	bsf	12,1	;volatile
  2260  03BC  0024               	movlb	4	; select bank4
  2261  03BD  110E               	bcf	14,2	;volatile
  2262  03BE  0021               	movlb	1	; select bank1
  2263  03BF  150E               	bsf	14,2	;volatile
  2264                           
  2265                           ;main.c: 440:     INTCONbits.TMR0IE = 0;
  2266  03C0  128B               	bcf	11,5	;volatile
  2267                           
  2268                           ;main.c: 441:     FLAGS.value = 0;
  2269  03C1  01FC               	clrf	_FLAGS
  2270  03C2  0022               	movlb	2	; select bank2
  2271  03C3  128E               	bcf	14,5	;volatile
  2272  03C4  120E               	bcf	14,4	;volatile
  2273  03C5  100E               	bcf	14,0	;volatile
  2274  03C6  0021               	movlb	1	; select bank1
  2275  03C7  100E               	bcf	14,0	;volatile
  2276                           
  2277                           ;main.c: 448:     get_fun_full();
  2278  03C8  2248               	fcall	_get_fun_full
  2279                           
  2280                           ;main.c: 449:     get_jump_full();
  2281  03C9  2280               	fcall	_get_jump_full
  2282                           
  2283                           ;main.c: 450:     time_pow_s = 0;
  2284  03CA  0020               	movlb	0	; select bank0
  2285  03CB  01E6               	clrf	_time_pow_s
  2286  03CC  0008               	return
  2287  03CD                     __end_of_start_setup:
  2288                           
  2289                           	psect	text3
  2290  0280                     __ptext3:	
  2291 ;; *************** function _get_jump_full *****************
  2292 ;; Defined at:
  2293 ;;		line 207 in file "main.c"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;		None
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;  res             2    5[BANK0 ] unsigned int 
  2298 ;;  flag            1    7[BANK0 ] unsigned char 
  2299 ;; Return value:  Size  Location     Type
  2300 ;;                  1    wreg      void 
  2301 ;; Registers used:
  2302 ;;		wreg, status,2, status,0, pclath, cstack
  2303 ;; Tracked objects:
  2304 ;;		On entry : 1F/2
  2305 ;;		On exit  : 1F/3
  2306 ;;		Unchanged: 0/0
  2307 ;; Data sizes:     COMMON   BANK0   BANK1
  2308 ;;      Params:         0       0       0
  2309 ;;      Locals:         0       3       0
  2310 ;;      Temps:          0       1       0
  2311 ;;      Totals:         0       4       0
  2312 ;;Total ram usage:        4 bytes
  2313 ;; Hardware stack levels used: 1
  2314 ;; Hardware stack levels required when called: 8
  2315 ;; This function calls:
  2316 ;;		_ADC_GetConversion
  2317 ;; This function is called by:
  2318 ;;		_start_setup
  2319 ;; This function uses a non-reentrant model
  2320 ;;
  2321                           
  2322  0280                     _get_jump_full:	
  2323                           ;psect for function _get_jump_full
  2324                           
  2325                           
  2326                           ;incstack = 0
  2327                           ; Regs used in _get_jump_full: [wreg+status,2+status,0+pclath+cstack]
  2328                           ;main.c: 209:     static signed char jump_counter;;main.c: 210:     do { ANSELAbits.ANSA
      +                          1 = 1; } while(0);
  2329  0280  0023               	movlb	3	; select bank3
  2330  0281  148C               	bsf	12,1	;volatile
  2331                           
  2332                           ;main.c: 211:     char flag = 0;
  2333  0282  0020               	movlb	0	; select bank0
  2334  0283  01A7               	clrf	get_jump_full@flag
  2335  0284                     l2358:
  2336                           
  2337                           ;main.c: 213:         unsigned res = ADC_GetConversion(PIN_JUMP_STATE);
  2338  0284  3001               	movlw	1
  2339  0285  2485               	fcall	_ADC_GetConversion
  2340  0286  0821               	movf	?_ADC_GetConversion+1,w
  2341  0287  00A6               	movwf	get_jump_full@res+1
  2342  0288  0820               	movf	?_ADC_GetConversion,w
  2343  0289  00A5               	movwf	get_jump_full@res
  2344                           
  2345                           ;main.c: 214:         if (res < 2000) jump_counter--;
  2346  028A  3007               	movlw	7
  2347  028B  0226               	subwf	get_jump_full@res+1,w
  2348  028C  30D0               	movlw	208
  2349  028D  1903               	skipnz
  2350  028E  0225               	subwf	get_jump_full@res,w
  2351  028F  1803               	skipnc
  2352  0290  2A93               	goto	l2364
  2353  0291  30FF               	movlw	255
  2354  0292  2A94               	goto	L1
  2355  0293                     l2364:
  2356  0293  3001               	movlw	1
  2357  0294                     L1:
  2358  0294  00A4               	movwf	??_get_jump_full
  2359  0295  0824               	movf	??_get_jump_full,w
  2360  0296  07E2               	addwf	get_jump_full@jump_counter,f
  2361                           
  2362                           ;main.c: 217:         if (jump_counter > 10) {
  2363  0297  0862               	movf	get_jump_full@jump_counter,w
  2364  0298  3A80               	xorlw	128
  2365  0299  3E75               	addlw	-139
  2366  029A  1C03               	skipc
  2367  029B  2AA2               	goto	l2374
  2368                           
  2369                           ;main.c: 218:             jump_counter = 10;
  2370  029C  300A               	movlw	10
  2371  029D  00A4               	movwf	??_get_jump_full
  2372  029E  0824               	movf	??_get_jump_full,w
  2373  029F  00E2               	movwf	get_jump_full@jump_counter
  2374                           
  2375                           ;main.c: 219:             FLAGS.bits._JUMP_CONNECTED = 0;
  2376  02A0  127C               	bcf	_FLAGS,4
  2377                           
  2378                           ;main.c: 221:         } else if (jump_counter<-10) {
  2379  02A1  2AAC               	goto	l2372
  2380  02A2                     l2374:
  2381  02A2  0862               	movf	get_jump_full@jump_counter,w
  2382  02A3  3A80               	xorlw	128
  2383  02A4  3E8A               	addlw	138
  2384  02A5  1803               	skipnc
  2385  02A6  2AAE               	goto	l2382
  2386                           
  2387                           ;main.c: 222:             jump_counter = -10;
  2388  02A7  30F6               	movlw	246
  2389  02A8  00A4               	movwf	??_get_jump_full
  2390  02A9  0824               	movf	??_get_jump_full,w
  2391  02AA  00E2               	movwf	get_jump_full@jump_counter
  2392                           
  2393                           ;main.c: 223:             FLAGS.bits._JUMP_CONNECTED = 1;
  2394  02AB  167C               	bsf	_FLAGS,4
  2395  02AC                     l2372:
  2396                           
  2397                           ;main.c: 220:             flag = 1;
  2398  02AC  01A7               	clrf	get_jump_full@flag
  2399  02AD  0AA7               	incf	get_jump_full@flag,f
  2400  02AE                     l2382:
  2401                           
  2402                           ;main.c: 226:     } while (flag == 0);
  2403  02AE  0827               	movf	get_jump_full@flag,w
  2404  02AF  1903               	btfsc	3,2
  2405  02B0  2A84               	goto	l2358
  2406                           
  2407                           ;main.c: 227:     do { ANSELAbits.ANSA1 = 0; } while(0);
  2408  02B1  0023               	movlb	3	; select bank3
  2409  02B2  108C               	bcf	12,1	;volatile
  2410  02B3  0008               	return
  2411  02B4                     __end_of_get_jump_full:
  2412                           
  2413                           	psect	text4
  2414  0248                     __ptext4:	
  2415 ;; *************** function _get_fun_full *****************
  2416 ;; Defined at:
  2417 ;;		line 160 in file "main.c"
  2418 ;; Parameters:    Size  Location     Type
  2419 ;;		None
  2420 ;; Auto vars:     Size  Location     Type
  2421 ;;  res             2    5[BANK0 ] unsigned int 
  2422 ;;  flag            1    7[BANK0 ] unsigned char 
  2423 ;; Return value:  Size  Location     Type
  2424 ;;                  1    wreg      void 
  2425 ;; Registers used:
  2426 ;;		wreg, status,2, status,0, pclath, cstack
  2427 ;; Tracked objects:
  2428 ;;		On entry : 1F/1
  2429 ;;		On exit  : 1F/2
  2430 ;;		Unchanged: 0/0
  2431 ;; Data sizes:     COMMON   BANK0   BANK1
  2432 ;;      Params:         0       0       0
  2433 ;;      Locals:         0       3       0
  2434 ;;      Temps:          0       1       0
  2435 ;;      Totals:         0       4       0
  2436 ;;Total ram usage:        4 bytes
  2437 ;; Hardware stack levels used: 1
  2438 ;; Hardware stack levels required when called: 8
  2439 ;; This function calls:
  2440 ;;		_ADC_GetConversion
  2441 ;; This function is called by:
  2442 ;;		_start_setup
  2443 ;; This function uses a non-reentrant model
  2444 ;;
  2445                           
  2446  0248                     _get_fun_full:	
  2447                           ;psect for function _get_fun_full
  2448                           
  2449                           
  2450                           ;incstack = 0
  2451                           ; Regs used in _get_fun_full: [wreg+status,2+status,0+pclath+cstack]
  2452                           ;main.c: 162:     static signed char fun_counter;;main.c: 163:     do { LATCbits.LATC1 =
      +                           1; } while(0);
  2453  0248  0022               	movlb	2	; select bank2
  2454  0249  148E               	bsf	14,1	;volatile
  2455                           
  2456                           ;main.c: 164:     do { ANSELCbits.ANSC2 = 1; } while(0);
  2457  024A  0023               	movlb	3	; select bank3
  2458  024B  150E               	bsf	14,2	;volatile
  2459                           
  2460                           ;main.c: 165:     char flag = 0;
  2461  024C  0020               	movlb	0	; select bank0
  2462  024D  01A7               	clrf	get_fun_full@flag
  2463  024E                     l2330:
  2464                           
  2465                           ;main.c: 167:         unsigned res = ADC_GetConversion(PIN_FUN_STATE);
  2466  024E  3006               	movlw	6
  2467  024F  2485               	fcall	_ADC_GetConversion
  2468  0250  0821               	movf	?_ADC_GetConversion+1,w
  2469  0251  00A6               	movwf	get_fun_full@res+1
  2470  0252  0820               	movf	?_ADC_GetConversion,w
  2471  0253  00A5               	movwf	get_fun_full@res
  2472                           
  2473                           ;main.c: 168:         if (res < 2000) fun_counter--;
  2474  0254  3007               	movlw	7
  2475  0255  0226               	subwf	get_fun_full@res+1,w
  2476  0256  30D0               	movlw	208
  2477  0257  1903               	skipnz
  2478  0258  0225               	subwf	get_fun_full@res,w
  2479  0259  1803               	skipnc
  2480  025A  2A5D               	goto	l2336
  2481  025B  30FF               	movlw	255
  2482  025C  2A5E               	goto	L2
  2483  025D                     l2336:
  2484  025D  3001               	movlw	1
  2485  025E                     L2:
  2486  025E  00A4               	movwf	??_get_fun_full
  2487  025F  0824               	movf	??_get_fun_full,w
  2488  0260  07E4               	addwf	get_fun_full@fun_counter,f
  2489                           
  2490                           ;main.c: 170:         if (fun_counter > 10) {
  2491  0261  0864               	movf	get_fun_full@fun_counter,w
  2492  0262  3A80               	xorlw	128
  2493  0263  3E75               	addlw	-139
  2494  0264  1C03               	skipc
  2495  0265  2A6C               	goto	l2346
  2496                           
  2497                           ;main.c: 171:             fun_counter = 10;
  2498  0266  300A               	movlw	10
  2499  0267  00A4               	movwf	??_get_fun_full
  2500  0268  0824               	movf	??_get_fun_full,w
  2501  0269  00E4               	movwf	get_fun_full@fun_counter
  2502                           
  2503                           ;main.c: 172:             FLAGS.bits._FUN_CONNECTED = 0;
  2504  026A  11FC               	bcf	_FLAGS,3
  2505                           
  2506                           ;main.c: 174:         } else if (fun_counter<-10) {
  2507  026B  2A76               	goto	l2344
  2508  026C                     l2346:
  2509  026C  0864               	movf	get_fun_full@fun_counter,w
  2510  026D  3A80               	xorlw	128
  2511  026E  3E8A               	addlw	138
  2512  026F  1803               	skipnc
  2513  0270  2A78               	goto	l2354
  2514                           
  2515                           ;main.c: 175:             fun_counter = -10;
  2516  0271  30F6               	movlw	246
  2517  0272  00A4               	movwf	??_get_fun_full
  2518  0273  0824               	movf	??_get_fun_full,w
  2519  0274  00E4               	movwf	get_fun_full@fun_counter
  2520                           
  2521                           ;main.c: 176:             FLAGS.bits._FUN_CONNECTED = 1;
  2522  0275  15FC               	bsf	_FLAGS,3
  2523  0276                     l2344:
  2524                           
  2525                           ;main.c: 173:             flag = 1;
  2526  0276  01A7               	clrf	get_fun_full@flag
  2527  0277  0AA7               	incf	get_fun_full@flag,f
  2528  0278                     l2354:
  2529                           
  2530                           ;main.c: 179:     } while (flag == 0);
  2531  0278  0827               	movf	get_fun_full@flag,w
  2532  0279  1903               	btfsc	3,2
  2533  027A  2A4E               	goto	l2330
  2534                           
  2535                           ;main.c: 181:     do { ANSELCbits.ANSC2 = 0; } while(0);
  2536  027B  0023               	movlb	3	; select bank3
  2537  027C  110E               	bcf	14,2	;volatile
  2538                           
  2539                           ;main.c: 182:     do { LATCbits.LATC1 = 0; } while(0);
  2540  027D  0022               	movlb	2	; select bank2
  2541  027E  108E               	bcf	14,1	;volatile
  2542  027F  0008               	return
  2543  0280                     __end_of_get_fun_full:
  2544                           
  2545                           	psect	text5
  2546  0608                     __ptext5:	
  2547 ;; *************** function _get_eeprom *****************
  2548 ;; Defined at:
  2549 ;;		line 414 in file "main.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;		None
  2552 ;; Auto vars:     Size  Location     Type
  2553 ;;		None
  2554 ;; Return value:  Size  Location     Type
  2555 ;;                  1    wreg      void 
  2556 ;; Registers used:
  2557 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2558 ;; Tracked objects:
  2559 ;;		On entry : 1F/0
  2560 ;;		On exit  : 1F/0
  2561 ;;		Unchanged: 0/0
  2562 ;; Data sizes:     COMMON   BANK0   BANK1
  2563 ;;      Params:         0       0       0
  2564 ;;      Locals:         0       0       0
  2565 ;;      Temps:          0       0       0
  2566 ;;      Totals:         0       0       0
  2567 ;;Total ram usage:        0 bytes
  2568 ;; Hardware stack levels used: 1
  2569 ;; Hardware stack levels required when called: 10
  2570 ;; This function calls:
  2571 ;;		_get_adr
  2572 ;;		_get_time
  2573 ;; This function is called by:
  2574 ;;		_start_setup
  2575 ;; This function uses a non-reentrant model
  2576 ;;
  2577                           
  2578  0608                     _get_eeprom:	
  2579                           ;psect for function _get_eeprom
  2580                           
  2581                           
  2582                           ;main.c: 415:     get_adr();
  2583                           
  2584                           ;incstack = 0
  2585                           ; Regs used in _get_eeprom: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2586  0608  20FE               	fcall	_get_adr
  2587                           
  2588                           ;main.c: 416:     get_time();
  2589  0609  202B               	fcall	_get_time
  2590  060A  0008               	return
  2591  060B                     __end_of_get_eeprom:
  2592                           
  2593                           	psect	text6
  2594  002B                     __ptext6:	
  2595 ;; *************** function _get_time *****************
  2596 ;; Defined at:
  2597 ;;		line 377 in file "main.c"
  2598 ;; Parameters:    Size  Location     Type
  2599 ;;		None
  2600 ;; Auto vars:     Size  Location     Type
  2601 ;;  q               1   44[BANK0 ] unsigned char 
  2602 ;;  q               1   42[BANK0 ] unsigned char 
  2603 ;;  q               1   43[BANK0 ] unsigned char 
  2604 ;;  i               1   40[BANK0 ] unsigned char 
  2605 ;;  times          12   20[BANK0 ] unsigned um[4]
  2606 ;;  time_count      4   32[BANK0 ] unsigned char [4]
  2607 ;;  buf2            3   37[BANK0 ] unsigned um
  2608 ;;  buf             1   41[BANK0 ] unsigned char 
  2609 ;;  adr_error       1   36[BANK0 ] unsigned char 
  2610 ;; Return value:  Size  Location     Type
  2611 ;;                  1    wreg      void 
  2612 ;; Registers used:
  2613 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2614 ;; Tracked objects:
  2615 ;;		On entry : 1F/0
  2616 ;;		On exit  : 1F/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMMON   BANK0   BANK1
  2619 ;;      Params:         0       0       0
  2620 ;;      Locals:         0      25       0
  2621 ;;      Temps:          0       4       0
  2622 ;;      Totals:         0      29       0
  2623 ;;Total ram usage:       29 bytes
  2624 ;; Hardware stack levels used: 1
  2625 ;; Hardware stack levels required when called: 9
  2626 ;; This function calls:
  2627 ;;		_EEPROM_ReadShortLong
  2628 ;;		___bmul
  2629 ;; This function is called by:
  2630 ;;		_get_eeprom
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634  002B                     _get_time:	
  2635                           ;psect for function _get_time
  2636                           
  2637                           
  2638                           ;main.c: 379:     char adr_error = 0;
  2639                           
  2640                           ;incstack = 0
  2641                           ; Regs used in _get_time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2642  002B  01C4               	clrf	get_time@adr_error
  2643                           
  2644                           ;main.c: 380:     char buf=0;
  2645  002C  01C9               	clrf	get_time@buf
  2646                           
  2647                           ;main.c: 382:     __uint24 times[4] = {};
  2648  002D  3034               	movlw	low get_time@times
  2649  002E  0086               	movwf	6
  2650  002F  3000               	movlw	high get_time@times
  2651  0030  0087               	movwf	7
  2652  0031  300C               	movlw	12
  2653  0032  00B0               	movwf	??_get_time
  2654  0033  3000               	movlw	0
  2655  0034                     u1420:
  2656  0034  001E               	movwi fsr1++
  2657  0035  0BB0               	decfsz	??_get_time,f
  2658  0036  2834               	goto	u1420
  2659                           
  2660                           ;main.c: 383:     char time_count[4]={};
  2661  0037  3000               	movlw	0
  2662  0038  00C3               	movwf	get_time@time_count+3
  2663  0039  3000               	movlw	0
  2664  003A  00C2               	movwf	get_time@time_count+2
  2665  003B  3000               	movlw	0
  2666  003C  00C1               	movwf	get_time@time_count+1
  2667  003D  3000               	movlw	0
  2668  003E  00C0               	movwf	get_time@time_count
  2669                           
  2670                           ;main.c: 384:     for (unsigned char i = START_EEPROM_ADR; i < START_EEPROM_ADR + 0x10; 
      +                          i += 4) {
  2671  003F  0867               	movf	_START_EEPROM_ADR,w
  2672  0040  00B0               	movwf	??_get_time
  2673  0041  0830               	movf	??_get_time,w
  2674  0042  00C8               	movwf	get_time@i
  2675  0043                     l2258:
  2676  0043  0867               	movf	_START_EEPROM_ADR,w
  2677  0044  3E10               	addlw	16
  2678  0045  00B0               	movwf	??_get_time
  2679  0046  3000               	movlw	0
  2680  0047  1803               	skipnc
  2681  0048  3001               	movlw	1
  2682  0049  00B1               	movwf	??_get_time+1
  2683  004A  0831               	movf	??_get_time+1,w
  2684  004B  3A80               	xorlw	128
  2685  004C  3C80               	sublw	128
  2686  004D  1D03               	skipz
  2687  004E  2851               	goto	u1485
  2688  004F  0830               	movf	??_get_time,w
  2689  0050  0248               	subwf	get_time@i,w
  2690  0051                     u1485:
  2691  0051  1803               	btfsc	3,0
  2692  0052  28CC               	goto	l2260
  2693                           
  2694                           ;main.c: 385:         buf2 = EEPROM_ReadShortLong(i);
  2695  0053  0020               	movlb	0	; select bank0
  2696  0054  0848               	movf	get_time@i,w
  2697  0055  21D0               	fcall	_EEPROM_ReadShortLong
  2698  0056  0823               	movf	?_EEPROM_ReadShortLong,w
  2699  0057  00C5               	movwf	get_time@buf2
  2700  0058  0824               	movf	?_EEPROM_ReadShortLong+1,w
  2701  0059  00C6               	movwf	get_time@buf2+1
  2702  005A  0825               	movf	?_EEPROM_ReadShortLong+2,w
  2703  005B  00C7               	movwf	get_time@buf2+2
  2704                           
  2705                           ;main.c: 387:         for (char q = 0; q < 4; q++) {
  2706  005C  01CA               	clrf	get_time@q
  2707  005D                     l2224:
  2708                           
  2709                           ;main.c: 388:             if (buf2 == times[q]) {
  2710  005D  3003               	movlw	3
  2711  005E  00B0               	movwf	??_get_time
  2712  005F  0830               	movf	??_get_time,w
  2713  0060  00A0               	movwf	___bmul@multiplicand
  2714  0061  084A               	movf	get_time@q,w
  2715  0062  2538               	fcall	___bmul
  2716  0063  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2717  0064  0086               	movwf	6
  2718  0065  0187               	clrf	7
  2719  0066  3F40               	moviw [0]fsr1
  2720  0067  0645               	xorwf	get_time@buf2,w
  2721  0068  1D03               	skipz
  2722  0069  2870               	goto	u1435
  2723  006A  3F41               	moviw [1]fsr1
  2724  006B  0646               	xorwf	get_time@buf2+1,w
  2725  006C  1D03               	skipz
  2726  006D  2870               	goto	u1435
  2727  006E  3F42               	moviw [2]fsr1
  2728  006F  0647               	xorwf	get_time@buf2+2,w
  2729  0070                     u1435:
  2730  0070  1D03               	skipz
  2731  0071  2880               	goto	l2230
  2732                           
  2733                           ;main.c: 389:                 time_count[q]++;
  2734  0072  3001               	movlw	1
  2735  0073  00B0               	movwf	??_get_time
  2736  0074  084A               	movf	get_time@q,w
  2737  0075  3E40               	addlw	(low (get_time@time_count| 0))& (0+255)
  2738  0076  0086               	movwf	6
  2739  0077  0187               	clrf	7
  2740  0078  0830               	movf	??_get_time,w
  2741  0079  0781               	addwf	1,f
  2742                           
  2743                           ;main.c: 390:                 buf2 = 0;
  2744  007A  3000               	movlw	0
  2745  007B  00C5               	movwf	get_time@buf2
  2746  007C  3000               	movlw	0
  2747  007D  00C6               	movwf	get_time@buf2+1
  2748  007E  3000               	movlw	0
  2749  007F  00C7               	movwf	get_time@buf2+2
  2750  0080                     l2230:
  2751                           
  2752                           ;main.c: 392:         }
  2753  0080  3001               	movlw	1
  2754  0081  00B0               	movwf	??_get_time
  2755  0082  0830               	movf	??_get_time,w
  2756  0083  07CA               	addwf	get_time@q,f
  2757  0084  3004               	movlw	4
  2758  0085  024A               	subwf	get_time@q,w
  2759  0086  1C03               	skipc
  2760  0087  285D               	goto	l2224
  2761                           
  2762                           ;main.c: 394:         if (buf2 != 0) {
  2763  0088  0847               	movf	get_time@buf2+2,w
  2764  0089  0446               	iorwf	get_time@buf2+1,w
  2765  008A  0445               	iorwf	get_time@buf2,w
  2766  008B  1903               	skipnz
  2767  008C  28C7               	goto	l2256
  2768                           
  2769                           ;main.c: 395:             adr_error = 1;
  2770  008D  01C4               	clrf	get_time@adr_error
  2771  008E  0AC4               	incf	get_time@adr_error,f
  2772                           
  2773                           ;main.c: 396:             for (unsigned char q = 0; q < 4; q++)
  2774  008F  01CC               	clrf	get_time@q_825
  2775  0090                     l2244:
  2776                           
  2777                           ;main.c: 397:                 if (times[q]== 0) {
  2778  0090  3003               	movlw	3
  2779  0091  00B0               	movwf	??_get_time
  2780  0092  0830               	movf	??_get_time,w
  2781  0093  00A0               	movwf	___bmul@multiplicand
  2782  0094  084C               	movf	get_time@q_825,w
  2783  0095  2538               	fcall	___bmul
  2784  0096  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2785  0097  0086               	movwf	6
  2786  0098  0187               	clrf	7
  2787  0099  3F40               	moviw [0]fsr1
  2788  009A  00B1               	movwf	??_get_time+1
  2789  009B  3F41               	moviw [1]fsr1
  2790  009C  00B2               	movwf	??_get_time+2
  2791  009D  3F42               	moviw [2]fsr1
  2792  009E  00B3               	movwf	??_get_time+3
  2793  009F  0833               	movf	??_get_time+3,w
  2794  00A0  0432               	iorwf	??_get_time+2,w
  2795  00A1  0431               	iorwf	??_get_time+1,w
  2796  00A2  1D03               	skipz
  2797  00A3  28BF               	goto	l2252
  2798                           
  2799                           ;main.c: 398:                     times[q] = buf;
  2800  00A4  0849               	movf	get_time@buf,w
  2801  00A5  00B0               	movwf	??_get_time
  2802  00A6  01B1               	clrf	??_get_time+1
  2803  00A7  01B2               	clrf	??_get_time+2
  2804  00A8  3003               	movlw	3
  2805  00A9  00B3               	movwf	??_get_time+3
  2806  00AA  0833               	movf	??_get_time+3,w
  2807  00AB  00A0               	movwf	___bmul@multiplicand
  2808  00AC  084C               	movf	get_time@q_825,w
  2809  00AD  2538               	fcall	___bmul
  2810  00AE  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2811  00AF  0086               	movwf	6
  2812  00B0  0187               	clrf	7
  2813  00B1  0830               	movf	??_get_time,w
  2814  00B2  3FC0               	movwi [0]fsr1
  2815  00B3  0831               	movf	??_get_time+1,w
  2816  00B4  3FC1               	movwi [1]fsr1
  2817  00B5  0832               	movf	??_get_time+2,w
  2818  00B6  3FC2               	movwi [2]fsr1
  2819                           
  2820                           ;main.c: 399:                     time_count[q] = 1;
  2821  00B7  084C               	movf	get_time@q_825,w
  2822  00B8  3E40               	addlw	(low (get_time@time_count| 0))& (0+255)
  2823  00B9  0086               	movwf	6
  2824  00BA  0187               	clrf	7
  2825  00BB  0181               	clrf	1
  2826  00BC  0A81               	incf	1,f
  2827                           
  2828                           ;main.c: 400:                     buf = 0;
  2829  00BD  01C9               	clrf	get_time@buf
  2830                           
  2831                           ;main.c: 401:                     break;
  2832  00BE  28C7               	goto	l2256
  2833  00BF                     l2252:
  2834  00BF  3001               	movlw	1
  2835  00C0  00B0               	movwf	??_get_time
  2836  00C1  0830               	movf	??_get_time,w
  2837  00C2  07CC               	addwf	get_time@q_825,f
  2838  00C3  3004               	movlw	4
  2839  00C4  024C               	subwf	get_time@q_825,w
  2840  00C5  1C03               	skipc
  2841  00C6  2890               	goto	l2244
  2842  00C7                     l2256:
  2843                           
  2844                           ;main.c: 404:     }
  2845  00C7  3004               	movlw	4
  2846  00C8  00B0               	movwf	??_get_time
  2847  00C9  0830               	movf	??_get_time,w
  2848  00CA  07C8               	addwf	get_time@i,f
  2849  00CB  2843               	goto	l2258
  2850  00CC                     l2260:
  2851                           
  2852                           ;main.c: 405:     buf = 0;
  2853  00CC  0020               	movlb	0	; select bank0
  2854  00CD  01C9               	clrf	get_time@buf
  2855                           
  2856                           ;main.c: 406:     for (unsigned char q = 0; q < 4; q++) {
  2857  00CE  01CB               	clrf	get_time@q_826
  2858  00CF                     l2266:
  2859                           
  2860                           ;main.c: 407:         if (time_count[q] > time_count[buf]) buf = q;
  2861  00CF  0849               	movf	get_time@buf,w
  2862  00D0  3E40               	addlw	(low (get_time@time_count| 0))& (0+255)
  2863  00D1  0086               	movwf	6
  2864  00D2  0187               	clrf	7
  2865  00D3  084B               	movf	get_time@q_826,w
  2866  00D4  3E40               	addlw	(low (get_time@time_count| 0))& (0+255)
  2867  00D5  0084               	movwf	4
  2868  00D6  0185               	clrf	5
  2869  00D7  0800               	movf	0,w
  2870  00D8  0201               	subwf	1,w
  2871  00D9  1803               	skipnc
  2872  00DA  28DF               	goto	l2270
  2873  00DB  084B               	movf	get_time@q_826,w
  2874  00DC  00B0               	movwf	??_get_time
  2875  00DD  0830               	movf	??_get_time,w
  2876  00DE  00C9               	movwf	get_time@buf
  2877  00DF                     l2270:
  2878                           
  2879                           ;main.c: 408:     }
  2880  00DF  3001               	movlw	1
  2881  00E0  00B0               	movwf	??_get_time
  2882  00E1  0830               	movf	??_get_time,w
  2883  00E2  07CB               	addwf	get_time@q_826,f
  2884  00E3  3004               	movlw	4
  2885  00E4  024B               	subwf	get_time@q_826,w
  2886  00E5  1C03               	skipc
  2887  00E6  28CF               	goto	l2266
  2888                           
  2889                           ;main.c: 409:     time_s = times[buf];
  2890  00E7  3003               	movlw	3
  2891  00E8  00B0               	movwf	??_get_time
  2892  00E9  0830               	movf	??_get_time,w
  2893  00EA  00A0               	movwf	___bmul@multiplicand
  2894  00EB  0849               	movf	get_time@buf,w
  2895  00EC  2538               	fcall	___bmul
  2896  00ED  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2897  00EE  0086               	movwf	6
  2898  00EF  0187               	clrf	7
  2899  00F0  3F40               	moviw [0]fsr1
  2900  00F1  00DD               	movwf	_time_s
  2901  00F2  3F41               	moviw [1]fsr1
  2902  00F3  00DE               	movwf	_time_s+1
  2903  00F4  3F42               	moviw [2]fsr1
  2904  00F5  00DF               	movwf	_time_s+2
  2905                           
  2906                           ;main.c: 411:     if (adr_error) START_EEPROM_ADR += 0x10;
  2907  00F6  0844               	movf	get_time@adr_error,w
  2908  00F7  1903               	btfsc	3,2
  2909  00F8  0008               	return
  2910  00F9  3010               	movlw	16
  2911  00FA  00B0               	movwf	??_get_time
  2912  00FB  0830               	movf	??_get_time,w
  2913  00FC  07E7               	addwf	_START_EEPROM_ADR,f
  2914  00FD  0008               	return
  2915  00FE                     __end_of_get_time:
  2916                           
  2917                           	psect	text7
  2918  0538                     __ptext7:	
  2919 ;; *************** function ___bmul *****************
  2920 ;; Defined at:
  2921 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul8.c"
  2922 ;; Parameters:    Size  Location     Type
  2923 ;;  multiplier      1    wreg     unsigned char 
  2924 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  2925 ;; Auto vars:     Size  Location     Type
  2926 ;;  multiplier      1    3[BANK0 ] unsigned char 
  2927 ;;  product         1    2[BANK0 ] unsigned char 
  2928 ;; Return value:  Size  Location     Type
  2929 ;;                  1    wreg      unsigned char 
  2930 ;; Registers used:
  2931 ;;		wreg, status,2, status,0
  2932 ;; Tracked objects:
  2933 ;;		On entry : 1F/0
  2934 ;;		On exit  : 1F/0
  2935 ;;		Unchanged: 0/0
  2936 ;; Data sizes:     COMMON   BANK0   BANK1
  2937 ;;      Params:         0       1       0
  2938 ;;      Locals:         0       2       0
  2939 ;;      Temps:          0       1       0
  2940 ;;      Totals:         0       4       0
  2941 ;;Total ram usage:        4 bytes
  2942 ;; Hardware stack levels used: 1
  2943 ;; Hardware stack levels required when called: 7
  2944 ;; This function calls:
  2945 ;;		Nothing
  2946 ;; This function is called by:
  2947 ;;		_get_time
  2948 ;; This function uses a non-reentrant model
  2949 ;;
  2950                           
  2951  0538                     ___bmul:	
  2952                           ;psect for function ___bmul
  2953                           
  2954                           
  2955                           ;incstack = 0
  2956                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2957                           ;___bmul@multiplier stored from wreg
  2958  0538  00A3               	movwf	___bmul@multiplier
  2959  0539  01A2               	clrf	___bmul@product
  2960  053A                     l2008:
  2961  053A  1C23               	btfss	___bmul@multiplier,0
  2962  053B  2D40               	goto	l2012
  2963  053C  0820               	movf	___bmul@multiplicand,w
  2964  053D  00A1               	movwf	??___bmul
  2965  053E  0821               	movf	??___bmul,w
  2966  053F  07A2               	addwf	___bmul@product,f
  2967  0540                     l2012:
  2968  0540  1003               	clrc
  2969  0541  0DA0               	rlf	___bmul@multiplicand,f
  2970  0542  1003               	clrc
  2971  0543  0CA3               	rrf	___bmul@multiplier,f
  2972  0544  0823               	movf	___bmul@multiplier,w
  2973  0545  1D03               	btfss	3,2
  2974  0546  2D3A               	goto	l2008
  2975  0547  0822               	movf	___bmul@product,w
  2976  0548  0008               	return
  2977  0549                     __end_of___bmul:
  2978                           
  2979                           	psect	text8
  2980  01D0                     __ptext8:	
  2981 ;; *************** function _EEPROM_ReadShortLong *****************
  2982 ;; Defined at:
  2983 ;;		line 48 in file "eeprom.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;  addr            1    wreg     unsigned char 
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;  addr            1   15[BANK0 ] unsigned char 
  2988 ;;  dt              3   12[BANK0 ] unsigned um
  2989 ;; Return value:  Size  Location     Type
  2990 ;;                  3    3[BANK0 ] unsigned um
  2991 ;; Registers used:
  2992 ;;		wreg, status,2, status,0, pclath, cstack
  2993 ;; Tracked objects:
  2994 ;;		On entry : 1F/0
  2995 ;;		On exit  : 1F/0
  2996 ;;		Unchanged: 0/0
  2997 ;; Data sizes:     COMMON   BANK0   BANK1
  2998 ;;      Params:         0       3       0
  2999 ;;      Locals:         0       4       0
  3000 ;;      Temps:          0       6       0
  3001 ;;      Totals:         0      13       0
  3002 ;;Total ram usage:       13 bytes
  3003 ;; Hardware stack levels used: 1
  3004 ;; Hardware stack levels required when called: 8
  3005 ;; This function calls:
  3006 ;;		_EEPROM_ReadByte
  3007 ;; This function is called by:
  3008 ;;		_get_time
  3009 ;; This function uses a non-reentrant model
  3010 ;;
  3011                           
  3012  01D0                     _EEPROM_ReadShortLong:	
  3013                           ;psect for function _EEPROM_ReadShortLong
  3014                           
  3015                           
  3016                           ;incstack = 0
  3017                           ; Regs used in _EEPROM_ReadShortLong: [wreg+status,2+status,0+pclath+cstack]
  3018                           ;EEPROM_ReadShortLong@addr stored from wreg
  3019  01D0  00AF               	movwf	EEPROM_ReadShortLong@addr
  3020                           
  3021                           ;eeprom.c: 49:     __uint24 dt = EEPROM_ReadByte(addr + 2)*256*256;
  3022  01D1  082F               	movf	EEPROM_ReadShortLong@addr,w
  3023  01D2  3E02               	addlw	2
  3024  01D3  2524               	fcall	_EEPROM_ReadByte
  3025  01D4  0020               	movlb	0	; select bank0
  3026  01D5  00A6               	movwf	??_EEPROM_ReadShortLong
  3027  01D6  01A7               	clrf	??_EEPROM_ReadShortLong+1
  3028  01D7  0826               	movf	??_EEPROM_ReadShortLong,w
  3029  01D8  00A7               	movwf	??_EEPROM_ReadShortLong+1
  3030  01D9  01A6               	clrf	??_EEPROM_ReadShortLong
  3031  01DA  0826               	movf	??_EEPROM_ReadShortLong,w
  3032  01DB  00A7               	movwf	??_EEPROM_ReadShortLong+1
  3033  01DC  01A6               	clrf	??_EEPROM_ReadShortLong
  3034  01DD  0826               	movf	??_EEPROM_ReadShortLong,w
  3035  01DE  00AC               	movwf	EEPROM_ReadShortLong@dt
  3036  01DF  0827               	movf	??_EEPROM_ReadShortLong+1,w
  3037  01E0  00AD               	movwf	EEPROM_ReadShortLong@dt+1
  3038  01E1  0D89               	rlf	9,f
  3039  01E2  3B89               	subwfb	9,f
  3040  01E3  0989               	comf	9,f
  3041  01E4  00AE               	movwf	EEPROM_ReadShortLong@dt+2
  3042                           
  3043                           ;eeprom.c: 50:     dt += EEPROM_ReadByte(addr + 1)*256;
  3044  01E5  082F               	movf	EEPROM_ReadShortLong@addr,w
  3045  01E6  3E01               	addlw	1
  3046  01E7  2524               	fcall	_EEPROM_ReadByte
  3047  01E8  0020               	movlb	0	; select bank0
  3048  01E9  00A6               	movwf	??_EEPROM_ReadShortLong
  3049  01EA  01A7               	clrf	??_EEPROM_ReadShortLong+1
  3050  01EB  0826               	movf	??_EEPROM_ReadShortLong,w
  3051  01EC  00A7               	movwf	??_EEPROM_ReadShortLong+1
  3052  01ED  01A6               	clrf	??_EEPROM_ReadShortLong
  3053  01EE  0826               	movf	??_EEPROM_ReadShortLong,w
  3054  01EF  00A9               	movwf	??_EEPROM_ReadShortLong+3
  3055  01F0  0827               	movf	??_EEPROM_ReadShortLong+1,w
  3056  01F1  00AA               	movwf	??_EEPROM_ReadShortLong+4
  3057  01F2  3000               	movlw	0
  3058  01F3  1BAA               	btfsc	??_EEPROM_ReadShortLong+4,7
  3059  01F4  30FF               	movlw	255
  3060  01F5  00AB               	movwf	??_EEPROM_ReadShortLong+5
  3061  01F6  0829               	movf	??_EEPROM_ReadShortLong+3,w
  3062  01F7  07AC               	addwf	EEPROM_ReadShortLong@dt,f
  3063  01F8  082A               	movf	??_EEPROM_ReadShortLong+4,w
  3064  01F9  3DAD               	addwfc	EEPROM_ReadShortLong@dt+1,f
  3065  01FA  082B               	movf	??_EEPROM_ReadShortLong+5,w
  3066  01FB  3DAE               	addwfc	EEPROM_ReadShortLong@dt+2,f
  3067                           
  3068                           ;eeprom.c: 51:     dt += EEPROM_ReadByte(addr);
  3069  01FC  082F               	movf	EEPROM_ReadShortLong@addr,w
  3070  01FD  2524               	fcall	_EEPROM_ReadByte
  3071  01FE  0020               	movlb	0	; select bank0
  3072  01FF  00A6               	movwf	??_EEPROM_ReadShortLong
  3073  0200  01A7               	clrf	??_EEPROM_ReadShortLong+1
  3074  0201  01A8               	clrf	??_EEPROM_ReadShortLong+2
  3075  0202  0826               	movf	??_EEPROM_ReadShortLong,w
  3076  0203  07AC               	addwf	EEPROM_ReadShortLong@dt,f
  3077  0204  0827               	movf	??_EEPROM_ReadShortLong+1,w
  3078  0205  3DAD               	addwfc	EEPROM_ReadShortLong@dt+1,f
  3079  0206  0828               	movf	??_EEPROM_ReadShortLong+2,w
  3080  0207  3DAE               	addwfc	EEPROM_ReadShortLong@dt+2,f
  3081                           
  3082                           ;eeprom.c: 52:     return dt;
  3083  0208  082C               	movf	EEPROM_ReadShortLong@dt,w
  3084  0209  00A3               	movwf	?_EEPROM_ReadShortLong
  3085  020A  082D               	movf	EEPROM_ReadShortLong@dt+1,w
  3086  020B  00A4               	movwf	?_EEPROM_ReadShortLong+1
  3087  020C  082E               	movf	EEPROM_ReadShortLong@dt+2,w
  3088  020D  00A5               	movwf	?_EEPROM_ReadShortLong+2
  3089  020E  0008               	return
  3090  020F                     __end_of_EEPROM_ReadShortLong:
  3091                           
  3092                           	psect	text9
  3093  00FE                     __ptext9:	
  3094 ;; *************** function _get_adr *****************
  3095 ;; Defined at:
  3096 ;;		line 344 in file "main.c"
  3097 ;; Parameters:    Size  Location     Type
  3098 ;;		None
  3099 ;; Auto vars:     Size  Location     Type
  3100 ;;  q               1   39[BANK0 ] unsigned char 
  3101 ;;  q               1   37[BANK0 ] unsigned char 
  3102 ;;  i               1   38[BANK0 ] unsigned char 
  3103 ;;  i               1   36[BANK0 ] unsigned char 
  3104 ;;  adr            32    4[BANK0 ] unsigned char [2][16]
  3105 ;;  buf             1   40[BANK0 ] unsigned char 
  3106 ;; Return value:  Size  Location     Type
  3107 ;;                  1    wreg      void 
  3108 ;; Registers used:
  3109 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3110 ;; Tracked objects:
  3111 ;;		On entry : 1F/0
  3112 ;;		On exit  : 1F/0
  3113 ;;		Unchanged: 0/0
  3114 ;; Data sizes:     COMMON   BANK0   BANK1
  3115 ;;      Params:         0       0       0
  3116 ;;      Locals:         0      37       0
  3117 ;;      Temps:          0       1       0
  3118 ;;      Totals:         0      38       0
  3119 ;;Total ram usage:       38 bytes
  3120 ;; Hardware stack levels used: 1
  3121 ;; Hardware stack levels required when called: 8
  3122 ;; This function calls:
  3123 ;;		_EEPROM_ReadByte
  3124 ;; This function is called by:
  3125 ;;		_get_eeprom
  3126 ;; This function uses a non-reentrant model
  3127 ;;
  3128                           
  3129  00FE                     _get_adr:	
  3130                           ;psect for function _get_adr
  3131                           
  3132                           
  3133                           ;main.c: 346:     char adr[16][2] = {};
  3134                           
  3135                           ;incstack = 0
  3136                           ; Regs used in _get_adr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3137  00FE  3024               	movlw	low get_adr@adr
  3138  00FF  0086               	movwf	6
  3139  0100  3000               	movlw	high get_adr@adr
  3140  0101  0087               	movwf	7
  3141  0102  3020               	movlw	32
  3142  0103  00A3               	movwf	??_get_adr
  3143  0104  3000               	movlw	0
  3144  0105                     u1300:
  3145  0105  001E               	movwi fsr1++
  3146  0106  0BA3               	decfsz	??_get_adr,f
  3147  0107  2905               	goto	u1300
  3148                           
  3149                           ;main.c: 348:     for (unsigned char i = 0; i < 0x10; i++) {
  3150  0108  01C4               	clrf	get_adr@i
  3151  0109                     l2140:
  3152                           
  3153                           ;main.c: 349:         buf = EEPROM_ReadByte(i);
  3154  0109  0844               	movf	get_adr@i,w
  3155  010A  2524               	fcall	_EEPROM_ReadByte
  3156  010B  0020               	movlb	0	; select bank0
  3157  010C  00A3               	movwf	??_get_adr
  3158  010D  0823               	movf	??_get_adr,w
  3159  010E  00C8               	movwf	get_adr@buf
  3160                           
  3161                           ;main.c: 350:         if (buf == 0) continue;
  3162  010F  0848               	movf	get_adr@buf,w
  3163  0110  1903               	btfsc	3,2
  3164  0111  2950               	goto	l2180
  3165                           
  3166                           ;main.c: 351:         for (unsigned char q = 0; q < 16; q++) {
  3167  0112  01C5               	clrf	get_adr@q
  3168  0113                     l2152:
  3169                           
  3170                           ;main.c: 352:             if (buf == adr[q][0]) {
  3171  0113  3545               	lslf	get_adr@q,w
  3172  0114  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3173  0115  0086               	movwf	6
  3174  0116  0187               	clrf	7
  3175  0117  0801               	movf	1,w
  3176  0118  0648               	xorwf	get_adr@buf,w
  3177  0119  1D03               	skipz
  3178  011A  2925               	goto	l2158
  3179                           
  3180                           ;main.c: 353:                 (adr[q][1])++;
  3181  011B  3001               	movlw	1
  3182  011C  00A3               	movwf	??_get_adr
  3183  011D  1403               	setc
  3184  011E  0D45               	rlf	get_adr@q,w
  3185  011F  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3186  0120  0086               	movwf	6
  3187  0121  0187               	clrf	7
  3188  0122  0823               	movf	??_get_adr,w
  3189  0123  0781               	addwf	1,f
  3190                           
  3191                           ;main.c: 354:                 buf = 0;
  3192  0124  01C8               	clrf	get_adr@buf
  3193  0125                     l2158:
  3194                           
  3195                           ;main.c: 356:         }
  3196  0125  3001               	movlw	1
  3197  0126  00A3               	movwf	??_get_adr
  3198  0127  0823               	movf	??_get_adr,w
  3199  0128  07C5               	addwf	get_adr@q,f
  3200  0129  3010               	movlw	16
  3201  012A  0245               	subwf	get_adr@q,w
  3202  012B  1C03               	skipc
  3203  012C  2913               	goto	l2152
  3204                           
  3205                           ;main.c: 358:         if (buf != 0) {
  3206  012D  0848               	movf	get_adr@buf,w
  3207  012E  1903               	btfsc	3,2
  3208  012F  2950               	goto	l2180
  3209                           
  3210                           ;main.c: 359:             for (unsigned char q = 0; q < 16; q++)
  3211  0130  01C7               	clrf	get_adr@q_813
  3212  0131                     l2170:
  3213                           
  3214                           ;main.c: 360:                 if (adr[q][0] == 0) {
  3215  0131  3547               	lslf	get_adr@q_813,w
  3216  0132  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3217  0133  0086               	movwf	6
  3218  0134  0187               	clrf	7
  3219  0135  0801               	movf	1,w
  3220  0136  1D03               	btfss	3,2
  3221  0137  2948               	goto	l2176
  3222                           
  3223                           ;main.c: 361:                     adr[q][0] = buf;
  3224  0138  0848               	movf	get_adr@buf,w
  3225  0139  00A3               	movwf	??_get_adr
  3226  013A  3547               	lslf	get_adr@q_813,w
  3227  013B  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3228  013C  0086               	movwf	6
  3229  013D  0187               	clrf	7
  3230  013E  0823               	movf	??_get_adr,w
  3231  013F  0081               	movwf	1
  3232                           
  3233                           ;main.c: 362:                     adr[q][1] = 1;
  3234  0140  1403               	setc
  3235  0141  0D47               	rlf	get_adr@q_813,w
  3236  0142  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3237  0143  0086               	movwf	6
  3238  0144  0187               	clrf	7
  3239  0145  0181               	clrf	1
  3240  0146  0A81               	incf	1,f
  3241                           
  3242                           ;main.c: 364:                     break;
  3243  0147  2950               	goto	l2180
  3244  0148                     l2176:
  3245  0148  3001               	movlw	1
  3246  0149  00A3               	movwf	??_get_adr
  3247  014A  0823               	movf	??_get_adr,w
  3248  014B  07C7               	addwf	get_adr@q_813,f
  3249  014C  3010               	movlw	16
  3250  014D  0247               	subwf	get_adr@q_813,w
  3251  014E  1C03               	skipc
  3252  014F  2931               	goto	l2170
  3253  0150                     l2180:
  3254  0150  3001               	movlw	1
  3255  0151  00A3               	movwf	??_get_adr
  3256  0152  0823               	movf	??_get_adr,w
  3257  0153  07C4               	addwf	get_adr@i,f
  3258  0154  3010               	movlw	16
  3259  0155  0244               	subwf	get_adr@i,w
  3260  0156  1C03               	skipc
  3261  0157  2909               	goto	l2140
  3262                           
  3263                           ;main.c: 368:     buf = 0;
  3264  0158  01C8               	clrf	get_adr@buf
  3265                           
  3266                           ;main.c: 369:     for (unsigned char i = 0; i < 0x10; i++) {
  3267  0159  01C6               	clrf	get_adr@i_814
  3268  015A                     l2190:
  3269                           
  3270                           ;main.c: 370:         if (adr[i][1] > adr[buf][1]) buf = i;
  3271  015A  1403               	setc
  3272  015B  0D48               	rlf	get_adr@buf,w
  3273  015C  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3274  015D  0086               	movwf	6
  3275  015E  0187               	clrf	7
  3276  015F  1403               	setc
  3277  0160  0D46               	rlf	get_adr@i_814,w
  3278  0161  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3279  0162  0084               	movwf	4
  3280  0163  0185               	clrf	5
  3281  0164  0800               	movf	0,w
  3282  0165  0201               	subwf	1,w
  3283  0166  1803               	skipnc
  3284  0167  296C               	goto	l2194
  3285  0168  0846               	movf	get_adr@i_814,w
  3286  0169  00A3               	movwf	??_get_adr
  3287  016A  0823               	movf	??_get_adr,w
  3288  016B  00C8               	movwf	get_adr@buf
  3289  016C                     l2194:
  3290                           
  3291                           ;main.c: 371:     }
  3292  016C  3001               	movlw	1
  3293  016D  00A3               	movwf	??_get_adr
  3294  016E  0823               	movf	??_get_adr,w
  3295  016F  07C6               	addwf	get_adr@i_814,f
  3296  0170  3010               	movlw	16
  3297  0171  0246               	subwf	get_adr@i_814,w
  3298  0172  1C03               	skipc
  3299  0173  295A               	goto	l2190
  3300                           
  3301                           ;main.c: 372:     START_EEPROM_ADR = adr[buf][0];
  3302  0174  3548               	lslf	get_adr@buf,w
  3303  0175  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3304  0176  0086               	movwf	6
  3305  0177  0187               	clrf	7
  3306  0178  0801               	movf	1,w
  3307  0179  00A3               	movwf	??_get_adr
  3308  017A  0823               	movf	??_get_adr,w
  3309  017B  00E7               	movwf	_START_EEPROM_ADR
  3310                           
  3311                           ;main.c: 373:     if (START_EEPROM_ADR == 0 || START_EEPROM_ADR == 0xFF) START_EEPROM_AD
      +                          R = 0x10;
  3312  017C  0867               	movf	_START_EEPROM_ADR,w
  3313  017D  1D03               	btfss	3,2
  3314  017E  0A67               	incf	_START_EEPROM_ADR,w
  3315  017F  1D03               	btfss	3,2
  3316  0180  0008               	return
  3317  0181  3010               	movlw	16
  3318  0182  00A3               	movwf	??_get_adr
  3319  0183  0823               	movf	??_get_adr,w
  3320  0184  00E7               	movwf	_START_EEPROM_ADR
  3321  0185  0008               	return
  3322  0186                     __end_of_get_adr:
  3323                           
  3324                           	psect	text10
  3325  060B                     __ptext10:	
  3326 ;; *************** function _TMR2_StartTimer *****************
  3327 ;; Defined at:
  3328 ;;		line 87 in file "mcc_generated_files/tmr2.c"
  3329 ;; Parameters:    Size  Location     Type
  3330 ;;		None
  3331 ;; Auto vars:     Size  Location     Type
  3332 ;;		None
  3333 ;; Return value:  Size  Location     Type
  3334 ;;                  1    wreg      void 
  3335 ;; Registers used:
  3336 ;;		None
  3337 ;; Tracked objects:
  3338 ;;		On entry : 1F/0
  3339 ;;		On exit  : 1F/0
  3340 ;;		Unchanged: 0/0
  3341 ;; Data sizes:     COMMON   BANK0   BANK1
  3342 ;;      Params:         0       0       0
  3343 ;;      Locals:         0       0       0
  3344 ;;      Temps:          0       0       0
  3345 ;;      Totals:         0       0       0
  3346 ;;Total ram usage:        0 bytes
  3347 ;; Hardware stack levels used: 1
  3348 ;; Hardware stack levels required when called: 7
  3349 ;; This function calls:
  3350 ;;		Nothing
  3351 ;; This function is called by:
  3352 ;;		_start_setup
  3353 ;; This function uses a non-reentrant model
  3354 ;;
  3355                           
  3356  060B                     _TMR2_StartTimer:	
  3357                           ;psect for function _TMR2_StartTimer
  3358                           
  3359                           
  3360                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
  3361                           
  3362                           ;incstack = 0
  3363                           ; Regs used in _TMR2_StartTimer: []
  3364  060B  151C               	bsf	28,2	;volatile
  3365  060C  0008               	return
  3366  060D                     __end_of_TMR2_StartTimer:
  3367                           
  3368                           	psect	text11
  3369  05C2                     __ptext11:	
  3370 ;; *************** function _SYSTEM_Initialize *****************
  3371 ;; Defined at:
  3372 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3373 ;; Parameters:    Size  Location     Type
  3374 ;;		None
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;		None
  3377 ;; Return value:  Size  Location     Type
  3378 ;;                  1    wreg      void 
  3379 ;; Registers used:
  3380 ;;		wreg, status,2, status,0, pclath, cstack
  3381 ;; Tracked objects:
  3382 ;;		On entry : B1F/0
  3383 ;;		On exit  : 1F/0
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMMON   BANK0   BANK1
  3386 ;;      Params:         0       0       0
  3387 ;;      Locals:         0       0       0
  3388 ;;      Temps:          0       0       0
  3389 ;;      Totals:         0       0       0
  3390 ;;Total ram usage:        0 bytes
  3391 ;; Hardware stack levels used: 1
  3392 ;; Hardware stack levels required when called: 9
  3393 ;; This function calls:
  3394 ;;		_ADC_Initialize
  3395 ;;		_FVR_Initialize
  3396 ;;		_OSCILLATOR_Initialize
  3397 ;;		_PIN_MANAGER_Initialize
  3398 ;;		_TMR0_Initialize
  3399 ;;		_TMR2_Initialize
  3400 ;;		_WDT_Initialize
  3401 ;; This function is called by:
  3402 ;;		_start_setup
  3403 ;; This function uses a non-reentrant model
  3404 ;;
  3405                           
  3406  05C2                     _SYSTEM_Initialize:	
  3407                           ;psect for function _SYSTEM_Initialize
  3408                           
  3409                           
  3410                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  3411                           
  3412                           ;incstack = 0
  3413                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3414  05C2  24FB               	fcall	_PIN_MANAGER_Initialize
  3415                           
  3416                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  3417  05C3  25D2               	fcall	_OSCILLATOR_Initialize
  3418                           
  3419                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  3420  05C4  25F3               	fcall	_WDT_Initialize
  3421                           
  3422                           ;mcc_generated_files/mcc.c: 56:     FVR_Initialize();
  3423  05C5  25F7               	fcall	_FVR_Initialize
  3424                           
  3425                           ;mcc_generated_files/mcc.c: 57:     ADC_Initialize();
  3426  05C6  25CA               	fcall	_ADC_Initialize
  3427                           
  3428                           ;mcc_generated_files/mcc.c: 58:     TMR2_Initialize();
  3429  05C7  2549               	fcall	_TMR2_Initialize
  3430                           
  3431                           ;mcc_generated_files/mcc.c: 59:     TMR0_Initialize();
  3432  05C8  2510               	fcall	_TMR0_Initialize
  3433  05C9  0008               	return
  3434  05CA                     __end_of_SYSTEM_Initialize:
  3435                           
  3436                           	psect	text12
  3437  05F3                     __ptext12:	
  3438 ;; *************** function _WDT_Initialize *****************
  3439 ;; Defined at:
  3440 ;;		line 72 in file "mcc_generated_files/mcc.c"
  3441 ;; Parameters:    Size  Location     Type
  3442 ;;		None
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;		None
  3445 ;; Return value:  Size  Location     Type
  3446 ;;                  1    wreg      void 
  3447 ;; Registers used:
  3448 ;;		wreg
  3449 ;; Tracked objects:
  3450 ;;		On entry : B1F/2
  3451 ;;		On exit  : B1F/1
  3452 ;;		Unchanged: B00/0
  3453 ;; Data sizes:     COMMON   BANK0   BANK1
  3454 ;;      Params:         0       0       0
  3455 ;;      Locals:         0       0       0
  3456 ;;      Temps:          0       0       0
  3457 ;;      Totals:         0       0       0
  3458 ;;Total ram usage:        0 bytes
  3459 ;; Hardware stack levels used: 1
  3460 ;; Hardware stack levels required when called: 7
  3461 ;; This function calls:
  3462 ;;		Nothing
  3463 ;; This function is called by:
  3464 ;;		_SYSTEM_Initialize
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468  05F3                     _WDT_Initialize:	
  3469                           ;psect for function _WDT_Initialize
  3470                           
  3471                           
  3472                           ;mcc_generated_files/mcc.c: 75:     WDTCON = 0x16;
  3473                           
  3474                           ;incstack = 0
  3475                           ; Regs used in _WDT_Initialize: [wreg]
  3476  05F3  3016               	movlw	22
  3477  05F4  0021               	movlb	1	; select bank1
  3478  05F5  0097               	movwf	23	;volatile
  3479  05F6  0008               	return
  3480  05F7                     __end_of_WDT_Initialize:
  3481                           
  3482                           	psect	text13
  3483  0549                     __ptext13:	
  3484 ;; *************** function _TMR2_Initialize *****************
  3485 ;; Defined at:
  3486 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  3487 ;; Parameters:    Size  Location     Type
  3488 ;;		None
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;		None
  3491 ;; Return value:  Size  Location     Type
  3492 ;;                  1    wreg      void 
  3493 ;; Registers used:
  3494 ;;		wreg, status,2, status,0, pclath, cstack
  3495 ;; Tracked objects:
  3496 ;;		On entry : B1F/1
  3497 ;;		On exit  : 1F/0
  3498 ;;		Unchanged: 0/0
  3499 ;; Data sizes:     COMMON   BANK0   BANK1
  3500 ;;      Params:         0       0       0
  3501 ;;      Locals:         0       0       0
  3502 ;;      Temps:          0       0       0
  3503 ;;      Totals:         0       0       0
  3504 ;;Total ram usage:        0 bytes
  3505 ;; Hardware stack levels used: 1
  3506 ;; Hardware stack levels required when called: 8
  3507 ;; This function calls:
  3508 ;;		_TMR2_SetInterruptHandler
  3509 ;; This function is called by:
  3510 ;;		_SYSTEM_Initialize
  3511 ;; This function uses a non-reentrant model
  3512 ;;
  3513                           
  3514  0549                     _TMR2_Initialize:	
  3515                           ;psect for function _TMR2_Initialize
  3516                           
  3517                           
  3518                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0xF9;
  3519                           
  3520                           ;incstack = 0
  3521                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3522  0549  30F9               	movlw	249
  3523  054A  0020               	movlb	0	; select bank0
  3524  054B  009B               	movwf	27	;volatile
  3525                           
  3526                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  3527  054C  019A               	clrf	26	;volatile
  3528                           
  3529                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  3530  054D  1091               	bcf	17,1	;volatile
  3531                           
  3532                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  3533  054E  0021               	movlb	1	; select bank1
  3534  054F  1491               	bsf	17,1	;volatile
  3535                           
  3536                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  3537  0550  300D               	movlw	low _TMR2_DefaultInterruptHandler
  3538  0551  0020               	movlb	0	; select bank0
  3539  0552  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  3540  0553  3006               	movlw	high _TMR2_DefaultInterruptHandler
  3541  0554  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  3542  0555  25DF               	fcall	_TMR2_SetInterruptHandler
  3543                           
  3544                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x4E;
  3545  0556  304E               	movlw	78
  3546  0557  009C               	movwf	28	;volatile
  3547  0558  0008               	return
  3548  0559                     __end_of_TMR2_Initialize:
  3549                           
  3550                           	psect	text14
  3551  05DF                     __ptext14:	
  3552 ;; *************** function _TMR2_SetInterruptHandler *****************
  3553 ;; Defined at:
  3554 ;;		line 147 in file "mcc_generated_files/tmr2.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3557 ;;		 -> sec_tick_work(1), TMR2_DefaultInterruptHandler(1), 
  3558 ;; Auto vars:     Size  Location     Type
  3559 ;;		None
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  1    wreg      void 
  3562 ;; Registers used:
  3563 ;;		wreg
  3564 ;; Tracked objects:
  3565 ;;		On entry : 1F/0
  3566 ;;		On exit  : 1F/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMMON   BANK0   BANK1
  3569 ;;      Params:         0       2       0
  3570 ;;      Locals:         0       0       0
  3571 ;;      Temps:          0       0       0
  3572 ;;      Totals:         0       2       0
  3573 ;;Total ram usage:        2 bytes
  3574 ;; Hardware stack levels used: 1
  3575 ;; Hardware stack levels required when called: 7
  3576 ;; This function calls:
  3577 ;;		Nothing
  3578 ;; This function is called by:
  3579 ;;		_TMR2_Initialize
  3580 ;;		_start_setup
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584  05DF                     _TMR2_SetInterruptHandler:	
  3585                           ;psect for function _TMR2_SetInterruptHandler
  3586                           
  3587                           
  3588                           ;mcc_generated_files/tmr2.c: 148:     TMR2_InterruptHandler = InterruptHandler;
  3589                           
  3590                           ;incstack = 0
  3591                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  3592  05DF  0821               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  3593  05E0  00EB               	movwf	_TMR2_InterruptHandler+1
  3594  05E1  0820               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  3595  05E2  00EA               	movwf	_TMR2_InterruptHandler
  3596  05E3  0008               	return
  3597  05E4                     __end_of_TMR2_SetInterruptHandler:
  3598                           
  3599                           	psect	text15
  3600  0510                     __ptext15:	
  3601 ;; *************** function _TMR0_Initialize *****************
  3602 ;; Defined at:
  3603 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  3604 ;; Parameters:    Size  Location     Type
  3605 ;;		None
  3606 ;; Auto vars:     Size  Location     Type
  3607 ;;		None
  3608 ;; Return value:  Size  Location     Type
  3609 ;;                  1    wreg      void 
  3610 ;; Registers used:
  3611 ;;		wreg, status,2, status,0, pclath, cstack
  3612 ;; Tracked objects:
  3613 ;;		On entry : 1F/0
  3614 ;;		On exit  : 1F/0
  3615 ;;		Unchanged: 0/0
  3616 ;; Data sizes:     COMMON   BANK0   BANK1
  3617 ;;      Params:         0       0       0
  3618 ;;      Locals:         0       0       0
  3619 ;;      Temps:          0       1       0
  3620 ;;      Totals:         0       1       0
  3621 ;;Total ram usage:        1 bytes
  3622 ;; Hardware stack levels used: 1
  3623 ;; Hardware stack levels required when called: 8
  3624 ;; This function calls:
  3625 ;;		_TMR0_SetInterruptHandler
  3626 ;; This function is called by:
  3627 ;;		_SYSTEM_Initialize
  3628 ;; This function uses a non-reentrant model
  3629 ;;
  3630                           
  3631  0510                     _TMR0_Initialize:	
  3632                           ;psect for function _TMR0_Initialize
  3633                           
  3634                           
  3635                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD2 
      +                          & 0x3F));
  3636                           
  3637                           ;incstack = 0
  3638                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3639  0510  0021               	movlb	1	; select bank1
  3640  0511  0815               	movf	21,w	;volatile
  3641  0512  39C0               	andlw	192
  3642  0513  3812               	iorlw	18
  3643  0514  0095               	movwf	21	;volatile
  3644                           
  3645                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x9C;
  3646  0515  309C               	movlw	156
  3647  0516  0020               	movlb	0	; select bank0
  3648  0517  0095               	movwf	21	;volatile
  3649                           
  3650                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 156;
  3651  0518  309C               	movlw	156
  3652  0519  00A2               	movwf	??_TMR0_Initialize
  3653  051A  0822               	movf	??_TMR0_Initialize,w
  3654  051B  00EC               	movwf	_timer0ReloadVal	;volatile
  3655                           
  3656                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  3657  051C  110B               	bcf	11,2	;volatile
  3658                           
  3659                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  3660  051D  168B               	bsf	11,5	;volatile
  3661                           
  3662                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  3663  051E  300E               	movlw	low _TMR0_DefaultInterruptHandler
  3664  051F  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  3665  0520  3006               	movlw	high _TMR0_DefaultInterruptHandler
  3666  0521  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  3667  0522  25E4               	fcall	_TMR0_SetInterruptHandler
  3668  0523  0008               	return
  3669  0524                     __end_of_TMR0_Initialize:
  3670                           
  3671                           	psect	text16
  3672  05E4                     __ptext16:	
  3673 ;; *************** function _TMR0_SetInterruptHandler *****************
  3674 ;; Defined at:
  3675 ;;		line 125 in file "mcc_generated_files/tmr0.c"
  3676 ;; Parameters:    Size  Location     Type
  3677 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3678 ;;		 -> switch_zum(1), TMR0_DefaultInterruptHandler(1), 
  3679 ;; Auto vars:     Size  Location     Type
  3680 ;;		None
  3681 ;; Return value:  Size  Location     Type
  3682 ;;                  1    wreg      void 
  3683 ;; Registers used:
  3684 ;;		wreg
  3685 ;; Tracked objects:
  3686 ;;		On entry : 1F/0
  3687 ;;		On exit  : 1F/0
  3688 ;;		Unchanged: 0/0
  3689 ;; Data sizes:     COMMON   BANK0   BANK1
  3690 ;;      Params:         0       2       0
  3691 ;;      Locals:         0       0       0
  3692 ;;      Temps:          0       0       0
  3693 ;;      Totals:         0       2       0
  3694 ;;Total ram usage:        2 bytes
  3695 ;; Hardware stack levels used: 1
  3696 ;; Hardware stack levels required when called: 7
  3697 ;; This function calls:
  3698 ;;		Nothing
  3699 ;; This function is called by:
  3700 ;;		_TMR0_Initialize
  3701 ;;		_start_setup
  3702 ;; This function uses a non-reentrant model
  3703 ;;
  3704                           
  3705  05E4                     _TMR0_SetInterruptHandler:	
  3706                           ;psect for function _TMR0_SetInterruptHandler
  3707                           
  3708                           
  3709                           ;mcc_generated_files/tmr0.c: 126:     TMR0_InterruptHandler = InterruptHandler;
  3710                           
  3711                           ;incstack = 0
  3712                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  3713  05E4  0821               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  3714  05E5  00E9               	movwf	_TMR0_InterruptHandler+1
  3715  05E6  0820               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  3716  05E7  00E8               	movwf	_TMR0_InterruptHandler
  3717  05E8  0008               	return
  3718  05E9                     __end_of_TMR0_SetInterruptHandler:
  3719                           
  3720                           	psect	text17
  3721  04FB                     __ptext17:	
  3722 ;; *************** function _PIN_MANAGER_Initialize *****************
  3723 ;; Defined at:
  3724 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  3725 ;; Parameters:    Size  Location     Type
  3726 ;;		None
  3727 ;; Auto vars:     Size  Location     Type
  3728 ;;		None
  3729 ;; Return value:  Size  Location     Type
  3730 ;;                  1    wreg      void 
  3731 ;; Registers used:
  3732 ;;		wreg, status,2
  3733 ;; Tracked objects:
  3734 ;;		On entry : B1F/0
  3735 ;;		On exit  : B1F/2
  3736 ;;		Unchanged: B00/0
  3737 ;; Data sizes:     COMMON   BANK0   BANK1
  3738 ;;      Params:         0       0       0
  3739 ;;      Locals:         0       0       0
  3740 ;;      Temps:          0       0       0
  3741 ;;      Totals:         0       0       0
  3742 ;;Total ram usage:        0 bytes
  3743 ;; Hardware stack levels used: 1
  3744 ;; Hardware stack levels required when called: 7
  3745 ;; This function calls:
  3746 ;;		Nothing
  3747 ;; This function is called by:
  3748 ;;		_SYSTEM_Initialize
  3749 ;; This function uses a non-reentrant model
  3750 ;;
  3751                           
  3752  04FB                     _PIN_MANAGER_Initialize:	
  3753                           ;psect for function _PIN_MANAGER_Initialize
  3754                           
  3755                           
  3756                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  3757                           
  3758                           ;incstack = 0
  3759                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3760  04FB  0022               	movlb	2	; select bank2
  3761  04FC  018C               	clrf	12	;volatile
  3762                           
  3763                           ;mcc_generated_files/pin_manager.c: 61:     LATC = 0x00;
  3764  04FD  018E               	clrf	14	;volatile
  3765                           
  3766                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0x0F;
  3767  04FE  300F               	movlw	15
  3768  04FF  0021               	movlb	1	; select bank1
  3769  0500  008C               	movwf	12	;volatile
  3770                           
  3771                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0x0C;
  3772  0501  300C               	movlw	12
  3773  0502  008E               	movwf	14	;volatile
  3774                           
  3775                           ;mcc_generated_files/pin_manager.c: 72:     ANSELC = 0x0C;
  3776  0503  300C               	movlw	12
  3777  0504  0023               	movlb	3	; select bank3
  3778  0505  008E               	movwf	14	;volatile
  3779                           
  3780                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x07;
  3781  0506  3007               	movlw	7
  3782  0507  008C               	movwf	12	;volatile
  3783                           
  3784                           ;mcc_generated_files/pin_manager.c: 78:     WPUA = 0x00;
  3785  0508  0024               	movlb	4	; select bank4
  3786  0509  018C               	clrf	12	;volatile
  3787                           
  3788                           ;mcc_generated_files/pin_manager.c: 79:     WPUC = 0x00;
  3789  050A  018E               	clrf	14	;volatile
  3790                           
  3791                           ;mcc_generated_files/pin_manager.c: 80:     OPTION_REGbits.nWPUEN = 1;
  3792  050B  0021               	movlb	1	; select bank1
  3793  050C  1795               	bsf	21,7	;volatile
  3794                           
  3795                           ;mcc_generated_files/pin_manager.c: 86:     APFCON = 0x00;
  3796  050D  0022               	movlb	2	; select bank2
  3797  050E  019D               	clrf	29	;volatile
  3798  050F  0008               	return
  3799  0510                     __end_of_PIN_MANAGER_Initialize:
  3800                           
  3801                           	psect	text18
  3802  05D2                     __ptext18:	
  3803 ;; *************** function _OSCILLATOR_Initialize *****************
  3804 ;; Defined at:
  3805 ;;		line 62 in file "mcc_generated_files/mcc.c"
  3806 ;; Parameters:    Size  Location     Type
  3807 ;;		None
  3808 ;; Auto vars:     Size  Location     Type
  3809 ;;		None
  3810 ;; Return value:  Size  Location     Type
  3811 ;;                  1    wreg      void 
  3812 ;; Registers used:
  3813 ;;		wreg, status,2
  3814 ;; Tracked objects:
  3815 ;;		On entry : B1F/2
  3816 ;;		On exit  : B1F/2
  3817 ;;		Unchanged: B00/0
  3818 ;; Data sizes:     COMMON   BANK0   BANK1
  3819 ;;      Params:         0       0       0
  3820 ;;      Locals:         0       0       0
  3821 ;;      Temps:          0       0       0
  3822 ;;      Totals:         0       0       0
  3823 ;;Total ram usage:        0 bytes
  3824 ;; Hardware stack levels used: 1
  3825 ;; Hardware stack levels required when called: 7
  3826 ;; This function calls:
  3827 ;;		Nothing
  3828 ;; This function is called by:
  3829 ;;		_SYSTEM_Initialize
  3830 ;; This function uses a non-reentrant model
  3831 ;;
  3832                           
  3833  05D2                     _OSCILLATOR_Initialize:	
  3834                           ;psect for function _OSCILLATOR_Initialize
  3835                           
  3836                           
  3837                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x78;
  3838                           
  3839                           ;incstack = 0
  3840                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3841  05D2  3078               	movlw	120
  3842  05D3  0021               	movlb	1	; select bank1
  3843  05D4  0099               	movwf	25	;volatile
  3844                           
  3845                           ;mcc_generated_files/mcc.c: 67:     OSCTUNE = 0x00;
  3846  05D5  0198               	clrf	24	;volatile
  3847                           
  3848                           ;mcc_generated_files/mcc.c: 69:     BORCON = 0x00;
  3849  05D6  0022               	movlb	2	; select bank2
  3850  05D7  0196               	clrf	22	;volatile
  3851  05D8  0008               	return
  3852  05D9                     __end_of_OSCILLATOR_Initialize:
  3853                           
  3854                           	psect	text19
  3855  05F7                     __ptext19:	
  3856 ;; *************** function _FVR_Initialize *****************
  3857 ;; Defined at:
  3858 ;;		line 58 in file "mcc_generated_files/fvr.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;		None
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;		None
  3863 ;; Return value:  Size  Location     Type
  3864 ;;                  1    wreg      void 
  3865 ;; Registers used:
  3866 ;;		wreg
  3867 ;; Tracked objects:
  3868 ;;		On entry : B1F/1
  3869 ;;		On exit  : B1F/2
  3870 ;;		Unchanged: B00/0
  3871 ;; Data sizes:     COMMON   BANK0   BANK1
  3872 ;;      Params:         0       0       0
  3873 ;;      Locals:         0       0       0
  3874 ;;      Temps:          0       0       0
  3875 ;;      Totals:         0       0       0
  3876 ;;Total ram usage:        0 bytes
  3877 ;; Hardware stack levels used: 1
  3878 ;; Hardware stack levels required when called: 7
  3879 ;; This function calls:
  3880 ;;		Nothing
  3881 ;; This function is called by:
  3882 ;;		_SYSTEM_Initialize
  3883 ;; This function uses a non-reentrant model
  3884 ;;
  3885                           
  3886  05F7                     _FVR_Initialize:	
  3887                           ;psect for function _FVR_Initialize
  3888                           
  3889                           
  3890                           ;mcc_generated_files/fvr.c: 61:     FVRCON = 0x82;
  3891                           
  3892                           ;incstack = 0
  3893                           ; Regs used in _FVR_Initialize: [wreg]
  3894  05F7  3082               	movlw	130
  3895  05F8  0022               	movlb	2	; select bank2
  3896  05F9  0097               	movwf	23	;volatile
  3897  05FA  0008               	return
  3898  05FB                     __end_of_FVR_Initialize:
  3899                           
  3900                           	psect	text20
  3901  05CA                     __ptext20:	
  3902 ;; *************** function _ADC_Initialize *****************
  3903 ;; Defined at:
  3904 ;;		line 67 in file "mcc_generated_files/adc.c"
  3905 ;; Parameters:    Size  Location     Type
  3906 ;;		None
  3907 ;; Auto vars:     Size  Location     Type
  3908 ;;		None
  3909 ;; Return value:  Size  Location     Type
  3910 ;;                  1    wreg      void 
  3911 ;; Registers used:
  3912 ;;		wreg, status,2
  3913 ;; Tracked objects:
  3914 ;;		On entry : B1F/2
  3915 ;;		On exit  : B1F/1
  3916 ;;		Unchanged: B00/0
  3917 ;; Data sizes:     COMMON   BANK0   BANK1
  3918 ;;      Params:         0       0       0
  3919 ;;      Locals:         0       0       0
  3920 ;;      Temps:          0       0       0
  3921 ;;      Totals:         0       0       0
  3922 ;;Total ram usage:        0 bytes
  3923 ;; Hardware stack levels used: 1
  3924 ;; Hardware stack levels required when called: 7
  3925 ;; This function calls:
  3926 ;;		Nothing
  3927 ;; This function is called by:
  3928 ;;		_SYSTEM_Initialize
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932  05CA                     _ADC_Initialize:	
  3933                           ;psect for function _ADC_Initialize
  3934                           
  3935                           
  3936                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0x40;
  3937                           
  3938                           ;incstack = 0
  3939                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  3940  05CA  3040               	movlw	64
  3941  05CB  0021               	movlb	1	; select bank1
  3942  05CC  009E               	movwf	30	;volatile
  3943                           
  3944                           ;mcc_generated_files/adc.c: 75:     ADRESL = 0x00;
  3945  05CD  019B               	clrf	27	;volatile
  3946                           
  3947                           ;mcc_generated_files/adc.c: 78:     ADRESH = 0x00;
  3948  05CE  019C               	clrf	28	;volatile
  3949                           
  3950                           ;mcc_generated_files/adc.c: 81:     ADCON0 = 0x7D;
  3951  05CF  307D               	movlw	125
  3952  05D0  009D               	movwf	29	;volatile
  3953  05D1  0008               	return
  3954  05D2                     __end_of_ADC_Initialize:
  3955                           
  3956                           	psect	text21
  3957  037A                     __ptext21:	
  3958 ;; *************** function _povorot *****************
  3959 ;; Defined at:
  3960 ;;		line 272 in file "main.c"
  3961 ;; Parameters:    Size  Location     Type
  3962 ;;		None
  3963 ;; Auto vars:     Size  Location     Type
  3964 ;;		None
  3965 ;; Return value:  Size  Location     Type
  3966 ;;                  1    wreg      void 
  3967 ;; Registers used:
  3968 ;;		wreg, status,2, status,0, pclath, cstack
  3969 ;; Tracked objects:
  3970 ;;		On entry : 1F/0
  3971 ;;		On exit  : 1F/0
  3972 ;;		Unchanged: 0/0
  3973 ;; Data sizes:     COMMON   BANK0   BANK1
  3974 ;;      Params:         0       0       0
  3975 ;;      Locals:         0       0       0
  3976 ;;      Temps:          0       0       0
  3977 ;;      Totals:         0       0       0
  3978 ;;Total ram usage:        0 bytes
  3979 ;; Hardware stack levels used: 1
  3980 ;; Hardware stack levels required when called: 8
  3981 ;; This function calls:
  3982 ;;		_go_close
  3983 ;;		_go_open
  3984 ;; This function is called by:
  3985 ;;		_main
  3986 ;; This function uses a non-reentrant model
  3987 ;;
  3988                           
  3989  037A                     _povorot:	
  3990                           ;psect for function _povorot
  3991                           
  3992                           
  3993                           ;main.c: 273:     if ((time_s > ROTATION_TIME) &&
  3994                           
  3995                           ;incstack = 0
  3996                           ; Regs used in _povorot: [wreg+status,2+status,0+pclath+cstack]
  3997  037A  3000               	movlw	0
  3998  037B  025F               	subwf	_time_s+2,w
  3999  037C  1D03               	skipz
  4000  037D  2B84               	goto	u1715
  4001  037E  3000               	movlw	0
  4002  037F  025E               	subwf	_time_s+1,w
  4003  0380  1D03               	skipz
  4004  0381  2B84               	goto	u1715
  4005  0382  303D               	movlw	61
  4006  0383  025D               	subwf	_time_s,w
  4007  0384                     u1715:
  4008  0384  1803               	btfsc	3,0
  4009  0385  197C               	btfsc	_FLAGS,2
  4010  0386  2B8B               	goto	l2470
  4011  0387  1C7C               	btfss	_FLAGS,0
  4012  0388  1CFC               	btfss	_FLAGS,1
  4013  0389  2B8B               	goto	l2470
  4014                           
  4015                           ;main.c: 277:             ) {;main.c: 278:         go_close();
  4016  038A  24A4               	fcall	_go_close
  4017  038B                     l2470:
  4018                           
  4019                           ;main.c: 280:     if ((time_s > (ROTATION_TIME + 10 + 1 * 2)) &&
  4020  038B  3000               	movlw	0
  4021  038C  025F               	subwf	_time_s+2,w
  4022  038D  1D03               	skipz
  4023  038E  2B95               	goto	u1755
  4024  038F  3000               	movlw	0
  4025  0390  025E               	subwf	_time_s+1,w
  4026  0391  1D03               	skipz
  4027  0392  2B95               	goto	u1755
  4028  0393  3049               	movlw	73
  4029  0394  025D               	subwf	_time_s,w
  4030  0395                     u1755:
  4031  0395  1C03               	skipc
  4032  0396  0008               	return
  4033  0397  1D7C               	btfss	_FLAGS,2
  4034  0398  0008               	return
  4035  0399  187C               	btfsc	_FLAGS,0
  4036  039A  0008               	return
  4037  039B  1CFC               	btfss	_FLAGS,1
  4038  039C  0008               	return
  4039                           
  4040                           ;main.c: 284:             ) {;main.c: 285:         go_open();
  4041  039D  259C               	fcall	_go_open
  4042                           
  4043                           ;main.c: 286:         time_s = 0;
  4044  039E  3000               	movlw	0
  4045  039F  00DD               	movwf	_time_s
  4046  03A0  3000               	movlw	0
  4047  03A1  00DE               	movwf	_time_s+1
  4048  03A2  3000               	movlw	0
  4049  03A3  00DF               	movwf	_time_s+2
  4050  03A4  0008               	return
  4051  03A5                     __end_of_povorot:
  4052                           
  4053                           	psect	text22
  4054  0186                     __ptext22:	
  4055 ;; *************** function _get_voltage *****************
  4056 ;; Defined at:
  4057 ;;		line 331 in file "main.c"
  4058 ;; Parameters:    Size  Location     Type
  4059 ;;		None
  4060 ;; Auto vars:     Size  Location     Type
  4061 ;;  buf             1   15[BANK0 ] unsigned char 
  4062 ;;  q               1   16[BANK0 ] unsigned char 
  4063 ;;  q               1   17[BANK0 ] unsigned char 
  4064 ;;  res             2   13[BANK0 ] unsigned int 
  4065 ;; Return value:  Size  Location     Type
  4066 ;;                  1    wreg      void 
  4067 ;; Registers used:
  4068 ;;		wreg, status,2, status,0, pclath, cstack
  4069 ;; Tracked objects:
  4070 ;;		On entry : 0/0
  4071 ;;		On exit  : 0/0
  4072 ;;		Unchanged: 0/0
  4073 ;; Data sizes:     COMMON   BANK0   BANK1
  4074 ;;      Params:         0       0       0
  4075 ;;      Locals:         0       5       0
  4076 ;;      Temps:          0       2       0
  4077 ;;      Totals:         0       7       0
  4078 ;;Total ram usage:        7 bytes
  4079 ;; Hardware stack levels used: 1
  4080 ;; Hardware stack levels required when called: 9
  4081 ;; This function calls:
  4082 ;;		_ADC_GetConversion
  4083 ;;		_EEPROM_ReadByte
  4084 ;;		_EEPROM_WriteByte
  4085 ;;		_EEPROM_WriteShortLong
  4086 ;; This function is called by:
  4087 ;;		_main
  4088 ;; This function uses a non-reentrant model
  4089 ;;
  4090                           
  4091  0186                     _get_voltage:	
  4092                           ;psect for function _get_voltage
  4093                           
  4094                           
  4095                           ;main.c: 332:     unsigned res = ADC_GetConversion(channel_FVR);
  4096                           
  4097                           ;incstack = 0
  4098                           ; Regs used in _get_voltage: [wreg+status,2+status,0+pclath+cstack]
  4099  0186  301F               	movlw	31
  4100  0187  2485               	fcall	_ADC_GetConversion
  4101  0188  0821               	movf	?_ADC_GetConversion+1,w
  4102  0189  00AE               	movwf	get_voltage@res+1
  4103  018A  0820               	movf	?_ADC_GetConversion,w
  4104  018B  00AD               	movwf	get_voltage@res
  4105                           
  4106                           ;main.c: 333:     if (res > 46200) {
  4107  018C  30B4               	movlw	180
  4108  018D  022E               	subwf	get_voltage@res+1,w
  4109  018E  3079               	movlw	121
  4110  018F  1903               	skipnz
  4111  0190  022D               	subwf	get_voltage@res,w
  4112  0191  1C03               	skipc
  4113  0192  0008               	return
  4114                           
  4115                           ;main.c: 334:         for (char q = 0; q < 0x10; q++) {
  4116  0193  01B1               	clrf	get_voltage@q
  4117  0194                     l2536:
  4118                           
  4119                           ;main.c: 335:             char buf = EEPROM_ReadByte(q);
  4120  0194  0831               	movf	get_voltage@q,w
  4121  0195  2524               	fcall	_EEPROM_ReadByte
  4122  0196  0020               	movlb	0	; select bank0
  4123  0197  00AB               	movwf	??_get_voltage
  4124  0198  082B               	movf	??_get_voltage,w
  4125  0199  00AF               	movwf	get_voltage@buf
  4126                           
  4127                           ;main.c: 336:             if (buf != START_EEPROM_ADR) EEPROM_WriteByte(q, START_EEPROM_
      +                          ADR);
  4128  019A  082F               	movf	get_voltage@buf,w
  4129  019B  0667               	xorwf	_START_EEPROM_ADR,w
  4130  019C  1903               	skipnz
  4131  019D  29A4               	goto	l2542
  4132  019E  0867               	movf	_START_EEPROM_ADR,w
  4133  019F  00AB               	movwf	??_get_voltage
  4134  01A0  082B               	movf	??_get_voltage,w
  4135  01A1  00A0               	movwf	EEPROM_WriteByte@dt
  4136  01A2  0831               	movf	get_voltage@q,w
  4137  01A3  23CD               	fcall	_EEPROM_WriteByte
  4138  01A4                     l2542:
  4139                           
  4140                           ;main.c: 337:         }
  4141  01A4  3001               	movlw	1
  4142  01A5  0020               	movlb	0	; select bank0
  4143  01A6  00AB               	movwf	??_get_voltage
  4144  01A7  082B               	movf	??_get_voltage,w
  4145  01A8  07B1               	addwf	get_voltage@q,f
  4146  01A9  3010               	movlw	16
  4147  01AA  0231               	subwf	get_voltage@q,w
  4148  01AB  1C03               	skipc
  4149  01AC  2994               	goto	l2536
  4150                           
  4151                           ;main.c: 338:         for (char q = START_EEPROM_ADR; q < START_EEPROM_ADR + 16; q += 4)
      +                           {
  4152  01AD  0867               	movf	_START_EEPROM_ADR,w
  4153  01AE  00AB               	movwf	??_get_voltage
  4154  01AF  082B               	movf	??_get_voltage,w
  4155  01B0  00B0               	movwf	get_voltage@q_804
  4156  01B1                     l2552:
  4157  01B1  0867               	movf	_START_EEPROM_ADR,w
  4158  01B2  3E10               	addlw	16
  4159  01B3  00AB               	movwf	??_get_voltage
  4160  01B4  3000               	movlw	0
  4161  01B5  1803               	skipnc
  4162  01B6  3001               	movlw	1
  4163  01B7  00AC               	movwf	??_get_voltage+1
  4164  01B8  082C               	movf	??_get_voltage+1,w
  4165  01B9  3A80               	xorlw	128
  4166  01BA  3C80               	sublw	128
  4167  01BB  1D03               	skipz
  4168  01BC  29BF               	goto	u1965
  4169  01BD  082B               	movf	??_get_voltage,w
  4170  01BE  0230               	subwf	get_voltage@q_804,w
  4171  01BF                     u1965:
  4172  01BF  1803               	btfsc	3,0
  4173  01C0  0008               	return
  4174                           
  4175                           ;main.c: 339:             EEPROM_WriteShortLong(q, time_s);
  4176  01C1  0020               	movlb	0	; select bank0
  4177  01C2  085D               	movf	_time_s,w
  4178  01C3  00A5               	movwf	EEPROM_WriteShortLong@ucData
  4179  01C4  085E               	movf	_time_s+1,w
  4180  01C5  00A6               	movwf	EEPROM_WriteShortLong@ucData+1
  4181  01C6  085F               	movf	_time_s+2,w
  4182  01C7  00A7               	movwf	EEPROM_WriteShortLong@ucData+2
  4183  01C8  0830               	movf	get_voltage@q_804,w
  4184  01C9  2465               	fcall	_EEPROM_WriteShortLong
  4185                           
  4186                           ;main.c: 340:         }
  4187  01CA  3004               	movlw	4
  4188  01CB  0020               	movlb	0	; select bank0
  4189  01CC  00AB               	movwf	??_get_voltage
  4190  01CD  082B               	movf	??_get_voltage,w
  4191  01CE  07B0               	addwf	get_voltage@q_804,f
  4192  01CF  29B1               	goto	l2552
  4193  01D0                     __end_of_get_voltage:
  4194                           
  4195                           	psect	text23
  4196  0465                     __ptext23:	
  4197 ;; *************** function _EEPROM_WriteShortLong *****************
  4198 ;; Defined at:
  4199 ;;		line 40 in file "eeprom.c"
  4200 ;; Parameters:    Size  Location     Type
  4201 ;;  addr            1    wreg     unsigned char 
  4202 ;;  ucData          3    5[BANK0 ] unsigned um
  4203 ;; Auto vars:     Size  Location     Type
  4204 ;;  addr            1   10[BANK0 ] unsigned char 
  4205 ;;  dt              1    9[BANK0 ] unsigned char 
  4206 ;; Return value:  Size  Location     Type
  4207 ;;                  1    wreg      void 
  4208 ;; Registers used:
  4209 ;;		wreg, status,2, status,0, pclath, cstack
  4210 ;; Tracked objects:
  4211 ;;		On entry : 1F/0
  4212 ;;		On exit  : 1F/3
  4213 ;;		Unchanged: 0/0
  4214 ;; Data sizes:     COMMON   BANK0   BANK1
  4215 ;;      Params:         0       3       0
  4216 ;;      Locals:         0       2       0
  4217 ;;      Temps:          0       1       0
  4218 ;;      Totals:         0       6       0
  4219 ;;Total ram usage:        6 bytes
  4220 ;; Hardware stack levels used: 1
  4221 ;; Hardware stack levels required when called: 8
  4222 ;; This function calls:
  4223 ;;		_EEPROM_WriteByte
  4224 ;; This function is called by:
  4225 ;;		_get_voltage
  4226 ;; This function uses a non-reentrant model
  4227 ;;
  4228                           
  4229  0465                     _EEPROM_WriteShortLong:	
  4230                           ;psect for function _EEPROM_WriteShortLong
  4231                           
  4232                           
  4233                           ;incstack = 0
  4234                           ; Regs used in _EEPROM_WriteShortLong: [wreg+status,2+status,0+pclath+cstack]
  4235                           ;EEPROM_WriteShortLong@addr stored from wreg
  4236  0465  00AA               	movwf	EEPROM_WriteShortLong@addr
  4237                           
  4238                           ;eeprom.c: 41:     EEPROM_WriteByte(addr, (unsigned char) ucData);
  4239  0466  0825               	movf	EEPROM_WriteShortLong@ucData,w
  4240  0467  00A8               	movwf	??_EEPROM_WriteShortLong
  4241  0468  0828               	movf	??_EEPROM_WriteShortLong,w
  4242  0469  00A0               	movwf	EEPROM_WriteByte@dt
  4243  046A  082A               	movf	EEPROM_WriteShortLong@addr,w
  4244  046B  23CD               	fcall	_EEPROM_WriteByte
  4245                           
  4246                           ;eeprom.c: 42:      char dt = ucData >> 8;
  4247  046C  0020               	movlb	0	; select bank0
  4248  046D  0826               	movf	EEPROM_WriteShortLong@ucData+1,w
  4249  046E  00A8               	movwf	??_EEPROM_WriteShortLong
  4250  046F  0828               	movf	??_EEPROM_WriteShortLong,w
  4251  0470  00A9               	movwf	EEPROM_WriteShortLong@dt
  4252                           
  4253                           ;eeprom.c: 43:     EEPROM_WriteByte(addr + 1, dt);
  4254  0471  0829               	movf	EEPROM_WriteShortLong@dt,w
  4255  0472  00A8               	movwf	??_EEPROM_WriteShortLong
  4256  0473  0828               	movf	??_EEPROM_WriteShortLong,w
  4257  0474  00A0               	movwf	EEPROM_WriteByte@dt
  4258  0475  082A               	movf	EEPROM_WriteShortLong@addr,w
  4259  0476  3E01               	addlw	1
  4260  0477  23CD               	fcall	_EEPROM_WriteByte
  4261                           
  4262                           ;eeprom.c: 44:     dt = ucData >> 16;
  4263  0478  0020               	movlb	0	; select bank0
  4264  0479  0827               	movf	EEPROM_WriteShortLong@ucData+2,w
  4265  047A  00A8               	movwf	??_EEPROM_WriteShortLong
  4266  047B  0828               	movf	??_EEPROM_WriteShortLong,w
  4267  047C  00A9               	movwf	EEPROM_WriteShortLong@dt
  4268                           
  4269                           ;eeprom.c: 45:     EEPROM_WriteByte(addr + 2, dt);
  4270  047D  0829               	movf	EEPROM_WriteShortLong@dt,w
  4271  047E  00A8               	movwf	??_EEPROM_WriteShortLong
  4272  047F  0828               	movf	??_EEPROM_WriteShortLong,w
  4273  0480  00A0               	movwf	EEPROM_WriteByte@dt
  4274  0481  082A               	movf	EEPROM_WriteShortLong@addr,w
  4275  0482  3E02               	addlw	2
  4276  0483  23CD               	fcall	_EEPROM_WriteByte
  4277  0484  0008               	return
  4278  0485                     __end_of_EEPROM_WriteShortLong:
  4279                           
  4280                           	psect	text24
  4281  03CD                     __ptext24:	
  4282 ;; *************** function _EEPROM_WriteByte *****************
  4283 ;; Defined at:
  4284 ;;		line 6 in file "eeprom.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;  addr            1    wreg     unsigned char 
  4287 ;;  dt              1    0[BANK0 ] unsigned char 
  4288 ;; Auto vars:     Size  Location     Type
  4289 ;;  addr            1    3[BANK0 ] unsigned char 
  4290 ;;  status          1    4[BANK0 ] unsigned char 
  4291 ;; Return value:  Size  Location     Type
  4292 ;;                  1    wreg      void 
  4293 ;; Registers used:
  4294 ;;		wreg, status,2
  4295 ;; Tracked objects:
  4296 ;;		On entry : 1F/0
  4297 ;;		On exit  : 1F/3
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMMON   BANK0   BANK1
  4300 ;;      Params:         0       1       0
  4301 ;;      Locals:         0       2       0
  4302 ;;      Temps:          0       2       0
  4303 ;;      Totals:         0       5       0
  4304 ;;Total ram usage:        5 bytes
  4305 ;; Hardware stack levels used: 1
  4306 ;; Hardware stack levels required when called: 7
  4307 ;; This function calls:
  4308 ;;		Nothing
  4309 ;; This function is called by:
  4310 ;;		_get_voltage
  4311 ;;		_EEPROM_WriteShortLong
  4312 ;; This function uses a non-reentrant model
  4313 ;;
  4314                           
  4315  03CD                     _EEPROM_WriteByte:	
  4316                           ;psect for function _EEPROM_WriteByte
  4317                           
  4318                           
  4319                           ;incstack = 0
  4320                           ; Regs used in _EEPROM_WriteByte: [wreg+status,2]
  4321                           ;EEPROM_WriteByte@addr stored from wreg
  4322  03CD  00A3               	movwf	EEPROM_WriteByte@addr
  4323  03CE                     l561:	
  4324                           ;eeprom.c: 7:     unsigned char status;;eeprom.c: 8:     while (WR);
  4325                           
  4326  03CE  0023               	movlb	3	; select bank3
  4327  03CF  1895               	btfsc	21,1	;volsfr
  4328  03D0  2BCE               	goto	l561
  4329                           
  4330                           ;eeprom.c: 9:     status = GIE;
  4331  03D1  3000               	movlw	0
  4332  03D2  1B8B               	btfsc	11,7	;volatile
  4333  03D3  3001               	movlw	1
  4334  03D4  0020               	movlb	0	; select bank0
  4335  03D5  00A4               	movwf	EEPROM_WriteByte@status
  4336                           
  4337                           ;eeprom.c: 10:     GIE = 0;
  4338  03D6  138B               	bcf	11,7	;volatile
  4339                           
  4340                           ;eeprom.c: 11:     EEADR = addr;
  4341  03D7  0823               	movf	EEPROM_WriteByte@addr,w
  4342  03D8  00A1               	movwf	??_EEPROM_WriteByte
  4343  03D9  01A2               	clrf	??_EEPROM_WriteByte+1
  4344  03DA  0821               	movf	??_EEPROM_WriteByte,w
  4345  03DB  0023               	movlb	3	; select bank3
  4346  03DC  0091               	movwf	17	;volatile
  4347  03DD  0020               	movlb	0	; select bank0
  4348  03DE  0822               	movf	??_EEPROM_WriteByte+1,w
  4349  03DF  0023               	movlb	3	; select bank3
  4350  03E0  0092               	movwf	18	;volatile
  4351                           
  4352                           ;eeprom.c: 12:     EEDATA = dt;
  4353  03E1  0020               	movlb	0	; select bank0
  4354  03E2  0820               	movf	EEPROM_WriteByte@dt,w
  4355  03E3  0023               	movlb	3	; select bank3
  4356  03E4  0093               	movwf	19	;volatile
  4357                           
  4358                           ;eeprom.c: 13:     WREN = 1;
  4359  03E5  1515               	bsf	21,2	;volsfr
  4360                           
  4361                           ;eeprom.c: 14:     EECON2 = 0x55;
  4362  03E6  3055               	movlw	85
  4363  03E7  0096               	movwf	22	;volsfr
  4364                           
  4365                           ;eeprom.c: 15:     EECON2 = 0xAA;
  4366  03E8  30AA               	movlw	170
  4367  03E9  0096               	movwf	22	;volsfr
  4368                           
  4369                           ;eeprom.c: 16:     WR = 1;
  4370  03EA  1495               	bsf	21,1	;volsfr
  4371                           
  4372                           ;eeprom.c: 17:     GIE = status;
  4373  03EB  0020               	movlb	0	; select bank0
  4374  03EC  1C24               	btfss	EEPROM_WriteByte@status,0
  4375  03ED  2BF0               	goto	u1280
  4376  03EE  178B               	bsf	11,7	;volatile
  4377  03EF  2BF1               	goto	l2128
  4378  03F0                     u1280:
  4379  03F0  138B               	bcf	11,7	;volatile
  4380  03F1                     l2128:
  4381                           
  4382                           ;eeprom.c: 18:     WREN = 0;
  4383  03F1  0023               	movlb	3	; select bank3
  4384  03F2  1115               	bcf	21,2	;volsfr
  4385  03F3  0008               	return
  4386  03F4                     __end_of_EEPROM_WriteByte:
  4387                           
  4388                           	psect	text25
  4389  0524                     __ptext25:	
  4390 ;; *************** function _EEPROM_ReadByte *****************
  4391 ;; Defined at:
  4392 ;;		line 21 in file "eeprom.c"
  4393 ;; Parameters:    Size  Location     Type
  4394 ;;  addr            1    wreg     unsigned char 
  4395 ;; Auto vars:     Size  Location     Type
  4396 ;;  addr            1    2[BANK0 ] unsigned char 
  4397 ;; Return value:  Size  Location     Type
  4398 ;;                  1    wreg      unsigned char 
  4399 ;; Registers used:
  4400 ;;		wreg
  4401 ;; Tracked objects:
  4402 ;;		On entry : 1F/0
  4403 ;;		On exit  : 1F/3
  4404 ;;		Unchanged: 0/0
  4405 ;; Data sizes:     COMMON   BANK0   BANK1
  4406 ;;      Params:         0       0       0
  4407 ;;      Locals:         0       1       0
  4408 ;;      Temps:          0       2       0
  4409 ;;      Totals:         0       3       0
  4410 ;;Total ram usage:        3 bytes
  4411 ;; Hardware stack levels used: 1
  4412 ;; Hardware stack levels required when called: 7
  4413 ;; This function calls:
  4414 ;;		Nothing
  4415 ;; This function is called by:
  4416 ;;		_get_voltage
  4417 ;;		_get_adr
  4418 ;;		_EEPROM_ReadShortLong
  4419 ;; This function uses a non-reentrant model
  4420 ;;
  4421                           
  4422  0524                     _EEPROM_ReadByte:	
  4423                           ;psect for function _EEPROM_ReadByte
  4424                           
  4425                           
  4426                           ;incstack = 0
  4427                           ; Regs used in _EEPROM_ReadByte: [wreg]
  4428                           ;EEPROM_ReadByte@addr stored from wreg
  4429  0524  00A2               	movwf	EEPROM_ReadByte@addr
  4430  0525                     l567:	
  4431                           ;eeprom.c: 22:     while (RD || WR);
  4432                           
  4433  0525  0023               	movlb	3	; select bank3
  4434  0526  1815               	btfsc	21,0	;volsfr
  4435  0527  2D25               	goto	l567
  4436  0528  1895               	btfsc	21,1	;volsfr
  4437  0529  2D25               	goto	l567
  4438                           
  4439                           ;eeprom.c: 23:     EEADR = addr;
  4440  052A  0020               	movlb	0	; select bank0
  4441  052B  0822               	movf	EEPROM_ReadByte@addr,w
  4442  052C  00A0               	movwf	??_EEPROM_ReadByte
  4443  052D  01A1               	clrf	??_EEPROM_ReadByte+1
  4444  052E  0820               	movf	??_EEPROM_ReadByte,w
  4445  052F  0023               	movlb	3	; select bank3
  4446  0530  0091               	movwf	17	;volatile
  4447  0531  0020               	movlb	0	; select bank0
  4448  0532  0821               	movf	??_EEPROM_ReadByte+1,w
  4449  0533  0023               	movlb	3	; select bank3
  4450  0534  0092               	movwf	18	;volatile
  4451                           
  4452                           ;eeprom.c: 24:     RD = 1;
  4453  0535  1415               	bsf	21,0	;volsfr
  4454                           
  4455                           ;eeprom.c: 25:     return EEDATA;
  4456  0536  0813               	movf	19,w	;volatile
  4457  0537  0008               	return
  4458  0538                     __end_of_EEPROM_ReadByte:
  4459                           
  4460                           	psect	text26
  4461  034C                     __ptext26:	
  4462 ;; *************** function _get_jump *****************
  4463 ;; Defined at:
  4464 ;;		line 186 in file "main.c"
  4465 ;; Parameters:    Size  Location     Type
  4466 ;;		None
  4467 ;; Auto vars:     Size  Location     Type
  4468 ;;  res             2    5[BANK0 ] unsigned int 
  4469 ;; Return value:  Size  Location     Type
  4470 ;;                  1    wreg      void 
  4471 ;; Registers used:
  4472 ;;		wreg, status,2, status,0, pclath, cstack
  4473 ;; Tracked objects:
  4474 ;;		On entry : 1F/0
  4475 ;;		On exit  : 1F/0
  4476 ;;		Unchanged: 0/0
  4477 ;; Data sizes:     COMMON   BANK0   BANK1
  4478 ;;      Params:         0       0       0
  4479 ;;      Locals:         0       2       0
  4480 ;;      Temps:          0       1       0
  4481 ;;      Totals:         0       3       0
  4482 ;;Total ram usage:        3 bytes
  4483 ;; Hardware stack levels used: 1
  4484 ;; Hardware stack levels required when called: 8
  4485 ;; This function calls:
  4486 ;;		_ADC_GetConversion
  4487 ;; This function is called by:
  4488 ;;		_main
  4489 ;; This function uses a non-reentrant model
  4490 ;;
  4491                           
  4492  034C                     _get_jump:	
  4493                           ;psect for function _get_jump
  4494                           
  4495                           
  4496                           ;incstack = 0
  4497                           ; Regs used in _get_jump: [wreg+status,2+status,0+pclath+cstack]
  4498                           ;main.c: 188:     static signed char jump_counter;;main.c: 189:     do { ANSELAbits.ANSA
      +                          1 = 1; } while(0);
  4499  034C  0023               	movlb	3	; select bank3
  4500  034D  148C               	bsf	12,1	;volatile
  4501                           
  4502                           ;main.c: 190:     unsigned res = ADC_GetConversion(PIN_JUMP_STATE);
  4503  034E  3001               	movlw	1
  4504  034F  2485               	fcall	_ADC_GetConversion
  4505  0350  0821               	movf	?_ADC_GetConversion+1,w
  4506  0351  00A6               	movwf	get_jump@res+1
  4507  0352  0820               	movf	?_ADC_GetConversion,w
  4508  0353  00A5               	movwf	get_jump@res
  4509  0354  0023               	movlb	3	; select bank3
  4510  0355  108C               	bcf	12,1	;volatile
  4511                           
  4512                           ;main.c: 194:     if (res < 2000) jump_counter--;
  4513  0356  3007               	movlw	7
  4514  0357  0020               	movlb	0	; select bank0
  4515  0358  0226               	subwf	get_jump@res+1,w
  4516  0359  30D0               	movlw	208
  4517  035A  1903               	skipnz
  4518  035B  0225               	subwf	get_jump@res,w
  4519  035C  1803               	skipnc
  4520  035D  2B60               	goto	l2444
  4521  035E  30FF               	movlw	255
  4522  035F  2B61               	goto	L3
  4523  0360                     l2444:
  4524  0360  3001               	movlw	1
  4525  0361                     L3:
  4526  0361  00A4               	movwf	??_get_jump
  4527  0362  0824               	movf	??_get_jump,w
  4528  0363  07E3               	addwf	get_jump@jump_counter,f
  4529                           
  4530                           ;main.c: 197:     if (jump_counter > 10) {
  4531  0364  0863               	movf	get_jump@jump_counter,w
  4532  0365  3A80               	xorlw	128
  4533  0366  3E75               	addlw	-139
  4534  0367  1C03               	skipc
  4535  0368  2B6F               	goto	l2452
  4536                           
  4537                           ;main.c: 198:         jump_counter = 10;
  4538  0369  300A               	movlw	10
  4539  036A  00A4               	movwf	??_get_jump
  4540  036B  0824               	movf	??_get_jump,w
  4541  036C  00E3               	movwf	get_jump@jump_counter
  4542                           
  4543                           ;main.c: 199:         FLAGS.bits._JUMP_CONNECTED = 0;
  4544  036D  127C               	bcf	_FLAGS,4
  4545                           
  4546                           ;main.c: 200:     } else if (jump_counter<-10) {
  4547  036E  0008               	return
  4548  036F                     l2452:
  4549  036F  0863               	movf	get_jump@jump_counter,w
  4550  0370  3A80               	xorlw	128
  4551  0371  3E8A               	addlw	138
  4552  0372  1803               	skipnc
  4553  0373  0008               	return
  4554                           
  4555                           ;main.c: 201:         jump_counter = -10;
  4556  0374  30F6               	movlw	246
  4557  0375  00A4               	movwf	??_get_jump
  4558  0376  0824               	movf	??_get_jump,w
  4559  0377  00E3               	movwf	get_jump@jump_counter
  4560                           
  4561                           ;main.c: 202:         FLAGS.bits._JUMP_CONNECTED = 1;
  4562  0378  167C               	bsf	_FLAGS,4
  4563  0379  0008               	return
  4564  037A                     __end_of_get_jump:
  4565                           
  4566                           	psect	text27
  4567  031A                     __ptext27:	
  4568 ;; *************** function _get_fun *****************
  4569 ;; Defined at:
  4570 ;;		line 139 in file "main.c"
  4571 ;; Parameters:    Size  Location     Type
  4572 ;;		None
  4573 ;; Auto vars:     Size  Location     Type
  4574 ;;  res             2    5[BANK0 ] unsigned int 
  4575 ;; Return value:  Size  Location     Type
  4576 ;;                  1    wreg      void 
  4577 ;; Registers used:
  4578 ;;		wreg, status,2, status,0, pclath, cstack
  4579 ;; Tracked objects:
  4580 ;;		On entry : 0/0
  4581 ;;		On exit  : 1F/0
  4582 ;;		Unchanged: 0/0
  4583 ;; Data sizes:     COMMON   BANK0   BANK1
  4584 ;;      Params:         0       0       0
  4585 ;;      Locals:         0       2       0
  4586 ;;      Temps:          0       1       0
  4587 ;;      Totals:         0       3       0
  4588 ;;Total ram usage:        3 bytes
  4589 ;; Hardware stack levels used: 1
  4590 ;; Hardware stack levels required when called: 8
  4591 ;; This function calls:
  4592 ;;		_ADC_GetConversion
  4593 ;; This function is called by:
  4594 ;;		_main
  4595 ;; This function uses a non-reentrant model
  4596 ;;
  4597                           
  4598  031A                     _get_fun:	
  4599                           ;psect for function _get_fun
  4600                           
  4601                           
  4602                           ;incstack = 0
  4603                           ; Regs used in _get_fun: [wreg+status,2+status,0+pclath+cstack]
  4604                           ;main.c: 141:     static signed char fun_counter;;main.c: 142:     do { LATCbits.LATC1 =
      +                           1; } while(0);
  4605  031A  0022               	movlb	2	; select bank2
  4606  031B  148E               	bsf	14,1	;volatile
  4607                           
  4608                           ;main.c: 143:     do { ANSELCbits.ANSC2 = 1; } while(0);
  4609  031C  0023               	movlb	3	; select bank3
  4610  031D  150E               	bsf	14,2	;volatile
  4611                           
  4612                           ;main.c: 144:     unsigned res = ADC_GetConversion(PIN_FUN_STATE);
  4613  031E  3006               	movlw	6
  4614  031F  2485               	fcall	_ADC_GetConversion
  4615  0320  0821               	movf	?_ADC_GetConversion+1,w
  4616  0321  00A6               	movwf	get_fun@res+1
  4617  0322  0820               	movf	?_ADC_GetConversion,w
  4618  0323  00A5               	movwf	get_fun@res
  4619  0324  0023               	movlb	3	; select bank3
  4620  0325  110E               	bcf	14,2	;volatile
  4621  0326  0022               	movlb	2	; select bank2
  4622  0327  108E               	bcf	14,1	;volatile
  4623                           
  4624                           ;main.c: 147:     if (res < 2000) fun_counter--;
  4625  0328  3007               	movlw	7
  4626  0329  0020               	movlb	0	; select bank0
  4627  032A  0226               	subwf	get_fun@res+1,w
  4628  032B  30D0               	movlw	208
  4629  032C  1903               	skipnz
  4630  032D  0225               	subwf	get_fun@res,w
  4631  032E  1803               	skipnc
  4632  032F  2B32               	goto	l2420
  4633  0330  30FF               	movlw	255
  4634  0331  2B33               	goto	L4
  4635  0332                     l2420:
  4636  0332  3001               	movlw	1
  4637  0333                     L4:
  4638  0333  00A4               	movwf	??_get_fun
  4639  0334  0824               	movf	??_get_fun,w
  4640  0335  07E5               	addwf	get_fun@fun_counter,f
  4641                           
  4642                           ;main.c: 150:     if (fun_counter > 10) {
  4643  0336  0865               	movf	get_fun@fun_counter,w
  4644  0337  3A80               	xorlw	128
  4645  0338  3E75               	addlw	-139
  4646  0339  1C03               	skipc
  4647  033A  2B41               	goto	l2428
  4648                           
  4649                           ;main.c: 151:         fun_counter = 10;
  4650  033B  300A               	movlw	10
  4651  033C  00A4               	movwf	??_get_fun
  4652  033D  0824               	movf	??_get_fun,w
  4653  033E  00E5               	movwf	get_fun@fun_counter
  4654                           
  4655                           ;main.c: 152:         FLAGS.bits._FUN_CONNECTED = 0;
  4656  033F  11FC               	bcf	_FLAGS,3
  4657                           
  4658                           ;main.c: 153:     } else if (fun_counter<-10) {
  4659  0340  0008               	return
  4660  0341                     l2428:
  4661  0341  0865               	movf	get_fun@fun_counter,w
  4662  0342  3A80               	xorlw	128
  4663  0343  3E8A               	addlw	138
  4664  0344  1803               	skipnc
  4665  0345  0008               	return
  4666                           
  4667                           ;main.c: 154:         fun_counter = -10;
  4668  0346  30F6               	movlw	246
  4669  0347  00A4               	movwf	??_get_fun
  4670  0348  0824               	movf	??_get_fun,w
  4671  0349  00E5               	movwf	get_fun@fun_counter
  4672                           
  4673                           ;main.c: 155:         FLAGS.bits._FUN_CONNECTED = 1;
  4674  034A  15FC               	bsf	_FLAGS,3
  4675  034B  0008               	return
  4676  034C                     __end_of_get_fun:
  4677                           
  4678                           	psect	text28
  4679  0485                     __ptext28:	
  4680 ;; *************** function _ADC_GetConversion *****************
  4681 ;; Defined at:
  4682 ;;		line 112 in file "mcc_generated_files/adc.c"
  4683 ;; Parameters:    Size  Location     Type
  4684 ;;  channel         1    wreg     enum E2178
  4685 ;; Auto vars:     Size  Location     Type
  4686 ;;  channel         1    3[BANK0 ] enum E2178
  4687 ;; Return value:  Size  Location     Type
  4688 ;;                  2    0[BANK0 ] unsigned short 
  4689 ;; Registers used:
  4690 ;;		wreg, status,2, status,0
  4691 ;; Tracked objects:
  4692 ;;		On entry : 0/0
  4693 ;;		On exit  : 1F/0
  4694 ;;		Unchanged: 0/0
  4695 ;; Data sizes:     COMMON   BANK0   BANK1
  4696 ;;      Params:         0       2       0
  4697 ;;      Locals:         0       1       0
  4698 ;;      Temps:          0       1       0
  4699 ;;      Totals:         0       4       0
  4700 ;;Total ram usage:        4 bytes
  4701 ;; Hardware stack levels used: 1
  4702 ;; Hardware stack levels required when called: 7
  4703 ;; This function calls:
  4704 ;;		Nothing
  4705 ;; This function is called by:
  4706 ;;		_get_fun
  4707 ;;		_get_fun_full
  4708 ;;		_get_jump
  4709 ;;		_get_jump_full
  4710 ;;		_get_voltage
  4711 ;; This function uses a non-reentrant model
  4712 ;;
  4713                           
  4714  0485                     _ADC_GetConversion:	
  4715                           ;psect for function _ADC_GetConversion
  4716                           
  4717                           
  4718                           ;incstack = 0
  4719                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  4720                           ;ADC_GetConversion@channel stored from wreg
  4721  0485  0020               	movlb	0	; select bank0
  4722  0486  00A3               	movwf	ADC_GetConversion@channel
  4723                           
  4724                           ;mcc_generated_files/adc.c: 112: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 113: {;mcc_generated_files/adc.c: 115:     ADCON0bits.CHS = ch
      +                          annel;
  4725  0487  0823               	movf	ADC_GetConversion@channel,w
  4726  0488  00A2               	movwf	??_ADC_GetConversion
  4727  0489  0DA2               	rlf	??_ADC_GetConversion,f
  4728  048A  0DA2               	rlf	??_ADC_GetConversion,f
  4729  048B  0021               	movlb	1	; select bank1
  4730  048C  081D               	movf	29,w	;volatile
  4731  048D  0020               	movlb	0	; select bank0
  4732  048E  0622               	xorwf	??_ADC_GetConversion,w
  4733  048F  3983               	andlw	-125
  4734  0490  0622               	xorwf	??_ADC_GetConversion,w
  4735  0491  0021               	movlb	1	; select bank1
  4736  0492  009D               	movwf	29	;volatile
  4737                           
  4738                           ;mcc_generated_files/adc.c: 118:     ADCON0bits.ADON = 1;
  4739  0493  141D               	bsf	29,0	;volatile
  4740                           
  4741                           ;mcc_generated_files/adc.c: 121:     _delay((unsigned long)((5)*(16000000/4000000.0)));
  4742  0494  3006               	movlw	6
  4743  0495                     u2037:
  4744  0495  0B89               	decfsz	9,f
  4745  0496  2C95               	goto	u2037
  4746  0497  3200               	nop2
  4747                           
  4748                           ;mcc_generated_files/adc.c: 124:     ADCON0bits.GO_nDONE = 1;
  4749  0498  0021               	movlb	1	; select bank1
  4750  0499  149D               	bsf	29,1	;volatile
  4751  049A                     l63:	
  4752                           ;mcc_generated_files/adc.c: 128:     {;mcc_generated_files/adc.c: 129:     }
  4753                           
  4754                           
  4755                           ;mcc_generated_files/adc.c: 127:     while (ADCON0bits.GO_nDONE)
  4756  049A  189D               	btfsc	29,1	;volatile
  4757  049B  2C9A               	goto	l63
  4758                           
  4759                           ;mcc_generated_files/adc.c: 132:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  4760  049C  081C               	movf	28,w	;volatile
  4761  049D  0020               	movlb	0	; select bank0
  4762  049E  00A1               	movwf	?_ADC_GetConversion+1
  4763  049F  0021               	movlb	1	; select bank1
  4764  04A0  081B               	movf	27,w	;volatile
  4765  04A1  0020               	movlb	0	; select bank0
  4766  04A2  00A0               	movwf	?_ADC_GetConversion
  4767  04A3  0008               	return
  4768  04A4                     __end_of_ADC_GetConversion:
  4769                           
  4770                           	psect	text29
  4771  020F                     __ptext29:	
  4772 ;; *************** function _fun_work *****************
  4773 ;; Defined at:
  4774 ;;		line 291 in file "main.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;		None
  4777 ;; Auto vars:     Size  Location     Type
  4778 ;;		None
  4779 ;; Return value:  Size  Location     Type
  4780 ;;                  1    wreg      void 
  4781 ;; Registers used:
  4782 ;;		wreg, status,2, status,0, pclath, cstack
  4783 ;; Tracked objects:
  4784 ;;		On entry : 1F/0
  4785 ;;		On exit  : 1F/0
  4786 ;;		Unchanged: 0/0
  4787 ;; Data sizes:     COMMON   BANK0   BANK1
  4788 ;;      Params:         0       0       0
  4789 ;;      Locals:         0       0       0
  4790 ;;      Temps:          0       2       0
  4791 ;;      Totals:         0       2       0
  4792 ;;Total ram usage:        2 bytes
  4793 ;; Hardware stack levels used: 1
  4794 ;; Hardware stack levels required when called: 9
  4795 ;; This function calls:
  4796 ;;		_beep
  4797 ;;		_go_close
  4798 ;;		_go_close_alt
  4799 ;;		_go_open
  4800 ;;		_go_open_alt
  4801 ;; This function is called by:
  4802 ;;		_main
  4803 ;; This function uses a non-reentrant model
  4804 ;;
  4805                           
  4806  020F                     _fun_work:	
  4807                           ;psect for function _fun_work
  4808                           
  4809                           
  4810                           ;main.c: 292:     {;main.c: 293:         if (FLAGS.bits._FUN_CONNECTED &&
  4811                           
  4812                           ;incstack = 0
  4813                           ; Regs used in _fun_work: [wreg+status,2+status,0+pclath+cstack]
  4814  020F  19FC               	btfsc	_FLAGS,3
  4815  0210  187C               	btfsc	_FLAGS,0
  4816  0211  2A2A               	goto	l2498
  4817  0212  197C               	btfsc	_FLAGS,2
  4818  0213  1AFC               	btfsc	_FLAGS,5
  4819  0214  2A2A               	goto	l2498
  4820                           
  4821                           ;main.c: 296:                 !FLAGS.bits.RELE_POW_WAIT) {;main.c: 297:             if (
      +                          FLAGS.bits.NORMAL_WORK_MODE) go_open();
  4822  0215  1CFC               	btfss	_FLAGS,1
  4823  0216  2A19               	goto	l2494
  4824  0217  259C               	fcall	_go_open
  4825  0218  2A1A               	goto	l2496
  4826  0219                     l2494:
  4827  0219  25E9               	fcall	_go_open_alt
  4828  021A                     l2496:
  4829                           
  4830                           ;main.c: 300:             beep(500, 100, 40, 1);
  4831  021A  30F4               	movlw	244
  4832  021B  0020               	movlb	0	; select bank0
  4833  021C  00A0               	movwf	beep@delay
  4834  021D  3001               	movlw	1
  4835  021E  00A1               	movwf	beep@delay+1
  4836  021F  3064               	movlw	100
  4837  0220  00A2               	movwf	beep@pause
  4838  0221  3000               	movlw	0
  4839  0222  00A3               	movwf	beep@pause+1
  4840  0223  3028               	movlw	40
  4841  0224  00AA               	movwf	??_fun_work
  4842  0225  082A               	movf	??_fun_work,w
  4843  0226  00A4               	movwf	beep@time
  4844  0227  01A5               	clrf	beep@count
  4845  0228  0AA5               	incf	beep@count,f
  4846  0229  23F4               	fcall	_beep
  4847  022A                     l2498:
  4848                           
  4849                           ;main.c: 302:         if (!FLAGS.bits._FUN_CONNECTED &&
  4850  022A  19FC               	btfsc	_FLAGS,3
  4851  022B  0008               	return
  4852  022C  197C               	btfsc	_FLAGS,2
  4853  022D  0008               	return
  4854  022E  1AFC               	btfsc	_FLAGS,5
  4855  022F  0008               	return
  4856                           
  4857                           ;main.c: 304:                 !FLAGS.bits.RELE_POW_WAIT) {;main.c: 305:             if (
      +                          FLAGS.bits.NORMAL_WORK_MODE) go_close();
  4858  0230  1CFC               	btfss	_FLAGS,1
  4859  0231  2A34               	goto	l2508
  4860  0232  24A4               	fcall	_go_close
  4861  0233  2A35               	goto	l2510
  4862  0234                     l2508:
  4863  0234  25EE               	fcall	_go_close_alt
  4864  0235                     l2510:
  4865                           
  4866                           ;main.c: 308:             beep(500, 100, 40, 2);
  4867  0235  30F4               	movlw	244
  4868  0236  0020               	movlb	0	; select bank0
  4869  0237  00A0               	movwf	beep@delay
  4870  0238  3001               	movlw	1
  4871  0239  00A1               	movwf	beep@delay+1
  4872  023A  3064               	movlw	100
  4873  023B  00A2               	movwf	beep@pause
  4874  023C  3000               	movlw	0
  4875  023D  00A3               	movwf	beep@pause+1
  4876  023E  3028               	movlw	40
  4877  023F  00AA               	movwf	??_fun_work
  4878  0240  082A               	movf	??_fun_work,w
  4879  0241  00A4               	movwf	beep@time
  4880  0242  3002               	movlw	2
  4881  0243  00AB               	movwf	??_fun_work+1
  4882  0244  082B               	movf	??_fun_work+1,w
  4883  0245  00A5               	movwf	beep@count
  4884  0246  23F4               	fcall	_beep
  4885  0247  0008               	return
  4886  0248                     __end_of_fun_work:
  4887                           
  4888                           	psect	text30
  4889  05E9                     __ptext30:	
  4890 ;; *************** function _go_open_alt *****************
  4891 ;; Defined at:
  4892 ;;		line 108 in file "main.c"
  4893 ;; Parameters:    Size  Location     Type
  4894 ;;		None
  4895 ;; Auto vars:     Size  Location     Type
  4896 ;;		None
  4897 ;; Return value:  Size  Location     Type
  4898 ;;                  1    wreg      void 
  4899 ;; Registers used:
  4900 ;;		None
  4901 ;; Tracked objects:
  4902 ;;		On entry : 1F/0
  4903 ;;		On exit  : 1F/2
  4904 ;;		Unchanged: 0/0
  4905 ;; Data sizes:     COMMON   BANK0   BANK1
  4906 ;;      Params:         0       0       0
  4907 ;;      Locals:         0       0       0
  4908 ;;      Temps:          0       0       0
  4909 ;;      Totals:         0       0       0
  4910 ;;Total ram usage:        0 bytes
  4911 ;; Hardware stack levels used: 1
  4912 ;; Hardware stack levels required when called: 7
  4913 ;; This function calls:
  4914 ;;		Nothing
  4915 ;; This function is called by:
  4916 ;;		_fun_work
  4917 ;; This function uses a non-reentrant model
  4918 ;;
  4919                           
  4920  05E9                     _go_open_alt:	
  4921                           ;psect for function _go_open_alt
  4922                           
  4923                           
  4924                           ;main.c: 109:     FLAGS.bits.CLOSED = 0;
  4925                           
  4926                           ;incstack = 0
  4927                           ; Regs used in _go_open_alt: []
  4928  05E9  117C               	bcf	_FLAGS,2
  4929                           
  4930                           ;main.c: 110:     do { LATCbits.LATC4 = 0; } while(0);
  4931  05EA  0022               	movlb	2	; select bank2
  4932  05EB  120E               	bcf	14,4	;volatile
  4933                           
  4934                           ;main.c: 111:     do { LATCbits.LATC5 = 0; } while(0);
  4935  05EC  128E               	bcf	14,5	;volatile
  4936  05ED  0008               	return
  4937  05EE                     __end_of_go_open_alt:
  4938                           
  4939                           	psect	text31
  4940  059C                     __ptext31:	
  4941 ;; *************** function _go_open *****************
  4942 ;; Defined at:
  4943 ;;		line 94 in file "main.c"
  4944 ;; Parameters:    Size  Location     Type
  4945 ;;		None
  4946 ;; Auto vars:     Size  Location     Type
  4947 ;;		None
  4948 ;; Return value:  Size  Location     Type
  4949 ;;                  1    wreg      void 
  4950 ;; Registers used:
  4951 ;;		wreg
  4952 ;; Tracked objects:
  4953 ;;		On entry : 1F/0
  4954 ;;		On exit  : 1F/0
  4955 ;;		Unchanged: 0/0
  4956 ;; Data sizes:     COMMON   BANK0   BANK1
  4957 ;;      Params:         0       0       0
  4958 ;;      Locals:         0       0       0
  4959 ;;      Temps:          0       1       0
  4960 ;;      Totals:         0       1       0
  4961 ;;Total ram usage:        1 bytes
  4962 ;; Hardware stack levels used: 1
  4963 ;; Hardware stack levels required when called: 7
  4964 ;; This function calls:
  4965 ;;		Nothing
  4966 ;; This function is called by:
  4967 ;;		_povorot
  4968 ;;		_fun_work
  4969 ;; This function uses a non-reentrant model
  4970 ;;
  4971                           
  4972  059C                     _go_open:	
  4973                           ;psect for function _go_open
  4974                           
  4975                           
  4976                           ;incstack = 0
  4977                           ; Regs used in _go_open: [wreg]
  4978                           ;main.c: 95:     do { LATCbits.LATC4 = 0; } while(0);
  4979  059C  0022               	movlb	2	; select bank2
  4980  059D  120E               	bcf	14,4	;volatile
  4981                           
  4982                           ;main.c: 96:     do { LATCbits.LATC5 = 1; } while(0);
  4983  059E  168E               	bsf	14,5	;volatile
  4984                           
  4985                           ;main.c: 97:     time_pow_s = 10;
  4986  059F  300A               	movlw	10
  4987  05A0  0020               	movlb	0	; select bank0
  4988  05A1  00A0               	movwf	??_go_open
  4989  05A2  0820               	movf	??_go_open,w
  4990  05A3  00E6               	movwf	_time_pow_s
  4991                           
  4992                           ;main.c: 98:     FLAGS.bits.RELE_POW_WAIT = 1;
  4993  05A4  16FC               	bsf	_FLAGS,5
  4994  05A5  0008               	return
  4995  05A6                     __end_of_go_open:
  4996                           
  4997                           	psect	text32
  4998  05EE                     __ptext32:	
  4999 ;; *************** function _go_close_alt *****************
  5000 ;; Defined at:
  5001 ;;		line 102 in file "main.c"
  5002 ;; Parameters:    Size  Location     Type
  5003 ;;		None
  5004 ;; Auto vars:     Size  Location     Type
  5005 ;;		None
  5006 ;; Return value:  Size  Location     Type
  5007 ;;                  1    wreg      void 
  5008 ;; Registers used:
  5009 ;;		None
  5010 ;; Tracked objects:
  5011 ;;		On entry : 1F/0
  5012 ;;		On exit  : 1F/2
  5013 ;;		Unchanged: 0/0
  5014 ;; Data sizes:     COMMON   BANK0   BANK1
  5015 ;;      Params:         0       0       0
  5016 ;;      Locals:         0       0       0
  5017 ;;      Temps:          0       0       0
  5018 ;;      Totals:         0       0       0
  5019 ;;Total ram usage:        0 bytes
  5020 ;; Hardware stack levels used: 1
  5021 ;; Hardware stack levels required when called: 7
  5022 ;; This function calls:
  5023 ;;		Nothing
  5024 ;; This function is called by:
  5025 ;;		_fun_work
  5026 ;;		_switch_wm
  5027 ;; This function uses a non-reentrant model
  5028 ;;
  5029                           
  5030  05EE                     _go_close_alt:	
  5031                           ;psect for function _go_close_alt
  5032                           
  5033                           
  5034                           ;main.c: 103:     FLAGS.bits.CLOSED = 1;
  5035                           
  5036                           ;incstack = 0
  5037                           ; Regs used in _go_close_alt: []
  5038  05EE  157C               	bsf	_FLAGS,2
  5039                           
  5040                           ;main.c: 104:     do { LATCbits.LATC4 = 0; } while(0);
  5041  05EF  0022               	movlb	2	; select bank2
  5042  05F0  120E               	bcf	14,4	;volatile
  5043                           
  5044                           ;main.c: 105:     do { LATCbits.LATC5 = 1; } while(0);
  5045  05F1  168E               	bsf	14,5	;volatile
  5046  05F2  0008               	return
  5047  05F3                     __end_of_go_close_alt:
  5048                           
  5049                           	psect	text33
  5050  04A4                     __ptext33:	
  5051 ;; *************** function _go_close *****************
  5052 ;; Defined at:
  5053 ;;		line 83 in file "main.c"
  5054 ;; Parameters:    Size  Location     Type
  5055 ;;		None
  5056 ;; Auto vars:     Size  Location     Type
  5057 ;;		None
  5058 ;; Return value:  Size  Location     Type
  5059 ;;                  1    wreg      void 
  5060 ;; Registers used:
  5061 ;;		wreg
  5062 ;; Tracked objects:
  5063 ;;		On entry : 1F/0
  5064 ;;		On exit  : 1F/0
  5065 ;;		Unchanged: 0/0
  5066 ;; Data sizes:     COMMON   BANK0   BANK1
  5067 ;;      Params:         0       0       0
  5068 ;;      Locals:         0       0       0
  5069 ;;      Temps:          0       2       0
  5070 ;;      Totals:         0       2       0
  5071 ;;Total ram usage:        2 bytes
  5072 ;; Hardware stack levels used: 1
  5073 ;; Hardware stack levels required when called: 7
  5074 ;; This function calls:
  5075 ;;		Nothing
  5076 ;; This function is called by:
  5077 ;;		_povorot
  5078 ;;		_fun_work
  5079 ;;		_switch_wm
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083  04A4                     _go_close:	
  5084                           ;psect for function _go_close
  5085                           
  5086                           
  5087                           ;main.c: 84:     time_s = 0;
  5088                           
  5089                           ;incstack = 0
  5090                           ; Regs used in _go_close: [wreg]
  5091  04A4  3000               	movlw	0
  5092  04A5  00DD               	movwf	_time_s
  5093  04A6  3000               	movlw	0
  5094  04A7  00DE               	movwf	_time_s+1
  5095  04A8  3000               	movlw	0
  5096  04A9  00DF               	movwf	_time_s+2
  5097  04AA  0022               	movlb	2	; select bank2
  5098  04AB  160E               	bsf	14,4	;volatile
  5099                           
  5100                           ;main.c: 86:     _delay((unsigned long)((1 * 1000)*(16000000/4000.0)));
  5101  04AC  3015               	movlw	21
  5102  04AD  0020               	movlb	0	; select bank0
  5103  04AE  00A1               	movwf	??_go_close+1
  5104  04AF  304B               	movlw	75
  5105  04B0  00A0               	movwf	??_go_close
  5106  04B1  30BE               	movlw	190
  5107  04B2                     u2047:
  5108  04B2  0B89               	decfsz	9,f
  5109  04B3  2CB2               	goto	u2047
  5110  04B4  0BA0               	decfsz	??_go_close,f
  5111  04B5  2CB2               	goto	u2047
  5112  04B6  0BA1               	decfsz	??_go_close+1,f
  5113  04B7  2CB2               	goto	u2047
  5114  04B8  0000               	nop
  5115  04B9  0022               	movlb	2	; select bank2
  5116  04BA  168E               	bsf	14,5	;volatile
  5117                           
  5118                           ;main.c: 88:     time_pow_s = 10;
  5119  04BB  300A               	movlw	10
  5120  04BC  0020               	movlb	0	; select bank0
  5121  04BD  00A0               	movwf	??_go_close
  5122  04BE  0820               	movf	??_go_close,w
  5123  04BF  00E6               	movwf	_time_pow_s
  5124                           
  5125                           ;main.c: 89:     FLAGS.bits.RELE_POW_WAIT = 1;
  5126  04C0  16FC               	bsf	_FLAGS,5
  5127                           
  5128                           ;main.c: 90:     FLAGS.bits.RELE_CON_WAIT = 1;
  5129  04C1  177C               	bsf	_FLAGS,6
  5130  04C2  0008               	return
  5131  04C3                     __end_of_go_close:
  5132                           
  5133                           	psect	text34
  5134  03F4                     __ptext34:	
  5135 ;; *************** function _beep *****************
  5136 ;; Defined at:
  5137 ;;		line 73 in file "main.c"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;  delay           2    0[BANK0 ] unsigned int 
  5140 ;;  pause           2    2[BANK0 ] unsigned int 
  5141 ;;  time            1    4[BANK0 ] unsigned char 
  5142 ;;  count           1    5[BANK0 ] unsigned char 
  5143 ;; Auto vars:     Size  Location     Type
  5144 ;;  i               1    9[BANK0 ] unsigned char 
  5145 ;;  j               1    8[BANK0 ] unsigned char 
  5146 ;; Return value:  Size  Location     Type
  5147 ;;                  1    wreg      void 
  5148 ;; Registers used:
  5149 ;;		wreg, status,2, status,0, pclath, cstack
  5150 ;; Tracked objects:
  5151 ;;		On entry : 1F/0
  5152 ;;		On exit  : 1F/0
  5153 ;;		Unchanged: 0/0
  5154 ;; Data sizes:     COMMON   BANK0   BANK1
  5155 ;;      Params:         0       6       0
  5156 ;;      Locals:         0       2       0
  5157 ;;      Temps:          0       2       0
  5158 ;;      Totals:         0      10       0
  5159 ;;Total ram usage:       10 bytes
  5160 ;; Hardware stack levels used: 1
  5161 ;; Hardware stack levels required when called: 8
  5162 ;; This function calls:
  5163 ;;		_switch_zum
  5164 ;; This function is called by:
  5165 ;;		_fun_work
  5166 ;;		_switch_wm
  5167 ;; This function uses a non-reentrant model
  5168 ;;
  5169                           
  5170  03F4                     _beep:	
  5171                           ;psect for function _beep
  5172                           
  5173                           
  5174                           ;main.c: 74:     for (char j = 0; j < count; j++) {
  5175                           
  5176                           ;incstack = 0
  5177                           ; Regs used in _beep: [wreg+status,2+status,0+pclath+cstack]
  5178  03F4  01A8               	clrf	beep@j
  5179  03F5                     l2304:
  5180  03F5  0825               	movf	beep@count,w
  5181  03F6  0228               	subwf	beep@j,w
  5182  03F7  1803               	btfsc	3,0
  5183  03F8  0008               	return
  5184                           
  5185                           ;main.c: 75:         for (char i = 0; i < time; i++) {
  5186  03F9  01A9               	clrf	beep@i
  5187  03FA                     l2298:
  5188  03FA  0824               	movf	beep@time,w
  5189  03FB  0229               	subwf	beep@i,w
  5190  03FC  1803               	btfsc	3,0
  5191  03FD  2C09               	goto	l2300
  5192                           
  5193                           ;main.c: 76:             switch_zum();
  5194  03FE  2569               	fcall	_switch_zum
  5195                           
  5196                           ;main.c: 77:             _delay((unsigned long)((300)*(16000000/4000000.0)));
  5197  03FF  30F0               	movlw	240
  5198  0400                     u2057:
  5199  0400  3200               	nop2
  5200  0401  0B89               	decfsz	9,f
  5201  0402  2C00               	goto	u2057
  5202                           
  5203                           ;main.c: 78:         }
  5204  0403  3001               	movlw	1
  5205  0404  0020               	movlb	0	; select bank0
  5206  0405  00A6               	movwf	??_beep
  5207  0406  0826               	movf	??_beep,w
  5208  0407  07A9               	addwf	beep@i,f
  5209  0408  2BFA               	goto	l2298
  5210  0409                     l2300:
  5211                           
  5212                           ;main.c: 79:         _delay((unsigned long)((100)*(16000000/4000.0)));
  5213  0409  3003               	movlw	3
  5214  040A  0020               	movlb	0	; select bank0
  5215  040B  00A7               	movwf	??_beep+1
  5216  040C  3008               	movlw	8
  5217  040D  00A6               	movwf	??_beep
  5218  040E  3077               	movlw	119
  5219  040F                     u2067:
  5220  040F  0B89               	decfsz	9,f
  5221  0410  2C0F               	goto	u2067
  5222  0411  0BA6               	decfsz	??_beep,f
  5223  0412  2C0F               	goto	u2067
  5224  0413  0BA7               	decfsz	??_beep+1,f
  5225  0414  2C0F               	goto	u2067
  5226                           
  5227                           ;main.c: 80:     }
  5228  0415  3001               	movlw	1
  5229  0416  0020               	movlb	0	; select bank0
  5230  0417  00A6               	movwf	??_beep
  5231  0418  0826               	movf	??_beep,w
  5232  0419  07A8               	addwf	beep@j,f
  5233  041A  2BF5               	goto	l2304
  5234  041B                     __end_of_beep:
  5235                           
  5236                           	psect	text35
  5237  0569                     __ptext35:	
  5238 ;; *************** function _switch_zum *****************
  5239 ;; Defined at:
  5240 ;;		line 65 in file "main.c"
  5241 ;; Parameters:    Size  Location     Type
  5242 ;;		None
  5243 ;; Auto vars:     Size  Location     Type
  5244 ;;		None
  5245 ;; Return value:  Size  Location     Type
  5246 ;;                  1    wreg      void 
  5247 ;; Registers used:
  5248 ;;		status,0
  5249 ;; Tracked objects:
  5250 ;;		On entry : 1F/0
  5251 ;;		On exit  : 1F/2
  5252 ;;		Unchanged: 0/0
  5253 ;; Data sizes:     COMMON   BANK0   BANK1
  5254 ;;      Params:         0       0       0
  5255 ;;      Locals:         0       0       0
  5256 ;;      Temps:          0       0       0
  5257 ;;      Totals:         0       0       0
  5258 ;;Total ram usage:        0 bytes
  5259 ;; Hardware stack levels used: 1
  5260 ;; Hardware stack levels required when called: 7
  5261 ;; This function calls:
  5262 ;;		Nothing
  5263 ;; This function is called by:
  5264 ;;		_beep
  5265 ;;		_start_setup
  5266 ;;		_TMR0_ISR
  5267 ;; This function uses a non-reentrant model
  5268 ;;
  5269                           
  5270  0569                     _switch_zum:	
  5271                           ;psect for function _switch_zum
  5272                           
  5273                           
  5274                           ;Skip over the trampoline to the duplicate function for level 1
  5275  0569  1C7E               	btfss	126,0
  5276  056A  2D6C               	goto	l2086
  5277  056B  2D86               	ljmp	i1l2020
  5278  056C                     _switch_zum$intlevel0:
  5279  056C                     l2086:	
  5280                           ;incstack = 0
  5281                           ; Regs used in _switch_zum: [status,0]
  5282                           ;main.c: 66:     do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  5283                           
  5284  056C  1003               	clrc
  5285  056D  0022               	movlb	2	; select bank2
  5286  056E  1E8C               	btfss	12,5	;volatile
  5287  056F  1403               	setc
  5288  0570  1C03               	btfss	3,0
  5289  0571  2D75               	goto	u1190
  5290  0572  0022               	movlb	2	; select bank2
  5291  0573  168C               	bsf	12,5	;volatile
  5292  0574  0008               	return
  5293  0575                     u1190:
  5294  0575  0022               	movlb	2	; select bank2
  5295  0576  128C               	bcf	12,5	;volatile
  5296  0577  0008               	return
  5297  0578                     __end_of_switch_zum:
  5298                           
  5299                           	psect	intentry
  5300  0004                     __pintentry:	
  5301 ;; *************** function _INTERRUPT_InterruptManager *****************
  5302 ;; Defined at:
  5303 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;		None
  5306 ;; Auto vars:     Size  Location     Type
  5307 ;;		None
  5308 ;; Return value:  Size  Location     Type
  5309 ;;                  1    wreg      void 
  5310 ;; Registers used:
  5311 ;;		wreg, status,2, status,0, pclath, cstack
  5312 ;; Tracked objects:
  5313 ;;		On entry : 0/0
  5314 ;;		On exit  : 0/0
  5315 ;;		Unchanged: 0/0
  5316 ;; Data sizes:     COMMON   BANK0   BANK1
  5317 ;;      Params:         0       0       0
  5318 ;;      Locals:         0       0       0
  5319 ;;      Temps:          0       0       0
  5320 ;;      Totals:         0       0       0
  5321 ;;Total ram usage:        0 bytes
  5322 ;; Hardware stack levels used: 1
  5323 ;; Hardware stack levels required when called: 6
  5324 ;; This function calls:
  5325 ;;		_TMR0_ISR
  5326 ;;		_TMR2_ISR
  5327 ;; This function is called by:
  5328 ;;		Interrupt level 1
  5329 ;; This function uses a non-reentrant model
  5330 ;;
  5331                           
  5332  0004                     _INTERRUPT_InterruptManager:
  5333                           
  5334                           ;incstack = 0
  5335  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5336                           
  5337                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  5338  0005  3180               	pagesel	$
  5339                           
  5340                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  5341  0006  1A8B               	btfsc	11,5	;volatile
  5342  0007  1D0B               	btfss	11,2	;volatile
  5343  0008  280B               	goto	i1l110
  5344                           
  5345                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
  5346  0009  2578               	fcall	_TMR0_ISR
  5347                           
  5348                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  5349  000A  2814               	goto	i1l116
  5350  000B                     i1l110:	
  5351                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
  5352                           
  5353  000B  1F0B               	btfss	11,6	;volatile
  5354  000C  2814               	goto	i1l116
  5355                           
  5356                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  5357  000D  0021               	movlb	1	; select bank1
  5358  000E  1C91               	btfss	17,1	;volatile
  5359  000F  2814               	goto	i1l116
  5360  0010  0020               	movlb	0	; select bank0
  5361  0011  1C91               	btfss	17,1	;volatile
  5362  0012  2814               	goto	i1l116
  5363                           
  5364                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR2_ISR();
  5365  0013  2559               	fcall	_TMR2_ISR
  5366  0014                     i1l116:	
  5367                           ;mcc_generated_files/interrupt_manager.c: 71:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 73:     }
  5368                           
  5369                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  5370                           
  5371  0014  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5372  0015  0009               	retfie
  5373  0016                     __end_of_INTERRUPT_InterruptManager:
  5374                           
  5375                           	psect	text37
  5376  0559                     __ptext37:	
  5377 ;; *************** function _TMR2_ISR *****************
  5378 ;; Defined at:
  5379 ;;		line 119 in file "mcc_generated_files/tmr2.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;		None
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;		None
  5384 ;; Return value:  Size  Location     Type
  5385 ;;                  1    wreg      void 
  5386 ;; Registers used:
  5387 ;;		wreg, status,2, status,0, pclath, cstack
  5388 ;; Tracked objects:
  5389 ;;		On entry : 1F/0
  5390 ;;		On exit  : 0/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMMON   BANK0   BANK1
  5393 ;;      Params:         0       0       0
  5394 ;;      Locals:         0       0       0
  5395 ;;      Temps:          0       0       0
  5396 ;;      Totals:         0       0       0
  5397 ;;Total ram usage:        0 bytes
  5398 ;; Hardware stack levels used: 1
  5399 ;; Hardware stack levels required when called: 5
  5400 ;; This function calls:
  5401 ;;		_TMR2_CallBack
  5402 ;; This function is called by:
  5403 ;;		_INTERRUPT_InterruptManager
  5404 ;; This function uses a non-reentrant model
  5405 ;;
  5406                           
  5407  0559                     _TMR2_ISR:	
  5408                           ;psect for function _TMR2_ISR
  5409                           
  5410                           
  5411                           ;mcc_generated_files/tmr2.c: 121:     static volatile unsigned int CountCallBack = 0;;mc
      +                          c_generated_files/tmr2.c: 124:     PIR1bits.TMR2IF = 0;
  5412                           
  5413                           ;incstack = 0
  5414                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
  5415  0559  1091               	bcf	17,1	;volatile
  5416                           
  5417                           ;mcc_generated_files/tmr2.c: 127:     if (++CountCallBack >= 100)
  5418  055A  3001               	movlw	1
  5419  055B  07F8               	addwf	TMR2_ISR@CountCallBack,f	;volatile
  5420  055C  3000               	movlw	0
  5421  055D  3DF9               	addwfc	TMR2_ISR@CountCallBack+1,f	;volatile
  5422  055E  3000               	movlw	0
  5423  055F  0279               	subwf	TMR2_ISR@CountCallBack+1,w	;volatile
  5424  0560  3064               	movlw	100
  5425  0561  1903               	skipnz
  5426  0562  0278               	subwf	TMR2_ISR@CountCallBack,w	;volatile
  5427  0563  1C03               	skipc
  5428  0564  0008               	return
  5429                           
  5430                           ;mcc_generated_files/tmr2.c: 128:     {;mcc_generated_files/tmr2.c: 130:         TMR2_Ca
      +                          llBack();
  5431  0565  25A6               	fcall	_TMR2_CallBack
  5432                           
  5433                           ;mcc_generated_files/tmr2.c: 133:         CountCallBack = 0;
  5434  0566  01F8               	clrf	TMR2_ISR@CountCallBack	;volatile
  5435  0567  01F9               	clrf	TMR2_ISR@CountCallBack+1	;volatile
  5436  0568  0008               	return
  5437  0569                     __end_of_TMR2_ISR:
  5438                           
  5439                           	psect	text38
  5440  05A6                     __ptext38:	
  5441 ;; *************** function _TMR2_CallBack *****************
  5442 ;; Defined at:
  5443 ;;		line 137 in file "mcc_generated_files/tmr2.c"
  5444 ;; Parameters:    Size  Location     Type
  5445 ;;		None
  5446 ;; Auto vars:     Size  Location     Type
  5447 ;;		None
  5448 ;; Return value:  Size  Location     Type
  5449 ;;                  1    wreg      void 
  5450 ;; Registers used:
  5451 ;;		wreg, status,2, status,0, pclath, cstack
  5452 ;; Tracked objects:
  5453 ;;		On entry : 1F/0
  5454 ;;		On exit  : 0/0
  5455 ;;		Unchanged: 0/0
  5456 ;; Data sizes:     COMMON   BANK0   BANK1
  5457 ;;      Params:         0       0       0
  5458 ;;      Locals:         0       0       0
  5459 ;;      Temps:          0       0       0
  5460 ;;      Totals:         0       0       0
  5461 ;;Total ram usage:        0 bytes
  5462 ;; Hardware stack levels used: 1
  5463 ;; Hardware stack levels required when called: 4
  5464 ;; This function calls:
  5465 ;;		Absolute function
  5466 ;;		_TMR2_DefaultInterruptHandler
  5467 ;;		_sec_tick_work
  5468 ;; This function is called by:
  5469 ;;		_TMR2_ISR
  5470 ;; This function uses a non-reentrant model
  5471 ;;
  5472                           
  5473  05A6                     _TMR2_CallBack:	
  5474                           ;psect for function _TMR2_CallBack
  5475                           
  5476                           
  5477                           ;mcc_generated_files/tmr2.c: 141:     if(TMR2_InterruptHandler)
  5478                           
  5479                           ;incstack = 0
  5480                           ; Regs used in _TMR2_CallBack: [wreg+status,2+status,0+pclath+cstack]
  5481  05A6  086A               	movf	_TMR2_InterruptHandler,w
  5482  05A7  046B               	iorwf	_TMR2_InterruptHandler+1,w
  5483  05A8  1903               	btfsc	3,2
  5484  05A9  0008               	return
  5485                           
  5486                           ;mcc_generated_files/tmr2.c: 142:     {;mcc_generated_files/tmr2.c: 143:         TMR2_In
      +                          terruptHandler();
  5487  05AA  086B               	movf	_TMR2_InterruptHandler+1,w
  5488  05AB  008A               	movwf	10
  5489  05AC  086A               	movf	_TMR2_InterruptHandler,w
  5490  05AD  000A               	callw
  5491  05AE  3185               	pagesel	$
  5492  05AF  0008               	return
  5493  05B0                     __end_of_TMR2_CallBack:
  5494                           
  5495                           	psect	text39
  5496  060D                     __ptext39:	
  5497 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  5498 ;; Defined at:
  5499 ;;		line 151 in file "mcc_generated_files/tmr2.c"
  5500 ;; Parameters:    Size  Location     Type
  5501 ;;		None
  5502 ;; Auto vars:     Size  Location     Type
  5503 ;;		None
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  1    wreg      void 
  5506 ;; Registers used:
  5507 ;;		None
  5508 ;; Tracked objects:
  5509 ;;		On entry : 1F/0
  5510 ;;		On exit  : 1F/0
  5511 ;;		Unchanged: 1F/0
  5512 ;; Data sizes:     COMMON   BANK0   BANK1
  5513 ;;      Params:         0       0       0
  5514 ;;      Locals:         0       0       0
  5515 ;;      Temps:          0       0       0
  5516 ;;      Totals:         0       0       0
  5517 ;;Total ram usage:        0 bytes
  5518 ;; Hardware stack levels used: 1
  5519 ;; This function calls:
  5520 ;;		Nothing
  5521 ;; This function is called by:
  5522 ;;		_TMR2_Initialize
  5523 ;;		_TMR2_CallBack
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527  060D                     _TMR2_DefaultInterruptHandler:	
  5528                           ;psect for function _TMR2_DefaultInterruptHandler
  5529                           
  5530                           
  5531                           ;incstack = 0
  5532                           ; Regs used in _TMR2_DefaultInterruptHandler: []
  5533  060D  0008               	return
  5534  060E                     __end_of_TMR2_DefaultInterruptHandler:
  5535                           
  5536                           	psect	text40
  5537  02E7                     __ptext40:	
  5538 ;; *************** function _sec_tick_work *****************
  5539 ;; Defined at:
  5540 ;;		line 251 in file "main.c"
  5541 ;; Parameters:    Size  Location     Type
  5542 ;;		None
  5543 ;; Auto vars:     Size  Location     Type
  5544 ;;		None
  5545 ;; Return value:  Size  Location     Type
  5546 ;;                  1    wreg      void 
  5547 ;; Registers used:
  5548 ;;		wreg, status,2, status,0, pclath, cstack
  5549 ;; Tracked objects:
  5550 ;;		On entry : 1F/0
  5551 ;;		On exit  : 0/0
  5552 ;;		Unchanged: 0/0
  5553 ;; Data sizes:     COMMON   BANK0   BANK1
  5554 ;;      Params:         0       0       0
  5555 ;;      Locals:         0       0       0
  5556 ;;      Temps:          1       0       0
  5557 ;;      Totals:         1       0       0
  5558 ;;Total ram usage:        1 bytes
  5559 ;; Hardware stack levels used: 1
  5560 ;; Hardware stack levels required when called: 3
  5561 ;; This function calls:
  5562 ;;		_get_measure
  5563 ;;		_rele_tick
  5564 ;;		_toggle_tone
  5565 ;;		i1_switch_zum
  5566 ;; This function is called by:
  5567 ;;		_start_setup
  5568 ;;		_TMR2_CallBack
  5569 ;; This function uses a non-reentrant model
  5570 ;;
  5571                           
  5572  02E7                     _sec_tick_work:	
  5573                           ;psect for function _sec_tick_work
  5574                           
  5575                           
  5576                           ;main.c: 253:     switch_zum();
  5577                           
  5578                           ;incstack = 0
  5579                           ; Regs used in _sec_tick_work: [wreg+status,2+status,0+pclath+cstack]
  5580  02E7  2586               	fcall	i1_switch_zum
  5581                           
  5582                           ;main.c: 255:     time_s++;
  5583  02E8  3001               	movlw	1
  5584  02E9  0020               	movlb	0	; select bank0
  5585  02EA  07DD               	addwf	_time_s,f
  5586  02EB  3000               	movlw	0
  5587  02EC  1803               	skipnc
  5588  02ED  3001               	movlw	1
  5589  02EE  07DE               	addwf	_time_s+1,f
  5590  02EF  3000               	movlw	0
  5591  02F0  1803               	skipnc
  5592  02F1  3001               	movlw	1
  5593  02F2  07DF               	addwf	_time_s+2,f
  5594                           
  5595                           ;main.c: 256:     rele_tick();
  5596  02F3  2442               	fcall	_rele_tick
  5597  02F4  0064               	clrwdt	;# 
  5598                           
  5599                           ;main.c: 258:     if (FLAGS.bits.ALARM) {
  5600  02F5  1C7C               	btfss	_FLAGS,0
  5601  02F6  2B04               	goto	i1l2098
  5602  02F7  1003               	clrc
  5603  02F8  0022               	movlb	2	; select bank2
  5604  02F9  1E0C               	btfss	12,4	;volatile
  5605  02FA  1403               	setc
  5606  02FB  1C03               	btfss	3,0
  5607  02FC  2B00               	goto	u122_20
  5608  02FD  0022               	movlb	2	; select bank2
  5609  02FE  160C               	bsf	12,4	;volatile
  5610  02FF  2B02               	goto	i1l2096
  5611  0300                     u122_20:
  5612  0300  0022               	movlb	2	; select bank2
  5613  0301  120C               	bcf	12,4	;volatile
  5614  0302                     i1l2096:
  5615                           
  5616                           ;main.c: 260:         toggle_tone();
  5617  0302  25B0               	fcall	_toggle_tone
  5618                           
  5619                           ;main.c: 261:     } else {
  5620  0303  0008               	return
  5621  0304                     i1l2098:
  5622                           
  5623                           ;main.c: 262:         get_measure();
  5624  0304  241B               	fcall	_get_measure
  5625                           
  5626                           ;main.c: 263:         static char iled;;main.c: 264:         iled++;
  5627  0305  3001               	movlw	1
  5628  0306  00F7               	movwf	??_sec_tick_work
  5629  0307  0877               	movf	??_sec_tick_work,w
  5630  0308  07FA               	addwf	sec_tick_work@iled,f
  5631                           
  5632                           ;main.c: 265:         if (iled > 2) {
  5633  0309  3003               	movlw	3
  5634  030A  027A               	subwf	sec_tick_work@iled,w
  5635  030B  1C03               	skipc
  5636  030C  0008               	return
  5637  030D  1003               	clrc
  5638  030E  0022               	movlb	2	; select bank2
  5639  030F  1E0C               	btfss	12,4	;volatile
  5640  0310  1403               	setc
  5641  0311  1C03               	btfss	3,0
  5642  0312  2B16               	goto	u125_20
  5643  0313  0022               	movlb	2	; select bank2
  5644  0314  160C               	bsf	12,4	;volatile
  5645  0315  2B18               	goto	i1l2106
  5646  0316                     u125_20:
  5647  0316  0022               	movlb	2	; select bank2
  5648  0317  120C               	bcf	12,4	;volatile
  5649  0318                     i1l2106:
  5650                           
  5651                           ;main.c: 267:             iled = 0;
  5652  0318  01FA               	clrf	sec_tick_work@iled
  5653  0319  0008               	return
  5654  031A                     __end_of_sec_tick_work:
  5655                           
  5656                           	psect	text41
  5657  05B0                     __ptext41:	
  5658 ;; *************** function _toggle_tone *****************
  5659 ;; Defined at:
  5660 ;;		line 69 in file "main.c"
  5661 ;; Parameters:    Size  Location     Type
  5662 ;;		None
  5663 ;; Auto vars:     Size  Location     Type
  5664 ;;		None
  5665 ;; Return value:  Size  Location     Type
  5666 ;;                  1    wreg      void 
  5667 ;; Registers used:
  5668 ;;		status,0
  5669 ;; Tracked objects:
  5670 ;;		On entry : 1F/2
  5671 ;;		On exit  : 0/0
  5672 ;;		Unchanged: 0/0
  5673 ;; Data sizes:     COMMON   BANK0   BANK1
  5674 ;;      Params:         0       0       0
  5675 ;;      Locals:         0       0       0
  5676 ;;      Temps:          0       0       0
  5677 ;;      Totals:         0       0       0
  5678 ;;Total ram usage:        0 bytes
  5679 ;; Hardware stack levels used: 1
  5680 ;; This function calls:
  5681 ;;		Nothing
  5682 ;; This function is called by:
  5683 ;;		_sec_tick_work
  5684 ;; This function uses a non-reentrant model
  5685 ;;
  5686                           
  5687  05B0                     _toggle_tone:	
  5688                           ;psect for function _toggle_tone
  5689                           
  5690                           
  5691                           ;main.c: 70:     INTCONbits.TMR0IE = ~INTCONbits.TMR0IE;
  5692                           
  5693                           ;incstack = 0
  5694                           ; Regs used in _toggle_tone: [status,0]
  5695  05B0  1003               	clrc
  5696  05B1  1E8B               	btfss	11,5	;volatile
  5697  05B2  1403               	setc
  5698  05B3  1C03               	btfss	3,0
  5699  05B4  2DB7               	goto	u106_20
  5700  05B5  168B               	bsf	11,5	;volatile
  5701  05B6  0008               	return
  5702  05B7                     u106_20:
  5703  05B7  128B               	bcf	11,5	;volatile
  5704  05B8  0008               	return
  5705  05B9                     __end_of_toggle_tone:
  5706                           
  5707                           	psect	text42
  5708  0442                     __ptext42:	
  5709 ;; *************** function _rele_tick *****************
  5710 ;; Defined at:
  5711 ;;		line 230 in file "main.c"
  5712 ;; Parameters:    Size  Location     Type
  5713 ;;		None
  5714 ;; Auto vars:     Size  Location     Type
  5715 ;;		None
  5716 ;; Return value:  Size  Location     Type
  5717 ;;                  1    wreg      void 
  5718 ;; Registers used:
  5719 ;;		wreg, status,2, status,0
  5720 ;; Tracked objects:
  5721 ;;		On entry : 1F/0
  5722 ;;		On exit  : 1D/0
  5723 ;;		Unchanged: 0/0
  5724 ;; Data sizes:     COMMON   BANK0   BANK1
  5725 ;;      Params:         0       0       0
  5726 ;;      Locals:         0       0       0
  5727 ;;      Temps:          2       0       0
  5728 ;;      Totals:         2       0       0
  5729 ;;Total ram usage:        2 bytes
  5730 ;; Hardware stack levels used: 1
  5731 ;; This function calls:
  5732 ;;		Nothing
  5733 ;; This function is called by:
  5734 ;;		_sec_tick_work
  5735 ;; This function uses a non-reentrant model
  5736 ;;
  5737                           
  5738  0442                     _rele_tick:	
  5739                           ;psect for function _rele_tick
  5740                           
  5741                           
  5742                           ;main.c: 231:     if (FLAGS.bits.RELE_POW_WAIT) {
  5743                           
  5744                           ;incstack = 0
  5745                           ; Regs used in _rele_tick: [wreg+status,2+status,0]
  5746  0442  1EFC               	btfss	_FLAGS,5
  5747  0443  0008               	return
  5748                           
  5749                           ;main.c: 232:         if (time_pow_s > 0) {
  5750  0444  0866               	movf	_time_pow_s,w
  5751  0445  1903               	btfsc	3,2
  5752  0446  2C4A               	goto	i1l409
  5753                           
  5754                           ;main.c: 233:             time_pow_s--;
  5755  0447  3001               	movlw	1
  5756  0448  02E6               	subwf	_time_pow_s,f
  5757                           
  5758                           ;main.c: 234:         } else {
  5759  0449  0008               	return
  5760  044A                     i1l409:
  5761                           
  5762                           ;main.c: 235:             if (FLAGS.bits.RELE_CON_WAIT) {
  5763  044A  1F7C               	btfss	_FLAGS,6
  5764  044B  2C60               	goto	i1l417
  5765                           
  5766                           ;main.c: 236:                 do { LATCbits.LATC5 = 0; } while(0);
  5767  044C  0022               	movlb	2	; select bank2
  5768  044D  128E               	bcf	14,5	;volatile
  5769                           
  5770                           ;main.c: 237:                 _delay((unsigned long)((1 * 1000)*(16000000/4000.0)));
  5771  044E  3015               	movlw	21
  5772  044F  00F1               	movwf	??_rele_tick+1
  5773  0450  304B               	movlw	75
  5774  0451  00F0               	movwf	??_rele_tick
  5775  0452  30BE               	movlw	190
  5776  0453                     u207_27:
  5777  0453  0B89               	decfsz	9,f
  5778  0454  2C53               	goto	u207_27
  5779  0455  0BF0               	decfsz	??_rele_tick,f
  5780  0456  2C53               	goto	u207_27
  5781  0457  0BF1               	decfsz	??_rele_tick+1,f
  5782  0458  2C53               	goto	u207_27
  5783  0459  3200               	nop2
  5784  045A  0022               	movlb	2	; select bank2
  5785  045B  120E               	bcf	14,4	;volatile
  5786                           
  5787                           ;main.c: 239:                 FLAGS.bits.CLOSED = 1;
  5788  045C  157C               	bsf	_FLAGS,2
  5789                           
  5790                           ;main.c: 240:                 FLAGS.bits.RELE_CON_WAIT = 0;
  5791  045D  137C               	bcf	_FLAGS,6
  5792                           
  5793                           ;main.c: 241:                 FLAGS.bits.RELE_POW_WAIT = 0;
  5794  045E  12FC               	bcf	_FLAGS,5
  5795                           
  5796                           ;main.c: 242:             } else {
  5797  045F  0008               	return
  5798  0460                     i1l417:	
  5799                           ;main.c: 243:                 do { LATCbits.LATC5 = 0; } while(0);
  5800                           
  5801  0460  0022               	movlb	2	; select bank2
  5802  0461  128E               	bcf	14,5	;volatile
  5803                           
  5804                           ;main.c: 244:                 FLAGS.bits.CLOSED = 0;
  5805  0462  117C               	bcf	_FLAGS,2
  5806                           
  5807                           ;main.c: 245:                 FLAGS.bits.RELE_POW_WAIT = 0;
  5808  0463  12FC               	bcf	_FLAGS,5
  5809  0464  0008               	return
  5810  0465                     __end_of_rele_tick:
  5811                           
  5812                           	psect	text43
  5813  041B                     __ptext43:	
  5814 ;; *************** function _get_measure *****************
  5815 ;; Defined at:
  5816 ;;		line 126 in file "main.c"
  5817 ;; Parameters:    Size  Location     Type
  5818 ;;		None
  5819 ;; Auto vars:     Size  Location     Type
  5820 ;;  res             2    5[COMMON] unsigned int 
  5821 ;; Return value:  Size  Location     Type
  5822 ;;                  1    wreg      void 
  5823 ;; Registers used:
  5824 ;;		wreg, status,2, status,0, pclath, cstack
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/2
  5827 ;;		On exit  : 1D/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMMON   BANK0   BANK1
  5830 ;;      Params:         0       0       0
  5831 ;;      Locals:         2       0       0
  5832 ;;      Temps:          1       0       0
  5833 ;;      Totals:         3       0       0
  5834 ;;Total ram usage:        3 bytes
  5835 ;; Hardware stack levels used: 1
  5836 ;; Hardware stack levels required when called: 2
  5837 ;; This function calls:
  5838 ;;		_start_alarm
  5839 ;;		i1_ADC_GetConversion
  5840 ;; This function is called by:
  5841 ;;		_sec_tick_work
  5842 ;; This function uses a non-reentrant model
  5843 ;;
  5844                           
  5845  041B                     _get_measure:	
  5846                           ;psect for function _get_measure
  5847                           
  5848                           
  5849                           ;incstack = 0
  5850                           ; Regs used in _get_measure: [wreg+status,2+status,0+pclath+cstack]
  5851                           ;main.c: 127:     static unsigned char measures;;main.c: 128:     do { LATCbits.LATC1 = 
      +                          1; } while(0);
  5852  041B  0022               	movlb	2	; select bank2
  5853  041C  148E               	bsf	14,1	;volatile
  5854                           
  5855                           ;main.c: 129:     do { ANSELCbits.ANSC3 = 1; } while(0);
  5856  041D  0023               	movlb	3	; select bank3
  5857  041E  158E               	bsf	14,3	;volatile
  5858                           
  5859                           ;main.c: 130:     unsigned res = ADC_GetConversion(PIN_WSP_STATE);
  5860  041F  3007               	movlw	7
  5861  0420  24E2               	fcall	i1_ADC_GetConversion
  5862  0421  0871               	movf	?i1_ADC_GetConversion+1,w
  5863  0422  00F6               	movwf	get_measure@res+1
  5864  0423  0870               	movf	?i1_ADC_GetConversion,w
  5865  0424  00F5               	movwf	get_measure@res
  5866  0425  0023               	movlb	3	; select bank3
  5867  0426  118E               	bcf	14,3	;volatile
  5868  0427  0022               	movlb	2	; select bank2
  5869  0428  108E               	bcf	14,1	;volatile
  5870                           
  5871                           ;main.c: 133:     if (res < BAD_WSP_VOLTAGE) measures++;
  5872  0429  304E               	movlw	78
  5873  042A  0276               	subwf	get_measure@res+1,w
  5874  042B  3020               	movlw	32
  5875  042C  1903               	skipnz
  5876  042D  0275               	subwf	get_measure@res,w
  5877  042E  1803               	skipnc
  5878  042F  2C35               	goto	i1l1972
  5879  0430  3001               	movlw	1
  5880  0431  00F4               	movwf	??_get_measure
  5881  0432  0874               	movf	??_get_measure,w
  5882  0433  07FB               	addwf	get_measure@measures,f
  5883  0434  2C3C               	goto	i1l1976
  5884  0435                     i1l1972:
  5885  0435  309C               	movlw	156
  5886  0436  0276               	subwf	get_measure@res+1,w
  5887  0437  3041               	movlw	65
  5888  0438  1903               	skipnz
  5889  0439  0275               	subwf	get_measure@res,w
  5890  043A  1803               	btfsc	3,0
  5891  043B  01FB               	clrf	get_measure@measures
  5892  043C                     i1l1976:
  5893                           
  5894                           ;main.c: 135:     if (measures > 2) start_alarm();
  5895  043C  3003               	movlw	3
  5896  043D  027B               	subwf	get_measure@measures,w
  5897  043E  1C03               	skipc
  5898  043F  0008               	return
  5899  0440  25B9               	fcall	_start_alarm
  5900  0441  0008               	return
  5901  0442                     __end_of_get_measure:
  5902                           
  5903                           	psect	text44
  5904  04E2                     __ptext44:	
  5905 ;; *************** function i1_ADC_GetConversion *****************
  5906 ;; Defined at:
  5907 ;;		line 112 in file "mcc_generated_files/adc.c"
  5908 ;; Parameters:    Size  Location     Type
  5909 ;;  channel         1    wreg     enum E2178
  5910 ;; Auto vars:     Size  Location     Type
  5911 ;;  channel         1    3[COMMON] enum E2178
  5912 ;; Return value:  Size  Location     Type
  5913 ;;                  2    0[COMMON] unsigned short 
  5914 ;; Registers used:
  5915 ;;		wreg, status,2, status,0
  5916 ;; Tracked objects:
  5917 ;;		On entry : 1F/3
  5918 ;;		On exit  : 1F/1
  5919 ;;		Unchanged: 0/0
  5920 ;; Data sizes:     COMMON   BANK0   BANK1
  5921 ;;      Params:         2       0       0
  5922 ;;      Locals:         1       0       0
  5923 ;;      Temps:          1       0       0
  5924 ;;      Totals:         4       0       0
  5925 ;;Total ram usage:        4 bytes
  5926 ;; Hardware stack levels used: 1
  5927 ;; This function calls:
  5928 ;;		Nothing
  5929 ;; This function is called by:
  5930 ;;		_get_measure
  5931 ;; This function uses a non-reentrant model
  5932 ;;
  5933                           
  5934  04E2                     i1_ADC_GetConversion:	
  5935                           ;psect for function i1_ADC_GetConversion
  5936                           
  5937                           
  5938                           ;incstack = 0
  5939                           ; Regs used in i1_ADC_GetConversion: [wreg+status,2+status,0]
  5940                           ;i1ADC_GetConversion@channel stored from wreg
  5941  04E2  00F3               	movwf	i1ADC_GetConversion@channel
  5942                           
  5943                           ;mcc_generated_files/adc.c: 112: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 113: {;mcc_generated_files/adc.c: 115:     ADCON0bits.CHS = ch
      +                          annel;
  5944  04E3  0873               	movf	i1ADC_GetConversion@channel,w
  5945  04E4  00F2               	movwf	??i1_ADC_GetConversion
  5946  04E5  0DF2               	rlf	??i1_ADC_GetConversion,f
  5947  04E6  0DF2               	rlf	??i1_ADC_GetConversion,f
  5948  04E7  0021               	movlb	1	; select bank1
  5949  04E8  081D               	movf	29,w	;volatile
  5950  04E9  0672               	xorwf	??i1_ADC_GetConversion,w
  5951  04EA  3983               	andlw	-125
  5952  04EB  0672               	xorwf	??i1_ADC_GetConversion,w
  5953  04EC  009D               	movwf	29	;volatile
  5954                           
  5955                           ;mcc_generated_files/adc.c: 118:     ADCON0bits.ADON = 1;
  5956  04ED  141D               	bsf	29,0	;volatile
  5957                           
  5958                           ;mcc_generated_files/adc.c: 121:     _delay((unsigned long)((5)*(16000000/4000000.0)));
  5959  04EE  3006               	movlw	6
  5960  04EF                     u208_27:
  5961  04EF  0B89               	decfsz	9,f
  5962  04F0  2CEF               	goto	u208_27
  5963  04F1  3200               	nop2
  5964                           
  5965                           ;mcc_generated_files/adc.c: 124:     ADCON0bits.GO_nDONE = 1;
  5966  04F2  0021               	movlb	1	; select bank1
  5967  04F3  149D               	bsf	29,1	;volatile
  5968  04F4                     i1l63:	
  5969                           ;mcc_generated_files/adc.c: 128:     {;mcc_generated_files/adc.c: 129:     }
  5970                           
  5971                           
  5972                           ;mcc_generated_files/adc.c: 127:     while (ADCON0bits.GO_nDONE)
  5973  04F4  189D               	btfsc	29,1	;volatile
  5974  04F5  2CF4               	goto	i1l63
  5975                           
  5976                           ;mcc_generated_files/adc.c: 132:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  5977  04F6  081C               	movf	28,w	;volatile
  5978  04F7  00F1               	movwf	?i1_ADC_GetConversion+1
  5979  04F8  081B               	movf	27,w	;volatile
  5980  04F9  00F0               	movwf	?i1_ADC_GetConversion
  5981  04FA  0008               	return
  5982  04FB                     __end_ofi1_ADC_GetConversion:
  5983                           
  5984                           	psect	text45
  5985  05B9                     __ptext45:	
  5986 ;; *************** function _start_alarm *****************
  5987 ;; Defined at:
  5988 ;;		line 115 in file "main.c"
  5989 ;; Parameters:    Size  Location     Type
  5990 ;;		None
  5991 ;; Auto vars:     Size  Location     Type
  5992 ;;		None
  5993 ;; Return value:  Size  Location     Type
  5994 ;;                  1    wreg      void 
  5995 ;; Registers used:
  5996 ;;		wreg, status,2, status,0, pclath, cstack
  5997 ;; Tracked objects:
  5998 ;;		On entry : 1F/2
  5999 ;;		On exit  : 1D/0
  6000 ;;		Unchanged: 0/0
  6001 ;; Data sizes:     COMMON   BANK0   BANK1
  6002 ;;      Params:         0       0       0
  6003 ;;      Locals:         0       0       0
  6004 ;;      Temps:          0       0       0
  6005 ;;      Totals:         0       0       0
  6006 ;;Total ram usage:        0 bytes
  6007 ;; Hardware stack levels used: 1
  6008 ;; Hardware stack levels required when called: 1
  6009 ;; This function calls:
  6010 ;;		i1_go_close
  6011 ;;		i1_go_close_alt
  6012 ;; This function is called by:
  6013 ;;		_get_measure
  6014 ;; This function uses a non-reentrant model
  6015 ;;
  6016                           
  6017  05B9                     _start_alarm:	
  6018                           ;psect for function _start_alarm
  6019                           
  6020                           
  6021                           ;main.c: 116:     FLAGS.bits.ALARM = 1;
  6022                           
  6023                           ;incstack = 0
  6024                           ; Regs used in _start_alarm: [wreg+status,2+status,0+pclath+cstack]
  6025  05B9  147C               	bsf	_FLAGS,0
  6026                           
  6027                           ;main.c: 117:     do { LATCbits.LATC0 = 1; } while(0);
  6028  05BA  140E               	bsf	14,0	;volatile
  6029                           
  6030                           ;main.c: 118:     INTCONbits.TMR0IE = 1;
  6031  05BB  168B               	bsf	11,5	;volatile
  6032                           
  6033                           ;main.c: 119:     if (FLAGS.bits.NORMAL_WORK_MODE) {
  6034  05BC  1CFC               	btfss	_FLAGS,1
  6035  05BD  2DC0               	goto	i1l1932
  6036                           
  6037                           ;main.c: 120:         go_close();
  6038  05BE  24C3               	fcall	i1_go_close
  6039                           
  6040                           ;main.c: 121:     } else {
  6041  05BF  0008               	return
  6042  05C0                     i1l1932:
  6043                           
  6044                           ;main.c: 122:         go_close_alt();
  6045  05C0  25FB               	fcall	i1_go_close_alt
  6046  05C1  0008               	return
  6047  05C2                     __end_of_start_alarm:
  6048                           
  6049                           	psect	text46
  6050  05FB                     __ptext46:	
  6051 ;; *************** function i1_go_close_alt *****************
  6052 ;; Defined at:
  6053 ;;		line 102 in file "main.c"
  6054 ;; Parameters:    Size  Location     Type
  6055 ;;		None
  6056 ;; Auto vars:     Size  Location     Type
  6057 ;;		None
  6058 ;; Return value:  Size  Location     Type
  6059 ;;                  1    wreg      void 
  6060 ;; Registers used:
  6061 ;;		None
  6062 ;; Tracked objects:
  6063 ;;		On entry : 1F/2
  6064 ;;		On exit  : 1F/2
  6065 ;;		Unchanged: 0/0
  6066 ;; Data sizes:     COMMON   BANK0   BANK1
  6067 ;;      Params:         0       0       0
  6068 ;;      Locals:         0       0       0
  6069 ;;      Temps:          0       0       0
  6070 ;;      Totals:         0       0       0
  6071 ;;Total ram usage:        0 bytes
  6072 ;; Hardware stack levels used: 1
  6073 ;; This function calls:
  6074 ;;		Nothing
  6075 ;; This function is called by:
  6076 ;;		_start_alarm
  6077 ;; This function uses a non-reentrant model
  6078 ;;
  6079                           
  6080  05FB                     i1_go_close_alt:	
  6081                           ;psect for function i1_go_close_alt
  6082                           
  6083                           
  6084                           ;main.c: 103:     FLAGS.bits.CLOSED = 1;
  6085                           
  6086                           ;incstack = 0
  6087                           ; Regs used in i1_go_close_alt: []
  6088  05FB  157C               	bsf	_FLAGS,2
  6089                           
  6090                           ;main.c: 104:     do { LATCbits.LATC4 = 0; } while(0);
  6091  05FC  120E               	bcf	14,4	;volatile
  6092                           
  6093                           ;main.c: 105:     do { LATCbits.LATC5 = 1; } while(0);
  6094  05FD  168E               	bsf	14,5	;volatile
  6095  05FE  0008               	return
  6096  05FF                     __end_ofi1_go_close_alt:
  6097                           
  6098                           	psect	text47
  6099  04C3                     __ptext47:	
  6100 ;; *************** function i1_go_close *****************
  6101 ;; Defined at:
  6102 ;;		line 83 in file "main.c"
  6103 ;; Parameters:    Size  Location     Type
  6104 ;;		None
  6105 ;; Auto vars:     Size  Location     Type
  6106 ;;		None
  6107 ;; Return value:  Size  Location     Type
  6108 ;;                  1    wreg      void 
  6109 ;; Registers used:
  6110 ;;		wreg
  6111 ;; Tracked objects:
  6112 ;;		On entry : 1F/2
  6113 ;;		On exit  : 1F/0
  6114 ;;		Unchanged: 0/0
  6115 ;; Data sizes:     COMMON   BANK0   BANK1
  6116 ;;      Params:         0       0       0
  6117 ;;      Locals:         0       0       0
  6118 ;;      Temps:          2       0       0
  6119 ;;      Totals:         2       0       0
  6120 ;;Total ram usage:        2 bytes
  6121 ;; Hardware stack levels used: 1
  6122 ;; This function calls:
  6123 ;;		Nothing
  6124 ;; This function is called by:
  6125 ;;		_start_alarm
  6126 ;; This function uses a non-reentrant model
  6127 ;;
  6128                           
  6129  04C3                     i1_go_close:	
  6130                           ;psect for function i1_go_close
  6131                           
  6132                           
  6133                           ;main.c: 84:     time_s = 0;
  6134                           
  6135                           ;incstack = 0
  6136                           ; Regs used in i1_go_close: [wreg]
  6137  04C3  3000               	movlw	0
  6138  04C4  0020               	movlb	0	; select bank0
  6139  04C5  00DD               	movwf	_time_s
  6140  04C6  3000               	movlw	0
  6141  04C7  00DE               	movwf	_time_s+1
  6142  04C8  3000               	movlw	0
  6143  04C9  00DF               	movwf	_time_s+2
  6144  04CA  0022               	movlb	2	; select bank2
  6145  04CB  160E               	bsf	14,4	;volatile
  6146                           
  6147                           ;main.c: 86:     _delay((unsigned long)((1 * 1000)*(16000000/4000.0)));
  6148  04CC  3015               	movlw	21
  6149  04CD  00F1               	movwf	??i1_go_close+1
  6150  04CE  304B               	movlw	75
  6151  04CF  00F0               	movwf	??i1_go_close
  6152  04D0  30BE               	movlw	190
  6153  04D1                     u209_27:
  6154  04D1  0B89               	decfsz	9,f
  6155  04D2  2CD1               	goto	u209_27
  6156  04D3  0BF0               	decfsz	??i1_go_close,f
  6157  04D4  2CD1               	goto	u209_27
  6158  04D5  0BF1               	decfsz	??i1_go_close+1,f
  6159  04D6  2CD1               	goto	u209_27
  6160  04D7  3200               	nop2
  6161  04D8  0022               	movlb	2	; select bank2
  6162  04D9  168E               	bsf	14,5	;volatile
  6163                           
  6164                           ;main.c: 88:     time_pow_s = 10;
  6165  04DA  300A               	movlw	10
  6166  04DB  00F0               	movwf	??i1_go_close
  6167  04DC  0870               	movf	??i1_go_close,w
  6168  04DD  0020               	movlb	0	; select bank0
  6169  04DE  00E6               	movwf	_time_pow_s
  6170                           
  6171                           ;main.c: 89:     FLAGS.bits.RELE_POW_WAIT = 1;
  6172  04DF  16FC               	bsf	_FLAGS,5
  6173                           
  6174                           ;main.c: 90:     FLAGS.bits.RELE_CON_WAIT = 1;
  6175  04E0  177C               	bsf	_FLAGS,6
  6176  04E1  0008               	return
  6177  04E2                     __end_ofi1_go_close:
  6178                           
  6179                           	psect	text48
  6180  0578                     __ptext48:	
  6181 ;; *************** function _TMR0_ISR *****************
  6182 ;; Defined at:
  6183 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  6184 ;; Parameters:    Size  Location     Type
  6185 ;;		None
  6186 ;; Auto vars:     Size  Location     Type
  6187 ;;		None
  6188 ;; Return value:  Size  Location     Type
  6189 ;;                  1    wreg      void 
  6190 ;; Registers used:
  6191 ;;		wreg, status,2, status,0, pclath, cstack
  6192 ;; Tracked objects:
  6193 ;;		On entry : 0/0
  6194 ;;		On exit  : 0/0
  6195 ;;		Unchanged: 0/0
  6196 ;; Data sizes:     COMMON   BANK0   BANK1
  6197 ;;      Params:         0       0       0
  6198 ;;      Locals:         0       0       0
  6199 ;;      Temps:          0       0       0
  6200 ;;      Totals:         0       0       0
  6201 ;;Total ram usage:        0 bytes
  6202 ;; Hardware stack levels used: 1
  6203 ;; Hardware stack levels required when called: 1
  6204 ;; This function calls:
  6205 ;;		Absolute function
  6206 ;;		_TMR0_DefaultInterruptHandler
  6207 ;;		i1_switch_zum
  6208 ;; This function is called by:
  6209 ;;		_INTERRUPT_InterruptManager
  6210 ;; This function uses a non-reentrant model
  6211 ;;
  6212                           
  6213  0578                     _TMR0_ISR:	
  6214                           ;psect for function _TMR0_ISR
  6215                           
  6216                           
  6217                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
  6218                           
  6219                           ;incstack = 0
  6220                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  6221  0578  110B               	bcf	11,2	;volatile
  6222                           
  6223                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
  6224  0579  0020               	movlb	0	; select bank0
  6225  057A  086C               	movf	_timer0ReloadVal,w	;volatile
  6226  057B  0095               	movwf	21	;volatile
  6227                           
  6228                           ;mcc_generated_files/tmr0.c: 116:     if(TMR0_InterruptHandler)
  6229  057C  0868               	movf	_TMR0_InterruptHandler,w
  6230  057D  0469               	iorwf	_TMR0_InterruptHandler+1,w
  6231  057E  1903               	btfsc	3,2
  6232  057F  0008               	return
  6233                           
  6234                           ;mcc_generated_files/tmr0.c: 117:     {;mcc_generated_files/tmr0.c: 118:         TMR0_In
      +                          terruptHandler();
  6235  0580  0869               	movf	_TMR0_InterruptHandler+1,w
  6236  0581  008A               	movwf	10
  6237  0582  0868               	movf	_TMR0_InterruptHandler,w
  6238  0583  000A               	callw
  6239  0584  3185               	pagesel	$
  6240  0585  0008               	return
  6241  0586                     __end_of_TMR0_ISR:
  6242                           
  6243                           	psect	text49
  6244  060E                     __ptext49:	
  6245 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  6246 ;; Defined at:
  6247 ;;		line 129 in file "mcc_generated_files/tmr0.c"
  6248 ;; Parameters:    Size  Location     Type
  6249 ;;		None
  6250 ;; Auto vars:     Size  Location     Type
  6251 ;;		None
  6252 ;; Return value:  Size  Location     Type
  6253 ;;                  1    wreg      void 
  6254 ;; Registers used:
  6255 ;;		None
  6256 ;; Tracked objects:
  6257 ;;		On entry : 1F/0
  6258 ;;		On exit  : 1F/0
  6259 ;;		Unchanged: 1F/0
  6260 ;; Data sizes:     COMMON   BANK0   BANK1
  6261 ;;      Params:         0       0       0
  6262 ;;      Locals:         0       0       0
  6263 ;;      Temps:          0       0       0
  6264 ;;      Totals:         0       0       0
  6265 ;;Total ram usage:        0 bytes
  6266 ;; Hardware stack levels used: 1
  6267 ;; This function calls:
  6268 ;;		Nothing
  6269 ;; This function is called by:
  6270 ;;		_TMR0_Initialize
  6271 ;;		_TMR0_ISR
  6272 ;; This function uses a non-reentrant model
  6273 ;;
  6274                           
  6275  060E                     _TMR0_DefaultInterruptHandler:	
  6276                           ;psect for function _TMR0_DefaultInterruptHandler
  6277                           
  6278                           
  6279                           ;incstack = 0
  6280                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  6281  060E  0008               	return
  6282  060F                     __end_of_TMR0_DefaultInterruptHandler:
  6283                           
  6284                           	psect	text50
  6285  0586                     __ptext50:	
  6286 ;; *************** function i1_switch_zum *****************
  6287 ;; Defined at:
  6288 ;;		line 65 in file "main.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;		None
  6291 ;; Auto vars:     Size  Location     Type
  6292 ;;		None
  6293 ;; Return value:  Size  Location     Type
  6294 ;;                  1    wreg      void 
  6295 ;; Registers used:
  6296 ;;		status,0
  6297 ;; Tracked objects:
  6298 ;;		On entry : 1F/0
  6299 ;;		On exit  : 1F/2
  6300 ;;		Unchanged: 0/0
  6301 ;; Data sizes:     COMMON   BANK0   BANK1
  6302 ;;      Params:         0       0       0
  6303 ;;      Locals:         0       0       0
  6304 ;;      Temps:          0       0       0
  6305 ;;      Totals:         0       0       0
  6306 ;;Total ram usage:        0 bytes
  6307 ;; Hardware stack levels used: 1
  6308 ;; This function calls:
  6309 ;;		Nothing
  6310 ;; This function is called by:
  6311 ;;		_sec_tick_work
  6312 ;;		_TMR0_ISR
  6313 ;; This function uses a non-reentrant model
  6314 ;;
  6315                           
  6316  0586                     i1_switch_zum:	
  6317                           ;psect for function i1_switch_zum
  6318                           
  6319  0586                     i1l2020:	
  6320                           ;incstack = 0
  6321                           ; Regs used in i1_switch_zum: [status,0]
  6322                           ;main.c: 66:     do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  6323                           
  6324  0586  1003               	clrc
  6325  0587  0022               	movlb	2	; select bank2
  6326  0588  1E8C               	btfss	12,5	;volatile
  6327  0589  1403               	setc
  6328  058A  1C03               	btfss	3,0
  6329  058B  2D8F               	goto	u116_20
  6330  058C  0022               	movlb	2	; select bank2
  6331  058D  168C               	bsf	12,5	;volatile
  6332  058E  0008               	return
  6333  058F                     u116_20:
  6334  058F  0022               	movlb	2	; select bank2
  6335  0590  128C               	bcf	12,5	;volatile
  6336  0591  0008               	return
  6337  0592                     __end_ofi1_switch_zum:
  6338  007E                     btemp	set	126	;btemp
  6339  007E                     int$flags	set	126
  6340  007E                     wtemp0	set	126
  6341                           
  6342                           	psect	idloc
  6343                           
  6344                           ;Config register IDLOC0 @ 0x8000
  6345                           ;	unspecified, using default values
  6346  8000                     	org	32768
  6347  8000  3FFF               	dw	16383
  6348                           
  6349                           ;Config register IDLOC1 @ 0x8001
  6350                           ;	unspecified, using default values
  6351  8001                     	org	32769
  6352  8001  3FFF               	dw	16383
  6353                           
  6354                           ;Config register IDLOC2 @ 0x8002
  6355                           ;	unspecified, using default values
  6356  8002                     	org	32770
  6357  8002  3FFF               	dw	16383
  6358                           
  6359                           ;Config register IDLOC3 @ 0x8003
  6360                           ;	unspecified, using default values
  6361  8003                     	org	32771
  6362  8003  3FFF               	dw	16383
  6363                           
  6364                           	psect	config
  6365                           
  6366                           ;Config register CONFIG1 @ 0x8007
  6367                           ;	Oscillator Selection
  6368                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  6369                           ;	Watchdog Timer Enable
  6370                           ;	WDTE = ON, WDT enabled
  6371                           ;	Power-up Timer Enable
  6372                           ;	PWRTE = OFF, PWRT disabled
  6373                           ;	MCLR Pin Function Select
  6374                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  6375                           ;	Flash Program Memory Code Protection
  6376                           ;	CP = OFF, Program memory code protection is disabled
  6377                           ;	Data Memory Code Protection
  6378                           ;	CPD = OFF, Data memory code protection is disabled
  6379                           ;	Brown-out Reset Enable
  6380                           ;	BOREN = ON, Brown-out Reset enabled
  6381                           ;	Clock Out Enable
  6382                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  6383                           ;	Internal/External Switchover
  6384                           ;	IESO = ON, Internal/External Switchover mode is enabled
  6385                           ;	Fail-Safe Clock Monitor Enable
  6386                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  6387  8007                     	org	32775
  6388  8007  3FFC               	dw	16380
  6389                           
  6390                           ;Config register CONFIG2 @ 0x8008
  6391                           ;	Flash Memory Self-Write Protection
  6392                           ;	WRT = OFF, Write protection off
  6393                           ;	PLL Enable
  6394                           ;	PLLEN = OFF, 4x PLL disabled
  6395                           ;	Stack Overflow/Underflow Reset Enable
  6396                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  6397                           ;	Brown-out Reset Voltage Selection
  6398                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  6399                           ;	Low-Voltage Programming Enable
  6400                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  6401  8008                     	org	32776
  6402  8008  1EFF               	dw	7935

Data Sizes:
    Strings     0
    Constant    9
    Data        0
    BSS         64
    Persistent  37
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80     45      77
    BANK1            32      0      32

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> switch_zum(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> i1_switch_zum(), switch_zum(), TMR0_DefaultInterruptHandler(), Absolute function(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> sec_tick_work(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> sec_tick_work(), Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR2_CallBack->_sec_tick_work
    _sec_tick_work->_get_measure
    _get_measure->i1_ADC_GetConversion
    _start_alarm->i1_go_close

Critical Paths under _main in BANK0

    _switch_wm->_beep
    _get_jump_full->_ADC_GetConversion
    _get_fun_full->_ADC_GetConversion
    _get_eeprom->_get_time
    _get_time->_EEPROM_ReadShortLong
    _EEPROM_ReadShortLong->_EEPROM_ReadByte
    _get_adr->_EEPROM_ReadByte
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _povorot->_go_close
    _get_voltage->_EEPROM_WriteShortLong
    _EEPROM_WriteShortLong->_EEPROM_WriteByte
    _get_jump->_ADC_GetConversion
    _get_fun->_ADC_GetConversion
    _fun_work->_beep

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6829
                           _fun_work
                            _get_fun
                           _get_jump
                        _get_voltage
                            _povorot
                        _start_setup
                          _switch_wm
 ---------------------------------------------------------------------------------
 (1) _switch_wm                                            2     2      0    1308
                                             10 BANK0      2     2      0
                               _beep
                           _go_close
                       _go_close_alt
 ---------------------------------------------------------------------------------
 (1) _start_setup                                          0     0      0    2521
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
                         _get_eeprom
                       _get_fun_full
                      _get_jump_full
 ---------------------------------------------------------------------------------
 (2) _get_jump_full                                        4     4      0      70
                                              4 BANK0      4     4      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (2) _get_fun_full                                         4     4      0      70
                                              4 BANK0      4     4      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (2) _get_eeprom                                           0     0      0    1685
                            _get_adr
                           _get_time
 ---------------------------------------------------------------------------------
 (3) _get_time                                            29    29      0     977
                                             16 BANK0     29    29      0
               _EEPROM_ReadShortLong
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     196
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _EEPROM_ReadShortLong                                13    10      3     113
                                              3 BANK0     13    10      3
                    _EEPROM_ReadByte
 ---------------------------------------------------------------------------------
 (3) _get_adr                                             38    38      0     708
                                              3 BANK0     38    38      0
                    _EEPROM_ReadByte
 ---------------------------------------------------------------------------------
 (2) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     348
                     _ADC_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      1     1      0     174
                                              2 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR0_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _povorot                                              0     0      0       0
                           _go_close
                            _go_open
 ---------------------------------------------------------------------------------
 (1) _get_voltage                                          7     7      0    1602
                                             11 BANK0      7     7      0
                  _ADC_GetConversion
                    _EEPROM_ReadByte
                   _EEPROM_WriteByte
              _EEPROM_WriteShortLong
 ---------------------------------------------------------------------------------
 (2) _EEPROM_WriteShortLong                                6     3      3     816
                                              5 BANK0      6     3      3
                   _EEPROM_WriteByte
 ---------------------------------------------------------------------------------
 (3) _EEPROM_WriteByte                                     5     4      1     560
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (5) _EEPROM_ReadByte                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _get_jump                                             3     3      0      45
                                              4 BANK0      3     3      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (1) _get_fun                                              3     3      0      45
                                              4 BANK0      3     3      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversion                                    4     2      2      22
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _fun_work                                             2     2      0    1308
                                             10 BANK0      2     2      0
                               _beep
                           _go_close
                       _go_close_alt
                            _go_open
                        _go_open_alt
 ---------------------------------------------------------------------------------
 (2) _go_open_alt                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _go_open                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _go_close_alt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _go_close                                             2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _beep                                                10     4      6    1308
                                              0 BANK0     10     4      6
                         _switch_zum
 ---------------------------------------------------------------------------------
 (3) _switch_zum                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           0     0      0      67
                           _TMR0_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR2_ISR                                             0     0      0      67
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (8) _TMR2_CallBack                                        0     0      0      67
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
                      _sec_tick_work *
 ---------------------------------------------------------------------------------
 (9) _sec_tick_work                                        1     1      0      67
                                              7 COMMON     1     1      0
                        _get_measure
                          _rele_tick
                        _toggle_tone
                       i1_switch_zum
 ---------------------------------------------------------------------------------
 (10) _toggle_tone                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _rele_tick                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _get_measure                                         3     3      0      67
                                              4 COMMON     3     3      0
                        _start_alarm
                i1_ADC_GetConversion
 ---------------------------------------------------------------------------------
 (11) i1_ADC_GetConversion                                 4     2      2      22
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (11) _start_alarm                                         0     0      0       0
                         i1_go_close
                     i1_go_close_alt
 ---------------------------------------------------------------------------------
 (12) i1_go_close_alt                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_go_close                                          2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                       i1_switch_zum *
 ---------------------------------------------------------------------------------
 (10) i1_switch_zum                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fun_work
     _beep
       _switch_zum
     _go_close
     _go_close_alt
     _go_open
     _go_open_alt
   _get_fun
     _ADC_GetConversion
   _get_jump
     _ADC_GetConversion
   _get_voltage
     _ADC_GetConversion
     _EEPROM_ReadByte
     _EEPROM_WriteByte
     _EEPROM_WriteShortLong
       _EEPROM_WriteByte
   _povorot
     _go_close
     _go_open
   _start_setup
     _SYSTEM_Initialize
       _ADC_Initialize
       _FVR_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
       _TMR2_Initialize
         _TMR2_SetInterruptHandler
       _WDT_Initialize
     _TMR0_SetInterruptHandler
     _TMR2_SetInterruptHandler
     _TMR2_StartTimer
     _get_eeprom
       _get_adr
         _EEPROM_ReadByte
       _get_time
         _EEPROM_ReadShortLong
           _EEPROM_ReadByte
         ___bmul
     _get_fun_full
       _ADC_GetConversion
     _get_jump_full
       _ADC_GetConversion
   _switch_wm
     _beep
     _go_close
     _go_close_alt

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
     i1_switch_zum *
   _TMR2_ISR
     _TMR2_CallBack
       Absolute function(Fake) *
       _TMR2_DefaultInterruptHandler *
       _sec_tick_work *
         _get_measure
           _start_alarm
             i1_go_close
             i1_go_close_alt
           i1_ADC_GetConversion
         _rele_tick
         _toggle_tone
         i1_switch_zum

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      7A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2D      4D       6       96.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0      20       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      7A       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Fri Apr 29 14:36:55 2022

        __end_of_TMR2_SetInterruptHandler 05E4                          get_fun_full@flag 0027  
                      get_fun@fun_counter 0065                            ___bmul@product 0022  
                   __end_of_sec_tick_work 031A                                        l63 049A  
                                      _RD 0CA8                                        _WR 0CA9  
                           ?_go_close_alt 0070                              ?_get_voltage 0070  
                          ?_get_jump_full 0070                    __end_of_FVR_Initialize 05FB  
                         _timer0ReloadVal 006C                                       l453 02D5  
                                     l448 02CF                                       l561 03CE  
                                     l567 0525                                       _GIE 005F  
                             _start_alarm 05B9                                       _PR2 001B  
                             _start_setup 03A5                              ?_go_open_alt 0070  
                         _TMR2_Initialize 0549                                       wreg 0009  
                              i1_go_close 04C3                               get_jump@res 0025  
                                    l2012 0540                                      l2008 053A  
                                    l2300 0409                                      l2140 0109  
                                    l2230 0080                                      l2304 03F5  
                                    l2128 03F1                                      l2152 0113  
                                    l2224 005D                                      l2170 0131  
                                    l2330 024E                                      l2420 0332  
                                    l2180 0150                                      l2260 00CC  
                                    l2252 00BF                                      l2244 0090  
                                    l2086 056C                                      l2510 0235  
                                    l2190 015A                                      l2158 0125  
                                    l2270 00DF                                      l2176 0148  
                                    l2256 00C7                                      l2344 0276  
                                    l2336 025D                                      l2520 02BC  
                                    l2194 016C                                      l2266 00CF  
                                    l2258 0043                                      l2354 0278  
                                    l2346 026C                                      l2508 0234  
                                    l2428 0341                                      l2452 036F  
                                    l2444 0360                                      l2372 02AC  
                                    l2364 0293                                      l2542 01A4  
                                    l2470 038B                                      l2382 02AE  
                                    l2374 02A2                                      l2358 0284  
                                    l2614 0593                                      l2552 01B1  
                                    l2536 0194                                      l2298 03FA  
                                    l2494 0219                                      l2496 021A  
                                    l2498 022A                               get_time@buf 0049  
                                    u1300 0105                                      u1420 0034  
                                    u2037 0495                                      _LATA 010C  
                                    u1190 0575                                      u2047 04B2  
                                    _LATC 010E                                      u1280 03F0  
                                    u2057 0400                                      u2067 040F  
                                    u1435 0070                                      u1715 0384  
                                    u1485 0051                                      u1755 0395  
                                    u1965 01BF                                      i1l63 04F4  
                                    _TMR0 0015                                      _TMR2 001A  
                                    _WREN 0CAA                                      _WPUA 020C  
                                    _WPUC 020E                                      _beep 03F4  
                                    _main 0592                                      fsr0h 0005  
                                    fsr1h 0007                                      indf0 0000  
                                    fsr0l 0004                                      indf1 0001  
                                    fsr1l 0006                      EEPROM_WriteByte@addr 0023  
                                    btemp 007E                            ??_get_fun_full 0024  
                                    start 0016                         ___bmul@multiplier 0023  
                    __end_ofi1_switch_zum 0592                   get_fun_full@fun_counter 0064  
                          ??_go_close_alt 0020                   __end_of_TMR0_Initialize 0524  
          ??_TMR0_DefaultInterruptHandler 0070                           ?_FVR_Initialize 0070  
           __end_of_OSCILLATOR_Initialize 05D9                                     ?_beep 0020  
                                   ?_main 0070                              get_time@buf2 0045  
                                   _EEADR 0191                                     _FLAGS 007C  
                                   _T2CON 001C                                     i1l110 000B  
                                   i1l116 0014                                     i1l417 0460  
                                   i1l409 044A                                     _TRISA 008C  
                                   _TRISC 008E                 ?_TMR0_SetInterruptHandler 0020  
                         __end_of_get_adr 0186                          __end_of_TMR0_ISR 0586  
                         __end_of_get_fun 034C                          __end_of_TMR2_ISR 0569  
                         __end_of_go_open 05A6                                     beep@i 0029  
                                   beep@j 0028                            _WDT_Initialize 05F3  
                                   pclath 000A                           __end_of_povorot 03A5  
                                   status 0003                                     wtemp0 007E  
                         _TMR2_StartTimer 060B                              get_voltage@q 0031  
                         __initialization 0017                              __end_of_beep 041B  
                            __end_of_main 059C                           ??_get_jump_full 0024  
                 __end_of_TMR2_Initialize 0559               ?_INTERRUPT_InterruptManager 0070  
                                  ??_beep 0026                             get_time@F2660 004D  
                _TMR2_SetInterruptHandler 05DF                             get_time@F2662 0059  
                                  ??_main 004D                    __end_of_WDT_Initialize 05F7  
                             ?i1_go_close 0070                       i1_ADC_GetConversion 04E2  
                           get_time@q_825 004C                             get_time@q_826 004B  
                                  _ADCON0 009D                                    _ADCON1 009E  
                                  _ADRESH 009C                                    _ADRESL 009B  
                                  _EEDATA 0193                                    _EECON2 0196  
                                  _APFCON 011D                                    _ANSELA 018C  
                                  _ANSELC 018E                                    _BORCON 0116  
                           get_time@times 0034                                    i1l2020 0586  
                                  i1l2106 0318                                    i1l2096 0302  
                                  i1l2098 0304                                    u106_20 05B7  
                                  u122_20 0300                                    i1l1932 05C0  
                                  i1l1972 0435                                    u116_20 058F  
                                  i1l1976 043C                                    u125_20 0316  
                                  u207_27 0453                                    u208_27 04EF  
                                  u209_27 04D1                                    _FVRCON 0117  
                        _GOOD_WSP_VOLTAGE 0602                                    _OSCCON 0099  
                                  _WDTCON 0097             __end_of_EEPROM_WriteShortLong 0485  
                    ?i1_ADC_GetConversion 0070                          __end_of_get_jump 037A  
                        __end_of_get_time 00FE                          __end_of_go_close 04C3  
                                  ___bmul 0538                      _switch_zum$intlevel0 056C  
                        ?_TMR0_Initialize 0070                         ??_EEPROM_ReadByte 0020  
                        __end_of_fun_work 0248                                    _time_s 005D  
                __end_of_EEPROM_WriteByte 03F4                                 ??_get_adr 0023  
                               ??_get_fun 0024                                 ??_go_open 0020  
                    __end_of_get_fun_full 0280                           ?_WDT_Initialize 0070  
                          get_measure@res 0075                    EEPROM_WriteByte@status 0024  
                ADC_GetConversion@channel 0023                                 ??_povorot 0022  
                 __end_of_TMR2_StartTimer 060D  TMR0_SetInterruptHandler@InterruptHandler 0020  
TMR2_SetInterruptHandler@InterruptHandler 0020                      __end_of_go_close_alt 05F3  
                       _SYSTEM_Initialize 05C2                   __end_of__initialization 0028  
                   __end_of_TMR2_CallBack 05B0                        ?_SYSTEM_Initialize 0070  
                            ?_toggle_tone 0070                     ??i1_ADC_GetConversion 0072  
                     ___bmul@multiplicand 0020                  EEPROM_ReadShortLong@addr 002F  
                          __pcstackCOMMON 0070                 get_jump_full@jump_counter 0062  
                     ??_SYSTEM_Initialize 0023                                 ?_TMR0_ISR 0070  
                               ?_TMR2_ISR 0070                     __end_of_ROTATION_TIME 0602  
                        ?_TMR2_Initialize 0070                i1ADC_GetConversion@channel 0073  
                            ?_start_alarm 0070                            _OPTION_REGbits 0095  
                            ?_start_setup 0070                              i1_switch_zum 0586  
               __end_of_SYSTEM_Initialize 05CA                                __pbssBANK0 004D  
                              __pbssBANK1 00A0                          ??_FVR_Initialize 0020  
                              __pmaintext 0592                                   ?___bmul 0020  
        __end_of_TMR0_SetInterruptHandler 05E9                                ??_TMR0_ISR 0070  
                              ??_TMR2_ISR 0078                                __pintentry 0004  
                        get_jump_full@res 0025                                _get_eeprom 0608  
                                 _OSCTUNE 0098                          ?_TMR2_StartTimer 0070  
                               ?_get_jump 0070                                 ?_get_time 0070  
                               ?_go_close 0070                                 ?_fun_work 0070  
                    _ADC_InterruptHandler 0060                ??_TMR2_SetInterruptHandler 0022  
                __end_of_GOOD_WSP_VOLTAGE 0605                                   __ptext1 02B4  
                                 __ptext2 03A5                       get_measure@measures 007B  
                                 __ptext3 0280                                   __ptext4 0248  
                                 __ptext5 0608                                   __ptext6 002B  
                                 __ptext7 0538                                   __ptext8 01D0  
                                 __ptext9 00FE                                   _get_adr 00FE  
                                 _get_fun 031A                                   _go_open 059C  
                   _OSCILLATOR_Initialize 05D2                                 _T2CONbits 001C  
                ??_PIN_MANAGER_Initialize 0020                              ??i1_go_close 0070  
                                 _povorot 037A                                   clrloop0 05DA  
                              ??_get_jump 0024                                ??_get_time 0030  
                              ??_go_close 0020                         __end_of_rele_tick 0465  
                    end_of_initialization 0028                                ??_fun_work 002A  
                         _EEPROM_ReadByte 0524                              _get_fun_full 0248  
                      __end_ofi1_go_close 04E2                     __end_of_get_jump_full 02B4  
                           _sec_tick_work 02E7                                _time_pow_s 0066  
                            _go_close_alt 05EE                          ??_WDT_Initialize 0020  
                _TMR0_SetInterruptHandler 05E4                         ?_EEPROM_WriteByte 0020  
                       __end_of_switch_wm 02E7                            get_voltage@buf 002F  
                          get_voltage@res 002D                               ?_get_eeprom 0070  
                      ??_EEPROM_WriteByte 0021                                get_adr@adr 0024  
                              get_adr@buf 0048                                 _TRISAbits 008C  
                               _TRISCbits 008E                           get_fun_full@res 0025  
                              get_fun@res 0025                        EEPROM_WriteByte@dt 0020  
            __end_of_EEPROM_ReadShortLong 020F                             ??_get_measure 0074  
                   _EEPROM_WriteShortLong 0465                                _switch_zum 0569  
    __end_of_TMR2_DefaultInterruptHandler 060E              _TMR2_DefaultInterruptHandler 060D  
                          __end_of___bmul 0549                            ?_sec_tick_work 0070  
                           ??_get_voltage 002B                            _ADC_Initialize 05CA  
                  ?_OSCILLATOR_Initialize 0070                            i1_go_close_alt 05FB  
                           ??_go_open_alt 0020                       start_initialization 0017  
                 __end_of_EEPROM_ReadByte 0538               __end_ofi1_ADC_GetConversion 04FB  
                                ??___bmul 0021                    __end_of_ADC_Initialize 05D2  
                     __end_of_get_measure 0442                    __end_ofi1_go_close_alt 05FF  
           ?_TMR2_DefaultInterruptHandler 0070                               __pbssCOMMON 0078  
                     __end_of_get_voltage 01D0                                 ___latbits 0000  
                           __pcstackBANK0 0020                       __end_of_go_open_alt 05EE  
                        _START_EEPROM_ADR 0067                     _TMR0_InterruptHandler 0068  
                               __pnvBANK0 0068                    ?_EEPROM_WriteShortLong 0025  
                  _PIN_MANAGER_Initialize 04FB                           ??_sec_tick_work 0077  
                             ?_switch_zum 0070                                 beep@delay 0020  
                         ?_ADC_Initialize 0070                                 beep@count 0025  
                               beep@pause 0022                           ?i1_go_close_alt 0070  
            ??_INTERRUPT_InterruptManager 0078               EEPROM_WriteShortLong@ucData 0025  
                                ?_get_adr 0070                                  ?_get_fun 0070  
                                ?_go_open 0070                      _EEPROM_ReadShortLong 01D0  
                       sec_tick_work@iled 007A                                  ?_povorot 0070  
                      get_time@time_count 0040                          ?_EEPROM_ReadByte 0070  
                       ??_TMR0_Initialize 0022                         get_jump_full@flag 0027  
                                _LATAbits 010C                                  _LATCbits 010E  
                               _rele_tick 0442                                 clear_ram0 05D9  
                           _TMR2_CallBack 05A6                                  _PIE1bits 0091  
                             _get_measure 041B                ??_TMR0_SetInterruptHandler 0022  
                                _PIR1bits 0011                                  _TMR0_ISR 0578  
                                _TMR2_ISR 0559                             _ROTATION_TIME 05FF  
                             _get_voltage 0186                                _ADCON0bits 009D  
                   ?_EEPROM_ReadShortLong 0023                                  _WPUAbits 020C  
                                _WPUCbits 020E                                 get_time@i 0048  
                               get_time@q 004A                              ??_get_eeprom 004D  
          ??_TMR2_DefaultInterruptHandler 0070                               _go_open_alt 05E9  
               ?_TMR2_SetInterruptHandler 0020                         get_time@adr_error 0044  
                               _switch_wm 02B4                         ??_TMR2_Initialize 0022  
                          ?_TMR2_CallBack 0070                                ?_rele_tick 0070  
                           ??_toggle_tone 0070                         _ADC_GetConversion 0485  
                      __end_of_get_eeprom 060B                   ??_OSCILLATOR_Initialize 0020  
                      ?_ADC_GetConversion 0020                    EEPROM_ReadShortLong@dt 002C  
                           ??_start_alarm 0072                                _ANSELAbits 018C  
                              _ANSELCbits 018E                       ??_ADC_GetConversion 0022  
                           ??_start_setup 004D                   EEPROM_WriteShortLong@dt 0029  
                              ?_switch_wm 0070                                  __ptext10 060B  
                                __ptext11 05C2                                  __ptext20 05CA  
                                __ptext12 05F3                                  __ptext21 037A  
                                __ptext13 0549                                  __ptext30 05E9  
                                __ptext22 0186                                  __ptext14 05DF  
                                __ptext31 059C                                  __ptext23 0465  
                                __ptext15 0510                                  __ptext40 02E7  
                                __ptext32 05EE                                  __ptext24 03CD  
                                __ptext16 05E4                                  __ptext41 05B0  
                                __ptext33 04A4                                  __ptext25 0524  
                                __ptext17 04FB                                  __ptext50 0586  
                                __ptext42 0442                                  __ptext34 03F4  
                                __ptext26 034C                                  __ptext18 05D2  
                                __ptext43 041B                                  __ptext35 0569  
                                __ptext27 031A                                  __ptext19 05F7  
                                __ptext44 04E2                                  __ptext28 0485  
                                __ptext45 05B9                                  __ptext37 0559  
                                __ptext29 020F                                  __ptext46 05FB  
                                __ptext38 05A6                                  __ptext47 04C3  
                                __ptext39 060D                                  __ptext48 0578  
                                __ptext49 060E                             ?i1_switch_zum 0070  
                                beep@time 0024                                  _get_jump 034C  
                                _get_time 002B                                  _go_close 04A4  
                         _BAD_WSP_VOLTAGE 0605                                  _fun_work 020F  
    __end_of_TMR0_DefaultInterruptHandler 060F              _TMR0_DefaultInterruptHandler 060E  
               __end_of_ADC_GetConversion 04A4                                  int$flags 007E  
                                get_adr@i 0044                                  get_adr@q 0045  
                       ??_TMR2_StartTimer 0020                       __end_of_toggle_tone 05B9  
      __end_of_INTERRUPT_InterruptManager 0016                _INTERRUPT_InterruptManager 0004  
                  ??_EEPROM_ReadShortLong 0026                      get_jump@jump_counter 0063  
                              _INTCONbits 000B                            ??i1_switch_zum 0070  
                     __end_of_start_alarm 05C2                       __end_of_start_setup 03CD  
                                intlevel1 0000                           ??_TMR2_CallBack 0078  
                 ??_EEPROM_WriteShortLong 0028                 EEPROM_WriteShortLong@addr 002A  
                 ?_PIN_MANAGER_Initialize 0070                               ??_rele_tick 0070  
                     EEPROM_ReadByte@addr 0022                          ??_ADC_Initialize 0020  
           ?_TMR0_DefaultInterruptHandler 0070                          ??i1_go_close_alt 0070  
                            ??_switch_zum 0020                             _get_jump_full 0280  
                           __pstringtext1 05FF                             __pstringtext2 0602  
                           __pstringtext3 0605                            _FVR_Initialize 05F7  
                              _OPTION_REG 0095                          get_voltage@q_804 0030  
                   TMR2_ISR@CountCallBack 0078                           _TMR0_Initialize 0510  
                 __end_of_BAD_WSP_VOLTAGE 0608                               ??_switch_wm 002A  
                            get_adr@F2640 00A0                        __end_of_switch_zum 0578  
          __end_of_PIN_MANAGER_Initialize 0510                          _EEPROM_WriteByte 03CD  
                            get_adr@i_814 0046                              get_adr@q_813 0047  
                   _TMR2_InterruptHandler 006A                               _toggle_tone 05B0  
                           ?_get_fun_full 0070                              ?_get_measure 0070  
