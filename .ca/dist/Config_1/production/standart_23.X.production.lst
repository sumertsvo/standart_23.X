

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Fri Apr 29 14:36:36 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F1823
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	intentry,global,class=CODE,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,delta=2
    60                           	psect	text45,local,class=CODE,merge=1,delta=2
    61                           	psect	text46,local,class=CODE,merge=1,delta=2
    62                           	psect	text47,local,class=CODE,merge=1,delta=2
    63                           	psect	text48,local,class=CODE,merge=1,delta=2
    64                           	psect	text49,local,class=CODE,merge=1,delta=2
    65                           	psect	text50,local,class=CODE,merge=1,delta=2
    66                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    67                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    68                           	dabs	1,0x7E,2
    69  0000                     
    70                           ; Version 2.40
    71                           ; Generated 17/11/2021 GMT
    72                           ; 
    73                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution. Publication is not required when
    87                           ;        this file is used in an embedded application.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC16F1823 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     	;# 
   106  0001                     	;# 
   107  0002                     	;# 
   108  0003                     	;# 
   109  0004                     	;# 
   110  0005                     	;# 
   111  0006                     	;# 
   112  0007                     	;# 
   113  0008                     	;# 
   114  0009                     	;# 
   115  000A                     	;# 
   116  000B                     	;# 
   117  000C                     	;# 
   118  000E                     	;# 
   119  0011                     	;# 
   120  0012                     	;# 
   121  0015                     	;# 
   122  0016                     	;# 
   123  0016                     	;# 
   124  0017                     	;# 
   125  0018                     	;# 
   126  0019                     	;# 
   127  001A                     	;# 
   128  001B                     	;# 
   129  001C                     	;# 
   130  001E                     	;# 
   131  001F                     	;# 
   132  008C                     	;# 
   133  008E                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0095                     	;# 
   137  0096                     	;# 
   138  0097                     	;# 
   139  0098                     	;# 
   140  0099                     	;# 
   141  009A                     	;# 
   142  009B                     	;# 
   143  009B                     	;# 
   144  009C                     	;# 
   145  009D                     	;# 
   146  009E                     	;# 
   147  010C                     	;# 
   148  010E                     	;# 
   149  0111                     	;# 
   150  0112                     	;# 
   151  0113                     	;# 
   152  0114                     	;# 
   153  0115                     	;# 
   154  0116                     	;# 
   155  0117                     	;# 
   156  0118                     	;# 
   157  0119                     	;# 
   158  011A                     	;# 
   159  011B                     	;# 
   160  011D                     	;# 
   161  011D                     	;# 
   162  018C                     	;# 
   163  018E                     	;# 
   164  0191                     	;# 
   165  0191                     	;# 
   166  0192                     	;# 
   167  0193                     	;# 
   168  0193                     	;# 
   169  0193                     	;# 
   170  0194                     	;# 
   171  0195                     	;# 
   172  0196                     	;# 
   173  0199                     	;# 
   174  019A                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019D                     	;# 
   182  019E                     	;# 
   183  019F                     	;# 
   184  020C                     	;# 
   185  020E                     	;# 
   186  0211                     	;# 
   187  0211                     	;# 
   188  0212                     	;# 
   189  0212                     	;# 
   190  0213                     	;# 
   191  0213                     	;# 
   192  0214                     	;# 
   193  0214                     	;# 
   194  0215                     	;# 
   195  0215                     	;# 
   196  0215                     	;# 
   197  0216                     	;# 
   198  0216                     	;# 
   199  0217                     	;# 
   200  0217                     	;# 
   201  0291                     	;# 
   202  0291                     	;# 
   203  0292                     	;# 
   204  0293                     	;# 
   205  0294                     	;# 
   206  0295                     	;# 
   207  0295                     	;# 
   208  0296                     	;# 
   209  0391                     	;# 
   210  0392                     	;# 
   211  0393                     	;# 
   212  039A                     	;# 
   213  039C                     	;# 
   214  039D                     	;# 
   215  039E                     	;# 
   216  039F                     	;# 
   217  0FE4                     	;# 
   218  0FE5                     	;# 
   219  0FE6                     	;# 
   220  0FE7                     	;# 
   221  0FE8                     	;# 
   222  0FE9                     	;# 
   223  0FEA                     	;# 
   224  0FEB                     	;# 
   225  0FED                     	;# 
   226  0FEE                     	;# 
   227  0FEF                     	;# 
   228  0000                     	;# 
   229  0001                     	;# 
   230  0002                     	;# 
   231  0003                     	;# 
   232  0004                     	;# 
   233  0005                     	;# 
   234  0006                     	;# 
   235  0007                     	;# 
   236  0008                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000E                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0015                     	;# 
   245  0016                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001C                     	;# 
   253  001E                     	;# 
   254  001F                     	;# 
   255  008C                     	;# 
   256  008E                     	;# 
   257  0091                     	;# 
   258  0092                     	;# 
   259  0095                     	;# 
   260  0096                     	;# 
   261  0097                     	;# 
   262  0098                     	;# 
   263  0099                     	;# 
   264  009A                     	;# 
   265  009B                     	;# 
   266  009B                     	;# 
   267  009C                     	;# 
   268  009D                     	;# 
   269  009E                     	;# 
   270  010C                     	;# 
   271  010E                     	;# 
   272  0111                     	;# 
   273  0112                     	;# 
   274  0113                     	;# 
   275  0114                     	;# 
   276  0115                     	;# 
   277  0116                     	;# 
   278  0117                     	;# 
   279  0118                     	;# 
   280  0119                     	;# 
   281  011A                     	;# 
   282  011B                     	;# 
   283  011D                     	;# 
   284  011D                     	;# 
   285  018C                     	;# 
   286  018E                     	;# 
   287  0191                     	;# 
   288  0191                     	;# 
   289  0192                     	;# 
   290  0193                     	;# 
   291  0193                     	;# 
   292  0193                     	;# 
   293  0194                     	;# 
   294  0195                     	;# 
   295  0196                     	;# 
   296  0199                     	;# 
   297  019A                     	;# 
   298  019B                     	;# 
   299  019B                     	;# 
   300  019B                     	;# 
   301  019B                     	;# 
   302  019C                     	;# 
   303  019C                     	;# 
   304  019D                     	;# 
   305  019E                     	;# 
   306  019F                     	;# 
   307  020C                     	;# 
   308  020E                     	;# 
   309  0211                     	;# 
   310  0211                     	;# 
   311  0212                     	;# 
   312  0212                     	;# 
   313  0213                     	;# 
   314  0213                     	;# 
   315  0214                     	;# 
   316  0214                     	;# 
   317  0215                     	;# 
   318  0215                     	;# 
   319  0215                     	;# 
   320  0216                     	;# 
   321  0216                     	;# 
   322  0217                     	;# 
   323  0217                     	;# 
   324  0291                     	;# 
   325  0291                     	;# 
   326  0292                     	;# 
   327  0293                     	;# 
   328  0294                     	;# 
   329  0295                     	;# 
   330  0295                     	;# 
   331  0296                     	;# 
   332  0391                     	;# 
   333  0392                     	;# 
   334  0393                     	;# 
   335  039A                     	;# 
   336  039C                     	;# 
   337  039D                     	;# 
   338  039E                     	;# 
   339  039F                     	;# 
   340  0FE4                     	;# 
   341  0FE5                     	;# 
   342  0FE6                     	;# 
   343  0FE7                     	;# 
   344  0FE8                     	;# 
   345  0FE9                     	;# 
   346  0FEA                     	;# 
   347  0FEB                     	;# 
   348  0FED                     	;# 
   349  0FEE                     	;# 
   350  0FEF                     	;# 
   351  0000                     	;# 
   352  0001                     	;# 
   353  0002                     	;# 
   354  0003                     	;# 
   355  0004                     	;# 
   356  0005                     	;# 
   357  0006                     	;# 
   358  0007                     	;# 
   359  0008                     	;# 
   360  0009                     	;# 
   361  000A                     	;# 
   362  000B                     	;# 
   363  000C                     	;# 
   364  000E                     	;# 
   365  0011                     	;# 
   366  0012                     	;# 
   367  0015                     	;# 
   368  0016                     	;# 
   369  0016                     	;# 
   370  0017                     	;# 
   371  0018                     	;# 
   372  0019                     	;# 
   373  001A                     	;# 
   374  001B                     	;# 
   375  001C                     	;# 
   376  001E                     	;# 
   377  001F                     	;# 
   378  008C                     	;# 
   379  008E                     	;# 
   380  0091                     	;# 
   381  0092                     	;# 
   382  0095                     	;# 
   383  0096                     	;# 
   384  0097                     	;# 
   385  0098                     	;# 
   386  0099                     	;# 
   387  009A                     	;# 
   388  009B                     	;# 
   389  009B                     	;# 
   390  009C                     	;# 
   391  009D                     	;# 
   392  009E                     	;# 
   393  010C                     	;# 
   394  010E                     	;# 
   395  0111                     	;# 
   396  0112                     	;# 
   397  0113                     	;# 
   398  0114                     	;# 
   399  0115                     	;# 
   400  0116                     	;# 
   401  0117                     	;# 
   402  0118                     	;# 
   403  0119                     	;# 
   404  011A                     	;# 
   405  011B                     	;# 
   406  011D                     	;# 
   407  011D                     	;# 
   408  018C                     	;# 
   409  018E                     	;# 
   410  0191                     	;# 
   411  0191                     	;# 
   412  0192                     	;# 
   413  0193                     	;# 
   414  0193                     	;# 
   415  0193                     	;# 
   416  0194                     	;# 
   417  0195                     	;# 
   418  0196                     	;# 
   419  0199                     	;# 
   420  019A                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019C                     	;# 
   426  019C                     	;# 
   427  019D                     	;# 
   428  019E                     	;# 
   429  019F                     	;# 
   430  020C                     	;# 
   431  020E                     	;# 
   432  0211                     	;# 
   433  0211                     	;# 
   434  0212                     	;# 
   435  0212                     	;# 
   436  0213                     	;# 
   437  0213                     	;# 
   438  0214                     	;# 
   439  0214                     	;# 
   440  0215                     	;# 
   441  0215                     	;# 
   442  0215                     	;# 
   443  0216                     	;# 
   444  0216                     	;# 
   445  0217                     	;# 
   446  0217                     	;# 
   447  0291                     	;# 
   448  0291                     	;# 
   449  0292                     	;# 
   450  0293                     	;# 
   451  0294                     	;# 
   452  0295                     	;# 
   453  0295                     	;# 
   454  0296                     	;# 
   455  0391                     	;# 
   456  0392                     	;# 
   457  0393                     	;# 
   458  039A                     	;# 
   459  039C                     	;# 
   460  039D                     	;# 
   461  039E                     	;# 
   462  039F                     	;# 
   463  0FE4                     	;# 
   464  0FE5                     	;# 
   465  0FE6                     	;# 
   466  0FE7                     	;# 
   467  0FE8                     	;# 
   468  0FE9                     	;# 
   469  0FEA                     	;# 
   470  0FEB                     	;# 
   471  0FED                     	;# 
   472  0FEE                     	;# 
   473  0FEF                     	;# 
   474  0000                     	;# 
   475  0001                     	;# 
   476  0002                     	;# 
   477  0003                     	;# 
   478  0004                     	;# 
   479  0005                     	;# 
   480  0006                     	;# 
   481  0007                     	;# 
   482  0008                     	;# 
   483  0009                     	;# 
   484  000A                     	;# 
   485  000B                     	;# 
   486  000C                     	;# 
   487  000E                     	;# 
   488  0011                     	;# 
   489  0012                     	;# 
   490  0015                     	;# 
   491  0016                     	;# 
   492  0016                     	;# 
   493  0017                     	;# 
   494  0018                     	;# 
   495  0019                     	;# 
   496  001A                     	;# 
   497  001B                     	;# 
   498  001C                     	;# 
   499  001E                     	;# 
   500  001F                     	;# 
   501  008C                     	;# 
   502  008E                     	;# 
   503  0091                     	;# 
   504  0092                     	;# 
   505  0095                     	;# 
   506  0096                     	;# 
   507  0097                     	;# 
   508  0098                     	;# 
   509  0099                     	;# 
   510  009A                     	;# 
   511  009B                     	;# 
   512  009B                     	;# 
   513  009C                     	;# 
   514  009D                     	;# 
   515  009E                     	;# 
   516  010C                     	;# 
   517  010E                     	;# 
   518  0111                     	;# 
   519  0112                     	;# 
   520  0113                     	;# 
   521  0114                     	;# 
   522  0115                     	;# 
   523  0116                     	;# 
   524  0117                     	;# 
   525  0118                     	;# 
   526  0119                     	;# 
   527  011A                     	;# 
   528  011B                     	;# 
   529  011D                     	;# 
   530  011D                     	;# 
   531  018C                     	;# 
   532  018E                     	;# 
   533  0191                     	;# 
   534  0191                     	;# 
   535  0192                     	;# 
   536  0193                     	;# 
   537  0193                     	;# 
   538  0193                     	;# 
   539  0194                     	;# 
   540  0195                     	;# 
   541  0196                     	;# 
   542  0199                     	;# 
   543  019A                     	;# 
   544  019B                     	;# 
   545  019B                     	;# 
   546  019B                     	;# 
   547  019B                     	;# 
   548  019C                     	;# 
   549  019C                     	;# 
   550  019D                     	;# 
   551  019E                     	;# 
   552  019F                     	;# 
   553  020C                     	;# 
   554  020E                     	;# 
   555  0211                     	;# 
   556  0211                     	;# 
   557  0212                     	;# 
   558  0212                     	;# 
   559  0213                     	;# 
   560  0213                     	;# 
   561  0214                     	;# 
   562  0214                     	;# 
   563  0215                     	;# 
   564  0215                     	;# 
   565  0215                     	;# 
   566  0216                     	;# 
   567  0216                     	;# 
   568  0217                     	;# 
   569  0217                     	;# 
   570  0291                     	;# 
   571  0291                     	;# 
   572  0292                     	;# 
   573  0293                     	;# 
   574  0294                     	;# 
   575  0295                     	;# 
   576  0295                     	;# 
   577  0296                     	;# 
   578  0391                     	;# 
   579  0392                     	;# 
   580  0393                     	;# 
   581  039A                     	;# 
   582  039C                     	;# 
   583  039D                     	;# 
   584  039E                     	;# 
   585  039F                     	;# 
   586  0FE4                     	;# 
   587  0FE5                     	;# 
   588  0FE6                     	;# 
   589  0FE7                     	;# 
   590  0FE8                     	;# 
   591  0FE9                     	;# 
   592  0FEA                     	;# 
   593  0FEB                     	;# 
   594  0FED                     	;# 
   595  0FEE                     	;# 
   596  0FEF                     	;# 
   597  0000                     	;# 
   598  0001                     	;# 
   599  0002                     	;# 
   600  0003                     	;# 
   601  0004                     	;# 
   602  0005                     	;# 
   603  0006                     	;# 
   604  0007                     	;# 
   605  0008                     	;# 
   606  0009                     	;# 
   607  000A                     	;# 
   608  000B                     	;# 
   609  000C                     	;# 
   610  000E                     	;# 
   611  0011                     	;# 
   612  0012                     	;# 
   613  0015                     	;# 
   614  0016                     	;# 
   615  0016                     	;# 
   616  0017                     	;# 
   617  0018                     	;# 
   618  0019                     	;# 
   619  001A                     	;# 
   620  001B                     	;# 
   621  001C                     	;# 
   622  001E                     	;# 
   623  001F                     	;# 
   624  008C                     	;# 
   625  008E                     	;# 
   626  0091                     	;# 
   627  0092                     	;# 
   628  0095                     	;# 
   629  0096                     	;# 
   630  0097                     	;# 
   631  0098                     	;# 
   632  0099                     	;# 
   633  009A                     	;# 
   634  009B                     	;# 
   635  009B                     	;# 
   636  009C                     	;# 
   637  009D                     	;# 
   638  009E                     	;# 
   639  010C                     	;# 
   640  010E                     	;# 
   641  0111                     	;# 
   642  0112                     	;# 
   643  0113                     	;# 
   644  0114                     	;# 
   645  0115                     	;# 
   646  0116                     	;# 
   647  0117                     	;# 
   648  0118                     	;# 
   649  0119                     	;# 
   650  011A                     	;# 
   651  011B                     	;# 
   652  011D                     	;# 
   653  011D                     	;# 
   654  018C                     	;# 
   655  018E                     	;# 
   656  0191                     	;# 
   657  0191                     	;# 
   658  0192                     	;# 
   659  0193                     	;# 
   660  0193                     	;# 
   661  0193                     	;# 
   662  0194                     	;# 
   663  0195                     	;# 
   664  0196                     	;# 
   665  0199                     	;# 
   666  019A                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019B                     	;# 
   671  019C                     	;# 
   672  019C                     	;# 
   673  019D                     	;# 
   674  019E                     	;# 
   675  019F                     	;# 
   676  020C                     	;# 
   677  020E                     	;# 
   678  0211                     	;# 
   679  0211                     	;# 
   680  0212                     	;# 
   681  0212                     	;# 
   682  0213                     	;# 
   683  0213                     	;# 
   684  0214                     	;# 
   685  0214                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0215                     	;# 
   689  0216                     	;# 
   690  0216                     	;# 
   691  0217                     	;# 
   692  0217                     	;# 
   693  0291                     	;# 
   694  0291                     	;# 
   695  0292                     	;# 
   696  0293                     	;# 
   697  0294                     	;# 
   698  0295                     	;# 
   699  0295                     	;# 
   700  0296                     	;# 
   701  0391                     	;# 
   702  0392                     	;# 
   703  0393                     	;# 
   704  039A                     	;# 
   705  039C                     	;# 
   706  039D                     	;# 
   707  039E                     	;# 
   708  039F                     	;# 
   709  0FE4                     	;# 
   710  0FE5                     	;# 
   711  0FE6                     	;# 
   712  0FE7                     	;# 
   713  0FE8                     	;# 
   714  0FE9                     	;# 
   715  0FEA                     	;# 
   716  0FEB                     	;# 
   717  0FED                     	;# 
   718  0FEE                     	;# 
   719  0FEF                     	;# 
   720  0000                     	;# 
   721  0001                     	;# 
   722  0002                     	;# 
   723  0003                     	;# 
   724  0004                     	;# 
   725  0005                     	;# 
   726  0006                     	;# 
   727  0007                     	;# 
   728  0008                     	;# 
   729  0009                     	;# 
   730  000A                     	;# 
   731  000B                     	;# 
   732  000C                     	;# 
   733  000E                     	;# 
   734  0011                     	;# 
   735  0012                     	;# 
   736  0015                     	;# 
   737  0016                     	;# 
   738  0016                     	;# 
   739  0017                     	;# 
   740  0018                     	;# 
   741  0019                     	;# 
   742  001A                     	;# 
   743  001B                     	;# 
   744  001C                     	;# 
   745  001E                     	;# 
   746  001F                     	;# 
   747  008C                     	;# 
   748  008E                     	;# 
   749  0091                     	;# 
   750  0092                     	;# 
   751  0095                     	;# 
   752  0096                     	;# 
   753  0097                     	;# 
   754  0098                     	;# 
   755  0099                     	;# 
   756  009A                     	;# 
   757  009B                     	;# 
   758  009B                     	;# 
   759  009C                     	;# 
   760  009D                     	;# 
   761  009E                     	;# 
   762  010C                     	;# 
   763  010E                     	;# 
   764  0111                     	;# 
   765  0112                     	;# 
   766  0113                     	;# 
   767  0114                     	;# 
   768  0115                     	;# 
   769  0116                     	;# 
   770  0117                     	;# 
   771  0118                     	;# 
   772  0119                     	;# 
   773  011A                     	;# 
   774  011B                     	;# 
   775  011D                     	;# 
   776  011D                     	;# 
   777  018C                     	;# 
   778  018E                     	;# 
   779  0191                     	;# 
   780  0191                     	;# 
   781  0192                     	;# 
   782  0193                     	;# 
   783  0193                     	;# 
   784  0193                     	;# 
   785  0194                     	;# 
   786  0195                     	;# 
   787  0196                     	;# 
   788  0199                     	;# 
   789  019A                     	;# 
   790  019B                     	;# 
   791  019B                     	;# 
   792  019B                     	;# 
   793  019B                     	;# 
   794  019C                     	;# 
   795  019C                     	;# 
   796  019D                     	;# 
   797  019E                     	;# 
   798  019F                     	;# 
   799  020C                     	;# 
   800  020E                     	;# 
   801  0211                     	;# 
   802  0211                     	;# 
   803  0212                     	;# 
   804  0212                     	;# 
   805  0213                     	;# 
   806  0213                     	;# 
   807  0214                     	;# 
   808  0214                     	;# 
   809  0215                     	;# 
   810  0215                     	;# 
   811  0215                     	;# 
   812  0216                     	;# 
   813  0216                     	;# 
   814  0217                     	;# 
   815  0217                     	;# 
   816  0291                     	;# 
   817  0291                     	;# 
   818  0292                     	;# 
   819  0293                     	;# 
   820  0294                     	;# 
   821  0295                     	;# 
   822  0295                     	;# 
   823  0296                     	;# 
   824  0391                     	;# 
   825  0392                     	;# 
   826  0393                     	;# 
   827  039A                     	;# 
   828  039C                     	;# 
   829  039D                     	;# 
   830  039E                     	;# 
   831  039F                     	;# 
   832  0FE4                     	;# 
   833  0FE5                     	;# 
   834  0FE6                     	;# 
   835  0FE7                     	;# 
   836  0FE8                     	;# 
   837  0FE9                     	;# 
   838  0FEA                     	;# 
   839  0FEB                     	;# 
   840  0FED                     	;# 
   841  0FEE                     	;# 
   842  0FEF                     	;# 
   843  0000                     	;# 
   844  0001                     	;# 
   845  0002                     	;# 
   846  0003                     	;# 
   847  0004                     	;# 
   848  0005                     	;# 
   849  0006                     	;# 
   850  0007                     	;# 
   851  0008                     	;# 
   852  0009                     	;# 
   853  000A                     	;# 
   854  000B                     	;# 
   855  000C                     	;# 
   856  000E                     	;# 
   857  0011                     	;# 
   858  0012                     	;# 
   859  0015                     	;# 
   860  0016                     	;# 
   861  0016                     	;# 
   862  0017                     	;# 
   863  0018                     	;# 
   864  0019                     	;# 
   865  001A                     	;# 
   866  001B                     	;# 
   867  001C                     	;# 
   868  001E                     	;# 
   869  001F                     	;# 
   870  008C                     	;# 
   871  008E                     	;# 
   872  0091                     	;# 
   873  0092                     	;# 
   874  0095                     	;# 
   875  0096                     	;# 
   876  0097                     	;# 
   877  0098                     	;# 
   878  0099                     	;# 
   879  009A                     	;# 
   880  009B                     	;# 
   881  009B                     	;# 
   882  009C                     	;# 
   883  009D                     	;# 
   884  009E                     	;# 
   885  010C                     	;# 
   886  010E                     	;# 
   887  0111                     	;# 
   888  0112                     	;# 
   889  0113                     	;# 
   890  0114                     	;# 
   891  0115                     	;# 
   892  0116                     	;# 
   893  0117                     	;# 
   894  0118                     	;# 
   895  0119                     	;# 
   896  011A                     	;# 
   897  011B                     	;# 
   898  011D                     	;# 
   899  011D                     	;# 
   900  018C                     	;# 
   901  018E                     	;# 
   902  0191                     	;# 
   903  0191                     	;# 
   904  0192                     	;# 
   905  0193                     	;# 
   906  0193                     	;# 
   907  0193                     	;# 
   908  0194                     	;# 
   909  0195                     	;# 
   910  0196                     	;# 
   911  0199                     	;# 
   912  019A                     	;# 
   913  019B                     	;# 
   914  019B                     	;# 
   915  019B                     	;# 
   916  019B                     	;# 
   917  019C                     	;# 
   918  019C                     	;# 
   919  019D                     	;# 
   920  019E                     	;# 
   921  019F                     	;# 
   922  020C                     	;# 
   923  020E                     	;# 
   924  0211                     	;# 
   925  0211                     	;# 
   926  0212                     	;# 
   927  0212                     	;# 
   928  0213                     	;# 
   929  0213                     	;# 
   930  0214                     	;# 
   931  0214                     	;# 
   932  0215                     	;# 
   933  0215                     	;# 
   934  0215                     	;# 
   935  0216                     	;# 
   936  0216                     	;# 
   937  0217                     	;# 
   938  0217                     	;# 
   939  0291                     	;# 
   940  0291                     	;# 
   941  0292                     	;# 
   942  0293                     	;# 
   943  0294                     	;# 
   944  0295                     	;# 
   945  0295                     	;# 
   946  0296                     	;# 
   947  0391                     	;# 
   948  0392                     	;# 
   949  0393                     	;# 
   950  039A                     	;# 
   951  039C                     	;# 
   952  039D                     	;# 
   953  039E                     	;# 
   954  039F                     	;# 
   955  0FE4                     	;# 
   956  0FE5                     	;# 
   957  0FE6                     	;# 
   958  0FE7                     	;# 
   959  0FE8                     	;# 
   960  0FE9                     	;# 
   961  0FEA                     	;# 
   962  0FEB                     	;# 
   963  0FED                     	;# 
   964  0FEE                     	;# 
   965  0FEF                     	;# 
   966  0000                     	;# 
   967  0001                     	;# 
   968  0002                     	;# 
   969  0003                     	;# 
   970  0004                     	;# 
   971  0005                     	;# 
   972  0006                     	;# 
   973  0007                     	;# 
   974  0008                     	;# 
   975  0009                     	;# 
   976  000A                     	;# 
   977  000B                     	;# 
   978  000C                     	;# 
   979  000E                     	;# 
   980  0011                     	;# 
   981  0012                     	;# 
   982  0015                     	;# 
   983  0016                     	;# 
   984  0016                     	;# 
   985  0017                     	;# 
   986  0018                     	;# 
   987  0019                     	;# 
   988  001A                     	;# 
   989  001B                     	;# 
   990  001C                     	;# 
   991  001E                     	;# 
   992  001F                     	;# 
   993  008C                     	;# 
   994  008E                     	;# 
   995  0091                     	;# 
   996  0092                     	;# 
   997  0095                     	;# 
   998  0096                     	;# 
   999  0097                     	;# 
  1000  0098                     	;# 
  1001  0099                     	;# 
  1002  009A                     	;# 
  1003  009B                     	;# 
  1004  009B                     	;# 
  1005  009C                     	;# 
  1006  009D                     	;# 
  1007  009E                     	;# 
  1008  010C                     	;# 
  1009  010E                     	;# 
  1010  0111                     	;# 
  1011  0112                     	;# 
  1012  0113                     	;# 
  1013  0114                     	;# 
  1014  0115                     	;# 
  1015  0116                     	;# 
  1016  0117                     	;# 
  1017  0118                     	;# 
  1018  0119                     	;# 
  1019  011A                     	;# 
  1020  011B                     	;# 
  1021  011D                     	;# 
  1022  011D                     	;# 
  1023  018C                     	;# 
  1024  018E                     	;# 
  1025  0191                     	;# 
  1026  0191                     	;# 
  1027  0192                     	;# 
  1028  0193                     	;# 
  1029  0193                     	;# 
  1030  0193                     	;# 
  1031  0194                     	;# 
  1032  0195                     	;# 
  1033  0196                     	;# 
  1034  0199                     	;# 
  1035  019A                     	;# 
  1036  019B                     	;# 
  1037  019B                     	;# 
  1038  019B                     	;# 
  1039  019B                     	;# 
  1040  019C                     	;# 
  1041  019C                     	;# 
  1042  019D                     	;# 
  1043  019E                     	;# 
  1044  019F                     	;# 
  1045  020C                     	;# 
  1046  020E                     	;# 
  1047  0211                     	;# 
  1048  0211                     	;# 
  1049  0212                     	;# 
  1050  0212                     	;# 
  1051  0213                     	;# 
  1052  0213                     	;# 
  1053  0214                     	;# 
  1054  0214                     	;# 
  1055  0215                     	;# 
  1056  0215                     	;# 
  1057  0215                     	;# 
  1058  0216                     	;# 
  1059  0216                     	;# 
  1060  0217                     	;# 
  1061  0217                     	;# 
  1062  0291                     	;# 
  1063  0291                     	;# 
  1064  0292                     	;# 
  1065  0293                     	;# 
  1066  0294                     	;# 
  1067  0295                     	;# 
  1068  0295                     	;# 
  1069  0296                     	;# 
  1070  0391                     	;# 
  1071  0392                     	;# 
  1072  0393                     	;# 
  1073  039A                     	;# 
  1074  039C                     	;# 
  1075  039D                     	;# 
  1076  039E                     	;# 
  1077  039F                     	;# 
  1078  0FE4                     	;# 
  1079  0FE5                     	;# 
  1080  0FE6                     	;# 
  1081  0FE7                     	;# 
  1082  0FE8                     	;# 
  1083  0FE9                     	;# 
  1084  0FEA                     	;# 
  1085  0FEB                     	;# 
  1086  0FED                     	;# 
  1087  0FEE                     	;# 
  1088  0FEF                     	;# 
  1089  0000                     	;# 
  1090  0001                     	;# 
  1091  0002                     	;# 
  1092  0003                     	;# 
  1093  0004                     	;# 
  1094  0005                     	;# 
  1095  0006                     	;# 
  1096  0007                     	;# 
  1097  0008                     	;# 
  1098  0009                     	;# 
  1099  000A                     	;# 
  1100  000B                     	;# 
  1101  000C                     	;# 
  1102  000E                     	;# 
  1103  0011                     	;# 
  1104  0012                     	;# 
  1105  0015                     	;# 
  1106  0016                     	;# 
  1107  0016                     	;# 
  1108  0017                     	;# 
  1109  0018                     	;# 
  1110  0019                     	;# 
  1111  001A                     	;# 
  1112  001B                     	;# 
  1113  001C                     	;# 
  1114  001E                     	;# 
  1115  001F                     	;# 
  1116  008C                     	;# 
  1117  008E                     	;# 
  1118  0091                     	;# 
  1119  0092                     	;# 
  1120  0095                     	;# 
  1121  0096                     	;# 
  1122  0097                     	;# 
  1123  0098                     	;# 
  1124  0099                     	;# 
  1125  009A                     	;# 
  1126  009B                     	;# 
  1127  009B                     	;# 
  1128  009C                     	;# 
  1129  009D                     	;# 
  1130  009E                     	;# 
  1131  010C                     	;# 
  1132  010E                     	;# 
  1133  0111                     	;# 
  1134  0112                     	;# 
  1135  0113                     	;# 
  1136  0114                     	;# 
  1137  0115                     	;# 
  1138  0116                     	;# 
  1139  0117                     	;# 
  1140  0118                     	;# 
  1141  0119                     	;# 
  1142  011A                     	;# 
  1143  011B                     	;# 
  1144  011D                     	;# 
  1145  011D                     	;# 
  1146  018C                     	;# 
  1147  018E                     	;# 
  1148  0191                     	;# 
  1149  0191                     	;# 
  1150  0192                     	;# 
  1151  0193                     	;# 
  1152  0193                     	;# 
  1153  0193                     	;# 
  1154  0194                     	;# 
  1155  0195                     	;# 
  1156  0196                     	;# 
  1157  0199                     	;# 
  1158  019A                     	;# 
  1159  019B                     	;# 
  1160  019B                     	;# 
  1161  019B                     	;# 
  1162  019B                     	;# 
  1163  019C                     	;# 
  1164  019C                     	;# 
  1165  019D                     	;# 
  1166  019E                     	;# 
  1167  019F                     	;# 
  1168  020C                     	;# 
  1169  020E                     	;# 
  1170  0211                     	;# 
  1171  0211                     	;# 
  1172  0212                     	;# 
  1173  0212                     	;# 
  1174  0213                     	;# 
  1175  0213                     	;# 
  1176  0214                     	;# 
  1177  0214                     	;# 
  1178  0215                     	;# 
  1179  0215                     	;# 
  1180  0215                     	;# 
  1181  0216                     	;# 
  1182  0216                     	;# 
  1183  0217                     	;# 
  1184  0217                     	;# 
  1185  0291                     	;# 
  1186  0291                     	;# 
  1187  0292                     	;# 
  1188  0293                     	;# 
  1189  0294                     	;# 
  1190  0295                     	;# 
  1191  0295                     	;# 
  1192  0296                     	;# 
  1193  0391                     	;# 
  1194  0392                     	;# 
  1195  0393                     	;# 
  1196  039A                     	;# 
  1197  039C                     	;# 
  1198  039D                     	;# 
  1199  039E                     	;# 
  1200  039F                     	;# 
  1201  0FE4                     	;# 
  1202  0FE5                     	;# 
  1203  0FE6                     	;# 
  1204  0FE7                     	;# 
  1205  0FE8                     	;# 
  1206  0FE9                     	;# 
  1207  0FEA                     	;# 
  1208  0FEB                     	;# 
  1209  0FED                     	;# 
  1210  0FEE                     	;# 
  1211  0FEF                     	;# 
  1212  0000                     	;# 
  1213  0001                     	;# 
  1214  0002                     	;# 
  1215  0003                     	;# 
  1216  0004                     	;# 
  1217  0005                     	;# 
  1218  0006                     	;# 
  1219  0007                     	;# 
  1220  0008                     	;# 
  1221  0009                     	;# 
  1222  000A                     	;# 
  1223  000B                     	;# 
  1224  000C                     	;# 
  1225  000E                     	;# 
  1226  0011                     	;# 
  1227  0012                     	;# 
  1228  0015                     	;# 
  1229  0016                     	;# 
  1230  0016                     	;# 
  1231  0017                     	;# 
  1232  0018                     	;# 
  1233  0019                     	;# 
  1234  001A                     	;# 
  1235  001B                     	;# 
  1236  001C                     	;# 
  1237  001E                     	;# 
  1238  001F                     	;# 
  1239  008C                     	;# 
  1240  008E                     	;# 
  1241  0091                     	;# 
  1242  0092                     	;# 
  1243  0095                     	;# 
  1244  0096                     	;# 
  1245  0097                     	;# 
  1246  0098                     	;# 
  1247  0099                     	;# 
  1248  009A                     	;# 
  1249  009B                     	;# 
  1250  009B                     	;# 
  1251  009C                     	;# 
  1252  009D                     	;# 
  1253  009E                     	;# 
  1254  010C                     	;# 
  1255  010E                     	;# 
  1256  0111                     	;# 
  1257  0112                     	;# 
  1258  0113                     	;# 
  1259  0114                     	;# 
  1260  0115                     	;# 
  1261  0116                     	;# 
  1262  0117                     	;# 
  1263  0118                     	;# 
  1264  0119                     	;# 
  1265  011A                     	;# 
  1266  011B                     	;# 
  1267  011D                     	;# 
  1268  011D                     	;# 
  1269  018C                     	;# 
  1270  018E                     	;# 
  1271  0191                     	;# 
  1272  0191                     	;# 
  1273  0192                     	;# 
  1274  0193                     	;# 
  1275  0193                     	;# 
  1276  0193                     	;# 
  1277  0194                     	;# 
  1278  0195                     	;# 
  1279  0196                     	;# 
  1280  0199                     	;# 
  1281  019A                     	;# 
  1282  019B                     	;# 
  1283  019B                     	;# 
  1284  019B                     	;# 
  1285  019B                     	;# 
  1286  019C                     	;# 
  1287  019C                     	;# 
  1288  019D                     	;# 
  1289  019E                     	;# 
  1290  019F                     	;# 
  1291  020C                     	;# 
  1292  020E                     	;# 
  1293  0211                     	;# 
  1294  0211                     	;# 
  1295  0212                     	;# 
  1296  0212                     	;# 
  1297  0213                     	;# 
  1298  0213                     	;# 
  1299  0214                     	;# 
  1300  0214                     	;# 
  1301  0215                     	;# 
  1302  0215                     	;# 
  1303  0215                     	;# 
  1304  0216                     	;# 
  1305  0216                     	;# 
  1306  0217                     	;# 
  1307  0217                     	;# 
  1308  0291                     	;# 
  1309  0291                     	;# 
  1310  0292                     	;# 
  1311  0293                     	;# 
  1312  0294                     	;# 
  1313  0295                     	;# 
  1314  0295                     	;# 
  1315  0296                     	;# 
  1316  0391                     	;# 
  1317  0392                     	;# 
  1318  0393                     	;# 
  1319  039A                     	;# 
  1320  039C                     	;# 
  1321  039D                     	;# 
  1322  039E                     	;# 
  1323  039F                     	;# 
  1324  0FE4                     	;# 
  1325  0FE5                     	;# 
  1326  0FE6                     	;# 
  1327  0FE7                     	;# 
  1328  0FE8                     	;# 
  1329  0FE9                     	;# 
  1330  0FEA                     	;# 
  1331  0FEB                     	;# 
  1332  0FED                     	;# 
  1333  0FEE                     	;# 
  1334  0FEF                     	;# 
  1335                           
  1336                           	psect	stringtext1
  1337  0638                     __pstringtext1:
  1338  0638                     _ROTATION_TIME:
  1339  0638  343C               	retlw	60
  1340  0639  3400               	retlw	0
  1341  063A  3400               	retlw	0
  1342  063B                     __end_of_ROTATION_TIME:
  1343                           
  1344                           	psect	stringtext2
  1345  063B                     __pstringtext2:
  1346  063B                     _GOOD_WSP_VOLTAGE:
  1347  063B  3440               	retlw	64
  1348  063C  349C               	retlw	156
  1349  063D  3400               	retlw	0
  1350  063E                     __end_of_GOOD_WSP_VOLTAGE:
  1351                           
  1352                           	psect	stringtext3
  1353  063E                     __pstringtext3:
  1354  063E                     _BAD_WSP_VOLTAGE:
  1355  063E  3420               	retlw	32
  1356  063F  344E               	retlw	78
  1357  0640  3400               	retlw	0
  1358  0641                     __end_of_BAD_WSP_VOLTAGE:
  1359                           
  1360                           	psect	nvBANK0
  1361  0068                     __pnvBANK0:
  1362  0068                     _TMR0_InterruptHandler:
  1363  0068                     	ds	2
  1364  006A                     _TMR2_InterruptHandler:
  1365  006A                     	ds	2
  1366  006C                     _timer0ReloadVal:
  1367  006C                     	ds	1
  1368  0015                     _TMR0	set	21
  1369  001C                     _T2CONbits	set	28
  1370  001C                     _T2CON	set	28
  1371  001A                     _TMR2	set	26
  1372  001B                     _PR2	set	27
  1373  0011                     _PIR1bits	set	17
  1374  000B                     _INTCONbits	set	11
  1375  005F                     _GIE	set	95
  1376  008E                     _TRISCbits	set	142
  1377  008C                     _TRISAbits	set	140
  1378  0095                     _OPTION_REG	set	149
  1379  0091                     _PIE1bits	set	145
  1380  0095                     _OPTION_REGbits	set	149
  1381  008E                     _TRISC	set	142
  1382  008C                     _TRISA	set	140
  1383  009D                     _ADCON0bits	set	157
  1384  009D                     _ADCON0	set	157
  1385  009C                     _ADRESH	set	156
  1386  009B                     _ADRESL	set	155
  1387  009E                     _ADCON1	set	158
  1388  0097                     _WDTCON	set	151
  1389  0098                     _OSCTUNE	set	152
  1390  0099                     _OSCCON	set	153
  1391  010E                     _LATCbits	set	270
  1392  010C                     _LATAbits	set	268
  1393  0117                     _FVRCONbits	set	279
  1394  0117                     _FVRCON	set	279
  1395  011D                     _APFCON	set	285
  1396  010E                     _LATC	set	270
  1397  010C                     _LATA	set	268
  1398  0116                     _BORCON	set	278
  1399  0191                     _EEADR	set	401
  1400  0196                     _EECON2	set	406
  1401  0193                     _EEDATA	set	403
  1402  018C                     _ANSELAbits	set	396
  1403  018E                     _ANSELCbits	set	398
  1404  018C                     _ANSELA	set	396
  1405  018E                     _ANSELC	set	398
  1406  0CA8                     _RD	set	3240
  1407  0CAA                     _WREN	set	3242
  1408  0CA9                     _WR	set	3241
  1409  020E                     _WPUCbits	set	526
  1410  020C                     _WPUAbits	set	524
  1411  020E                     _WPUC	set	526
  1412  020C                     _WPUA	set	524
  1413                           
  1414                           	psect	cinit
  1415  0017                     start_initialization:	
  1416                           ; #config settings
  1417                           
  1418  0017                     __initialization:
  1419                           
  1420                           ; Clear objects allocated to COMMON
  1421  0017  01F8               	clrf	__pbssCOMMON& (0+127)
  1422  0018  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  1423  0019  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  1424  001A  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  1425  001B  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  1426                           
  1427                           ; Clear objects allocated to BANK0
  1428  001C  304D               	movlw	low __pbssBANK0
  1429  001D  0084               	movwf	4
  1430  001E  3000               	movlw	high __pbssBANK0
  1431  001F  0085               	movwf	5
  1432  0020  301B               	movlw	27
  1433  0021  260F               	fcall	clear_ram0
  1434                           
  1435                           ; Clear objects allocated to BANK1
  1436  0022  30A0               	movlw	low __pbssBANK1
  1437  0023  0084               	movwf	4
  1438  0024  3000               	movlw	high __pbssBANK1
  1439  0025  0085               	movwf	5
  1440  0026  3020               	movlw	32
  1441  0027  260F               	fcall	clear_ram0
  1442  0028                     end_of_initialization:	
  1443                           ;End of C runtime variable initialization code
  1444                           
  1445  0028                     __end_of__initialization:
  1446  0028  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1447  0029  0020               	movlb	0
  1448  002A  2DD1               	ljmp	_main	;jump to C main() function
  1449                           
  1450                           	psect	bssCOMMON
  1451  0078                     __pbssCOMMON:
  1452  0078                     TMR2_ISR@CountCallBack:
  1453  0078                     	ds	2
  1454  007A                     sec_tick_work@iled:
  1455  007A                     	ds	1
  1456  007B                     get_measure@measures:
  1457  007B                     	ds	1
  1458  007C                     _FLAGS:
  1459  007C                     	ds	1
  1460                           
  1461                           	psect	bssBANK0
  1462  004D                     __pbssBANK0:
  1463  004D                     get_time@F2660:
  1464  004D                     	ds	12
  1465  0059                     get_time@F2662:
  1466  0059                     	ds	4
  1467  005D                     _time_s:
  1468  005D                     	ds	3
  1469  0060                     _ADC_InterruptHandler:
  1470  0060                     	ds	2
  1471  0062                     get_jump_full@jump_counter:
  1472  0062                     	ds	1
  1473  0063                     get_jump@jump_counter:
  1474  0063                     	ds	1
  1475  0064                     get_fun_full@fun_counter:
  1476  0064                     	ds	1
  1477  0065                     get_fun@fun_counter:
  1478  0065                     	ds	1
  1479  0066                     _time_pow_s:
  1480  0066                     	ds	1
  1481  0067                     _START_EEPROM_ADR:
  1482  0067                     	ds	1
  1483                           
  1484                           	psect	bssBANK1
  1485  00A0                     __pbssBANK1:
  1486  00A0                     get_adr@F2640:
  1487  00A0                     	ds	32
  1488                           
  1489                           	psect	clrtext
  1490  060F                     clear_ram0:	
  1491                           ;	Called with FSR0 containing the base address, and
  1492                           ;	WREG with the size to clear
  1493                           
  1494  060F  0064               	clrwdt	;clear the watchdog before getting into this loop
  1495  0610                     clrloop0:
  1496  0610  0180               	clrf	0	;clear RAM location pointed to by FSR
  1497  0611  3101               	addfsr 0,1
  1498  0612  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1499  0613  2E10               	goto	clrloop0	;have we reached the end yet?
  1500  0614  3400               	retlw	0	;all done for this memory range, return
  1501                           
  1502                           	psect	cstackCOMMON
  1503  0070                     __pcstackCOMMON:
  1504  0070                     ?_PIN_MANAGER_Initialize:
  1505  0070                     ?_OSCILLATOR_Initialize:	
  1506                           ; 1 bytes @ 0x0
  1507                           
  1508  0070                     ?_WDT_Initialize:	
  1509                           ; 1 bytes @ 0x0
  1510                           
  1511  0070                     ?_FVR_Initialize:	
  1512                           ; 1 bytes @ 0x0
  1513                           
  1514  0070                     ?_ADC_Initialize:	
  1515                           ; 1 bytes @ 0x0
  1516                           
  1517  0070                     ?_TMR2_Initialize:	
  1518                           ; 1 bytes @ 0x0
  1519                           
  1520  0070                     ?_TMR0_Initialize:	
  1521                           ; 1 bytes @ 0x0
  1522                           
  1523  0070                     ?_TMR0_ISR:	
  1524                           ; 1 bytes @ 0x0
  1525                           
  1526  0070                     ??_TMR0_ISR:	
  1527                           ; 1 bytes @ 0x0
  1528                           
  1529  0070                     ?_TMR2_ISR:	
  1530                           ; 1 bytes @ 0x0
  1531                           
  1532  0070                     ?_TMR2_DefaultInterruptHandler:	
  1533                           ; 1 bytes @ 0x0
  1534                           
  1535  0070                     ??_TMR2_DefaultInterruptHandler:	
  1536                           ; 1 bytes @ 0x0
  1537                           
  1538  0070                     ?_TMR2_CallBack:	
  1539                           ; 1 bytes @ 0x0
  1540                           
  1541  0070                     ?_TMR0_DefaultInterruptHandler:	
  1542                           ; 1 bytes @ 0x0
  1543                           
  1544  0070                     ??_TMR0_DefaultInterruptHandler:	
  1545                           ; 1 bytes @ 0x0
  1546                           
  1547  0070                     ?_EEPROM_ReadByte:	
  1548                           ; 1 bytes @ 0x0
  1549                           
  1550  0070                     ?_SYSTEM_Initialize:	
  1551                           ; 1 bytes @ 0x0
  1552                           
  1553  0070                     ?_INTERRUPT_InterruptManager:	
  1554                           ; 1 bytes @ 0x0
  1555                           
  1556  0070                     ?_TMR2_StartTimer:	
  1557                           ; 1 bytes @ 0x0
  1558                           
  1559  0070                     ?_switch_zum:	
  1560                           ; 1 bytes @ 0x0
  1561                           
  1562  0070                     ?_toggle_tone:	
  1563                           ; 1 bytes @ 0x0
  1564                           
  1565  0070                     ??_toggle_tone:	
  1566                           ; 1 bytes @ 0x0
  1567                           
  1568  0070                     ?_go_close:	
  1569                           ; 1 bytes @ 0x0
  1570                           
  1571  0070                     ?_go_open:	
  1572                           ; 1 bytes @ 0x0
  1573                           
  1574  0070                     ?_go_close_alt:	
  1575                           ; 1 bytes @ 0x0
  1576                           
  1577  0070                     ?_go_open_alt:	
  1578                           ; 1 bytes @ 0x0
  1579                           
  1580  0070                     ?_start_alarm:	
  1581                           ; 1 bytes @ 0x0
  1582                           
  1583  0070                     ?_get_measure:	
  1584                           ; 1 bytes @ 0x0
  1585                           
  1586  0070                     ?_get_fun:	
  1587                           ; 1 bytes @ 0x0
  1588                           
  1589  0070                     ?_get_fun_full:	
  1590                           ; 1 bytes @ 0x0
  1591                           
  1592  0070                     ?_get_jump:	
  1593                           ; 1 bytes @ 0x0
  1594                           
  1595  0070                     ?_get_jump_full:	
  1596                           ; 1 bytes @ 0x0
  1597                           
  1598  0070                     ?_rele_tick:	
  1599                           ; 1 bytes @ 0x0
  1600                           
  1601  0070                     ??_rele_tick:	
  1602                           ; 1 bytes @ 0x0
  1603                           
  1604  0070                     ?_sec_tick_work:	
  1605                           ; 1 bytes @ 0x0
  1606                           
  1607  0070                     ?_povorot:	
  1608                           ; 1 bytes @ 0x0
  1609                           
  1610  0070                     ?_fun_work:	
  1611                           ; 1 bytes @ 0x0
  1612                           
  1613  0070                     ?_switch_wm:	
  1614                           ; 1 bytes @ 0x0
  1615                           
  1616  0070                     ?_get_voltage:	
  1617                           ; 1 bytes @ 0x0
  1618                           
  1619  0070                     ?_get_adr:	
  1620                           ; 1 bytes @ 0x0
  1621                           
  1622  0070                     ?_get_time:	
  1623                           ; 1 bytes @ 0x0
  1624                           
  1625  0070                     ?_get_eeprom:	
  1626                           ; 1 bytes @ 0x0
  1627                           
  1628  0070                     ?_start_setup:	
  1629                           ; 1 bytes @ 0x0
  1630                           
  1631  0070                     ?_main:	
  1632                           ; 1 bytes @ 0x0
  1633                           
  1634  0070                     ?i1_switch_zum:	
  1635                           ; 1 bytes @ 0x0
  1636                           
  1637  0070                     ??i1_switch_zum:	
  1638                           ; 1 bytes @ 0x0
  1639                           
  1640  0070                     ?i1_go_close:	
  1641                           ; 1 bytes @ 0x0
  1642                           
  1643  0070                     ??i1_go_close:	
  1644                           ; 1 bytes @ 0x0
  1645                           
  1646  0070                     ?i1_go_close_alt:	
  1647                           ; 1 bytes @ 0x0
  1648                           
  1649  0070                     ??i1_go_close_alt:	
  1650                           ; 1 bytes @ 0x0
  1651                           
  1652  0070                     ?i1_ADC_GetConversion:	
  1653                           ; 1 bytes @ 0x0
  1654                           
  1655                           
  1656                           ; 2 bytes @ 0x0
  1657  0070                     	ds	2
  1658  0072                     ??_start_alarm:
  1659  0072                     ??i1_ADC_GetConversion:	
  1660                           ; 1 bytes @ 0x2
  1661                           
  1662                           
  1663                           ; 1 bytes @ 0x2
  1664  0072                     	ds	1
  1665  0073                     i1ADC_GetConversion@channel:
  1666                           
  1667                           ; 1 bytes @ 0x3
  1668  0073                     	ds	1
  1669  0074                     ??_get_measure:
  1670                           
  1671                           ; 1 bytes @ 0x4
  1672  0074                     	ds	1
  1673  0075                     get_measure@res:
  1674                           
  1675                           ; 2 bytes @ 0x5
  1676  0075                     	ds	2
  1677  0077                     ??_sec_tick_work:
  1678                           
  1679                           ; 1 bytes @ 0x7
  1680  0077                     	ds	1
  1681  0078                     ??_TMR2_ISR:
  1682  0078                     ??_TMR2_CallBack:	
  1683                           ; 1 bytes @ 0x8
  1684                           
  1685  0078                     ??_INTERRUPT_InterruptManager:	
  1686                           ; 1 bytes @ 0x8
  1687                           
  1688                           
  1689                           	psect	cstackBANK0
  1690  0020                     __pcstackBANK0:	
  1691                           ; 1 bytes @ 0x8
  1692                           
  1693  0020                     ??_PIN_MANAGER_Initialize:
  1694  0020                     ??_OSCILLATOR_Initialize:	
  1695                           ; 1 bytes @ 0x0
  1696                           
  1697  0020                     ??_WDT_Initialize:	
  1698                           ; 1 bytes @ 0x0
  1699                           
  1700  0020                     ??_FVR_Initialize:	
  1701                           ; 1 bytes @ 0x0
  1702                           
  1703  0020                     ??_ADC_Initialize:	
  1704                           ; 1 bytes @ 0x0
  1705                           
  1706  0020                     ?_TMR2_SetInterruptHandler:	
  1707                           ; 1 bytes @ 0x0
  1708                           
  1709  0020                     ?_TMR0_SetInterruptHandler:	
  1710                           ; 1 bytes @ 0x0
  1711                           
  1712  0020                     ??_EEPROM_ReadByte:	
  1713                           ; 1 bytes @ 0x0
  1714                           
  1715  0020                     ?_EEPROM_WriteByte:	
  1716                           ; 1 bytes @ 0x0
  1717                           
  1718  0020                     ??_TMR2_StartTimer:	
  1719                           ; 1 bytes @ 0x0
  1720                           
  1721  0020                     ??_switch_zum:	
  1722                           ; 1 bytes @ 0x0
  1723                           
  1724  0020                     ?_beep:	
  1725                           ; 1 bytes @ 0x0
  1726                           
  1727  0020                     ??_go_close:	
  1728                           ; 1 bytes @ 0x0
  1729                           
  1730  0020                     ??_go_open:	
  1731                           ; 1 bytes @ 0x0
  1732                           
  1733  0020                     ??_go_close_alt:	
  1734                           ; 1 bytes @ 0x0
  1735                           
  1736  0020                     ??_go_open_alt:	
  1737                           ; 1 bytes @ 0x0
  1738                           
  1739  0020                     ?___bmul:	
  1740                           ; 1 bytes @ 0x0
  1741                           
  1742  0020                     ?_ADC_GetConversion:	
  1743                           ; 1 bytes @ 0x0
  1744                           
  1745  0020                     EEPROM_WriteByte@dt:	
  1746                           ; 2 bytes @ 0x0
  1747                           
  1748  0020                     ___bmul@multiplicand:	
  1749                           ; 1 bytes @ 0x0
  1750                           
  1751  0020                     TMR2_SetInterruptHandler@InterruptHandler:	
  1752                           ; 1 bytes @ 0x0
  1753                           
  1754  0020                     TMR0_SetInterruptHandler@InterruptHandler:	
  1755                           ; 2 bytes @ 0x0
  1756                           
  1757  0020                     beep@delay:	
  1758                           ; 2 bytes @ 0x0
  1759                           
  1760                           
  1761                           ; 2 bytes @ 0x0
  1762  0020                     	ds	1
  1763  0021                     ??_EEPROM_WriteByte:
  1764  0021                     ??___bmul:	
  1765                           ; 1 bytes @ 0x1
  1766                           
  1767                           
  1768                           ; 1 bytes @ 0x1
  1769  0021                     	ds	1
  1770  0022                     ??_TMR2_Initialize:
  1771  0022                     ??_TMR0_Initialize:	
  1772                           ; 1 bytes @ 0x2
  1773                           
  1774  0022                     ??_TMR2_SetInterruptHandler:	
  1775                           ; 1 bytes @ 0x2
  1776                           
  1777  0022                     ??_TMR0_SetInterruptHandler:	
  1778                           ; 1 bytes @ 0x2
  1779                           
  1780  0022                     ??_ADC_GetConversion:	
  1781                           ; 1 bytes @ 0x2
  1782                           
  1783  0022                     ??_povorot:	
  1784                           ; 1 bytes @ 0x2
  1785                           
  1786  0022                     EEPROM_ReadByte@addr:	
  1787                           ; 1 bytes @ 0x2
  1788                           
  1789  0022                     ___bmul@product:	
  1790                           ; 1 bytes @ 0x2
  1791                           
  1792  0022                     beep@pause:	
  1793                           ; 1 bytes @ 0x2
  1794                           
  1795                           
  1796                           ; 2 bytes @ 0x2
  1797  0022                     	ds	1
  1798  0023                     ??_SYSTEM_Initialize:
  1799  0023                     ??_get_adr:	
  1800                           ; 1 bytes @ 0x3
  1801                           
  1802  0023                     ?_EEPROM_ReadShortLong:	
  1803                           ; 1 bytes @ 0x3
  1804                           
  1805  0023                     ADC_GetConversion@channel:	
  1806                           ; 3 bytes @ 0x3
  1807                           
  1808  0023                     EEPROM_WriteByte@addr:	
  1809                           ; 1 bytes @ 0x3
  1810                           
  1811  0023                     ___bmul@multiplier:	
  1812                           ; 1 bytes @ 0x3
  1813                           
  1814                           
  1815                           ; 1 bytes @ 0x3
  1816  0023                     	ds	1
  1817  0024                     ??_get_fun:
  1818  0024                     ??_get_fun_full:	
  1819                           ; 1 bytes @ 0x4
  1820                           
  1821  0024                     ??_get_jump:	
  1822                           ; 1 bytes @ 0x4
  1823                           
  1824  0024                     ??_get_jump_full:	
  1825                           ; 1 bytes @ 0x4
  1826                           
  1827  0024                     beep@time:	
  1828                           ; 1 bytes @ 0x4
  1829                           
  1830  0024                     EEPROM_WriteByte@status:	
  1831                           ; 1 bytes @ 0x4
  1832                           
  1833  0024                     get_adr@adr:	
  1834                           ; 1 bytes @ 0x4
  1835                           
  1836                           
  1837                           ; 32 bytes @ 0x4
  1838  0024                     	ds	1
  1839  0025                     ?_EEPROM_WriteShortLong:
  1840  0025                     beep@count:	
  1841                           ; 1 bytes @ 0x5
  1842                           
  1843  0025                     get_fun@res:	
  1844                           ; 1 bytes @ 0x5
  1845                           
  1846  0025                     get_fun_full@res:	
  1847                           ; 2 bytes @ 0x5
  1848                           
  1849  0025                     get_jump@res:	
  1850                           ; 2 bytes @ 0x5
  1851                           
  1852  0025                     get_jump_full@res:	
  1853                           ; 2 bytes @ 0x5
  1854                           
  1855  0025                     EEPROM_WriteShortLong@ucData:	
  1856                           ; 2 bytes @ 0x5
  1857                           
  1858                           
  1859                           ; 3 bytes @ 0x5
  1860  0025                     	ds	1
  1861  0026                     ??_EEPROM_ReadShortLong:
  1862  0026                     ??_beep:	
  1863                           ; 1 bytes @ 0x6
  1864                           
  1865                           
  1866                           ; 1 bytes @ 0x6
  1867  0026                     	ds	1
  1868  0027                     get_fun_full@flag:
  1869  0027                     get_jump_full@flag:	
  1870                           ; 1 bytes @ 0x7
  1871                           
  1872                           
  1873                           ; 1 bytes @ 0x7
  1874  0027                     	ds	1
  1875  0028                     ??_EEPROM_WriteShortLong:
  1876  0028                     beep@j:	
  1877                           ; 1 bytes @ 0x8
  1878                           
  1879                           
  1880                           ; 1 bytes @ 0x8
  1881  0028                     	ds	1
  1882  0029                     beep@i:
  1883                           
  1884                           ; 1 bytes @ 0x9
  1885  0029                     	ds	1
  1886  002A                     ??_fun_work:
  1887  002A                     ??_switch_wm:	
  1888                           ; 1 bytes @ 0xA
  1889                           
  1890                           
  1891                           ; 1 bytes @ 0xA
  1892  002A                     	ds	2
  1893  002C                     EEPROM_WriteShortLong@dt:
  1894  002C                     EEPROM_ReadShortLong@dt:	
  1895                           ; 1 bytes @ 0xC
  1896                           
  1897                           
  1898                           ; 3 bytes @ 0xC
  1899  002C                     	ds	1
  1900  002D                     EEPROM_WriteShortLong@addr:
  1901                           
  1902                           ; 1 bytes @ 0xD
  1903  002D                     	ds	1
  1904  002E                     ??_get_voltage:
  1905                           
  1906                           ; 1 bytes @ 0xE
  1907  002E                     	ds	1
  1908  002F                     EEPROM_ReadShortLong@addr:
  1909                           
  1910                           ; 1 bytes @ 0xF
  1911  002F                     	ds	1
  1912  0030                     ??_get_time:
  1913  0030                     get_voltage@res:	
  1914                           ; 1 bytes @ 0x10
  1915                           
  1916                           
  1917                           ; 2 bytes @ 0x10
  1918  0030                     	ds	2
  1919  0032                     get_voltage@buf:
  1920                           
  1921                           ; 1 bytes @ 0x12
  1922  0032                     	ds	1
  1923  0033                     get_voltage@q_804:
  1924                           
  1925                           ; 1 bytes @ 0x13
  1926  0033                     	ds	1
  1927  0034                     get_voltage@q:
  1928  0034                     get_time@times:	
  1929                           ; 1 bytes @ 0x14
  1930                           
  1931                           
  1932                           ; 12 bytes @ 0x14
  1933  0034                     	ds	12
  1934  0040                     get_time@time_count:
  1935                           
  1936                           ; 4 bytes @ 0x20
  1937  0040                     	ds	4
  1938  0044                     get_adr@i:
  1939  0044                     get_time@adr_error:	
  1940                           ; 1 bytes @ 0x24
  1941                           
  1942                           
  1943                           ; 1 bytes @ 0x24
  1944  0044                     	ds	1
  1945  0045                     get_adr@q:
  1946  0045                     get_time@buf2:	
  1947                           ; 1 bytes @ 0x25
  1948                           
  1949                           
  1950                           ; 3 bytes @ 0x25
  1951  0045                     	ds	1
  1952  0046                     get_adr@i_814:
  1953                           
  1954                           ; 1 bytes @ 0x26
  1955  0046                     	ds	1
  1956  0047                     get_adr@q_813:
  1957                           
  1958                           ; 1 bytes @ 0x27
  1959  0047                     	ds	1
  1960  0048                     get_adr@buf:
  1961  0048                     get_time@i:	
  1962                           ; 1 bytes @ 0x28
  1963                           
  1964                           
  1965                           ; 1 bytes @ 0x28
  1966  0048                     	ds	1
  1967  0049                     get_time@buf:
  1968                           
  1969                           ; 1 bytes @ 0x29
  1970  0049                     	ds	1
  1971  004A                     get_time@q:
  1972                           
  1973                           ; 1 bytes @ 0x2A
  1974  004A                     	ds	1
  1975  004B                     get_time@q_826:
  1976                           
  1977                           ; 1 bytes @ 0x2B
  1978  004B                     	ds	1
  1979  004C                     get_time@q_825:
  1980                           
  1981                           ; 1 bytes @ 0x2C
  1982  004C                     	ds	1
  1983  004D                     ??_get_eeprom:
  1984  004D                     ??_start_setup:	
  1985                           ; 1 bytes @ 0x2D
  1986                           
  1987  004D                     ??_main:	
  1988                           ; 1 bytes @ 0x2D
  1989                           
  1990                           
  1991                           	psect	maintext
  1992  05D1                     __pmaintext:	
  1993                           ; 1 bytes @ 0x2D
  1994 ;;
  1995 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1996 ;;
  1997 ;; *************** function _main *****************
  1998 ;; Defined at:
  1999 ;;		line 454 in file "main.c"
  2000 ;; Parameters:    Size  Location     Type
  2001 ;;		None
  2002 ;; Auto vars:     Size  Location     Type
  2003 ;;		None
  2004 ;; Return value:  Size  Location     Type
  2005 ;;                  1    wreg      void 
  2006 ;; Registers used:
  2007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2008 ;; Tracked objects:
  2009 ;;		On entry : B1F/0
  2010 ;;		On exit  : 0/0
  2011 ;;		Unchanged: 0/0
  2012 ;; Data sizes:     COMMON   BANK0   BANK1
  2013 ;;      Params:         0       0       0
  2014 ;;      Locals:         0       0       0
  2015 ;;      Temps:          0       0       0
  2016 ;;      Totals:         0       0       0
  2017 ;;Total ram usage:        0 bytes
  2018 ;; Hardware stack levels required when called: 12
  2019 ;; This function calls:
  2020 ;;		_fun_work
  2021 ;;		_get_fun
  2022 ;;		_get_jump
  2023 ;;		_get_voltage
  2024 ;;		_povorot
  2025 ;;		_start_setup
  2026 ;;		_switch_wm
  2027 ;; This function is called by:
  2028 ;;		Startup code after reset
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032  05D1                     _main:	
  2033                           ;psect for function _main
  2034                           
  2035                           
  2036                           ;main.c: 456:     start_setup();
  2037                           
  2038                           ;incstack = 0
  2039                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2040  05D1  23EF               	fcall	_start_setup
  2041  05D2                     l2708:
  2042                           
  2043                           ;main.c: 459:         get_voltage();
  2044  05D2  218D               	fcall	_get_voltage
  2045                           
  2046                           ;main.c: 460:         if (!FLAGS.bits.ALARM) {
  2047  05D3  187C               	btfsc	_FLAGS,0
  2048  05D4  2DD2               	goto	l2708
  2049                           
  2050                           ;main.c: 461:             get_fun();
  2051  05D5  232C               	fcall	_get_fun
  2052                           
  2053                           ;main.c: 462:             fun_work();
  2054  05D6  228A               	fcall	_fun_work
  2055                           
  2056                           ;main.c: 463:             get_jump();
  2057  05D7  2392               	fcall	_get_jump
  2058                           
  2059                           ;main.c: 464:             switch_wm();
  2060  05D8  22F8               	fcall	_switch_wm
  2061                           
  2062                           ;main.c: 465:             povorot();
  2063  05D9  23C1               	fcall	_povorot
  2064  05DA  2DD2               	goto	l2708
  2065  05DB                     __end_of_main:
  2066                           
  2067                           	psect	text1
  2068  02F8                     __ptext1:	
  2069 ;; *************** function _switch_wm *****************
  2070 ;; Defined at:
  2071 ;;		line 313 in file "main.c"
  2072 ;; Parameters:    Size  Location     Type
  2073 ;;		None
  2074 ;; Auto vars:     Size  Location     Type
  2075 ;;		None
  2076 ;; Return value:  Size  Location     Type
  2077 ;;                  1    wreg      void 
  2078 ;; Registers used:
  2079 ;;		wreg, status,2, status,0, pclath, cstack
  2080 ;; Tracked objects:
  2081 ;;		On entry : 0/0
  2082 ;;		On exit  : 0/0
  2083 ;;		Unchanged: 0/0
  2084 ;; Data sizes:     COMMON   BANK0   BANK1
  2085 ;;      Params:         0       0       0
  2086 ;;      Locals:         0       0       0
  2087 ;;      Temps:          0       2       0
  2088 ;;      Totals:         0       2       0
  2089 ;;Total ram usage:        2 bytes
  2090 ;; Hardware stack levels used: 1
  2091 ;; Hardware stack levels required when called: 9
  2092 ;; This function calls:
  2093 ;;		_beep
  2094 ;;		_go_close
  2095 ;;		_go_close_alt
  2096 ;; This function is called by:
  2097 ;;		_main
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101  02F8                     _switch_wm:	
  2102                           ;psect for function _switch_wm
  2103                           
  2104                           
  2105                           ;main.c: 314:     if (FLAGS.bits._JUMP_CONNECTED) {
  2106                           
  2107                           ;incstack = 0
  2108                           ; Regs used in _switch_wm: [wreg+status,2+status,0+pclath+cstack]
  2109  02F8  1E7C               	btfss	_FLAGS,4
  2110  02F9  2B13               	goto	l448
  2111                           
  2112                           ;main.c: 315:         if (FLAGS.bits.NORMAL_WORK_MODE) {
  2113  02FA  1CFC               	btfss	_FLAGS,1
  2114  02FB  0008               	return
  2115                           
  2116                           ;main.c: 316:             FLAGS.bits.NORMAL_WORK_MODE = 0;
  2117  02FC  10FC               	bcf	_FLAGS,1
  2118                           
  2119                           ;main.c: 317:             if (FLAGS.bits.CLOSED) go_close_alt();
  2120  02FD  1D7C               	btfss	_FLAGS,2
  2121  02FE  2B00               	goto	l2598
  2122  02FF  2626               	fcall	_go_close_alt
  2123  0300                     l2598:
  2124                           
  2125                           ;main.c: 319:             beep(250, 100, 40, 3);
  2126  0300  30FA               	movlw	250
  2127  0301  0020               	movlb	0	; select bank0
  2128  0302  00A0               	movwf	beep@delay
  2129  0303  3000               	movlw	0
  2130  0304  00A1               	movwf	beep@delay+1
  2131  0305  3064               	movlw	100
  2132  0306  00A2               	movwf	beep@pause
  2133  0307  3000               	movlw	0
  2134  0308  00A3               	movwf	beep@pause+1
  2135  0309  3028               	movlw	40
  2136  030A  00AA               	movwf	??_switch_wm
  2137  030B  082A               	movf	??_switch_wm,w
  2138  030C  00A4               	movwf	beep@time
  2139  030D  3003               	movlw	3
  2140  030E  00AB               	movwf	??_switch_wm+1
  2141  030F  082B               	movf	??_switch_wm+1,w
  2142  0310  00A5               	movwf	beep@count
  2143  0311  2441               	fcall	_beep
  2144  0312  0008               	return
  2145  0313                     l448:
  2146                           
  2147                           ;main.c: 322:         if (!FLAGS.bits.NORMAL_WORK_MODE) {
  2148  0313  18FC               	btfsc	_FLAGS,1
  2149  0314  0008               	return
  2150                           
  2151                           ;main.c: 323:             FLAGS.bits.NORMAL_WORK_MODE = 1;
  2152  0315  14FC               	bsf	_FLAGS,1
  2153                           
  2154                           ;main.c: 324:             if (FLAGS.bits.CLOSED) go_close();
  2155  0316  1D7C               	btfss	_FLAGS,2
  2156  0317  2B19               	goto	l453
  2157  0318  24B4               	fcall	_go_close
  2158  0319                     l453:
  2159                           
  2160                           ;main.c: 326:             beep(250, 100, 40, 2);
  2161  0319  30FA               	movlw	250
  2162  031A  0020               	movlb	0	; select bank0
  2163  031B  00A0               	movwf	beep@delay
  2164  031C  3000               	movlw	0
  2165  031D  00A1               	movwf	beep@delay+1
  2166  031E  3064               	movlw	100
  2167  031F  00A2               	movwf	beep@pause
  2168  0320  3000               	movlw	0
  2169  0321  00A3               	movwf	beep@pause+1
  2170  0322  3028               	movlw	40
  2171  0323  00AA               	movwf	??_switch_wm
  2172  0324  082A               	movf	??_switch_wm,w
  2173  0325  00A4               	movwf	beep@time
  2174  0326  3002               	movlw	2
  2175  0327  00AB               	movwf	??_switch_wm+1
  2176  0328  082B               	movf	??_switch_wm+1,w
  2177  0329  00A5               	movwf	beep@count
  2178  032A  2441               	fcall	_beep
  2179  032B  0008               	return
  2180  032C                     __end_of_switch_wm:
  2181                           
  2182                           	psect	text2
  2183  03EF                     __ptext2:	
  2184 ;; *************** function _start_setup *****************
  2185 ;; Defined at:
  2186 ;;		line 419 in file "main.c"
  2187 ;; Parameters:    Size  Location     Type
  2188 ;;		None
  2189 ;; Auto vars:     Size  Location     Type
  2190 ;;		None
  2191 ;; Return value:  Size  Location     Type
  2192 ;;                  1    wreg      void 
  2193 ;; Registers used:
  2194 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2195 ;; Tracked objects:
  2196 ;;		On entry : 0/0
  2197 ;;		On exit  : 0/0
  2198 ;;		Unchanged: 0/0
  2199 ;; Data sizes:     COMMON   BANK0   BANK1
  2200 ;;      Params:         0       0       0
  2201 ;;      Locals:         0       0       0
  2202 ;;      Temps:          0       0       0
  2203 ;;      Totals:         0       0       0
  2204 ;;Total ram usage:        0 bytes
  2205 ;; Hardware stack levels used: 1
  2206 ;; Hardware stack levels required when called: 11
  2207 ;; This function calls:
  2208 ;;		_SYSTEM_Initialize
  2209 ;;		_TMR0_SetInterruptHandler
  2210 ;;		_TMR2_SetInterruptHandler
  2211 ;;		_TMR2_StartTimer
  2212 ;;		_get_eeprom
  2213 ;;		_get_fun_full
  2214 ;;		_get_jump_full
  2215 ;; This function is called by:
  2216 ;;		_main
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220  03EF                     _start_setup:	
  2221                           ;psect for function _start_setup
  2222                           
  2223                           
  2224                           ;main.c: 421:     SYSTEM_Initialize();
  2225                           
  2226                           ;incstack = 0
  2227                           ; Regs used in _start_setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2228  03EF  25F8               	fcall	_SYSTEM_Initialize
  2229                           
  2230                           ;main.c: 422:     (INTCONbits.GIE = 1);
  2231  03F0  178B               	bsf	11,7	;volatile
  2232                           
  2233                           ;main.c: 423:     (INTCONbits.PEIE = 1);
  2234  03F1  170B               	bsf	11,6	;volatile
  2235                           
  2236                           ;main.c: 425:     get_eeprom();
  2237  03F2  2641               	fcall	_get_eeprom
  2238                           
  2239                           ;main.c: 426:     TMR0_SetInterruptHandler(switch_zum);
  2240  03F3  309D               	movlw	low _switch_zum
  2241  03F4  0020               	movlb	0	; select bank0
  2242  03F5  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2243  03F6  3005               	movlw	high _switch_zum
  2244  03F7  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2245  03F8  261B               	fcall	_TMR0_SetInterruptHandler
  2246                           
  2247                           ;main.c: 427:     TMR2_SetInterruptHandler(sec_tick_work);
  2248  03F9  305F               	movlw	low _sec_tick_work
  2249  03FA  0020               	movlb	0	; select bank0
  2250  03FB  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  2251  03FC  3003               	movlw	high _sec_tick_work
  2252  03FD  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  2253  03FE  2615               	fcall	_TMR2_SetInterruptHandler
  2254                           
  2255                           ;main.c: 428:     TMR2_StartTimer();
  2256  03FF  2644               	fcall	_TMR2_StartTimer
  2257  0400  0023               	movlb	3	; select bank3
  2258  0401  118E               	bcf	14,3	;volatile
  2259  0402  108C               	bcf	12,1	;volatile
  2260  0403  110E               	bcf	14,2	;volatile
  2261  0404  0024               	movlb	4	; select bank4
  2262  0405  108C               	bcf	12,1	;volatile
  2263  0406  0021               	movlb	1	; select bank1
  2264  0407  148C               	bsf	12,1	;volatile
  2265  0408  0024               	movlb	4	; select bank4
  2266  0409  110E               	bcf	14,2	;volatile
  2267  040A  0021               	movlb	1	; select bank1
  2268  040B  150E               	bsf	14,2	;volatile
  2269                           
  2270                           ;main.c: 440:     INTCONbits.TMR0IE = 0;
  2271  040C  128B               	bcf	11,5	;volatile
  2272                           
  2273                           ;main.c: 441:     FLAGS.value = 0;
  2274  040D  01FC               	clrf	_FLAGS
  2275  040E  0022               	movlb	2	; select bank2
  2276  040F  128E               	bcf	14,5	;volatile
  2277  0410  120E               	bcf	14,4	;volatile
  2278  0411  100E               	bcf	14,0	;volatile
  2279  0412  0021               	movlb	1	; select bank1
  2280  0413  100E               	bcf	14,0	;volatile
  2281                           
  2282                           ;main.c: 448:     get_fun_full();
  2283  0414  2218               	fcall	_get_fun_full
  2284                           
  2285                           ;main.c: 449:     get_jump_full();
  2286  0415  22C3               	fcall	_get_jump_full
  2287                           
  2288                           ;main.c: 450:     time_pow_s = 0;
  2289  0416  0020               	movlb	0	; select bank0
  2290  0417  01E6               	clrf	_time_pow_s
  2291  0418  0008               	return
  2292  0419                     __end_of_start_setup:
  2293                           
  2294                           	psect	text3
  2295  02C3                     __ptext3:	
  2296 ;; *************** function _get_jump_full *****************
  2297 ;; Defined at:
  2298 ;;		line 207 in file "main.c"
  2299 ;; Parameters:    Size  Location     Type
  2300 ;;		None
  2301 ;; Auto vars:     Size  Location     Type
  2302 ;;  res             2    5[BANK0 ] unsigned int 
  2303 ;;  flag            1    7[BANK0 ] unsigned char 
  2304 ;; Return value:  Size  Location     Type
  2305 ;;                  1    wreg      void 
  2306 ;; Registers used:
  2307 ;;		wreg, status,2, status,0, pclath, cstack
  2308 ;; Tracked objects:
  2309 ;;		On entry : 0/0
  2310 ;;		On exit  : 0/0
  2311 ;;		Unchanged: 0/0
  2312 ;; Data sizes:     COMMON   BANK0   BANK1
  2313 ;;      Params:         0       0       0
  2314 ;;      Locals:         0       3       0
  2315 ;;      Temps:          0       1       0
  2316 ;;      Totals:         0       4       0
  2317 ;;Total ram usage:        4 bytes
  2318 ;; Hardware stack levels used: 1
  2319 ;; Hardware stack levels required when called: 8
  2320 ;; This function calls:
  2321 ;;		_ADC_GetConversion
  2322 ;; This function is called by:
  2323 ;;		_start_setup
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327  02C3                     _get_jump_full:	
  2328                           ;psect for function _get_jump_full
  2329                           
  2330                           
  2331                           ;incstack = 0
  2332                           ; Regs used in _get_jump_full: [wreg+status,2+status,0+pclath+cstack]
  2333                           ;main.c: 209:     static signed char jump_counter;;main.c: 210:     do { ANSELAbits.ANSA
      +                          1 = 1; } while(0);
  2334  02C3  0023               	movlb	3	; select bank3
  2335  02C4  148C               	bsf	12,1	;volatile
  2336                           
  2337                           ;main.c: 211:     char flag = 0;
  2338  02C5  0020               	movlb	0	; select bank0
  2339  02C6  01A7               	clrf	get_jump_full@flag
  2340  02C7                     l2436:
  2341                           
  2342                           ;main.c: 213:         unsigned res = ADC_GetConversion(PIN_JUMP_STATE);
  2343  02C7  3001               	movlw	1
  2344  02C8  24D4               	fcall	_ADC_GetConversion
  2345  02C9  0020               	movlb	0	; select bank0
  2346  02CA  0821               	movf	?_ADC_GetConversion+1,w
  2347  02CB  00A6               	movwf	get_jump_full@res+1
  2348  02CC  0820               	movf	?_ADC_GetConversion,w
  2349  02CD  00A5               	movwf	get_jump_full@res
  2350                           
  2351                           ;main.c: 214:         if (res < 2000) jump_counter--;
  2352  02CE  3007               	movlw	7
  2353  02CF  0226               	subwf	get_jump_full@res+1,w
  2354  02D0  30D0               	movlw	208
  2355  02D1  1903               	skipnz
  2356  02D2  0225               	subwf	get_jump_full@res,w
  2357  02D3  1803               	skipnc
  2358  02D4  2AD7               	goto	l2442
  2359  02D5  30FF               	movlw	255
  2360  02D6  2AD8               	goto	L1
  2361  02D7                     l2442:
  2362  02D7  3001               	movlw	1
  2363  02D8                     L1:
  2364  02D8  00A4               	movwf	??_get_jump_full
  2365  02D9  0824               	movf	??_get_jump_full,w
  2366  02DA  07E2               	addwf	get_jump_full@jump_counter,f
  2367                           
  2368                           ;main.c: 217:         if (jump_counter > 10) {
  2369  02DB  0862               	movf	get_jump_full@jump_counter,w
  2370  02DC  3A80               	xorlw	128
  2371  02DD  3E75               	addlw	-139
  2372  02DE  1C03               	skipc
  2373  02DF  2AE6               	goto	l2452
  2374                           
  2375                           ;main.c: 218:             jump_counter = 10;
  2376  02E0  300A               	movlw	10
  2377  02E1  00A4               	movwf	??_get_jump_full
  2378  02E2  0824               	movf	??_get_jump_full,w
  2379  02E3  00E2               	movwf	get_jump_full@jump_counter
  2380                           
  2381                           ;main.c: 219:             FLAGS.bits._JUMP_CONNECTED = 0;
  2382  02E4  127C               	bcf	_FLAGS,4
  2383                           
  2384                           ;main.c: 221:         } else if (jump_counter<-10) {
  2385  02E5  2AF0               	goto	l2450
  2386  02E6                     l2452:
  2387  02E6  0862               	movf	get_jump_full@jump_counter,w
  2388  02E7  3A80               	xorlw	128
  2389  02E8  3E8A               	addlw	138
  2390  02E9  1803               	skipnc
  2391  02EA  2AF2               	goto	l2460
  2392                           
  2393                           ;main.c: 222:             jump_counter = -10;
  2394  02EB  30F6               	movlw	246
  2395  02EC  00A4               	movwf	??_get_jump_full
  2396  02ED  0824               	movf	??_get_jump_full,w
  2397  02EE  00E2               	movwf	get_jump_full@jump_counter
  2398                           
  2399                           ;main.c: 223:             FLAGS.bits._JUMP_CONNECTED = 1;
  2400  02EF  167C               	bsf	_FLAGS,4
  2401  02F0                     l2450:
  2402                           
  2403                           ;main.c: 220:             flag = 1;
  2404  02F0  01A7               	clrf	get_jump_full@flag
  2405  02F1  0AA7               	incf	get_jump_full@flag,f
  2406  02F2                     l2460:
  2407                           
  2408                           ;main.c: 226:     } while (flag == 0);
  2409  02F2  0827               	movf	get_jump_full@flag,w
  2410  02F3  1903               	btfsc	3,2
  2411  02F4  2AC7               	goto	l2436
  2412                           
  2413                           ;main.c: 227:     do { ANSELAbits.ANSA1 = 0; } while(0);
  2414  02F5  0023               	movlb	3	; select bank3
  2415  02F6  108C               	bcf	12,1	;volatile
  2416  02F7  0008               	return
  2417  02F8                     __end_of_get_jump_full:
  2418                           
  2419                           	psect	text4
  2420  0218                     __ptext4:	
  2421 ;; *************** function _get_fun_full *****************
  2422 ;; Defined at:
  2423 ;;		line 160 in file "main.c"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;		None
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;  res             2    5[BANK0 ] unsigned int 
  2428 ;;  flag            1    7[BANK0 ] unsigned char 
  2429 ;; Return value:  Size  Location     Type
  2430 ;;                  1    wreg      void 
  2431 ;; Registers used:
  2432 ;;		wreg, status,2, status,0, pclath, cstack
  2433 ;; Tracked objects:
  2434 ;;		On entry : 0/0
  2435 ;;		On exit  : 0/0
  2436 ;;		Unchanged: 0/0
  2437 ;; Data sizes:     COMMON   BANK0   BANK1
  2438 ;;      Params:         0       0       0
  2439 ;;      Locals:         0       3       0
  2440 ;;      Temps:          0       1       0
  2441 ;;      Totals:         0       4       0
  2442 ;;Total ram usage:        4 bytes
  2443 ;; Hardware stack levels used: 1
  2444 ;; Hardware stack levels required when called: 8
  2445 ;; This function calls:
  2446 ;;		_ADC_GetConversion
  2447 ;; This function is called by:
  2448 ;;		_start_setup
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452  0218                     _get_fun_full:	
  2453                           ;psect for function _get_fun_full
  2454                           
  2455                           
  2456                           ;incstack = 0
  2457                           ; Regs used in _get_fun_full: [wreg+status,2+status,0+pclath+cstack]
  2458                           ;main.c: 162:     static signed char fun_counter;;main.c: 163:     do { LATCbits.LATC1 =
      +                           1; } while(0);
  2459  0218  0022               	movlb	2	; select bank2
  2460  0219  148E               	bsf	14,1	;volatile
  2461                           
  2462                           ;main.c: 164:     do { ANSELCbits.ANSC2 = 1; } while(0);
  2463  021A  0023               	movlb	3	; select bank3
  2464  021B  150E               	bsf	14,2	;volatile
  2465                           
  2466                           ;main.c: 165:     char flag = 0;
  2467  021C  0020               	movlb	0	; select bank0
  2468  021D  01A7               	clrf	get_fun_full@flag
  2469  021E                     l2408:
  2470                           
  2471                           ;main.c: 167:         unsigned res = ADC_GetConversion(PIN_FUN_STATE);
  2472  021E  3006               	movlw	6
  2473  021F  24D4               	fcall	_ADC_GetConversion
  2474  0220  0020               	movlb	0	; select bank0
  2475  0221  0821               	movf	?_ADC_GetConversion+1,w
  2476  0222  00A6               	movwf	get_fun_full@res+1
  2477  0223  0820               	movf	?_ADC_GetConversion,w
  2478  0224  00A5               	movwf	get_fun_full@res
  2479                           
  2480                           ;main.c: 168:         if (res < 2000) fun_counter--;
  2481  0225  3007               	movlw	7
  2482  0226  0226               	subwf	get_fun_full@res+1,w
  2483  0227  30D0               	movlw	208
  2484  0228  1903               	skipnz
  2485  0229  0225               	subwf	get_fun_full@res,w
  2486  022A  1803               	skipnc
  2487  022B  2A2E               	goto	l2414
  2488  022C  30FF               	movlw	255
  2489  022D  2A2F               	goto	L2
  2490  022E                     l2414:
  2491  022E  3001               	movlw	1
  2492  022F                     L2:
  2493  022F  00A4               	movwf	??_get_fun_full
  2494  0230  0824               	movf	??_get_fun_full,w
  2495  0231  07E4               	addwf	get_fun_full@fun_counter,f
  2496                           
  2497                           ;main.c: 170:         if (fun_counter > 10) {
  2498  0232  0864               	movf	get_fun_full@fun_counter,w
  2499  0233  3A80               	xorlw	128
  2500  0234  3E75               	addlw	-139
  2501  0235  1C03               	skipc
  2502  0236  2A3D               	goto	l2424
  2503                           
  2504                           ;main.c: 171:             fun_counter = 10;
  2505  0237  300A               	movlw	10
  2506  0238  00A4               	movwf	??_get_fun_full
  2507  0239  0824               	movf	??_get_fun_full,w
  2508  023A  00E4               	movwf	get_fun_full@fun_counter
  2509                           
  2510                           ;main.c: 172:             FLAGS.bits._FUN_CONNECTED = 0;
  2511  023B  11FC               	bcf	_FLAGS,3
  2512                           
  2513                           ;main.c: 174:         } else if (fun_counter<-10) {
  2514  023C  2A47               	goto	l2422
  2515  023D                     l2424:
  2516  023D  0864               	movf	get_fun_full@fun_counter,w
  2517  023E  3A80               	xorlw	128
  2518  023F  3E8A               	addlw	138
  2519  0240  1803               	skipnc
  2520  0241  2A49               	goto	l2432
  2521                           
  2522                           ;main.c: 175:             fun_counter = -10;
  2523  0242  30F6               	movlw	246
  2524  0243  00A4               	movwf	??_get_fun_full
  2525  0244  0824               	movf	??_get_fun_full,w
  2526  0245  00E4               	movwf	get_fun_full@fun_counter
  2527                           
  2528                           ;main.c: 176:             FLAGS.bits._FUN_CONNECTED = 1;
  2529  0246  15FC               	bsf	_FLAGS,3
  2530  0247                     l2422:
  2531                           
  2532                           ;main.c: 173:             flag = 1;
  2533  0247  01A7               	clrf	get_fun_full@flag
  2534  0248  0AA7               	incf	get_fun_full@flag,f
  2535  0249                     l2432:
  2536                           
  2537                           ;main.c: 179:     } while (flag == 0);
  2538  0249  0827               	movf	get_fun_full@flag,w
  2539  024A  1903               	btfsc	3,2
  2540  024B  2A1E               	goto	l2408
  2541                           
  2542                           ;main.c: 181:     do { ANSELCbits.ANSC2 = 0; } while(0);
  2543  024C  0023               	movlb	3	; select bank3
  2544  024D  110E               	bcf	14,2	;volatile
  2545                           
  2546                           ;main.c: 182:     do { LATCbits.LATC1 = 0; } while(0);
  2547  024E  0022               	movlb	2	; select bank2
  2548  024F  108E               	bcf	14,1	;volatile
  2549  0250  0008               	return
  2550  0251                     __end_of_get_fun_full:
  2551                           
  2552                           	psect	text5
  2553  0641                     __ptext5:	
  2554 ;; *************** function _get_eeprom *****************
  2555 ;; Defined at:
  2556 ;;		line 414 in file "main.c"
  2557 ;; Parameters:    Size  Location     Type
  2558 ;;		None
  2559 ;; Auto vars:     Size  Location     Type
  2560 ;;		None
  2561 ;; Return value:  Size  Location     Type
  2562 ;;                  1    wreg      void 
  2563 ;; Registers used:
  2564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2565 ;; Tracked objects:
  2566 ;;		On entry : 0/0
  2567 ;;		On exit  : 0/0
  2568 ;;		Unchanged: 0/0
  2569 ;; Data sizes:     COMMON   BANK0   BANK1
  2570 ;;      Params:         0       0       0
  2571 ;;      Locals:         0       0       0
  2572 ;;      Temps:          0       0       0
  2573 ;;      Totals:         0       0       0
  2574 ;;Total ram usage:        0 bytes
  2575 ;; Hardware stack levels used: 1
  2576 ;; Hardware stack levels required when called: 10
  2577 ;; This function calls:
  2578 ;;		_get_adr
  2579 ;;		_get_time
  2580 ;; This function is called by:
  2581 ;;		_start_setup
  2582 ;; This function uses a non-reentrant model
  2583 ;;
  2584                           
  2585  0641                     _get_eeprom:	
  2586                           ;psect for function _get_eeprom
  2587                           
  2588                           
  2589                           ;main.c: 415:     get_adr();
  2590                           
  2591                           ;incstack = 0
  2592                           ; Regs used in _get_eeprom: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2593  0641  2104               	fcall	_get_adr
  2594                           
  2595                           ;main.c: 416:     get_time();
  2596  0642  202B               	fcall	_get_time
  2597  0643  0008               	return
  2598  0644                     __end_of_get_eeprom:
  2599                           
  2600                           	psect	text6
  2601  002B                     __ptext6:	
  2602 ;; *************** function _get_time *****************
  2603 ;; Defined at:
  2604 ;;		line 377 in file "main.c"
  2605 ;; Parameters:    Size  Location     Type
  2606 ;;		None
  2607 ;; Auto vars:     Size  Location     Type
  2608 ;;  q               1   44[BANK0 ] unsigned char 
  2609 ;;  q               1   42[BANK0 ] unsigned char 
  2610 ;;  q               1   43[BANK0 ] unsigned char 
  2611 ;;  i               1   40[BANK0 ] unsigned char 
  2612 ;;  times          12   20[BANK0 ] unsigned um[4]
  2613 ;;  time_count      4   32[BANK0 ] unsigned char [4]
  2614 ;;  buf2            3   37[BANK0 ] unsigned um
  2615 ;;  buf             1   41[BANK0 ] unsigned char 
  2616 ;;  adr_error       1   36[BANK0 ] unsigned char 
  2617 ;; Return value:  Size  Location     Type
  2618 ;;                  1    wreg      void 
  2619 ;; Registers used:
  2620 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2621 ;; Tracked objects:
  2622 ;;		On entry : 0/0
  2623 ;;		On exit  : 0/0
  2624 ;;		Unchanged: 0/0
  2625 ;; Data sizes:     COMMON   BANK0   BANK1
  2626 ;;      Params:         0       0       0
  2627 ;;      Locals:         0      25       0
  2628 ;;      Temps:          0       4       0
  2629 ;;      Totals:         0      29       0
  2630 ;;Total ram usage:       29 bytes
  2631 ;; Hardware stack levels used: 1
  2632 ;; Hardware stack levels required when called: 9
  2633 ;; This function calls:
  2634 ;;		_EEPROM_ReadShortLong
  2635 ;;		___bmul
  2636 ;; This function is called by:
  2637 ;;		_get_eeprom
  2638 ;; This function uses a non-reentrant model
  2639 ;;
  2640                           
  2641  002B                     _get_time:	
  2642                           ;psect for function _get_time
  2643                           
  2644                           
  2645                           ;main.c: 379:     char adr_error = 0;
  2646                           
  2647                           ;incstack = 0
  2648                           ; Regs used in _get_time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2649  002B  0020               	movlb	0	; select bank0
  2650  002C  01C4               	clrf	get_time@adr_error
  2651                           
  2652                           ;main.c: 380:     char buf=0;
  2653  002D  01C9               	clrf	get_time@buf
  2654                           
  2655                           ;main.c: 382:     __uint24 times[4] = {};
  2656  002E  3034               	movlw	low get_time@times
  2657  002F  0086               	movwf	6
  2658  0030  3000               	movlw	high get_time@times
  2659  0031  0087               	movwf	7
  2660  0032  300C               	movlw	12
  2661  0033  00B0               	movwf	??_get_time
  2662  0034  3000               	movlw	0
  2663  0035                     u1480:
  2664  0035  001E               	movwi fsr1++
  2665  0036  0BB0               	decfsz	??_get_time,f
  2666  0037  2835               	goto	u1480
  2667                           
  2668                           ;main.c: 383:     char time_count[4]={};
  2669  0038  3000               	movlw	0
  2670  0039  00C3               	movwf	get_time@time_count+3
  2671  003A  3000               	movlw	0
  2672  003B  00C2               	movwf	get_time@time_count+2
  2673  003C  3000               	movlw	0
  2674  003D  00C1               	movwf	get_time@time_count+1
  2675  003E  3000               	movlw	0
  2676  003F  00C0               	movwf	get_time@time_count
  2677                           
  2678                           ;main.c: 384:     for (unsigned char i = START_EEPROM_ADR; i < START_EEPROM_ADR + 0x10; 
      +                          i += 4) {
  2679  0040  0867               	movf	_START_EEPROM_ADR,w
  2680  0041  00B0               	movwf	??_get_time
  2681  0042  0830               	movf	??_get_time,w
  2682  0043  00C8               	movwf	get_time@i
  2683  0044                     l2336:
  2684  0044  0867               	movf	_START_EEPROM_ADR,w
  2685  0045  3E10               	addlw	16
  2686  0046  00B0               	movwf	??_get_time
  2687  0047  3000               	movlw	0
  2688  0048  1803               	skipnc
  2689  0049  3001               	movlw	1
  2690  004A  00B1               	movwf	??_get_time+1
  2691  004B  0831               	movf	??_get_time+1,w
  2692  004C  3A80               	xorlw	128
  2693  004D  3C80               	sublw	128
  2694  004E  1D03               	skipz
  2695  004F  2852               	goto	u1545
  2696  0050  0830               	movf	??_get_time,w
  2697  0051  0248               	subwf	get_time@i,w
  2698  0052                     u1545:
  2699  0052  1803               	btfsc	3,0
  2700  0053  28D1               	goto	l2338
  2701                           
  2702                           ;main.c: 385:         buf2 = EEPROM_ReadShortLong(i);
  2703  0054  0020               	movlb	0	; select bank0
  2704  0055  0848               	movf	get_time@i,w
  2705  0056  21D8               	fcall	_EEPROM_ReadShortLong
  2706  0057  0020               	movlb	0	; select bank0
  2707  0058  0823               	movf	?_EEPROM_ReadShortLong,w
  2708  0059  00C5               	movwf	get_time@buf2
  2709  005A  0824               	movf	?_EEPROM_ReadShortLong+1,w
  2710  005B  00C6               	movwf	get_time@buf2+1
  2711  005C  0825               	movf	?_EEPROM_ReadShortLong+2,w
  2712  005D  00C7               	movwf	get_time@buf2+2
  2713                           
  2714                           ;main.c: 387:         for (char q = 0; q < 4; q++) {
  2715  005E  01CA               	clrf	get_time@q
  2716  005F                     l2302:
  2717                           
  2718                           ;main.c: 388:             if (buf2 == times[q]) {
  2719  005F  3003               	movlw	3
  2720  0060  00B0               	movwf	??_get_time
  2721  0061  0830               	movf	??_get_time,w
  2722  0062  00A0               	movwf	___bmul@multiplicand
  2723  0063  084A               	movf	get_time@q,w
  2724  0064  2569               	fcall	___bmul
  2725  0065  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2726  0066  0086               	movwf	6
  2727  0067  0187               	clrf	7
  2728  0068  3F40               	moviw [0]fsr1
  2729  0069  0020               	movlb	0	; select bank0
  2730  006A  0645               	xorwf	get_time@buf2,w
  2731  006B  1D03               	skipz
  2732  006C  2873               	goto	u1495
  2733  006D  3F41               	moviw [1]fsr1
  2734  006E  0646               	xorwf	get_time@buf2+1,w
  2735  006F  1D03               	skipz
  2736  0070  2873               	goto	u1495
  2737  0071  3F42               	moviw [2]fsr1
  2738  0072  0647               	xorwf	get_time@buf2+2,w
  2739  0073                     u1495:
  2740  0073  1D03               	skipz
  2741  0074  2883               	goto	l2308
  2742                           
  2743                           ;main.c: 389:                 time_count[q]++;
  2744  0075  3001               	movlw	1
  2745  0076  00B0               	movwf	??_get_time
  2746  0077  084A               	movf	get_time@q,w
  2747  0078  3E40               	addlw	(low (get_time@time_count| 0))& (0+255)
  2748  0079  0086               	movwf	6
  2749  007A  0187               	clrf	7
  2750  007B  0830               	movf	??_get_time,w
  2751  007C  0781               	addwf	1,f
  2752                           
  2753                           ;main.c: 390:                 buf2 = 0;
  2754  007D  3000               	movlw	0
  2755  007E  00C5               	movwf	get_time@buf2
  2756  007F  3000               	movlw	0
  2757  0080  00C6               	movwf	get_time@buf2+1
  2758  0081  3000               	movlw	0
  2759  0082  00C7               	movwf	get_time@buf2+2
  2760  0083                     l2308:
  2761                           
  2762                           ;main.c: 392:         }
  2763  0083  3001               	movlw	1
  2764  0084  00B0               	movwf	??_get_time
  2765  0085  0830               	movf	??_get_time,w
  2766  0086  07CA               	addwf	get_time@q,f
  2767  0087  3004               	movlw	4
  2768  0088  024A               	subwf	get_time@q,w
  2769  0089  1C03               	skipc
  2770  008A  285F               	goto	l2302
  2771                           
  2772                           ;main.c: 394:         if (buf2 != 0) {
  2773  008B  0847               	movf	get_time@buf2+2,w
  2774  008C  0446               	iorwf	get_time@buf2+1,w
  2775  008D  0445               	iorwf	get_time@buf2,w
  2776  008E  1903               	skipnz
  2777  008F  28CC               	goto	l2334
  2778                           
  2779                           ;main.c: 395:             adr_error = 1;
  2780  0090  01C4               	clrf	get_time@adr_error
  2781  0091  0AC4               	incf	get_time@adr_error,f
  2782                           
  2783                           ;main.c: 396:             for (unsigned char q = 0; q < 4; q++)
  2784  0092  01CC               	clrf	get_time@q_825
  2785  0093                     l2322:
  2786                           
  2787                           ;main.c: 397:                 if (times[q]== 0) {
  2788  0093  3003               	movlw	3
  2789  0094  00B0               	movwf	??_get_time
  2790  0095  0830               	movf	??_get_time,w
  2791  0096  00A0               	movwf	___bmul@multiplicand
  2792  0097  084C               	movf	get_time@q_825,w
  2793  0098  2569               	fcall	___bmul
  2794  0099  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2795  009A  0086               	movwf	6
  2796  009B  0187               	clrf	7
  2797  009C  3F40               	moviw [0]fsr1
  2798  009D  0020               	movlb	0	; select bank0
  2799  009E  00B1               	movwf	??_get_time+1
  2800  009F  3F41               	moviw [1]fsr1
  2801  00A0  00B2               	movwf	??_get_time+2
  2802  00A1  3F42               	moviw [2]fsr1
  2803  00A2  00B3               	movwf	??_get_time+3
  2804  00A3  0833               	movf	??_get_time+3,w
  2805  00A4  0432               	iorwf	??_get_time+2,w
  2806  00A5  0431               	iorwf	??_get_time+1,w
  2807  00A6  1D03               	skipz
  2808  00A7  28C4               	goto	l2330
  2809                           
  2810                           ;main.c: 398:                     times[q] = buf;
  2811  00A8  0849               	movf	get_time@buf,w
  2812  00A9  00B0               	movwf	??_get_time
  2813  00AA  01B1               	clrf	??_get_time+1
  2814  00AB  01B2               	clrf	??_get_time+2
  2815  00AC  3003               	movlw	3
  2816  00AD  00B3               	movwf	??_get_time+3
  2817  00AE  0833               	movf	??_get_time+3,w
  2818  00AF  00A0               	movwf	___bmul@multiplicand
  2819  00B0  084C               	movf	get_time@q_825,w
  2820  00B1  2569               	fcall	___bmul
  2821  00B2  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2822  00B3  0086               	movwf	6
  2823  00B4  0187               	clrf	7
  2824  00B5  0020               	movlb	0	; select bank0
  2825  00B6  0830               	movf	??_get_time,w
  2826  00B7  3FC0               	movwi [0]fsr1
  2827  00B8  0831               	movf	??_get_time+1,w
  2828  00B9  3FC1               	movwi [1]fsr1
  2829  00BA  0832               	movf	??_get_time+2,w
  2830  00BB  3FC2               	movwi [2]fsr1
  2831                           
  2832                           ;main.c: 399:                     time_count[q] = 1;
  2833  00BC  084C               	movf	get_time@q_825,w
  2834  00BD  3E40               	addlw	(low (get_time@time_count| 0))& (0+255)
  2835  00BE  0086               	movwf	6
  2836  00BF  0187               	clrf	7
  2837  00C0  0181               	clrf	1
  2838  00C1  0A81               	incf	1,f
  2839                           
  2840                           ;main.c: 400:                     buf = 0;
  2841  00C2  01C9               	clrf	get_time@buf
  2842                           
  2843                           ;main.c: 401:                     break;
  2844  00C3  28CC               	goto	l2334
  2845  00C4                     l2330:
  2846  00C4  3001               	movlw	1
  2847  00C5  00B0               	movwf	??_get_time
  2848  00C6  0830               	movf	??_get_time,w
  2849  00C7  07CC               	addwf	get_time@q_825,f
  2850  00C8  3004               	movlw	4
  2851  00C9  024C               	subwf	get_time@q_825,w
  2852  00CA  1C03               	skipc
  2853  00CB  2893               	goto	l2322
  2854  00CC                     l2334:
  2855                           
  2856                           ;main.c: 404:     }
  2857  00CC  3004               	movlw	4
  2858  00CD  00B0               	movwf	??_get_time
  2859  00CE  0830               	movf	??_get_time,w
  2860  00CF  07C8               	addwf	get_time@i,f
  2861  00D0  2844               	goto	l2336
  2862  00D1                     l2338:
  2863                           
  2864                           ;main.c: 405:     buf = 0;
  2865  00D1  0020               	movlb	0	; select bank0
  2866  00D2  01C9               	clrf	get_time@buf
  2867                           
  2868                           ;main.c: 406:     for (unsigned char q = 0; q < 4; q++) {
  2869  00D3  01CB               	clrf	get_time@q_826
  2870  00D4                     l2344:
  2871                           
  2872                           ;main.c: 407:         if (time_count[q] > time_count[buf]) buf = q;
  2873  00D4  0849               	movf	get_time@buf,w
  2874  00D5  3E40               	addlw	(low (get_time@time_count| 0))& (0+255)
  2875  00D6  0086               	movwf	6
  2876  00D7  0187               	clrf	7
  2877  00D8  084B               	movf	get_time@q_826,w
  2878  00D9  3E40               	addlw	(low (get_time@time_count| 0))& (0+255)
  2879  00DA  0084               	movwf	4
  2880  00DB  0185               	clrf	5
  2881  00DC  0800               	movf	0,w
  2882  00DD  0201               	subwf	1,w
  2883  00DE  1803               	skipnc
  2884  00DF  28E4               	goto	l2348
  2885  00E0  084B               	movf	get_time@q_826,w
  2886  00E1  00B0               	movwf	??_get_time
  2887  00E2  0830               	movf	??_get_time,w
  2888  00E3  00C9               	movwf	get_time@buf
  2889  00E4                     l2348:
  2890                           
  2891                           ;main.c: 408:     }
  2892  00E4  3001               	movlw	1
  2893  00E5  00B0               	movwf	??_get_time
  2894  00E6  0830               	movf	??_get_time,w
  2895  00E7  07CB               	addwf	get_time@q_826,f
  2896  00E8  3004               	movlw	4
  2897  00E9  024B               	subwf	get_time@q_826,w
  2898  00EA  1C03               	skipc
  2899  00EB  28D4               	goto	l2344
  2900                           
  2901                           ;main.c: 409:     time_s = times[buf];
  2902  00EC  3003               	movlw	3
  2903  00ED  00B0               	movwf	??_get_time
  2904  00EE  0830               	movf	??_get_time,w
  2905  00EF  00A0               	movwf	___bmul@multiplicand
  2906  00F0  0849               	movf	get_time@buf,w
  2907  00F1  2569               	fcall	___bmul
  2908  00F2  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2909  00F3  0086               	movwf	6
  2910  00F4  0187               	clrf	7
  2911  00F5  3F40               	moviw [0]fsr1
  2912  00F6  0020               	movlb	0	; select bank0
  2913  00F7  00DD               	movwf	_time_s
  2914  00F8  3F41               	moviw [1]fsr1
  2915  00F9  00DE               	movwf	_time_s+1
  2916  00FA  3F42               	moviw [2]fsr1
  2917  00FB  00DF               	movwf	_time_s+2
  2918                           
  2919                           ;main.c: 411:     if (adr_error) START_EEPROM_ADR += 0x10;
  2920  00FC  0844               	movf	get_time@adr_error,w
  2921  00FD  1903               	btfsc	3,2
  2922  00FE  0008               	return
  2923  00FF  3010               	movlw	16
  2924  0100  00B0               	movwf	??_get_time
  2925  0101  0830               	movf	??_get_time,w
  2926  0102  07E7               	addwf	_START_EEPROM_ADR,f
  2927  0103  0008               	return
  2928  0104                     __end_of_get_time:
  2929                           
  2930                           	psect	text7
  2931  0569                     __ptext7:	
  2932 ;; *************** function ___bmul *****************
  2933 ;; Defined at:
  2934 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul8.c"
  2935 ;; Parameters:    Size  Location     Type
  2936 ;;  multiplier      1    wreg     unsigned char 
  2937 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  2938 ;; Auto vars:     Size  Location     Type
  2939 ;;  multiplier      1    3[BANK0 ] unsigned char 
  2940 ;;  product         1    2[BANK0 ] unsigned char 
  2941 ;; Return value:  Size  Location     Type
  2942 ;;                  1    wreg      unsigned char 
  2943 ;; Registers used:
  2944 ;;		wreg, status,2, status,0
  2945 ;; Tracked objects:
  2946 ;;		On entry : 0/0
  2947 ;;		On exit  : 0/0
  2948 ;;		Unchanged: 0/0
  2949 ;; Data sizes:     COMMON   BANK0   BANK1
  2950 ;;      Params:         0       1       0
  2951 ;;      Locals:         0       2       0
  2952 ;;      Temps:          0       1       0
  2953 ;;      Totals:         0       4       0
  2954 ;;Total ram usage:        4 bytes
  2955 ;; Hardware stack levels used: 1
  2956 ;; Hardware stack levels required when called: 7
  2957 ;; This function calls:
  2958 ;;		Nothing
  2959 ;; This function is called by:
  2960 ;;		_get_time
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964  0569                     ___bmul:	
  2965                           ;psect for function ___bmul
  2966                           
  2967                           
  2968                           ;incstack = 0
  2969                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2970                           ;___bmul@multiplier stored from wreg
  2971  0569  0020               	movlb	0	; select bank0
  2972  056A  00A3               	movwf	___bmul@multiplier
  2973  056B  01A2               	clrf	___bmul@product
  2974  056C                     l2086:
  2975  056C  1C23               	btfss	___bmul@multiplier,0
  2976  056D  2D72               	goto	l2090
  2977  056E  0820               	movf	___bmul@multiplicand,w
  2978  056F  00A1               	movwf	??___bmul
  2979  0570  0821               	movf	??___bmul,w
  2980  0571  07A2               	addwf	___bmul@product,f
  2981  0572                     l2090:
  2982  0572  1003               	clrc
  2983  0573  0DA0               	rlf	___bmul@multiplicand,f
  2984  0574  1003               	clrc
  2985  0575  0CA3               	rrf	___bmul@multiplier,f
  2986  0576  0823               	movf	___bmul@multiplier,w
  2987  0577  1D03               	btfss	3,2
  2988  0578  2D6C               	goto	l2086
  2989  0579  0822               	movf	___bmul@product,w
  2990  057A  0008               	return
  2991  057B                     __end_of___bmul:
  2992                           
  2993                           	psect	text8
  2994  01D8                     __ptext8:	
  2995 ;; *************** function _EEPROM_ReadShortLong *****************
  2996 ;; Defined at:
  2997 ;;		line 48 in file "eeprom.c"
  2998 ;; Parameters:    Size  Location     Type
  2999 ;;  addr            1    wreg     unsigned char 
  3000 ;; Auto vars:     Size  Location     Type
  3001 ;;  addr            1   15[BANK0 ] unsigned char 
  3002 ;;  dt              3   12[BANK0 ] unsigned um
  3003 ;; Return value:  Size  Location     Type
  3004 ;;                  3    3[BANK0 ] unsigned um
  3005 ;; Registers used:
  3006 ;;		wreg, status,2, status,0, pclath, cstack
  3007 ;; Tracked objects:
  3008 ;;		On entry : 0/0
  3009 ;;		On exit  : 0/0
  3010 ;;		Unchanged: 0/0
  3011 ;; Data sizes:     COMMON   BANK0   BANK1
  3012 ;;      Params:         0       3       0
  3013 ;;      Locals:         0       4       0
  3014 ;;      Temps:          0       6       0
  3015 ;;      Totals:         0      13       0
  3016 ;;Total ram usage:       13 bytes
  3017 ;; Hardware stack levels used: 1
  3018 ;; Hardware stack levels required when called: 8
  3019 ;; This function calls:
  3020 ;;		_EEPROM_ReadByte
  3021 ;; This function is called by:
  3022 ;;		_get_time
  3023 ;; This function uses a non-reentrant model
  3024 ;;
  3025                           
  3026  01D8                     _EEPROM_ReadShortLong:	
  3027                           ;psect for function _EEPROM_ReadShortLong
  3028                           
  3029                           
  3030                           ;incstack = 0
  3031                           ; Regs used in _EEPROM_ReadShortLong: [wreg+status,2+status,0+pclath+cstack]
  3032                           ;EEPROM_ReadShortLong@addr stored from wreg
  3033  01D8  0020               	movlb	0	; select bank0
  3034  01D9  00AF               	movwf	EEPROM_ReadShortLong@addr
  3035                           
  3036                           ;eeprom.c: 49:     __uint24 dt = EEPROM_ReadByte(addr + 2)*256*256;
  3037  01DA  082F               	movf	EEPROM_ReadShortLong@addr,w
  3038  01DB  3E02               	addlw	2
  3039  01DC  2540               	fcall	_EEPROM_ReadByte
  3040  01DD  0020               	movlb	0	; select bank0
  3041  01DE  00A6               	movwf	??_EEPROM_ReadShortLong
  3042  01DF  01A7               	clrf	??_EEPROM_ReadShortLong+1
  3043  01E0  0826               	movf	??_EEPROM_ReadShortLong,w
  3044  01E1  00A7               	movwf	??_EEPROM_ReadShortLong+1
  3045  01E2  01A6               	clrf	??_EEPROM_ReadShortLong
  3046  01E3  0826               	movf	??_EEPROM_ReadShortLong,w
  3047  01E4  00A7               	movwf	??_EEPROM_ReadShortLong+1
  3048  01E5  01A6               	clrf	??_EEPROM_ReadShortLong
  3049  01E6  0826               	movf	??_EEPROM_ReadShortLong,w
  3050  01E7  00AC               	movwf	EEPROM_ReadShortLong@dt
  3051  01E8  0827               	movf	??_EEPROM_ReadShortLong+1,w
  3052  01E9  00AD               	movwf	EEPROM_ReadShortLong@dt+1
  3053  01EA  0D89               	rlf	9,f
  3054  01EB  3B89               	subwfb	9,f
  3055  01EC  0989               	comf	9,f
  3056  01ED  00AE               	movwf	EEPROM_ReadShortLong@dt+2
  3057                           
  3058                           ;eeprom.c: 50:     dt += EEPROM_ReadByte(addr + 1)*256;
  3059  01EE  082F               	movf	EEPROM_ReadShortLong@addr,w
  3060  01EF  3E01               	addlw	1
  3061  01F0  2540               	fcall	_EEPROM_ReadByte
  3062  01F1  0020               	movlb	0	; select bank0
  3063  01F2  00A6               	movwf	??_EEPROM_ReadShortLong
  3064  01F3  01A7               	clrf	??_EEPROM_ReadShortLong+1
  3065  01F4  0826               	movf	??_EEPROM_ReadShortLong,w
  3066  01F5  00A7               	movwf	??_EEPROM_ReadShortLong+1
  3067  01F6  01A6               	clrf	??_EEPROM_ReadShortLong
  3068  01F7  0826               	movf	??_EEPROM_ReadShortLong,w
  3069  01F8  00A9               	movwf	??_EEPROM_ReadShortLong+3
  3070  01F9  0827               	movf	??_EEPROM_ReadShortLong+1,w
  3071  01FA  00AA               	movwf	??_EEPROM_ReadShortLong+4
  3072  01FB  3000               	movlw	0
  3073  01FC  1BAA               	btfsc	??_EEPROM_ReadShortLong+4,7
  3074  01FD  30FF               	movlw	255
  3075  01FE  00AB               	movwf	??_EEPROM_ReadShortLong+5
  3076  01FF  0829               	movf	??_EEPROM_ReadShortLong+3,w
  3077  0200  07AC               	addwf	EEPROM_ReadShortLong@dt,f
  3078  0201  082A               	movf	??_EEPROM_ReadShortLong+4,w
  3079  0202  3DAD               	addwfc	EEPROM_ReadShortLong@dt+1,f
  3080  0203  082B               	movf	??_EEPROM_ReadShortLong+5,w
  3081  0204  3DAE               	addwfc	EEPROM_ReadShortLong@dt+2,f
  3082                           
  3083                           ;eeprom.c: 51:     dt += EEPROM_ReadByte(addr);
  3084  0205  082F               	movf	EEPROM_ReadShortLong@addr,w
  3085  0206  2540               	fcall	_EEPROM_ReadByte
  3086  0207  0020               	movlb	0	; select bank0
  3087  0208  00A6               	movwf	??_EEPROM_ReadShortLong
  3088  0209  01A7               	clrf	??_EEPROM_ReadShortLong+1
  3089  020A  01A8               	clrf	??_EEPROM_ReadShortLong+2
  3090  020B  0826               	movf	??_EEPROM_ReadShortLong,w
  3091  020C  07AC               	addwf	EEPROM_ReadShortLong@dt,f
  3092  020D  0827               	movf	??_EEPROM_ReadShortLong+1,w
  3093  020E  3DAD               	addwfc	EEPROM_ReadShortLong@dt+1,f
  3094  020F  0828               	movf	??_EEPROM_ReadShortLong+2,w
  3095  0210  3DAE               	addwfc	EEPROM_ReadShortLong@dt+2,f
  3096                           
  3097                           ;eeprom.c: 52:     return dt;
  3098  0211  082C               	movf	EEPROM_ReadShortLong@dt,w
  3099  0212  00A3               	movwf	?_EEPROM_ReadShortLong
  3100  0213  082D               	movf	EEPROM_ReadShortLong@dt+1,w
  3101  0214  00A4               	movwf	?_EEPROM_ReadShortLong+1
  3102  0215  082E               	movf	EEPROM_ReadShortLong@dt+2,w
  3103  0216  00A5               	movwf	?_EEPROM_ReadShortLong+2
  3104  0217  0008               	return
  3105  0218                     __end_of_EEPROM_ReadShortLong:
  3106                           
  3107                           	psect	text9
  3108  0104                     __ptext9:	
  3109 ;; *************** function _get_adr *****************
  3110 ;; Defined at:
  3111 ;;		line 344 in file "main.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;		None
  3114 ;; Auto vars:     Size  Location     Type
  3115 ;;  q               1   39[BANK0 ] unsigned char 
  3116 ;;  q               1   37[BANK0 ] unsigned char 
  3117 ;;  i               1   38[BANK0 ] unsigned char 
  3118 ;;  i               1   36[BANK0 ] unsigned char 
  3119 ;;  adr            32    4[BANK0 ] unsigned char [2][16]
  3120 ;;  buf             1   40[BANK0 ] unsigned char 
  3121 ;; Return value:  Size  Location     Type
  3122 ;;                  1    wreg      void 
  3123 ;; Registers used:
  3124 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3125 ;; Tracked objects:
  3126 ;;		On entry : 0/0
  3127 ;;		On exit  : 0/0
  3128 ;;		Unchanged: 0/0
  3129 ;; Data sizes:     COMMON   BANK0   BANK1
  3130 ;;      Params:         0       0       0
  3131 ;;      Locals:         0      37       0
  3132 ;;      Temps:          0       1       0
  3133 ;;      Totals:         0      38       0
  3134 ;;Total ram usage:       38 bytes
  3135 ;; Hardware stack levels used: 1
  3136 ;; Hardware stack levels required when called: 8
  3137 ;; This function calls:
  3138 ;;		_EEPROM_ReadByte
  3139 ;; This function is called by:
  3140 ;;		_get_eeprom
  3141 ;; This function uses a non-reentrant model
  3142 ;;
  3143                           
  3144  0104                     _get_adr:	
  3145                           ;psect for function _get_adr
  3146                           
  3147                           
  3148                           ;main.c: 346:     char adr[16][2] = {};
  3149                           
  3150                           ;incstack = 0
  3151                           ; Regs used in _get_adr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3152  0104  3024               	movlw	low get_adr@adr
  3153  0105  0086               	movwf	6
  3154  0106  3000               	movlw	high get_adr@adr
  3155  0107  0087               	movwf	7
  3156  0108  3020               	movlw	32
  3157  0109  0020               	movlb	0	; select bank0
  3158  010A  00A3               	movwf	??_get_adr
  3159  010B  3000               	movlw	0
  3160  010C                     u1360:
  3161  010C  001E               	movwi fsr1++
  3162  010D  0BA3               	decfsz	??_get_adr,f
  3163  010E  290C               	goto	u1360
  3164                           
  3165                           ;main.c: 348:     for (unsigned char i = 0; i < 0x10; i++) {
  3166  010F  01C4               	clrf	get_adr@i
  3167  0110                     l2218:
  3168                           
  3169                           ;main.c: 349:         buf = EEPROM_ReadByte(i);
  3170  0110  0844               	movf	get_adr@i,w
  3171  0111  2540               	fcall	_EEPROM_ReadByte
  3172  0112  0020               	movlb	0	; select bank0
  3173  0113  00A3               	movwf	??_get_adr
  3174  0114  0823               	movf	??_get_adr,w
  3175  0115  00C8               	movwf	get_adr@buf
  3176                           
  3177                           ;main.c: 350:         if (buf == 0) continue;
  3178  0116  0848               	movf	get_adr@buf,w
  3179  0117  1903               	btfsc	3,2
  3180  0118  2957               	goto	l2258
  3181                           
  3182                           ;main.c: 351:         for (unsigned char q = 0; q < 16; q++) {
  3183  0119  01C5               	clrf	get_adr@q
  3184  011A                     l2230:
  3185                           
  3186                           ;main.c: 352:             if (buf == adr[q][0]) {
  3187  011A  3545               	lslf	get_adr@q,w
  3188  011B  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3189  011C  0086               	movwf	6
  3190  011D  0187               	clrf	7
  3191  011E  0801               	movf	1,w
  3192  011F  0648               	xorwf	get_adr@buf,w
  3193  0120  1D03               	skipz
  3194  0121  292C               	goto	l2236
  3195                           
  3196                           ;main.c: 353:                 (adr[q][1])++;
  3197  0122  3001               	movlw	1
  3198  0123  00A3               	movwf	??_get_adr
  3199  0124  1403               	setc
  3200  0125  0D45               	rlf	get_adr@q,w
  3201  0126  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3202  0127  0086               	movwf	6
  3203  0128  0187               	clrf	7
  3204  0129  0823               	movf	??_get_adr,w
  3205  012A  0781               	addwf	1,f
  3206                           
  3207                           ;main.c: 354:                 buf = 0;
  3208  012B  01C8               	clrf	get_adr@buf
  3209  012C                     l2236:
  3210                           
  3211                           ;main.c: 356:         }
  3212  012C  3001               	movlw	1
  3213  012D  00A3               	movwf	??_get_adr
  3214  012E  0823               	movf	??_get_adr,w
  3215  012F  07C5               	addwf	get_adr@q,f
  3216  0130  3010               	movlw	16
  3217  0131  0245               	subwf	get_adr@q,w
  3218  0132  1C03               	skipc
  3219  0133  291A               	goto	l2230
  3220                           
  3221                           ;main.c: 358:         if (buf != 0) {
  3222  0134  0848               	movf	get_adr@buf,w
  3223  0135  1903               	btfsc	3,2
  3224  0136  2957               	goto	l2258
  3225                           
  3226                           ;main.c: 359:             for (unsigned char q = 0; q < 16; q++)
  3227  0137  01C7               	clrf	get_adr@q_813
  3228  0138                     l2248:
  3229                           
  3230                           ;main.c: 360:                 if (adr[q][0] == 0) {
  3231  0138  3547               	lslf	get_adr@q_813,w
  3232  0139  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3233  013A  0086               	movwf	6
  3234  013B  0187               	clrf	7
  3235  013C  0801               	movf	1,w
  3236  013D  1D03               	btfss	3,2
  3237  013E  294F               	goto	l2254
  3238                           
  3239                           ;main.c: 361:                     adr[q][0] = buf;
  3240  013F  0848               	movf	get_adr@buf,w
  3241  0140  00A3               	movwf	??_get_adr
  3242  0141  3547               	lslf	get_adr@q_813,w
  3243  0142  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3244  0143  0086               	movwf	6
  3245  0144  0187               	clrf	7
  3246  0145  0823               	movf	??_get_adr,w
  3247  0146  0081               	movwf	1
  3248                           
  3249                           ;main.c: 362:                     adr[q][1] = 1;
  3250  0147  1403               	setc
  3251  0148  0D47               	rlf	get_adr@q_813,w
  3252  0149  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3253  014A  0086               	movwf	6
  3254  014B  0187               	clrf	7
  3255  014C  0181               	clrf	1
  3256  014D  0A81               	incf	1,f
  3257                           
  3258                           ;main.c: 364:                     break;
  3259  014E  2957               	goto	l2258
  3260  014F                     l2254:
  3261  014F  3001               	movlw	1
  3262  0150  00A3               	movwf	??_get_adr
  3263  0151  0823               	movf	??_get_adr,w
  3264  0152  07C7               	addwf	get_adr@q_813,f
  3265  0153  3010               	movlw	16
  3266  0154  0247               	subwf	get_adr@q_813,w
  3267  0155  1C03               	skipc
  3268  0156  2938               	goto	l2248
  3269  0157                     l2258:
  3270  0157  3001               	movlw	1
  3271  0158  00A3               	movwf	??_get_adr
  3272  0159  0823               	movf	??_get_adr,w
  3273  015A  07C4               	addwf	get_adr@i,f
  3274  015B  3010               	movlw	16
  3275  015C  0244               	subwf	get_adr@i,w
  3276  015D  1C03               	skipc
  3277  015E  2910               	goto	l2218
  3278                           
  3279                           ;main.c: 368:     buf = 0;
  3280  015F  01C8               	clrf	get_adr@buf
  3281                           
  3282                           ;main.c: 369:     for (unsigned char i = 0; i < 0x10; i++) {
  3283  0160  01C6               	clrf	get_adr@i_814
  3284  0161                     l2268:
  3285                           
  3286                           ;main.c: 370:         if (adr[i][1] > adr[buf][1]) buf = i;
  3287  0161  1403               	setc
  3288  0162  0D48               	rlf	get_adr@buf,w
  3289  0163  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3290  0164  0086               	movwf	6
  3291  0165  0187               	clrf	7
  3292  0166  1403               	setc
  3293  0167  0D46               	rlf	get_adr@i_814,w
  3294  0168  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3295  0169  0084               	movwf	4
  3296  016A  0185               	clrf	5
  3297  016B  0800               	movf	0,w
  3298  016C  0201               	subwf	1,w
  3299  016D  1803               	skipnc
  3300  016E  2973               	goto	l2272
  3301  016F  0846               	movf	get_adr@i_814,w
  3302  0170  00A3               	movwf	??_get_adr
  3303  0171  0823               	movf	??_get_adr,w
  3304  0172  00C8               	movwf	get_adr@buf
  3305  0173                     l2272:
  3306                           
  3307                           ;main.c: 371:     }
  3308  0173  3001               	movlw	1
  3309  0174  00A3               	movwf	??_get_adr
  3310  0175  0823               	movf	??_get_adr,w
  3311  0176  07C6               	addwf	get_adr@i_814,f
  3312  0177  3010               	movlw	16
  3313  0178  0246               	subwf	get_adr@i_814,w
  3314  0179  1C03               	skipc
  3315  017A  2961               	goto	l2268
  3316                           
  3317                           ;main.c: 372:     START_EEPROM_ADR = adr[buf][0];
  3318  017B  3548               	lslf	get_adr@buf,w
  3319  017C  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3320  017D  0086               	movwf	6
  3321  017E  0187               	clrf	7
  3322  017F  0801               	movf	1,w
  3323  0180  00A3               	movwf	??_get_adr
  3324  0181  0823               	movf	??_get_adr,w
  3325  0182  00E7               	movwf	_START_EEPROM_ADR
  3326                           
  3327                           ;main.c: 373:     if (START_EEPROM_ADR == 0 || START_EEPROM_ADR == 0xFF) START_EEPROM_AD
      +                          R = 0x10;
  3328  0183  0867               	movf	_START_EEPROM_ADR,w
  3329  0184  1D03               	btfss	3,2
  3330  0185  0A67               	incf	_START_EEPROM_ADR,w
  3331  0186  1D03               	btfss	3,2
  3332  0187  0008               	return
  3333  0188  3010               	movlw	16
  3334  0189  00A3               	movwf	??_get_adr
  3335  018A  0823               	movf	??_get_adr,w
  3336  018B  00E7               	movwf	_START_EEPROM_ADR
  3337  018C  0008               	return
  3338  018D                     __end_of_get_adr:
  3339                           
  3340                           	psect	text10
  3341  0644                     __ptext10:	
  3342 ;; *************** function _TMR2_StartTimer *****************
  3343 ;; Defined at:
  3344 ;;		line 87 in file "mcc_generated_files/tmr2.c"
  3345 ;; Parameters:    Size  Location     Type
  3346 ;;		None
  3347 ;; Auto vars:     Size  Location     Type
  3348 ;;		None
  3349 ;; Return value:  Size  Location     Type
  3350 ;;                  1    wreg      void 
  3351 ;; Registers used:
  3352 ;;		None
  3353 ;; Tracked objects:
  3354 ;;		On entry : 0/0
  3355 ;;		On exit  : 0/0
  3356 ;;		Unchanged: 0/0
  3357 ;; Data sizes:     COMMON   BANK0   BANK1
  3358 ;;      Params:         0       0       0
  3359 ;;      Locals:         0       0       0
  3360 ;;      Temps:          0       0       0
  3361 ;;      Totals:         0       0       0
  3362 ;;Total ram usage:        0 bytes
  3363 ;; Hardware stack levels used: 1
  3364 ;; Hardware stack levels required when called: 7
  3365 ;; This function calls:
  3366 ;;		Nothing
  3367 ;; This function is called by:
  3368 ;;		_start_setup
  3369 ;; This function uses a non-reentrant model
  3370 ;;
  3371                           
  3372  0644                     _TMR2_StartTimer:	
  3373                           ;psect for function _TMR2_StartTimer
  3374                           
  3375                           
  3376                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
  3377                           
  3378                           ;incstack = 0
  3379                           ; Regs used in _TMR2_StartTimer: []
  3380  0644  0020               	movlb	0	; select bank0
  3381  0645  151C               	bsf	28,2	;volatile
  3382  0646  0008               	return
  3383  0647                     __end_of_TMR2_StartTimer:
  3384                           
  3385                           	psect	text11
  3386  05F8                     __ptext11:	
  3387 ;; *************** function _SYSTEM_Initialize *****************
  3388 ;; Defined at:
  3389 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;		None
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;		None
  3394 ;; Return value:  Size  Location     Type
  3395 ;;                  1    wreg      void 
  3396 ;; Registers used:
  3397 ;;		wreg, status,2, status,0, pclath, cstack
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMMON   BANK0   BANK1
  3403 ;;      Params:         0       0       0
  3404 ;;      Locals:         0       0       0
  3405 ;;      Temps:          0       0       0
  3406 ;;      Totals:         0       0       0
  3407 ;;Total ram usage:        0 bytes
  3408 ;; Hardware stack levels used: 1
  3409 ;; Hardware stack levels required when called: 9
  3410 ;; This function calls:
  3411 ;;		_ADC_Initialize
  3412 ;;		_FVR_Initialize
  3413 ;;		_OSCILLATOR_Initialize
  3414 ;;		_PIN_MANAGER_Initialize
  3415 ;;		_TMR0_Initialize
  3416 ;;		_TMR2_Initialize
  3417 ;;		_WDT_Initialize
  3418 ;; This function is called by:
  3419 ;;		_start_setup
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423  05F8                     _SYSTEM_Initialize:	
  3424                           ;psect for function _SYSTEM_Initialize
  3425                           
  3426                           
  3427                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  3428                           
  3429                           ;incstack = 0
  3430                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3431  05F8  252B               	fcall	_PIN_MANAGER_Initialize
  3432                           
  3433                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  3434  05F9  2608               	fcall	_OSCILLATOR_Initialize
  3435                           
  3436                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  3437  05FA  2630               	fcall	_WDT_Initialize
  3438                           
  3439                           ;mcc_generated_files/mcc.c: 56:     FVR_Initialize();
  3440  05FB  2634               	fcall	_FVR_Initialize
  3441                           
  3442                           ;mcc_generated_files/mcc.c: 57:     ADC_Initialize();
  3443  05FC  2600               	fcall	_ADC_Initialize
  3444                           
  3445                           ;mcc_generated_files/mcc.c: 58:     TMR2_Initialize();
  3446  05FD  257B               	fcall	_TMR2_Initialize
  3447                           
  3448                           ;mcc_generated_files/mcc.c: 59:     TMR0_Initialize();
  3449  05FE  2555               	fcall	_TMR0_Initialize
  3450  05FF  0008               	return
  3451  0600                     __end_of_SYSTEM_Initialize:
  3452                           
  3453                           	psect	text12
  3454  0630                     __ptext12:	
  3455 ;; *************** function _WDT_Initialize *****************
  3456 ;; Defined at:
  3457 ;;		line 72 in file "mcc_generated_files/mcc.c"
  3458 ;; Parameters:    Size  Location     Type
  3459 ;;		None
  3460 ;; Auto vars:     Size  Location     Type
  3461 ;;		None
  3462 ;; Return value:  Size  Location     Type
  3463 ;;                  1    wreg      void 
  3464 ;; Registers used:
  3465 ;;		wreg
  3466 ;; Tracked objects:
  3467 ;;		On entry : 0/0
  3468 ;;		On exit  : 0/0
  3469 ;;		Unchanged: 0/0
  3470 ;; Data sizes:     COMMON   BANK0   BANK1
  3471 ;;      Params:         0       0       0
  3472 ;;      Locals:         0       0       0
  3473 ;;      Temps:          0       0       0
  3474 ;;      Totals:         0       0       0
  3475 ;;Total ram usage:        0 bytes
  3476 ;; Hardware stack levels used: 1
  3477 ;; Hardware stack levels required when called: 7
  3478 ;; This function calls:
  3479 ;;		Nothing
  3480 ;; This function is called by:
  3481 ;;		_SYSTEM_Initialize
  3482 ;; This function uses a non-reentrant model
  3483 ;;
  3484                           
  3485  0630                     _WDT_Initialize:	
  3486                           ;psect for function _WDT_Initialize
  3487                           
  3488                           
  3489                           ;mcc_generated_files/mcc.c: 75:     WDTCON = 0x16;
  3490                           
  3491                           ;incstack = 0
  3492                           ; Regs used in _WDT_Initialize: [wreg]
  3493  0630  3016               	movlw	22
  3494  0631  0021               	movlb	1	; select bank1
  3495  0632  0097               	movwf	23	;volatile
  3496  0633  0008               	return
  3497  0634                     __end_of_WDT_Initialize:
  3498                           
  3499                           	psect	text13
  3500  057B                     __ptext13:	
  3501 ;; *************** function _TMR2_Initialize *****************
  3502 ;; Defined at:
  3503 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  3504 ;; Parameters:    Size  Location     Type
  3505 ;;		None
  3506 ;; Auto vars:     Size  Location     Type
  3507 ;;		None
  3508 ;; Return value:  Size  Location     Type
  3509 ;;                  1    wreg      void 
  3510 ;; Registers used:
  3511 ;;		wreg, status,2, status,0, pclath, cstack
  3512 ;; Tracked objects:
  3513 ;;		On entry : 0/0
  3514 ;;		On exit  : 0/0
  3515 ;;		Unchanged: 0/0
  3516 ;; Data sizes:     COMMON   BANK0   BANK1
  3517 ;;      Params:         0       0       0
  3518 ;;      Locals:         0       0       0
  3519 ;;      Temps:          0       0       0
  3520 ;;      Totals:         0       0       0
  3521 ;;Total ram usage:        0 bytes
  3522 ;; Hardware stack levels used: 1
  3523 ;; Hardware stack levels required when called: 8
  3524 ;; This function calls:
  3525 ;;		_TMR2_SetInterruptHandler
  3526 ;; This function is called by:
  3527 ;;		_SYSTEM_Initialize
  3528 ;; This function uses a non-reentrant model
  3529 ;;
  3530                           
  3531  057B                     _TMR2_Initialize:	
  3532                           ;psect for function _TMR2_Initialize
  3533                           
  3534                           
  3535                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0xF9;
  3536                           
  3537                           ;incstack = 0
  3538                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3539  057B  30F9               	movlw	249
  3540  057C  0020               	movlb	0	; select bank0
  3541  057D  009B               	movwf	27	;volatile
  3542                           
  3543                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  3544  057E  019A               	clrf	26	;volatile
  3545                           
  3546                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  3547  057F  1091               	bcf	17,1	;volatile
  3548                           
  3549                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  3550  0580  0021               	movlb	1	; select bank1
  3551  0581  1491               	bsf	17,1	;volatile
  3552                           
  3553                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  3554  0582  3047               	movlw	low _TMR2_DefaultInterruptHandler
  3555  0583  0020               	movlb	0	; select bank0
  3556  0584  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  3557  0585  3006               	movlw	high _TMR2_DefaultInterruptHandler
  3558  0586  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  3559  0587  2615               	fcall	_TMR2_SetInterruptHandler
  3560                           
  3561                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x4E;
  3562  0588  304E               	movlw	78
  3563  0589  0020               	movlb	0	; select bank0
  3564  058A  009C               	movwf	28	;volatile
  3565  058B  0008               	return
  3566  058C                     __end_of_TMR2_Initialize:
  3567                           
  3568                           	psect	text14
  3569  0615                     __ptext14:	
  3570 ;; *************** function _TMR2_SetInterruptHandler *****************
  3571 ;; Defined at:
  3572 ;;		line 147 in file "mcc_generated_files/tmr2.c"
  3573 ;; Parameters:    Size  Location     Type
  3574 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3575 ;;		 -> sec_tick_work(1), TMR2_DefaultInterruptHandler(1), 
  3576 ;; Auto vars:     Size  Location     Type
  3577 ;;		None
  3578 ;; Return value:  Size  Location     Type
  3579 ;;                  1    wreg      void 
  3580 ;; Registers used:
  3581 ;;		wreg
  3582 ;; Tracked objects:
  3583 ;;		On entry : 0/0
  3584 ;;		On exit  : 0/0
  3585 ;;		Unchanged: 0/0
  3586 ;; Data sizes:     COMMON   BANK0   BANK1
  3587 ;;      Params:         0       2       0
  3588 ;;      Locals:         0       0       0
  3589 ;;      Temps:          0       0       0
  3590 ;;      Totals:         0       2       0
  3591 ;;Total ram usage:        2 bytes
  3592 ;; Hardware stack levels used: 1
  3593 ;; Hardware stack levels required when called: 7
  3594 ;; This function calls:
  3595 ;;		Nothing
  3596 ;; This function is called by:
  3597 ;;		_TMR2_Initialize
  3598 ;;		_start_setup
  3599 ;; This function uses a non-reentrant model
  3600 ;;
  3601                           
  3602  0615                     _TMR2_SetInterruptHandler:	
  3603                           ;psect for function _TMR2_SetInterruptHandler
  3604                           
  3605                           
  3606                           ;mcc_generated_files/tmr2.c: 148:     TMR2_InterruptHandler = InterruptHandler;
  3607                           
  3608                           ;incstack = 0
  3609                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  3610  0615  0020               	movlb	0	; select bank0
  3611  0616  0821               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  3612  0617  00EB               	movwf	_TMR2_InterruptHandler+1
  3613  0618  0820               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  3614  0619  00EA               	movwf	_TMR2_InterruptHandler
  3615  061A  0008               	return
  3616  061B                     __end_of_TMR2_SetInterruptHandler:
  3617                           
  3618                           	psect	text15
  3619  0555                     __ptext15:	
  3620 ;; *************** function _TMR0_Initialize *****************
  3621 ;; Defined at:
  3622 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  3623 ;; Parameters:    Size  Location     Type
  3624 ;;		None
  3625 ;; Auto vars:     Size  Location     Type
  3626 ;;		None
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  1    wreg      void 
  3629 ;; Registers used:
  3630 ;;		wreg, status,2, status,0, pclath, cstack
  3631 ;; Tracked objects:
  3632 ;;		On entry : 0/0
  3633 ;;		On exit  : 0/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMMON   BANK0   BANK1
  3636 ;;      Params:         0       0       0
  3637 ;;      Locals:         0       0       0
  3638 ;;      Temps:          0       1       0
  3639 ;;      Totals:         0       1       0
  3640 ;;Total ram usage:        1 bytes
  3641 ;; Hardware stack levels used: 1
  3642 ;; Hardware stack levels required when called: 8
  3643 ;; This function calls:
  3644 ;;		_TMR0_SetInterruptHandler
  3645 ;; This function is called by:
  3646 ;;		_SYSTEM_Initialize
  3647 ;; This function uses a non-reentrant model
  3648 ;;
  3649                           
  3650  0555                     _TMR0_Initialize:	
  3651                           ;psect for function _TMR0_Initialize
  3652                           
  3653                           
  3654                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD2 
      +                          & 0x3F));
  3655                           
  3656                           ;incstack = 0
  3657                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3658  0555  0021               	movlb	1	; select bank1
  3659  0556  0815               	movf	21,w	;volatile
  3660  0557  39C0               	andlw	192
  3661  0558  3812               	iorlw	18
  3662  0559  0095               	movwf	21	;volatile
  3663                           
  3664                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x9C;
  3665  055A  309C               	movlw	156
  3666  055B  0020               	movlb	0	; select bank0
  3667  055C  0095               	movwf	21	;volatile
  3668                           
  3669                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 156;
  3670  055D  309C               	movlw	156
  3671  055E  00A2               	movwf	??_TMR0_Initialize
  3672  055F  0822               	movf	??_TMR0_Initialize,w
  3673  0560  00EC               	movwf	_timer0ReloadVal	;volatile
  3674                           
  3675                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  3676  0561  110B               	bcf	11,2	;volatile
  3677                           
  3678                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  3679  0562  168B               	bsf	11,5	;volatile
  3680                           
  3681                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  3682  0563  3048               	movlw	low _TMR0_DefaultInterruptHandler
  3683  0564  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  3684  0565  3006               	movlw	high _TMR0_DefaultInterruptHandler
  3685  0566  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  3686  0567  261B               	fcall	_TMR0_SetInterruptHandler
  3687  0568  0008               	return
  3688  0569                     __end_of_TMR0_Initialize:
  3689                           
  3690                           	psect	text16
  3691  061B                     __ptext16:	
  3692 ;; *************** function _TMR0_SetInterruptHandler *****************
  3693 ;; Defined at:
  3694 ;;		line 125 in file "mcc_generated_files/tmr0.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3697 ;;		 -> switch_zum(1), TMR0_DefaultInterruptHandler(1), 
  3698 ;; Auto vars:     Size  Location     Type
  3699 ;;		None
  3700 ;; Return value:  Size  Location     Type
  3701 ;;                  1    wreg      void 
  3702 ;; Registers used:
  3703 ;;		wreg
  3704 ;; Tracked objects:
  3705 ;;		On entry : 0/0
  3706 ;;		On exit  : 0/0
  3707 ;;		Unchanged: 0/0
  3708 ;; Data sizes:     COMMON   BANK0   BANK1
  3709 ;;      Params:         0       2       0
  3710 ;;      Locals:         0       0       0
  3711 ;;      Temps:          0       0       0
  3712 ;;      Totals:         0       2       0
  3713 ;;Total ram usage:        2 bytes
  3714 ;; Hardware stack levels used: 1
  3715 ;; Hardware stack levels required when called: 7
  3716 ;; This function calls:
  3717 ;;		Nothing
  3718 ;; This function is called by:
  3719 ;;		_TMR0_Initialize
  3720 ;;		_start_setup
  3721 ;; This function uses a non-reentrant model
  3722 ;;
  3723                           
  3724  061B                     _TMR0_SetInterruptHandler:	
  3725                           ;psect for function _TMR0_SetInterruptHandler
  3726                           
  3727                           
  3728                           ;mcc_generated_files/tmr0.c: 126:     TMR0_InterruptHandler = InterruptHandler;
  3729                           
  3730                           ;incstack = 0
  3731                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  3732  061B  0020               	movlb	0	; select bank0
  3733  061C  0821               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  3734  061D  00E9               	movwf	_TMR0_InterruptHandler+1
  3735  061E  0820               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  3736  061F  00E8               	movwf	_TMR0_InterruptHandler
  3737  0620  0008               	return
  3738  0621                     __end_of_TMR0_SetInterruptHandler:
  3739                           
  3740                           	psect	text17
  3741  052B                     __ptext17:	
  3742 ;; *************** function _PIN_MANAGER_Initialize *****************
  3743 ;; Defined at:
  3744 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  3745 ;; Parameters:    Size  Location     Type
  3746 ;;		None
  3747 ;; Auto vars:     Size  Location     Type
  3748 ;;		None
  3749 ;; Return value:  Size  Location     Type
  3750 ;;                  1    wreg      void 
  3751 ;; Registers used:
  3752 ;;		wreg, status,2
  3753 ;; Tracked objects:
  3754 ;;		On entry : 0/0
  3755 ;;		On exit  : 0/0
  3756 ;;		Unchanged: 0/0
  3757 ;; Data sizes:     COMMON   BANK0   BANK1
  3758 ;;      Params:         0       0       0
  3759 ;;      Locals:         0       0       0
  3760 ;;      Temps:          0       0       0
  3761 ;;      Totals:         0       0       0
  3762 ;;Total ram usage:        0 bytes
  3763 ;; Hardware stack levels used: 1
  3764 ;; Hardware stack levels required when called: 7
  3765 ;; This function calls:
  3766 ;;		Nothing
  3767 ;; This function is called by:
  3768 ;;		_SYSTEM_Initialize
  3769 ;; This function uses a non-reentrant model
  3770 ;;
  3771                           
  3772  052B                     _PIN_MANAGER_Initialize:	
  3773                           ;psect for function _PIN_MANAGER_Initialize
  3774                           
  3775                           
  3776                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  3777                           
  3778                           ;incstack = 0
  3779                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3780  052B  0022               	movlb	2	; select bank2
  3781  052C  018C               	clrf	12	;volatile
  3782                           
  3783                           ;mcc_generated_files/pin_manager.c: 61:     LATC = 0x00;
  3784  052D  018E               	clrf	14	;volatile
  3785                           
  3786                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0x0F;
  3787  052E  300F               	movlw	15
  3788  052F  0021               	movlb	1	; select bank1
  3789  0530  008C               	movwf	12	;volatile
  3790                           
  3791                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0x0C;
  3792  0531  300C               	movlw	12
  3793  0532  008E               	movwf	14	;volatile
  3794                           
  3795                           ;mcc_generated_files/pin_manager.c: 72:     ANSELC = 0x0C;
  3796  0533  300C               	movlw	12
  3797  0534  0023               	movlb	3	; select bank3
  3798  0535  008E               	movwf	14	;volatile
  3799                           
  3800                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x07;
  3801  0536  3007               	movlw	7
  3802  0537  008C               	movwf	12	;volatile
  3803                           
  3804                           ;mcc_generated_files/pin_manager.c: 78:     WPUA = 0x00;
  3805  0538  0024               	movlb	4	; select bank4
  3806  0539  018C               	clrf	12	;volatile
  3807                           
  3808                           ;mcc_generated_files/pin_manager.c: 79:     WPUC = 0x00;
  3809  053A  018E               	clrf	14	;volatile
  3810                           
  3811                           ;mcc_generated_files/pin_manager.c: 80:     OPTION_REGbits.nWPUEN = 1;
  3812  053B  0021               	movlb	1	; select bank1
  3813  053C  1795               	bsf	21,7	;volatile
  3814                           
  3815                           ;mcc_generated_files/pin_manager.c: 86:     APFCON = 0x00;
  3816  053D  0022               	movlb	2	; select bank2
  3817  053E  019D               	clrf	29	;volatile
  3818  053F  0008               	return
  3819  0540                     __end_of_PIN_MANAGER_Initialize:
  3820                           
  3821                           	psect	text18
  3822  0608                     __ptext18:	
  3823 ;; *************** function _OSCILLATOR_Initialize *****************
  3824 ;; Defined at:
  3825 ;;		line 62 in file "mcc_generated_files/mcc.c"
  3826 ;; Parameters:    Size  Location     Type
  3827 ;;		None
  3828 ;; Auto vars:     Size  Location     Type
  3829 ;;		None
  3830 ;; Return value:  Size  Location     Type
  3831 ;;                  1    wreg      void 
  3832 ;; Registers used:
  3833 ;;		wreg, status,2
  3834 ;; Tracked objects:
  3835 ;;		On entry : 0/0
  3836 ;;		On exit  : 0/0
  3837 ;;		Unchanged: 0/0
  3838 ;; Data sizes:     COMMON   BANK0   BANK1
  3839 ;;      Params:         0       0       0
  3840 ;;      Locals:         0       0       0
  3841 ;;      Temps:          0       0       0
  3842 ;;      Totals:         0       0       0
  3843 ;;Total ram usage:        0 bytes
  3844 ;; Hardware stack levels used: 1
  3845 ;; Hardware stack levels required when called: 7
  3846 ;; This function calls:
  3847 ;;		Nothing
  3848 ;; This function is called by:
  3849 ;;		_SYSTEM_Initialize
  3850 ;; This function uses a non-reentrant model
  3851 ;;
  3852                           
  3853  0608                     _OSCILLATOR_Initialize:	
  3854                           ;psect for function _OSCILLATOR_Initialize
  3855                           
  3856                           
  3857                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x78;
  3858                           
  3859                           ;incstack = 0
  3860                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3861  0608  3078               	movlw	120
  3862  0609  0021               	movlb	1	; select bank1
  3863  060A  0099               	movwf	25	;volatile
  3864                           
  3865                           ;mcc_generated_files/mcc.c: 67:     OSCTUNE = 0x00;
  3866  060B  0198               	clrf	24	;volatile
  3867                           
  3868                           ;mcc_generated_files/mcc.c: 69:     BORCON = 0x00;
  3869  060C  0022               	movlb	2	; select bank2
  3870  060D  0196               	clrf	22	;volatile
  3871  060E  0008               	return
  3872  060F                     __end_of_OSCILLATOR_Initialize:
  3873                           
  3874                           	psect	text19
  3875  0634                     __ptext19:	
  3876 ;; *************** function _FVR_Initialize *****************
  3877 ;; Defined at:
  3878 ;;		line 58 in file "mcc_generated_files/fvr.c"
  3879 ;; Parameters:    Size  Location     Type
  3880 ;;		None
  3881 ;; Auto vars:     Size  Location     Type
  3882 ;;		None
  3883 ;; Return value:  Size  Location     Type
  3884 ;;                  1    wreg      void 
  3885 ;; Registers used:
  3886 ;;		wreg
  3887 ;; Tracked objects:
  3888 ;;		On entry : 0/0
  3889 ;;		On exit  : 0/0
  3890 ;;		Unchanged: 0/0
  3891 ;; Data sizes:     COMMON   BANK0   BANK1
  3892 ;;      Params:         0       0       0
  3893 ;;      Locals:         0       0       0
  3894 ;;      Temps:          0       0       0
  3895 ;;      Totals:         0       0       0
  3896 ;;Total ram usage:        0 bytes
  3897 ;; Hardware stack levels used: 1
  3898 ;; Hardware stack levels required when called: 7
  3899 ;; This function calls:
  3900 ;;		Nothing
  3901 ;; This function is called by:
  3902 ;;		_SYSTEM_Initialize
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906  0634                     _FVR_Initialize:	
  3907                           ;psect for function _FVR_Initialize
  3908                           
  3909                           
  3910                           ;mcc_generated_files/fvr.c: 61:     FVRCON = 0x82;
  3911                           
  3912                           ;incstack = 0
  3913                           ; Regs used in _FVR_Initialize: [wreg]
  3914  0634  3082               	movlw	130
  3915  0635  0022               	movlb	2	; select bank2
  3916  0636  0097               	movwf	23	;volatile
  3917  0637  0008               	return
  3918  0638                     __end_of_FVR_Initialize:
  3919                           
  3920                           	psect	text20
  3921  0600                     __ptext20:	
  3922 ;; *************** function _ADC_Initialize *****************
  3923 ;; Defined at:
  3924 ;;		line 67 in file "mcc_generated_files/adc.c"
  3925 ;; Parameters:    Size  Location     Type
  3926 ;;		None
  3927 ;; Auto vars:     Size  Location     Type
  3928 ;;		None
  3929 ;; Return value:  Size  Location     Type
  3930 ;;                  1    wreg      void 
  3931 ;; Registers used:
  3932 ;;		wreg, status,2
  3933 ;; Tracked objects:
  3934 ;;		On entry : 0/0
  3935 ;;		On exit  : 0/0
  3936 ;;		Unchanged: 0/0
  3937 ;; Data sizes:     COMMON   BANK0   BANK1
  3938 ;;      Params:         0       0       0
  3939 ;;      Locals:         0       0       0
  3940 ;;      Temps:          0       0       0
  3941 ;;      Totals:         0       0       0
  3942 ;;Total ram usage:        0 bytes
  3943 ;; Hardware stack levels used: 1
  3944 ;; Hardware stack levels required when called: 7
  3945 ;; This function calls:
  3946 ;;		Nothing
  3947 ;; This function is called by:
  3948 ;;		_SYSTEM_Initialize
  3949 ;; This function uses a non-reentrant model
  3950 ;;
  3951                           
  3952  0600                     _ADC_Initialize:	
  3953                           ;psect for function _ADC_Initialize
  3954                           
  3955                           
  3956                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0x40;
  3957                           
  3958                           ;incstack = 0
  3959                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  3960  0600  3040               	movlw	64
  3961  0601  0021               	movlb	1	; select bank1
  3962  0602  009E               	movwf	30	;volatile
  3963                           
  3964                           ;mcc_generated_files/adc.c: 75:     ADRESL = 0x00;
  3965  0603  019B               	clrf	27	;volatile
  3966                           
  3967                           ;mcc_generated_files/adc.c: 78:     ADRESH = 0x00;
  3968  0604  019C               	clrf	28	;volatile
  3969                           
  3970                           ;mcc_generated_files/adc.c: 81:     ADCON0 = 0x7D;
  3971  0605  307D               	movlw	125
  3972  0606  009D               	movwf	29	;volatile
  3973  0607  0008               	return
  3974  0608                     __end_of_ADC_Initialize:
  3975                           
  3976                           	psect	text21
  3977  03C1                     __ptext21:	
  3978 ;; *************** function _povorot *****************
  3979 ;; Defined at:
  3980 ;;		line 272 in file "main.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;		None
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;		None
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  1    wreg      void 
  3987 ;; Registers used:
  3988 ;;		wreg, status,2, status,0, pclath, cstack
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMMON   BANK0   BANK1
  3994 ;;      Params:         0       0       0
  3995 ;;      Locals:         0       0       0
  3996 ;;      Temps:          0       0       0
  3997 ;;      Totals:         0       0       0
  3998 ;;Total ram usage:        0 bytes
  3999 ;; Hardware stack levels used: 1
  4000 ;; Hardware stack levels required when called: 8
  4001 ;; This function calls:
  4002 ;;		_go_close
  4003 ;;		_go_open
  4004 ;; This function is called by:
  4005 ;;		_main
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009  03C1                     _povorot:	
  4010                           ;psect for function _povorot
  4011                           
  4012                           
  4013                           ;main.c: 273:     if ((time_s > ROTATION_TIME) &&
  4014                           
  4015                           ;incstack = 0
  4016                           ; Regs used in _povorot: [wreg+status,2+status,0+pclath+cstack]
  4017  03C1  3000               	movlw	0
  4018  03C2  0020               	movlb	0	; select bank0
  4019  03C3  025F               	subwf	_time_s+2,w
  4020  03C4  1D03               	skipz
  4021  03C5  2BCC               	goto	u1795
  4022  03C6  3000               	movlw	0
  4023  03C7  025E               	subwf	_time_s+1,w
  4024  03C8  1D03               	skipz
  4025  03C9  2BCC               	goto	u1795
  4026  03CA  303D               	movlw	61
  4027  03CB  025D               	subwf	_time_s,w
  4028  03CC                     u1795:
  4029  03CC  1803               	btfsc	3,0
  4030  03CD  197C               	btfsc	_FLAGS,2
  4031  03CE  2BD3               	goto	l2548
  4032  03CF  1C7C               	btfss	_FLAGS,0
  4033  03D0  1CFC               	btfss	_FLAGS,1
  4034  03D1  2BD3               	goto	l2548
  4035                           
  4036                           ;main.c: 277:             ) {;main.c: 278:         go_close();
  4037  03D2  24B4               	fcall	_go_close
  4038  03D3                     l2548:
  4039                           
  4040                           ;main.c: 280:     if ((time_s > (ROTATION_TIME + 10 + 1 * 2)) &&
  4041  03D3  3000               	movlw	0
  4042  03D4  0020               	movlb	0	; select bank0
  4043  03D5  025F               	subwf	_time_s+2,w
  4044  03D6  1D03               	skipz
  4045  03D7  2BDE               	goto	u1835
  4046  03D8  3000               	movlw	0
  4047  03D9  025E               	subwf	_time_s+1,w
  4048  03DA  1D03               	skipz
  4049  03DB  2BDE               	goto	u1835
  4050  03DC  3049               	movlw	73
  4051  03DD  025D               	subwf	_time_s,w
  4052  03DE                     u1835:
  4053  03DE  1C03               	skipc
  4054  03DF  0008               	return
  4055  03E0  1D7C               	btfss	_FLAGS,2
  4056  03E1  0008               	return
  4057  03E2  187C               	btfsc	_FLAGS,0
  4058  03E3  0008               	return
  4059  03E4  1CFC               	btfss	_FLAGS,1
  4060  03E5  0008               	return
  4061                           
  4062                           ;main.c: 284:             ) {;main.c: 285:         go_open();
  4063  03E6  25DB               	fcall	_go_open
  4064                           
  4065                           ;main.c: 286:         time_s = 0;
  4066  03E7  3000               	movlw	0
  4067  03E8  0020               	movlb	0	; select bank0
  4068  03E9  00DD               	movwf	_time_s
  4069  03EA  3000               	movlw	0
  4070  03EB  00DE               	movwf	_time_s+1
  4071  03EC  3000               	movlw	0
  4072  03ED  00DF               	movwf	_time_s+2
  4073  03EE  0008               	return
  4074  03EF                     __end_of_povorot:
  4075                           
  4076                           	psect	text22
  4077  018D                     __ptext22:	
  4078 ;; *************** function _get_voltage *****************
  4079 ;; Defined at:
  4080 ;;		line 331 in file "main.c"
  4081 ;; Parameters:    Size  Location     Type
  4082 ;;		None
  4083 ;; Auto vars:     Size  Location     Type
  4084 ;;  buf             1   18[BANK0 ] unsigned char 
  4085 ;;  q               1   19[BANK0 ] unsigned char 
  4086 ;;  q               1   20[BANK0 ] unsigned char 
  4087 ;;  res             2   16[BANK0 ] unsigned int 
  4088 ;; Return value:  Size  Location     Type
  4089 ;;                  1    wreg      void 
  4090 ;; Registers used:
  4091 ;;		wreg, status,2, status,0, pclath, cstack
  4092 ;; Tracked objects:
  4093 ;;		On entry : 0/0
  4094 ;;		On exit  : 0/0
  4095 ;;		Unchanged: 0/0
  4096 ;; Data sizes:     COMMON   BANK0   BANK1
  4097 ;;      Params:         0       0       0
  4098 ;;      Locals:         0       5       0
  4099 ;;      Temps:          0       2       0
  4100 ;;      Totals:         0       7       0
  4101 ;;Total ram usage:        7 bytes
  4102 ;; Hardware stack levels used: 1
  4103 ;; Hardware stack levels required when called: 9
  4104 ;; This function calls:
  4105 ;;		_ADC_GetConversion
  4106 ;;		_EEPROM_ReadByte
  4107 ;;		_EEPROM_WriteByte
  4108 ;;		_EEPROM_WriteShortLong
  4109 ;; This function is called by:
  4110 ;;		_main
  4111 ;; This function uses a non-reentrant model
  4112 ;;
  4113                           
  4114  018D                     _get_voltage:	
  4115                           ;psect for function _get_voltage
  4116                           
  4117                           
  4118                           ;main.c: 332:     unsigned res = ADC_GetConversion(channel_FVR);
  4119                           
  4120                           ;incstack = 0
  4121                           ; Regs used in _get_voltage: [wreg+status,2+status,0+pclath+cstack]
  4122  018D  301F               	movlw	31
  4123  018E  24D4               	fcall	_ADC_GetConversion
  4124  018F  0020               	movlb	0	; select bank0
  4125  0190  0821               	movf	?_ADC_GetConversion+1,w
  4126  0191  00B1               	movwf	get_voltage@res+1
  4127  0192  0820               	movf	?_ADC_GetConversion,w
  4128  0193  00B0               	movwf	get_voltage@res
  4129                           
  4130                           ;main.c: 333:     if (res > 46200) {
  4131  0194  30B4               	movlw	180
  4132  0195  0231               	subwf	get_voltage@res+1,w
  4133  0196  3079               	movlw	121
  4134  0197  1903               	skipnz
  4135  0198  0230               	subwf	get_voltage@res,w
  4136  0199  1C03               	skipc
  4137  019A  0008               	return
  4138                           
  4139                           ;main.c: 334:         for (char q = 0; q < 0x10; q++) {
  4140  019B  01B4               	clrf	get_voltage@q
  4141  019C                     l2614:
  4142                           
  4143                           ;main.c: 335:             char buf = EEPROM_ReadByte(q);
  4144  019C  0834               	movf	get_voltage@q,w
  4145  019D  2540               	fcall	_EEPROM_ReadByte
  4146  019E  0020               	movlb	0	; select bank0
  4147  019F  00AE               	movwf	??_get_voltage
  4148  01A0  082E               	movf	??_get_voltage,w
  4149  01A1  00B2               	movwf	get_voltage@buf
  4150                           
  4151                           ;main.c: 336:             if (buf != START_EEPROM_ADR) EEPROM_WriteByte(q, START_EEPROM_
      +                          ADR);
  4152  01A2  0832               	movf	get_voltage@buf,w
  4153  01A3  0667               	xorwf	_START_EEPROM_ADR,w
  4154  01A4  1903               	skipnz
  4155  01A5  29AC               	goto	l2620
  4156  01A6  0867               	movf	_START_EEPROM_ADR,w
  4157  01A7  00AE               	movwf	??_get_voltage
  4158  01A8  082E               	movf	??_get_voltage,w
  4159  01A9  00A0               	movwf	EEPROM_WriteByte@dt
  4160  01AA  0834               	movf	get_voltage@q,w
  4161  01AB  2419               	fcall	_EEPROM_WriteByte
  4162  01AC                     l2620:
  4163                           
  4164                           ;main.c: 337:         }
  4165  01AC  3001               	movlw	1
  4166  01AD  0020               	movlb	0	; select bank0
  4167  01AE  00AE               	movwf	??_get_voltage
  4168  01AF  082E               	movf	??_get_voltage,w
  4169  01B0  07B4               	addwf	get_voltage@q,f
  4170  01B1  3010               	movlw	16
  4171  01B2  0234               	subwf	get_voltage@q,w
  4172  01B3  1C03               	skipc
  4173  01B4  299C               	goto	l2614
  4174                           
  4175                           ;main.c: 338:         for (char q = START_EEPROM_ADR; q < START_EEPROM_ADR + 16; q += 4)
      +                           {
  4176  01B5  0867               	movf	_START_EEPROM_ADR,w
  4177  01B6  00AE               	movwf	??_get_voltage
  4178  01B7  082E               	movf	??_get_voltage,w
  4179  01B8  00B3               	movwf	get_voltage@q_804
  4180  01B9                     l2630:
  4181  01B9  0867               	movf	_START_EEPROM_ADR,w
  4182  01BA  3E10               	addlw	16
  4183  01BB  00AE               	movwf	??_get_voltage
  4184  01BC  3000               	movlw	0
  4185  01BD  1803               	skipnc
  4186  01BE  3001               	movlw	1
  4187  01BF  00AF               	movwf	??_get_voltage+1
  4188  01C0  082F               	movf	??_get_voltage+1,w
  4189  01C1  3A80               	xorlw	128
  4190  01C2  3C80               	sublw	128
  4191  01C3  1D03               	skipz
  4192  01C4  29C7               	goto	u2045
  4193  01C5  082E               	movf	??_get_voltage,w
  4194  01C6  0233               	subwf	get_voltage@q_804,w
  4195  01C7                     u2045:
  4196  01C7  1803               	btfsc	3,0
  4197  01C8  0008               	return
  4198                           
  4199                           ;main.c: 339:             EEPROM_WriteShortLong(q, time_s);
  4200  01C9  0020               	movlb	0	; select bank0
  4201  01CA  085D               	movf	_time_s,w
  4202  01CB  00A5               	movwf	EEPROM_WriteShortLong@ucData
  4203  01CC  085E               	movf	_time_s+1,w
  4204  01CD  00A6               	movwf	EEPROM_WriteShortLong@ucData+1
  4205  01CE  085F               	movf	_time_s+2,w
  4206  01CF  00A7               	movwf	EEPROM_WriteShortLong@ucData+2
  4207  01D0  0833               	movf	get_voltage@q_804,w
  4208  01D1  2251               	fcall	_EEPROM_WriteShortLong
  4209                           
  4210                           ;main.c: 340:         }
  4211  01D2  3004               	movlw	4
  4212  01D3  0020               	movlb	0	; select bank0
  4213  01D4  00AE               	movwf	??_get_voltage
  4214  01D5  082E               	movf	??_get_voltage,w
  4215  01D6  07B3               	addwf	get_voltage@q_804,f
  4216  01D7  29B9               	goto	l2630
  4217  01D8                     __end_of_get_voltage:
  4218                           
  4219                           	psect	text23
  4220  0251                     __ptext23:	
  4221 ;; *************** function _EEPROM_WriteShortLong *****************
  4222 ;; Defined at:
  4223 ;;		line 40 in file "eeprom.c"
  4224 ;; Parameters:    Size  Location     Type
  4225 ;;  addr            1    wreg     unsigned char 
  4226 ;;  ucData          3    5[BANK0 ] unsigned um
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;  addr            1   13[BANK0 ] unsigned char 
  4229 ;;  dt              1   12[BANK0 ] unsigned char 
  4230 ;; Return value:  Size  Location     Type
  4231 ;;                  1    wreg      void 
  4232 ;; Registers used:
  4233 ;;		wreg, status,2, status,0, pclath, cstack
  4234 ;; Tracked objects:
  4235 ;;		On entry : 0/0
  4236 ;;		On exit  : 0/0
  4237 ;;		Unchanged: 0/0
  4238 ;; Data sizes:     COMMON   BANK0   BANK1
  4239 ;;      Params:         0       3       0
  4240 ;;      Locals:         0       2       0
  4241 ;;      Temps:          0       4       0
  4242 ;;      Totals:         0       9       0
  4243 ;;Total ram usage:        9 bytes
  4244 ;; Hardware stack levels used: 1
  4245 ;; Hardware stack levels required when called: 8
  4246 ;; This function calls:
  4247 ;;		_EEPROM_WriteByte
  4248 ;; This function is called by:
  4249 ;;		_get_voltage
  4250 ;; This function uses a non-reentrant model
  4251 ;;
  4252                           
  4253  0251                     _EEPROM_WriteShortLong:	
  4254                           ;psect for function _EEPROM_WriteShortLong
  4255                           
  4256                           
  4257                           ;incstack = 0
  4258                           ; Regs used in _EEPROM_WriteShortLong: [wreg+status,2+status,0+pclath+cstack]
  4259                           ;EEPROM_WriteShortLong@addr stored from wreg
  4260  0251  0020               	movlb	0	; select bank0
  4261  0252  00AD               	movwf	EEPROM_WriteShortLong@addr
  4262                           
  4263                           ;eeprom.c: 41:     EEPROM_WriteByte(addr, (unsigned char) ucData);
  4264  0253  0825               	movf	EEPROM_WriteShortLong@ucData,w
  4265  0254  00A8               	movwf	??_EEPROM_WriteShortLong
  4266  0255  0828               	movf	??_EEPROM_WriteShortLong,w
  4267  0256  00A0               	movwf	EEPROM_WriteByte@dt
  4268  0257  082D               	movf	EEPROM_WriteShortLong@addr,w
  4269  0258  2419               	fcall	_EEPROM_WriteByte
  4270                           
  4271                           ;eeprom.c: 42:      char dt = ucData >> 8;
  4272  0259  0020               	movlb	0	; select bank0
  4273  025A  0825               	movf	EEPROM_WriteShortLong@ucData,w
  4274  025B  00A8               	movwf	??_EEPROM_WriteShortLong
  4275  025C  0826               	movf	EEPROM_WriteShortLong@ucData+1,w
  4276  025D  00A9               	movwf	??_EEPROM_WriteShortLong+1
  4277  025E  0827               	movf	EEPROM_WriteShortLong@ucData+2,w
  4278  025F  00AA               	movwf	??_EEPROM_WriteShortLong+2
  4279  0260  3008               	movlw	8
  4280  0261                     u1695:
  4281  0261  36AA               	lsrf	??_EEPROM_WriteShortLong+2,f
  4282  0262  0CA9               	rrf	??_EEPROM_WriteShortLong+1,f
  4283  0263  0CA8               	rrf	??_EEPROM_WriteShortLong,f
  4284  0264  0B89               	decfsz	9,f
  4285  0265  2A61               	goto	u1695
  4286  0266  0828               	movf	??_EEPROM_WriteShortLong,w
  4287  0267  00AB               	movwf	??_EEPROM_WriteShortLong+3
  4288  0268  082B               	movf	??_EEPROM_WriteShortLong+3,w
  4289  0269  00AC               	movwf	EEPROM_WriteShortLong@dt
  4290                           
  4291                           ;eeprom.c: 43:     EEPROM_WriteByte(addr + 1, dt);
  4292  026A  082C               	movf	EEPROM_WriteShortLong@dt,w
  4293  026B  00A8               	movwf	??_EEPROM_WriteShortLong
  4294  026C  0828               	movf	??_EEPROM_WriteShortLong,w
  4295  026D  00A0               	movwf	EEPROM_WriteByte@dt
  4296  026E  082D               	movf	EEPROM_WriteShortLong@addr,w
  4297  026F  3E01               	addlw	1
  4298  0270  2419               	fcall	_EEPROM_WriteByte
  4299                           
  4300                           ;eeprom.c: 44:     dt = ucData >> 16;
  4301  0271  0020               	movlb	0	; select bank0
  4302  0272  0825               	movf	EEPROM_WriteShortLong@ucData,w
  4303  0273  00A8               	movwf	??_EEPROM_WriteShortLong
  4304  0274  0826               	movf	EEPROM_WriteShortLong@ucData+1,w
  4305  0275  00A9               	movwf	??_EEPROM_WriteShortLong+1
  4306  0276  0827               	movf	EEPROM_WriteShortLong@ucData+2,w
  4307  0277  00AA               	movwf	??_EEPROM_WriteShortLong+2
  4308  0278  3010               	movlw	16
  4309  0279                     u1705:
  4310  0279  36AA               	lsrf	??_EEPROM_WriteShortLong+2,f
  4311  027A  0CA9               	rrf	??_EEPROM_WriteShortLong+1,f
  4312  027B  0CA8               	rrf	??_EEPROM_WriteShortLong,f
  4313  027C  0B89               	decfsz	9,f
  4314  027D  2A79               	goto	u1705
  4315  027E  0828               	movf	??_EEPROM_WriteShortLong,w
  4316  027F  00AB               	movwf	??_EEPROM_WriteShortLong+3
  4317  0280  082B               	movf	??_EEPROM_WriteShortLong+3,w
  4318  0281  00AC               	movwf	EEPROM_WriteShortLong@dt
  4319                           
  4320                           ;eeprom.c: 45:     EEPROM_WriteByte(addr + 2, dt);
  4321  0282  082C               	movf	EEPROM_WriteShortLong@dt,w
  4322  0283  00A8               	movwf	??_EEPROM_WriteShortLong
  4323  0284  0828               	movf	??_EEPROM_WriteShortLong,w
  4324  0285  00A0               	movwf	EEPROM_WriteByte@dt
  4325  0286  082D               	movf	EEPROM_WriteShortLong@addr,w
  4326  0287  3E02               	addlw	2
  4327  0288  2419               	fcall	_EEPROM_WriteByte
  4328  0289  0008               	return
  4329  028A                     __end_of_EEPROM_WriteShortLong:
  4330                           
  4331                           	psect	text24
  4332  0419                     __ptext24:	
  4333 ;; *************** function _EEPROM_WriteByte *****************
  4334 ;; Defined at:
  4335 ;;		line 6 in file "eeprom.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;  addr            1    wreg     unsigned char 
  4338 ;;  dt              1    0[BANK0 ] unsigned char 
  4339 ;; Auto vars:     Size  Location     Type
  4340 ;;  addr            1    3[BANK0 ] unsigned char 
  4341 ;;  status          1    4[BANK0 ] unsigned char 
  4342 ;; Return value:  Size  Location     Type
  4343 ;;                  1    wreg      void 
  4344 ;; Registers used:
  4345 ;;		wreg, status,2
  4346 ;; Tracked objects:
  4347 ;;		On entry : 0/0
  4348 ;;		On exit  : 0/0
  4349 ;;		Unchanged: 0/0
  4350 ;; Data sizes:     COMMON   BANK0   BANK1
  4351 ;;      Params:         0       1       0
  4352 ;;      Locals:         0       2       0
  4353 ;;      Temps:          0       2       0
  4354 ;;      Totals:         0       5       0
  4355 ;;Total ram usage:        5 bytes
  4356 ;; Hardware stack levels used: 1
  4357 ;; Hardware stack levels required when called: 7
  4358 ;; This function calls:
  4359 ;;		Nothing
  4360 ;; This function is called by:
  4361 ;;		_get_voltage
  4362 ;;		_EEPROM_WriteShortLong
  4363 ;;		_EEPROM_WriteWord
  4364 ;;		_EEPROM_WriteString
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368  0419                     _EEPROM_WriteByte:	
  4369                           ;psect for function _EEPROM_WriteByte
  4370                           
  4371                           
  4372                           ;incstack = 0
  4373                           ; Regs used in _EEPROM_WriteByte: [wreg+status,2]
  4374                           ;EEPROM_WriteByte@addr stored from wreg
  4375  0419  0020               	movlb	0	; select bank0
  4376  041A  00A3               	movwf	EEPROM_WriteByte@addr
  4377  041B                     l561:	
  4378                           ;eeprom.c: 7:     unsigned char status;;eeprom.c: 8:     while (WR);
  4379                           
  4380  041B  0023               	movlb	3	; select bank3
  4381  041C  1895               	btfsc	21,1	;volsfr
  4382  041D  2C1B               	goto	l561
  4383                           
  4384                           ;eeprom.c: 9:     status = GIE;
  4385  041E  3000               	movlw	0
  4386  041F  1B8B               	btfsc	11,7	;volatile
  4387  0420  3001               	movlw	1
  4388  0421  0020               	movlb	0	; select bank0
  4389  0422  00A4               	movwf	EEPROM_WriteByte@status
  4390                           
  4391                           ;eeprom.c: 10:     GIE = 0;
  4392  0423  138B               	bcf	11,7	;volatile
  4393                           
  4394                           ;eeprom.c: 11:     EEADR = addr;
  4395  0424  0823               	movf	EEPROM_WriteByte@addr,w
  4396  0425  00A1               	movwf	??_EEPROM_WriteByte
  4397  0426  01A2               	clrf	??_EEPROM_WriteByte+1
  4398  0427  0821               	movf	??_EEPROM_WriteByte,w
  4399  0428  0023               	movlb	3	; select bank3
  4400  0429  0091               	movwf	17	;volatile
  4401  042A  0020               	movlb	0	; select bank0
  4402  042B  0822               	movf	??_EEPROM_WriteByte+1,w
  4403  042C  0023               	movlb	3	; select bank3
  4404  042D  0092               	movwf	18	;volatile
  4405                           
  4406                           ;eeprom.c: 12:     EEDATA = dt;
  4407  042E  0020               	movlb	0	; select bank0
  4408  042F  0820               	movf	EEPROM_WriteByte@dt,w
  4409  0430  0023               	movlb	3	; select bank3
  4410  0431  0093               	movwf	19	;volatile
  4411                           
  4412                           ;eeprom.c: 13:     WREN = 1;
  4413  0432  1515               	bsf	21,2	;volsfr
  4414                           
  4415                           ;eeprom.c: 14:     EECON2 = 0x55;
  4416  0433  3055               	movlw	85
  4417  0434  0096               	movwf	22	;volsfr
  4418                           
  4419                           ;eeprom.c: 15:     EECON2 = 0xAA;
  4420  0435  30AA               	movlw	170
  4421  0436  0096               	movwf	22	;volsfr
  4422                           
  4423                           ;eeprom.c: 16:     WR = 1;
  4424  0437  1495               	bsf	21,1	;volsfr
  4425                           
  4426                           ;eeprom.c: 17:     GIE = status;
  4427  0438  0020               	movlb	0	; select bank0
  4428  0439  1C24               	btfss	EEPROM_WriteByte@status,0
  4429  043A  2C3D               	goto	u1340
  4430  043B  178B               	bsf	11,7	;volatile
  4431  043C  2C3E               	goto	l2206
  4432  043D                     u1340:
  4433  043D  138B               	bcf	11,7	;volatile
  4434  043E                     l2206:
  4435                           
  4436                           ;eeprom.c: 18:     WREN = 0;
  4437  043E  0023               	movlb	3	; select bank3
  4438  043F  1115               	bcf	21,2	;volsfr
  4439  0440  0008               	return
  4440  0441                     __end_of_EEPROM_WriteByte:
  4441                           
  4442                           	psect	text25
  4443  0540                     __ptext25:	
  4444 ;; *************** function _EEPROM_ReadByte *****************
  4445 ;; Defined at:
  4446 ;;		line 21 in file "eeprom.c"
  4447 ;; Parameters:    Size  Location     Type
  4448 ;;  addr            1    wreg     unsigned char 
  4449 ;; Auto vars:     Size  Location     Type
  4450 ;;  addr            1    2[BANK0 ] unsigned char 
  4451 ;; Return value:  Size  Location     Type
  4452 ;;                  1    wreg      unsigned char 
  4453 ;; Registers used:
  4454 ;;		wreg
  4455 ;; Tracked objects:
  4456 ;;		On entry : 0/0
  4457 ;;		On exit  : 0/0
  4458 ;;		Unchanged: 0/0
  4459 ;; Data sizes:     COMMON   BANK0   BANK1
  4460 ;;      Params:         0       0       0
  4461 ;;      Locals:         0       1       0
  4462 ;;      Temps:          0       2       0
  4463 ;;      Totals:         0       3       0
  4464 ;;Total ram usage:        3 bytes
  4465 ;; Hardware stack levels used: 1
  4466 ;; Hardware stack levels required when called: 7
  4467 ;; This function calls:
  4468 ;;		Nothing
  4469 ;; This function is called by:
  4470 ;;		_get_voltage
  4471 ;;		_get_adr
  4472 ;;		_EEPROM_ReadShortLong
  4473 ;;		_EEPROM_ReadWord
  4474 ;;		_EEPROM_ReadString
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478  0540                     _EEPROM_ReadByte:	
  4479                           ;psect for function _EEPROM_ReadByte
  4480                           
  4481                           
  4482                           ;incstack = 0
  4483                           ; Regs used in _EEPROM_ReadByte: [wreg]
  4484                           ;EEPROM_ReadByte@addr stored from wreg
  4485  0540  0020               	movlb	0	; select bank0
  4486  0541  00A2               	movwf	EEPROM_ReadByte@addr
  4487  0542                     l567:	
  4488                           ;eeprom.c: 22:     while (RD || WR);
  4489                           
  4490  0542  0023               	movlb	3	; select bank3
  4491  0543  1815               	btfsc	21,0	;volsfr
  4492  0544  2D42               	goto	l567
  4493  0545  1895               	btfsc	21,1	;volsfr
  4494  0546  2D42               	goto	l567
  4495                           
  4496                           ;eeprom.c: 23:     EEADR = addr;
  4497  0547  0020               	movlb	0	; select bank0
  4498  0548  0822               	movf	EEPROM_ReadByte@addr,w
  4499  0549  00A0               	movwf	??_EEPROM_ReadByte
  4500  054A  01A1               	clrf	??_EEPROM_ReadByte+1
  4501  054B  0820               	movf	??_EEPROM_ReadByte,w
  4502  054C  0023               	movlb	3	; select bank3
  4503  054D  0091               	movwf	17	;volatile
  4504  054E  0020               	movlb	0	; select bank0
  4505  054F  0821               	movf	??_EEPROM_ReadByte+1,w
  4506  0550  0023               	movlb	3	; select bank3
  4507  0551  0092               	movwf	18	;volatile
  4508                           
  4509                           ;eeprom.c: 24:     RD = 1;
  4510  0552  1415               	bsf	21,0	;volsfr
  4511                           
  4512                           ;eeprom.c: 25:     return EEDATA;
  4513  0553  0813               	movf	19,w	;volatile
  4514  0554  0008               	return
  4515  0555                     __end_of_EEPROM_ReadByte:
  4516                           
  4517                           	psect	text26
  4518  0392                     __ptext26:	
  4519 ;; *************** function _get_jump *****************
  4520 ;; Defined at:
  4521 ;;		line 186 in file "main.c"
  4522 ;; Parameters:    Size  Location     Type
  4523 ;;		None
  4524 ;; Auto vars:     Size  Location     Type
  4525 ;;  res             2    5[BANK0 ] unsigned int 
  4526 ;; Return value:  Size  Location     Type
  4527 ;;                  1    wreg      void 
  4528 ;; Registers used:
  4529 ;;		wreg, status,2, status,0, pclath, cstack
  4530 ;; Tracked objects:
  4531 ;;		On entry : 0/0
  4532 ;;		On exit  : 0/0
  4533 ;;		Unchanged: 0/0
  4534 ;; Data sizes:     COMMON   BANK0   BANK1
  4535 ;;      Params:         0       0       0
  4536 ;;      Locals:         0       2       0
  4537 ;;      Temps:          0       1       0
  4538 ;;      Totals:         0       3       0
  4539 ;;Total ram usage:        3 bytes
  4540 ;; Hardware stack levels used: 1
  4541 ;; Hardware stack levels required when called: 8
  4542 ;; This function calls:
  4543 ;;		_ADC_GetConversion
  4544 ;; This function is called by:
  4545 ;;		_main
  4546 ;; This function uses a non-reentrant model
  4547 ;;
  4548                           
  4549  0392                     _get_jump:	
  4550                           ;psect for function _get_jump
  4551                           
  4552                           
  4553                           ;incstack = 0
  4554                           ; Regs used in _get_jump: [wreg+status,2+status,0+pclath+cstack]
  4555                           ;main.c: 188:     static signed char jump_counter;;main.c: 189:     do { ANSELAbits.ANSA
      +                          1 = 1; } while(0);
  4556  0392  0023               	movlb	3	; select bank3
  4557  0393  148C               	bsf	12,1	;volatile
  4558                           
  4559                           ;main.c: 190:     unsigned res = ADC_GetConversion(PIN_JUMP_STATE);
  4560  0394  3001               	movlw	1
  4561  0395  24D4               	fcall	_ADC_GetConversion
  4562  0396  0020               	movlb	0	; select bank0
  4563  0397  0821               	movf	?_ADC_GetConversion+1,w
  4564  0398  00A6               	movwf	get_jump@res+1
  4565  0399  0820               	movf	?_ADC_GetConversion,w
  4566  039A  00A5               	movwf	get_jump@res
  4567  039B  0023               	movlb	3	; select bank3
  4568  039C  108C               	bcf	12,1	;volatile
  4569                           
  4570                           ;main.c: 194:     if (res < 2000) jump_counter--;
  4571  039D  3007               	movlw	7
  4572  039E  0020               	movlb	0	; select bank0
  4573  039F  0226               	subwf	get_jump@res+1,w
  4574  03A0  30D0               	movlw	208
  4575  03A1  1903               	skipnz
  4576  03A2  0225               	subwf	get_jump@res,w
  4577  03A3  1803               	skipnc
  4578  03A4  2BA7               	goto	l2522
  4579  03A5  30FF               	movlw	255
  4580  03A6  2BA8               	goto	L3
  4581  03A7                     l2522:
  4582  03A7  3001               	movlw	1
  4583  03A8                     L3:
  4584  03A8  00A4               	movwf	??_get_jump
  4585  03A9  0824               	movf	??_get_jump,w
  4586  03AA  07E3               	addwf	get_jump@jump_counter,f
  4587                           
  4588                           ;main.c: 197:     if (jump_counter > 10) {
  4589  03AB  0863               	movf	get_jump@jump_counter,w
  4590  03AC  3A80               	xorlw	128
  4591  03AD  3E75               	addlw	-139
  4592  03AE  1C03               	skipc
  4593  03AF  2BB6               	goto	l2530
  4594                           
  4595                           ;main.c: 198:         jump_counter = 10;
  4596  03B0  300A               	movlw	10
  4597  03B1  00A4               	movwf	??_get_jump
  4598  03B2  0824               	movf	??_get_jump,w
  4599  03B3  00E3               	movwf	get_jump@jump_counter
  4600                           
  4601                           ;main.c: 199:         FLAGS.bits._JUMP_CONNECTED = 0;
  4602  03B4  127C               	bcf	_FLAGS,4
  4603                           
  4604                           ;main.c: 200:     } else if (jump_counter<-10) {
  4605  03B5  0008               	return
  4606  03B6                     l2530:
  4607  03B6  0863               	movf	get_jump@jump_counter,w
  4608  03B7  3A80               	xorlw	128
  4609  03B8  3E8A               	addlw	138
  4610  03B9  1803               	skipnc
  4611  03BA  0008               	return
  4612                           
  4613                           ;main.c: 201:         jump_counter = -10;
  4614  03BB  30F6               	movlw	246
  4615  03BC  00A4               	movwf	??_get_jump
  4616  03BD  0824               	movf	??_get_jump,w
  4617  03BE  00E3               	movwf	get_jump@jump_counter
  4618                           
  4619                           ;main.c: 202:         FLAGS.bits._JUMP_CONNECTED = 1;
  4620  03BF  167C               	bsf	_FLAGS,4
  4621  03C0  0008               	return
  4622  03C1                     __end_of_get_jump:
  4623                           
  4624                           	psect	text27
  4625  032C                     __ptext27:	
  4626 ;; *************** function _get_fun *****************
  4627 ;; Defined at:
  4628 ;;		line 139 in file "main.c"
  4629 ;; Parameters:    Size  Location     Type
  4630 ;;		None
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;  res             2    5[BANK0 ] unsigned int 
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  1    wreg      void 
  4635 ;; Registers used:
  4636 ;;		wreg, status,2, status,0, pclath, cstack
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMMON   BANK0   BANK1
  4642 ;;      Params:         0       0       0
  4643 ;;      Locals:         0       2       0
  4644 ;;      Temps:          0       1       0
  4645 ;;      Totals:         0       3       0
  4646 ;;Total ram usage:        3 bytes
  4647 ;; Hardware stack levels used: 1
  4648 ;; Hardware stack levels required when called: 8
  4649 ;; This function calls:
  4650 ;;		_ADC_GetConversion
  4651 ;; This function is called by:
  4652 ;;		_main
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656  032C                     _get_fun:	
  4657                           ;psect for function _get_fun
  4658                           
  4659                           
  4660                           ;incstack = 0
  4661                           ; Regs used in _get_fun: [wreg+status,2+status,0+pclath+cstack]
  4662                           ;main.c: 141:     static signed char fun_counter;;main.c: 142:     do { LATCbits.LATC1 =
      +                           1; } while(0);
  4663  032C  0022               	movlb	2	; select bank2
  4664  032D  148E               	bsf	14,1	;volatile
  4665                           
  4666                           ;main.c: 143:     do { ANSELCbits.ANSC2 = 1; } while(0);
  4667  032E  0023               	movlb	3	; select bank3
  4668  032F  150E               	bsf	14,2	;volatile
  4669                           
  4670                           ;main.c: 144:     unsigned res = ADC_GetConversion(PIN_FUN_STATE);
  4671  0330  3006               	movlw	6
  4672  0331  24D4               	fcall	_ADC_GetConversion
  4673  0332  0020               	movlb	0	; select bank0
  4674  0333  0821               	movf	?_ADC_GetConversion+1,w
  4675  0334  00A6               	movwf	get_fun@res+1
  4676  0335  0820               	movf	?_ADC_GetConversion,w
  4677  0336  00A5               	movwf	get_fun@res
  4678  0337  0023               	movlb	3	; select bank3
  4679  0338  110E               	bcf	14,2	;volatile
  4680  0339  0022               	movlb	2	; select bank2
  4681  033A  108E               	bcf	14,1	;volatile
  4682                           
  4683                           ;main.c: 147:     if (res < 2000) fun_counter--;
  4684  033B  3007               	movlw	7
  4685  033C  0020               	movlb	0	; select bank0
  4686  033D  0226               	subwf	get_fun@res+1,w
  4687  033E  30D0               	movlw	208
  4688  033F  1903               	skipnz
  4689  0340  0225               	subwf	get_fun@res,w
  4690  0341  1803               	skipnc
  4691  0342  2B45               	goto	l2498
  4692  0343  30FF               	movlw	255
  4693  0344  2B46               	goto	L4
  4694  0345                     l2498:
  4695  0345  3001               	movlw	1
  4696  0346                     L4:
  4697  0346  00A4               	movwf	??_get_fun
  4698  0347  0824               	movf	??_get_fun,w
  4699  0348  07E5               	addwf	get_fun@fun_counter,f
  4700                           
  4701                           ;main.c: 150:     if (fun_counter > 10) {
  4702  0349  0865               	movf	get_fun@fun_counter,w
  4703  034A  3A80               	xorlw	128
  4704  034B  3E75               	addlw	-139
  4705  034C  1C03               	skipc
  4706  034D  2B54               	goto	l2506
  4707                           
  4708                           ;main.c: 151:         fun_counter = 10;
  4709  034E  300A               	movlw	10
  4710  034F  00A4               	movwf	??_get_fun
  4711  0350  0824               	movf	??_get_fun,w
  4712  0351  00E5               	movwf	get_fun@fun_counter
  4713                           
  4714                           ;main.c: 152:         FLAGS.bits._FUN_CONNECTED = 0;
  4715  0352  11FC               	bcf	_FLAGS,3
  4716                           
  4717                           ;main.c: 153:     } else if (fun_counter<-10) {
  4718  0353  0008               	return
  4719  0354                     l2506:
  4720  0354  0865               	movf	get_fun@fun_counter,w
  4721  0355  3A80               	xorlw	128
  4722  0356  3E8A               	addlw	138
  4723  0357  1803               	skipnc
  4724  0358  0008               	return
  4725                           
  4726                           ;main.c: 154:         fun_counter = -10;
  4727  0359  30F6               	movlw	246
  4728  035A  00A4               	movwf	??_get_fun
  4729  035B  0824               	movf	??_get_fun,w
  4730  035C  00E5               	movwf	get_fun@fun_counter
  4731                           
  4732                           ;main.c: 155:         FLAGS.bits._FUN_CONNECTED = 1;
  4733  035D  15FC               	bsf	_FLAGS,3
  4734  035E  0008               	return
  4735  035F                     __end_of_get_fun:
  4736                           
  4737                           	psect	text28
  4738  04D4                     __ptext28:	
  4739 ;; *************** function _ADC_GetConversion *****************
  4740 ;; Defined at:
  4741 ;;		line 112 in file "mcc_generated_files/adc.c"
  4742 ;; Parameters:    Size  Location     Type
  4743 ;;  channel         1    wreg     enum E2178
  4744 ;; Auto vars:     Size  Location     Type
  4745 ;;  channel         1    3[BANK0 ] enum E2178
  4746 ;; Return value:  Size  Location     Type
  4747 ;;                  2    0[BANK0 ] unsigned short 
  4748 ;; Registers used:
  4749 ;;		wreg, status,2, status,0
  4750 ;; Tracked objects:
  4751 ;;		On entry : 0/0
  4752 ;;		On exit  : 0/0
  4753 ;;		Unchanged: 0/0
  4754 ;; Data sizes:     COMMON   BANK0   BANK1
  4755 ;;      Params:         0       2       0
  4756 ;;      Locals:         0       1       0
  4757 ;;      Temps:          0       1       0
  4758 ;;      Totals:         0       4       0
  4759 ;;Total ram usage:        4 bytes
  4760 ;; Hardware stack levels used: 1
  4761 ;; Hardware stack levels required when called: 7
  4762 ;; This function calls:
  4763 ;;		Nothing
  4764 ;; This function is called by:
  4765 ;;		_get_fun
  4766 ;;		_get_fun_full
  4767 ;;		_get_jump
  4768 ;;		_get_jump_full
  4769 ;;		_get_voltage
  4770 ;; This function uses a non-reentrant model
  4771 ;;
  4772                           
  4773  04D4                     _ADC_GetConversion:	
  4774                           ;psect for function _ADC_GetConversion
  4775                           
  4776                           
  4777                           ;incstack = 0
  4778                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  4779                           ;ADC_GetConversion@channel stored from wreg
  4780  04D4  0020               	movlb	0	; select bank0
  4781  04D5  00A3               	movwf	ADC_GetConversion@channel
  4782                           
  4783                           ;mcc_generated_files/adc.c: 112: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 113: {;mcc_generated_files/adc.c: 115:     ADCON0bits.CHS = ch
      +                          annel;
  4784  04D6  0823               	movf	ADC_GetConversion@channel,w
  4785  04D7  00A2               	movwf	??_ADC_GetConversion
  4786  04D8  0DA2               	rlf	??_ADC_GetConversion,f
  4787  04D9  0DA2               	rlf	??_ADC_GetConversion,f
  4788  04DA  0021               	movlb	1	; select bank1
  4789  04DB  081D               	movf	29,w	;volatile
  4790  04DC  0020               	movlb	0	; select bank0
  4791  04DD  0622               	xorwf	??_ADC_GetConversion,w
  4792  04DE  3983               	andlw	-125
  4793  04DF  0622               	xorwf	??_ADC_GetConversion,w
  4794  04E0  0021               	movlb	1	; select bank1
  4795  04E1  009D               	movwf	29	;volatile
  4796                           
  4797                           ;mcc_generated_files/adc.c: 118:     ADCON0bits.ADON = 1;
  4798  04E2  141D               	bsf	29,0	;volatile
  4799                           
  4800                           ;mcc_generated_files/adc.c: 121:     _delay((unsigned long)((5)*(16000000/4000000.0)));
  4801  04E3  3006               	movlw	6
  4802  04E4                     u2157:
  4803  04E4  0B89               	decfsz	9,f
  4804  04E5  2CE4               	goto	u2157
  4805  04E6  3200               	nop2
  4806                           
  4807                           ;mcc_generated_files/adc.c: 124:     ADCON0bits.GO_nDONE = 1;
  4808  04E7  0021               	movlb	1	; select bank1
  4809  04E8  149D               	bsf	29,1	;volatile
  4810  04E9                     l63:	
  4811                           ;mcc_generated_files/adc.c: 128:     {;mcc_generated_files/adc.c: 129:     }
  4812                           
  4813                           
  4814                           ;mcc_generated_files/adc.c: 127:     while (ADCON0bits.GO_nDONE)
  4815  04E9  189D               	btfsc	29,1	;volatile
  4816  04EA  2CE9               	goto	l63
  4817                           
  4818                           ;mcc_generated_files/adc.c: 132:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  4819  04EB  081C               	movf	28,w	;volatile
  4820  04EC  0020               	movlb	0	; select bank0
  4821  04ED  00A1               	movwf	?_ADC_GetConversion+1
  4822  04EE  0021               	movlb	1	; select bank1
  4823  04EF  081B               	movf	27,w	;volatile
  4824  04F0  0020               	movlb	0	; select bank0
  4825  04F1  00A0               	movwf	?_ADC_GetConversion
  4826  04F2  0008               	return
  4827  04F3                     __end_of_ADC_GetConversion:
  4828                           
  4829                           	psect	text29
  4830  028A                     __ptext29:	
  4831 ;; *************** function _fun_work *****************
  4832 ;; Defined at:
  4833 ;;		line 291 in file "main.c"
  4834 ;; Parameters:    Size  Location     Type
  4835 ;;		None
  4836 ;; Auto vars:     Size  Location     Type
  4837 ;;		None
  4838 ;; Return value:  Size  Location     Type
  4839 ;;                  1    wreg      void 
  4840 ;; Registers used:
  4841 ;;		wreg, status,2, status,0, pclath, cstack
  4842 ;; Tracked objects:
  4843 ;;		On entry : 0/0
  4844 ;;		On exit  : 0/0
  4845 ;;		Unchanged: 0/0
  4846 ;; Data sizes:     COMMON   BANK0   BANK1
  4847 ;;      Params:         0       0       0
  4848 ;;      Locals:         0       0       0
  4849 ;;      Temps:          0       2       0
  4850 ;;      Totals:         0       2       0
  4851 ;;Total ram usage:        2 bytes
  4852 ;; Hardware stack levels used: 1
  4853 ;; Hardware stack levels required when called: 9
  4854 ;; This function calls:
  4855 ;;		_beep
  4856 ;;		_go_close
  4857 ;;		_go_close_alt
  4858 ;;		_go_open
  4859 ;;		_go_open_alt
  4860 ;; This function is called by:
  4861 ;;		_main
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865  028A                     _fun_work:	
  4866                           ;psect for function _fun_work
  4867                           
  4868                           
  4869                           ;main.c: 292:     {;main.c: 293:         if (FLAGS.bits._FUN_CONNECTED &&
  4870                           
  4871                           ;incstack = 0
  4872                           ; Regs used in _fun_work: [wreg+status,2+status,0+pclath+cstack]
  4873  028A  19FC               	btfsc	_FLAGS,3
  4874  028B  187C               	btfsc	_FLAGS,0
  4875  028C  2AA5               	goto	l2576
  4876  028D  197C               	btfsc	_FLAGS,2
  4877  028E  1AFC               	btfsc	_FLAGS,5
  4878  028F  2AA5               	goto	l2576
  4879                           
  4880                           ;main.c: 296:                 !FLAGS.bits.RELE_POW_WAIT) {;main.c: 297:             if (
      +                          FLAGS.bits.NORMAL_WORK_MODE) go_open();
  4881  0290  1CFC               	btfss	_FLAGS,1
  4882  0291  2A94               	goto	l2572
  4883  0292  25DB               	fcall	_go_open
  4884  0293  2A95               	goto	l2574
  4885  0294                     l2572:
  4886  0294  2621               	fcall	_go_open_alt
  4887  0295                     l2574:
  4888                           
  4889                           ;main.c: 300:             beep(500, 100, 40, 1);
  4890  0295  30F4               	movlw	244
  4891  0296  0020               	movlb	0	; select bank0
  4892  0297  00A0               	movwf	beep@delay
  4893  0298  3001               	movlw	1
  4894  0299  00A1               	movwf	beep@delay+1
  4895  029A  3064               	movlw	100
  4896  029B  00A2               	movwf	beep@pause
  4897  029C  3000               	movlw	0
  4898  029D  00A3               	movwf	beep@pause+1
  4899  029E  3028               	movlw	40
  4900  029F  00AA               	movwf	??_fun_work
  4901  02A0  082A               	movf	??_fun_work,w
  4902  02A1  00A4               	movwf	beep@time
  4903  02A2  01A5               	clrf	beep@count
  4904  02A3  0AA5               	incf	beep@count,f
  4905  02A4  2441               	fcall	_beep
  4906  02A5                     l2576:
  4907                           
  4908                           ;main.c: 302:         if (!FLAGS.bits._FUN_CONNECTED &&
  4909  02A5  19FC               	btfsc	_FLAGS,3
  4910  02A6  0008               	return
  4911  02A7  197C               	btfsc	_FLAGS,2
  4912  02A8  0008               	return
  4913  02A9  1AFC               	btfsc	_FLAGS,5
  4914  02AA  0008               	return
  4915                           
  4916                           ;main.c: 304:                 !FLAGS.bits.RELE_POW_WAIT) {;main.c: 305:             if (
      +                          FLAGS.bits.NORMAL_WORK_MODE) go_close();
  4917  02AB  1CFC               	btfss	_FLAGS,1
  4918  02AC  2AAF               	goto	l2586
  4919  02AD  24B4               	fcall	_go_close
  4920  02AE  2AB0               	goto	l2588
  4921  02AF                     l2586:
  4922  02AF  2626               	fcall	_go_close_alt
  4923  02B0                     l2588:
  4924                           
  4925                           ;main.c: 308:             beep(500, 100, 40, 2);
  4926  02B0  30F4               	movlw	244
  4927  02B1  0020               	movlb	0	; select bank0
  4928  02B2  00A0               	movwf	beep@delay
  4929  02B3  3001               	movlw	1
  4930  02B4  00A1               	movwf	beep@delay+1
  4931  02B5  3064               	movlw	100
  4932  02B6  00A2               	movwf	beep@pause
  4933  02B7  3000               	movlw	0
  4934  02B8  00A3               	movwf	beep@pause+1
  4935  02B9  3028               	movlw	40
  4936  02BA  00AA               	movwf	??_fun_work
  4937  02BB  082A               	movf	??_fun_work,w
  4938  02BC  00A4               	movwf	beep@time
  4939  02BD  3002               	movlw	2
  4940  02BE  00AB               	movwf	??_fun_work+1
  4941  02BF  082B               	movf	??_fun_work+1,w
  4942  02C0  00A5               	movwf	beep@count
  4943  02C1  2441               	fcall	_beep
  4944  02C2  0008               	return
  4945  02C3                     __end_of_fun_work:
  4946                           
  4947                           	psect	text30
  4948  0621                     __ptext30:	
  4949 ;; *************** function _go_open_alt *****************
  4950 ;; Defined at:
  4951 ;;		line 108 in file "main.c"
  4952 ;; Parameters:    Size  Location     Type
  4953 ;;		None
  4954 ;; Auto vars:     Size  Location     Type
  4955 ;;		None
  4956 ;; Return value:  Size  Location     Type
  4957 ;;                  1    wreg      void 
  4958 ;; Registers used:
  4959 ;;		None
  4960 ;; Tracked objects:
  4961 ;;		On entry : 0/0
  4962 ;;		On exit  : 0/0
  4963 ;;		Unchanged: 0/0
  4964 ;; Data sizes:     COMMON   BANK0   BANK1
  4965 ;;      Params:         0       0       0
  4966 ;;      Locals:         0       0       0
  4967 ;;      Temps:          0       0       0
  4968 ;;      Totals:         0       0       0
  4969 ;;Total ram usage:        0 bytes
  4970 ;; Hardware stack levels used: 1
  4971 ;; Hardware stack levels required when called: 7
  4972 ;; This function calls:
  4973 ;;		Nothing
  4974 ;; This function is called by:
  4975 ;;		_fun_work
  4976 ;; This function uses a non-reentrant model
  4977 ;;
  4978                           
  4979  0621                     _go_open_alt:	
  4980                           ;psect for function _go_open_alt
  4981                           
  4982                           
  4983                           ;main.c: 109:     FLAGS.bits.CLOSED = 0;
  4984                           
  4985                           ;incstack = 0
  4986                           ; Regs used in _go_open_alt: []
  4987  0621  117C               	bcf	_FLAGS,2
  4988                           
  4989                           ;main.c: 110:     do { LATCbits.LATC4 = 0; } while(0);
  4990  0622  0022               	movlb	2	; select bank2
  4991  0623  120E               	bcf	14,4	;volatile
  4992                           
  4993                           ;main.c: 111:     do { LATCbits.LATC5 = 0; } while(0);
  4994  0624  128E               	bcf	14,5	;volatile
  4995  0625  0008               	return
  4996  0626                     __end_of_go_open_alt:
  4997                           
  4998                           	psect	text31
  4999  05DB                     __ptext31:	
  5000 ;; *************** function _go_open *****************
  5001 ;; Defined at:
  5002 ;;		line 94 in file "main.c"
  5003 ;; Parameters:    Size  Location     Type
  5004 ;;		None
  5005 ;; Auto vars:     Size  Location     Type
  5006 ;;		None
  5007 ;; Return value:  Size  Location     Type
  5008 ;;                  1    wreg      void 
  5009 ;; Registers used:
  5010 ;;		wreg
  5011 ;; Tracked objects:
  5012 ;;		On entry : 0/0
  5013 ;;		On exit  : 0/0
  5014 ;;		Unchanged: 0/0
  5015 ;; Data sizes:     COMMON   BANK0   BANK1
  5016 ;;      Params:         0       0       0
  5017 ;;      Locals:         0       0       0
  5018 ;;      Temps:          0       1       0
  5019 ;;      Totals:         0       1       0
  5020 ;;Total ram usage:        1 bytes
  5021 ;; Hardware stack levels used: 1
  5022 ;; Hardware stack levels required when called: 7
  5023 ;; This function calls:
  5024 ;;		Nothing
  5025 ;; This function is called by:
  5026 ;;		_povorot
  5027 ;;		_fun_work
  5028 ;; This function uses a non-reentrant model
  5029 ;;
  5030                           
  5031  05DB                     _go_open:	
  5032                           ;psect for function _go_open
  5033                           
  5034                           
  5035                           ;incstack = 0
  5036                           ; Regs used in _go_open: [wreg]
  5037                           ;main.c: 95:     do { LATCbits.LATC4 = 0; } while(0);
  5038  05DB  0022               	movlb	2	; select bank2
  5039  05DC  120E               	bcf	14,4	;volatile
  5040                           
  5041                           ;main.c: 96:     do { LATCbits.LATC5 = 1; } while(0);
  5042  05DD  168E               	bsf	14,5	;volatile
  5043                           
  5044                           ;main.c: 97:     time_pow_s = 10;
  5045  05DE  300A               	movlw	10
  5046  05DF  0020               	movlb	0	; select bank0
  5047  05E0  00A0               	movwf	??_go_open
  5048  05E1  0820               	movf	??_go_open,w
  5049  05E2  00E6               	movwf	_time_pow_s
  5050                           
  5051                           ;main.c: 98:     FLAGS.bits.RELE_POW_WAIT = 1;
  5052  05E3  16FC               	bsf	_FLAGS,5
  5053  05E4  0008               	return
  5054  05E5                     __end_of_go_open:
  5055                           
  5056                           	psect	text32
  5057  0626                     __ptext32:	
  5058 ;; *************** function _go_close_alt *****************
  5059 ;; Defined at:
  5060 ;;		line 102 in file "main.c"
  5061 ;; Parameters:    Size  Location     Type
  5062 ;;		None
  5063 ;; Auto vars:     Size  Location     Type
  5064 ;;		None
  5065 ;; Return value:  Size  Location     Type
  5066 ;;                  1    wreg      void 
  5067 ;; Registers used:
  5068 ;;		None
  5069 ;; Tracked objects:
  5070 ;;		On entry : 0/0
  5071 ;;		On exit  : 0/0
  5072 ;;		Unchanged: 0/0
  5073 ;; Data sizes:     COMMON   BANK0   BANK1
  5074 ;;      Params:         0       0       0
  5075 ;;      Locals:         0       0       0
  5076 ;;      Temps:          0       0       0
  5077 ;;      Totals:         0       0       0
  5078 ;;Total ram usage:        0 bytes
  5079 ;; Hardware stack levels used: 1
  5080 ;; Hardware stack levels required when called: 7
  5081 ;; This function calls:
  5082 ;;		Nothing
  5083 ;; This function is called by:
  5084 ;;		_fun_work
  5085 ;;		_switch_wm
  5086 ;; This function uses a non-reentrant model
  5087 ;;
  5088                           
  5089  0626                     _go_close_alt:	
  5090                           ;psect for function _go_close_alt
  5091                           
  5092                           
  5093                           ;main.c: 103:     FLAGS.bits.CLOSED = 1;
  5094                           
  5095                           ;incstack = 0
  5096                           ; Regs used in _go_close_alt: []
  5097  0626  157C               	bsf	_FLAGS,2
  5098                           
  5099                           ;main.c: 104:     do { LATCbits.LATC4 = 0; } while(0);
  5100  0627  0022               	movlb	2	; select bank2
  5101  0628  120E               	bcf	14,4	;volatile
  5102                           
  5103                           ;main.c: 105:     do { LATCbits.LATC5 = 1; } while(0);
  5104  0629  168E               	bsf	14,5	;volatile
  5105  062A  0008               	return
  5106  062B                     __end_of_go_close_alt:
  5107                           
  5108                           	psect	text33
  5109  04B4                     __ptext33:	
  5110 ;; *************** function _go_close *****************
  5111 ;; Defined at:
  5112 ;;		line 83 in file "main.c"
  5113 ;; Parameters:    Size  Location     Type
  5114 ;;		None
  5115 ;; Auto vars:     Size  Location     Type
  5116 ;;		None
  5117 ;; Return value:  Size  Location     Type
  5118 ;;                  1    wreg      void 
  5119 ;; Registers used:
  5120 ;;		wreg
  5121 ;; Tracked objects:
  5122 ;;		On entry : 0/0
  5123 ;;		On exit  : 0/0
  5124 ;;		Unchanged: 0/0
  5125 ;; Data sizes:     COMMON   BANK0   BANK1
  5126 ;;      Params:         0       0       0
  5127 ;;      Locals:         0       0       0
  5128 ;;      Temps:          0       2       0
  5129 ;;      Totals:         0       2       0
  5130 ;;Total ram usage:        2 bytes
  5131 ;; Hardware stack levels used: 1
  5132 ;; Hardware stack levels required when called: 7
  5133 ;; This function calls:
  5134 ;;		Nothing
  5135 ;; This function is called by:
  5136 ;;		_povorot
  5137 ;;		_fun_work
  5138 ;;		_switch_wm
  5139 ;; This function uses a non-reentrant model
  5140 ;;
  5141                           
  5142  04B4                     _go_close:	
  5143                           ;psect for function _go_close
  5144                           
  5145                           
  5146                           ;main.c: 84:     time_s = 0;
  5147                           
  5148                           ;incstack = 0
  5149                           ; Regs used in _go_close: [wreg]
  5150  04B4  3000               	movlw	0
  5151  04B5  0020               	movlb	0	; select bank0
  5152  04B6  00DD               	movwf	_time_s
  5153  04B7  3000               	movlw	0
  5154  04B8  00DE               	movwf	_time_s+1
  5155  04B9  3000               	movlw	0
  5156  04BA  00DF               	movwf	_time_s+2
  5157  04BB  0022               	movlb	2	; select bank2
  5158  04BC  160E               	bsf	14,4	;volatile
  5159                           
  5160                           ;main.c: 86:     _delay((unsigned long)((1 * 1000)*(16000000/4000.0)));
  5161  04BD  3015               	movlw	21
  5162  04BE  0020               	movlb	0	; select bank0
  5163  04BF  00A1               	movwf	??_go_close+1
  5164  04C0  304B               	movlw	75
  5165  04C1  00A0               	movwf	??_go_close
  5166  04C2  30BE               	movlw	190
  5167  04C3                     u2167:
  5168  04C3  0B89               	decfsz	9,f
  5169  04C4  2CC3               	goto	u2167
  5170  04C5  0BA0               	decfsz	??_go_close,f
  5171  04C6  2CC3               	goto	u2167
  5172  04C7  0BA1               	decfsz	??_go_close+1,f
  5173  04C8  2CC3               	goto	u2167
  5174  04C9  0000               	nop
  5175  04CA  0022               	movlb	2	; select bank2
  5176  04CB  168E               	bsf	14,5	;volatile
  5177                           
  5178                           ;main.c: 88:     time_pow_s = 10;
  5179  04CC  300A               	movlw	10
  5180  04CD  0020               	movlb	0	; select bank0
  5181  04CE  00A0               	movwf	??_go_close
  5182  04CF  0820               	movf	??_go_close,w
  5183  04D0  00E6               	movwf	_time_pow_s
  5184                           
  5185                           ;main.c: 89:     FLAGS.bits.RELE_POW_WAIT = 1;
  5186  04D1  16FC               	bsf	_FLAGS,5
  5187                           
  5188                           ;main.c: 90:     FLAGS.bits.RELE_CON_WAIT = 1;
  5189  04D2  177C               	bsf	_FLAGS,6
  5190  04D3  0008               	return
  5191  04D4                     __end_of_go_close:
  5192                           
  5193                           	psect	text34
  5194  0441                     __ptext34:	
  5195 ;; *************** function _beep *****************
  5196 ;; Defined at:
  5197 ;;		line 73 in file "main.c"
  5198 ;; Parameters:    Size  Location     Type
  5199 ;;  delay           2    0[BANK0 ] unsigned int 
  5200 ;;  pause           2    2[BANK0 ] unsigned int 
  5201 ;;  time            1    4[BANK0 ] unsigned char 
  5202 ;;  count           1    5[BANK0 ] unsigned char 
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;  i               1    9[BANK0 ] unsigned char 
  5205 ;;  j               1    8[BANK0 ] unsigned char 
  5206 ;; Return value:  Size  Location     Type
  5207 ;;                  1    wreg      void 
  5208 ;; Registers used:
  5209 ;;		wreg, status,2, status,0, pclath, cstack
  5210 ;; Tracked objects:
  5211 ;;		On entry : 0/0
  5212 ;;		On exit  : 0/0
  5213 ;;		Unchanged: 0/0
  5214 ;; Data sizes:     COMMON   BANK0   BANK1
  5215 ;;      Params:         0       6       0
  5216 ;;      Locals:         0       2       0
  5217 ;;      Temps:          0       2       0
  5218 ;;      Totals:         0      10       0
  5219 ;;Total ram usage:       10 bytes
  5220 ;; Hardware stack levels used: 1
  5221 ;; Hardware stack levels required when called: 8
  5222 ;; This function calls:
  5223 ;;		_switch_zum
  5224 ;; This function is called by:
  5225 ;;		_fun_work
  5226 ;;		_switch_wm
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230  0441                     _beep:	
  5231                           ;psect for function _beep
  5232                           
  5233                           
  5234                           ;main.c: 74:     for (char j = 0; j < count; j++) {
  5235                           
  5236                           ;incstack = 0
  5237                           ; Regs used in _beep: [wreg+status,2+status,0+pclath+cstack]
  5238  0441  0020               	movlb	0	; select bank0
  5239  0442  01A8               	clrf	beep@j
  5240  0443                     l2382:
  5241  0443  0825               	movf	beep@count,w
  5242  0444  0228               	subwf	beep@j,w
  5243  0445  1803               	btfsc	3,0
  5244  0446  0008               	return
  5245                           
  5246                           ;main.c: 75:         for (char i = 0; i < time; i++) {
  5247  0447  01A9               	clrf	beep@i
  5248  0448                     l2376:
  5249  0448  0824               	movf	beep@time,w
  5250  0449  0229               	subwf	beep@i,w
  5251  044A  1803               	btfsc	3,0
  5252  044B  2C57               	goto	l2378
  5253                           
  5254                           ;main.c: 76:             switch_zum();
  5255  044C  259D               	fcall	_switch_zum
  5256                           
  5257                           ;main.c: 77:             _delay((unsigned long)((300)*(16000000/4000000.0)));
  5258  044D  30F0               	movlw	240
  5259  044E                     u2177:
  5260  044E  3200               	nop2
  5261  044F  0B89               	decfsz	9,f
  5262  0450  2C4E               	goto	u2177
  5263                           
  5264                           ;main.c: 78:         }
  5265  0451  3001               	movlw	1
  5266  0452  0020               	movlb	0	; select bank0
  5267  0453  00A6               	movwf	??_beep
  5268  0454  0826               	movf	??_beep,w
  5269  0455  07A9               	addwf	beep@i,f
  5270  0456  2C48               	goto	l2376
  5271  0457                     l2378:
  5272                           
  5273                           ;main.c: 79:         _delay((unsigned long)((100)*(16000000/4000.0)));
  5274  0457  3003               	movlw	3
  5275  0458  0020               	movlb	0	; select bank0
  5276  0459  00A7               	movwf	??_beep+1
  5277  045A  3008               	movlw	8
  5278  045B  00A6               	movwf	??_beep
  5279  045C  3077               	movlw	119
  5280  045D                     u2187:
  5281  045D  0B89               	decfsz	9,f
  5282  045E  2C5D               	goto	u2187
  5283  045F  0BA6               	decfsz	??_beep,f
  5284  0460  2C5D               	goto	u2187
  5285  0461  0BA7               	decfsz	??_beep+1,f
  5286  0462  2C5D               	goto	u2187
  5287                           
  5288                           ;main.c: 80:     }
  5289  0463  3001               	movlw	1
  5290  0464  0020               	movlb	0	; select bank0
  5291  0465  00A6               	movwf	??_beep
  5292  0466  0826               	movf	??_beep,w
  5293  0467  07A8               	addwf	beep@j,f
  5294  0468  2C43               	goto	l2382
  5295  0469                     __end_of_beep:
  5296                           
  5297                           	psect	text35
  5298  059D                     __ptext35:	
  5299 ;; *************** function _switch_zum *****************
  5300 ;; Defined at:
  5301 ;;		line 65 in file "main.c"
  5302 ;; Parameters:    Size  Location     Type
  5303 ;;		None
  5304 ;; Auto vars:     Size  Location     Type
  5305 ;;		None
  5306 ;; Return value:  Size  Location     Type
  5307 ;;                  1    wreg      void 
  5308 ;; Registers used:
  5309 ;;		status,0
  5310 ;; Tracked objects:
  5311 ;;		On entry : 0/0
  5312 ;;		On exit  : 0/0
  5313 ;;		Unchanged: 0/0
  5314 ;; Data sizes:     COMMON   BANK0   BANK1
  5315 ;;      Params:         0       0       0
  5316 ;;      Locals:         0       0       0
  5317 ;;      Temps:          0       0       0
  5318 ;;      Totals:         0       0       0
  5319 ;;Total ram usage:        0 bytes
  5320 ;; Hardware stack levels used: 1
  5321 ;; Hardware stack levels required when called: 7
  5322 ;; This function calls:
  5323 ;;		Nothing
  5324 ;; This function is called by:
  5325 ;;		_beep
  5326 ;;		_start_setup
  5327 ;;		_TMR0_ISR
  5328 ;; This function uses a non-reentrant model
  5329 ;;
  5330                           
  5331  059D                     _switch_zum:	
  5332                           ;psect for function _switch_zum
  5333                           
  5334                           
  5335                           ;Skip over the trampoline to the duplicate function for level 1
  5336  059D  1C7E               	btfss	126,0
  5337  059E  2DA0               	goto	l2164
  5338  059F  2DBA               	ljmp	i1l2098
  5339  05A0                     _switch_zum$intlevel0:
  5340  05A0                     l2164:	
  5341                           ;incstack = 0
  5342                           ; Regs used in _switch_zum: [status,0]
  5343                           ;main.c: 66:     do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  5344                           
  5345  05A0  1003               	clrc
  5346  05A1  0022               	movlb	2	; select bank2
  5347  05A2  1E8C               	btfss	12,5	;volatile
  5348  05A3  1403               	setc
  5349  05A4  1C03               	btfss	3,0
  5350  05A5  2DA9               	goto	u1250
  5351  05A6  0022               	movlb	2	; select bank2
  5352  05A7  168C               	bsf	12,5	;volatile
  5353  05A8  0008               	return
  5354  05A9                     u1250:
  5355  05A9  0022               	movlb	2	; select bank2
  5356  05AA  128C               	bcf	12,5	;volatile
  5357  05AB  0008               	return
  5358  05AC                     __end_of_switch_zum:
  5359                           
  5360                           	psect	intentry
  5361  0004                     __pintentry:	
  5362 ;; *************** function _INTERRUPT_InterruptManager *****************
  5363 ;; Defined at:
  5364 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5365 ;; Parameters:    Size  Location     Type
  5366 ;;		None
  5367 ;; Auto vars:     Size  Location     Type
  5368 ;;		None
  5369 ;; Return value:  Size  Location     Type
  5370 ;;                  1    wreg      void 
  5371 ;; Registers used:
  5372 ;;		wreg, status,2, status,0, pclath, cstack
  5373 ;; Tracked objects:
  5374 ;;		On entry : 0/0
  5375 ;;		On exit  : 0/0
  5376 ;;		Unchanged: 0/0
  5377 ;; Data sizes:     COMMON   BANK0   BANK1
  5378 ;;      Params:         0       0       0
  5379 ;;      Locals:         0       0       0
  5380 ;;      Temps:          0       0       0
  5381 ;;      Totals:         0       0       0
  5382 ;;Total ram usage:        0 bytes
  5383 ;; Hardware stack levels used: 1
  5384 ;; Hardware stack levels required when called: 6
  5385 ;; This function calls:
  5386 ;;		_TMR0_ISR
  5387 ;;		_TMR2_ISR
  5388 ;; This function is called by:
  5389 ;;		Interrupt level 1
  5390 ;; This function uses a non-reentrant model
  5391 ;;
  5392                           
  5393  0004                     _INTERRUPT_InterruptManager:
  5394                           
  5395                           ;incstack = 0
  5396  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5397                           
  5398                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  5399  0005  3180               	pagesel	$
  5400                           
  5401                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  5402  0006  1A8B               	btfsc	11,5	;volatile
  5403  0007  1D0B               	btfss	11,2	;volatile
  5404  0008  280B               	goto	i1l110
  5405                           
  5406                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
  5407  0009  25AC               	fcall	_TMR0_ISR
  5408                           
  5409                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  5410  000A  2814               	goto	i1l116
  5411  000B                     i1l110:	
  5412                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
  5413                           
  5414  000B  1F0B               	btfss	11,6	;volatile
  5415  000C  2814               	goto	i1l116
  5416                           
  5417                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  5418  000D  0021               	movlb	1	; select bank1
  5419  000E  1C91               	btfss	17,1	;volatile
  5420  000F  2814               	goto	i1l116
  5421  0010  0020               	movlb	0	; select bank0
  5422  0011  1C91               	btfss	17,1	;volatile
  5423  0012  2814               	goto	i1l116
  5424                           
  5425                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR2_ISR();
  5426  0013  258C               	fcall	_TMR2_ISR
  5427  0014                     i1l116:	
  5428                           ;mcc_generated_files/interrupt_manager.c: 71:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 73:     }
  5429                           
  5430                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  5431                           
  5432  0014  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5433  0015  0009               	retfie
  5434  0016                     __end_of_INTERRUPT_InterruptManager:
  5435                           
  5436                           	psect	text37
  5437  058C                     __ptext37:	
  5438 ;; *************** function _TMR2_ISR *****************
  5439 ;; Defined at:
  5440 ;;		line 119 in file "mcc_generated_files/tmr2.c"
  5441 ;; Parameters:    Size  Location     Type
  5442 ;;		None
  5443 ;; Auto vars:     Size  Location     Type
  5444 ;;		None
  5445 ;; Return value:  Size  Location     Type
  5446 ;;                  1    wreg      void 
  5447 ;; Registers used:
  5448 ;;		wreg, status,2, status,0, pclath, cstack
  5449 ;; Tracked objects:
  5450 ;;		On entry : 0/0
  5451 ;;		On exit  : 0/0
  5452 ;;		Unchanged: 0/0
  5453 ;; Data sizes:     COMMON   BANK0   BANK1
  5454 ;;      Params:         0       0       0
  5455 ;;      Locals:         0       0       0
  5456 ;;      Temps:          0       0       0
  5457 ;;      Totals:         0       0       0
  5458 ;;Total ram usage:        0 bytes
  5459 ;; Hardware stack levels used: 1
  5460 ;; Hardware stack levels required when called: 5
  5461 ;; This function calls:
  5462 ;;		_TMR2_CallBack
  5463 ;; This function is called by:
  5464 ;;		_INTERRUPT_InterruptManager
  5465 ;; This function uses a non-reentrant model
  5466 ;;
  5467                           
  5468  058C                     _TMR2_ISR:	
  5469                           ;psect for function _TMR2_ISR
  5470                           
  5471                           
  5472                           ;mcc_generated_files/tmr2.c: 121:     static volatile unsigned int CountCallBack = 0;;mc
      +                          c_generated_files/tmr2.c: 124:     PIR1bits.TMR2IF = 0;
  5473                           
  5474                           ;incstack = 0
  5475                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
  5476  058C  0020               	movlb	0	; select bank0
  5477  058D  1091               	bcf	17,1	;volatile
  5478                           
  5479                           ;mcc_generated_files/tmr2.c: 127:     if (++CountCallBack >= 100)
  5480  058E  3001               	movlw	1
  5481  058F  07F8               	addwf	TMR2_ISR@CountCallBack,f	;volatile
  5482  0590  3000               	movlw	0
  5483  0591  3DF9               	addwfc	TMR2_ISR@CountCallBack+1,f	;volatile
  5484  0592  3000               	movlw	0
  5485  0593  0279               	subwf	TMR2_ISR@CountCallBack+1,w	;volatile
  5486  0594  3064               	movlw	100
  5487  0595  1903               	skipnz
  5488  0596  0278               	subwf	TMR2_ISR@CountCallBack,w	;volatile
  5489  0597  1C03               	skipc
  5490  0598  0008               	return
  5491                           
  5492                           ;mcc_generated_files/tmr2.c: 128:     {;mcc_generated_files/tmr2.c: 130:         TMR2_Ca
      +                          llBack();
  5493  0599  25C6               	fcall	_TMR2_CallBack
  5494                           
  5495                           ;mcc_generated_files/tmr2.c: 133:         CountCallBack = 0;
  5496  059A  01F8               	clrf	TMR2_ISR@CountCallBack	;volatile
  5497  059B  01F9               	clrf	TMR2_ISR@CountCallBack+1	;volatile
  5498  059C  0008               	return
  5499  059D                     __end_of_TMR2_ISR:
  5500                           
  5501                           	psect	text38
  5502  05C6                     __ptext38:	
  5503 ;; *************** function _TMR2_CallBack *****************
  5504 ;; Defined at:
  5505 ;;		line 137 in file "mcc_generated_files/tmr2.c"
  5506 ;; Parameters:    Size  Location     Type
  5507 ;;		None
  5508 ;; Auto vars:     Size  Location     Type
  5509 ;;		None
  5510 ;; Return value:  Size  Location     Type
  5511 ;;                  1    wreg      void 
  5512 ;; Registers used:
  5513 ;;		wreg, status,2, status,0, pclath, cstack
  5514 ;; Tracked objects:
  5515 ;;		On entry : 0/0
  5516 ;;		On exit  : 0/0
  5517 ;;		Unchanged: 0/0
  5518 ;; Data sizes:     COMMON   BANK0   BANK1
  5519 ;;      Params:         0       0       0
  5520 ;;      Locals:         0       0       0
  5521 ;;      Temps:          0       0       0
  5522 ;;      Totals:         0       0       0
  5523 ;;Total ram usage:        0 bytes
  5524 ;; Hardware stack levels used: 1
  5525 ;; Hardware stack levels required when called: 4
  5526 ;; This function calls:
  5527 ;;		Absolute function
  5528 ;;		_TMR2_DefaultInterruptHandler
  5529 ;;		_sec_tick_work
  5530 ;; This function is called by:
  5531 ;;		_TMR2_ISR
  5532 ;; This function uses a non-reentrant model
  5533 ;;
  5534                           
  5535  05C6                     _TMR2_CallBack:	
  5536                           ;psect for function _TMR2_CallBack
  5537                           
  5538                           
  5539                           ;mcc_generated_files/tmr2.c: 141:     if(TMR2_InterruptHandler)
  5540                           
  5541                           ;incstack = 0
  5542                           ; Regs used in _TMR2_CallBack: [wreg+status,2+status,0+pclath+cstack]
  5543  05C6  0020               	movlb	0	; select bank0
  5544  05C7  086A               	movf	_TMR2_InterruptHandler,w
  5545  05C8  046B               	iorwf	_TMR2_InterruptHandler+1,w
  5546  05C9  1903               	btfsc	3,2
  5547  05CA  0008               	return
  5548                           
  5549                           ;mcc_generated_files/tmr2.c: 142:     {;mcc_generated_files/tmr2.c: 143:         TMR2_In
      +                          terruptHandler();
  5550  05CB  086B               	movf	_TMR2_InterruptHandler+1,w
  5551  05CC  008A               	movwf	10
  5552  05CD  086A               	movf	_TMR2_InterruptHandler,w
  5553  05CE  000A               	callw
  5554  05CF  3185               	pagesel	$
  5555  05D0  0008               	return
  5556  05D1                     __end_of_TMR2_CallBack:
  5557                           
  5558                           	psect	text39
  5559  0647                     __ptext39:	
  5560 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  5561 ;; Defined at:
  5562 ;;		line 151 in file "mcc_generated_files/tmr2.c"
  5563 ;; Parameters:    Size  Location     Type
  5564 ;;		None
  5565 ;; Auto vars:     Size  Location     Type
  5566 ;;		None
  5567 ;; Return value:  Size  Location     Type
  5568 ;;                  1    wreg      void 
  5569 ;; Registers used:
  5570 ;;		None
  5571 ;; Tracked objects:
  5572 ;;		On entry : 0/0
  5573 ;;		On exit  : 0/0
  5574 ;;		Unchanged: 0/0
  5575 ;; Data sizes:     COMMON   BANK0   BANK1
  5576 ;;      Params:         0       0       0
  5577 ;;      Locals:         0       0       0
  5578 ;;      Temps:          0       0       0
  5579 ;;      Totals:         0       0       0
  5580 ;;Total ram usage:        0 bytes
  5581 ;; Hardware stack levels used: 1
  5582 ;; This function calls:
  5583 ;;		Nothing
  5584 ;; This function is called by:
  5585 ;;		_TMR2_Initialize
  5586 ;;		_TMR2_CallBack
  5587 ;; This function uses a non-reentrant model
  5588 ;;
  5589                           
  5590  0647                     _TMR2_DefaultInterruptHandler:	
  5591                           ;psect for function _TMR2_DefaultInterruptHandler
  5592                           
  5593                           
  5594                           ;incstack = 0
  5595                           ; Regs used in _TMR2_DefaultInterruptHandler: []
  5596  0647  0008               	return
  5597  0648                     __end_of_TMR2_DefaultInterruptHandler:
  5598                           
  5599                           	psect	text40
  5600  035F                     __ptext40:	
  5601 ;; *************** function _sec_tick_work *****************
  5602 ;; Defined at:
  5603 ;;		line 251 in file "main.c"
  5604 ;; Parameters:    Size  Location     Type
  5605 ;;		None
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;		None
  5608 ;; Return value:  Size  Location     Type
  5609 ;;                  1    wreg      void 
  5610 ;; Registers used:
  5611 ;;		wreg, status,2, status,0, pclath, cstack
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMMON   BANK0   BANK1
  5617 ;;      Params:         0       0       0
  5618 ;;      Locals:         0       0       0
  5619 ;;      Temps:          1       0       0
  5620 ;;      Totals:         1       0       0
  5621 ;;Total ram usage:        1 bytes
  5622 ;; Hardware stack levels used: 1
  5623 ;; Hardware stack levels required when called: 3
  5624 ;; This function calls:
  5625 ;;		_get_measure
  5626 ;;		_rele_tick
  5627 ;;		_toggle_tone
  5628 ;;		i1_switch_zum
  5629 ;; This function is called by:
  5630 ;;		_start_setup
  5631 ;;		_TMR2_CallBack
  5632 ;; This function uses a non-reentrant model
  5633 ;;
  5634                           
  5635  035F                     _sec_tick_work:	
  5636                           ;psect for function _sec_tick_work
  5637                           
  5638                           
  5639                           ;main.c: 253:     switch_zum();
  5640                           
  5641                           ;incstack = 0
  5642                           ; Regs used in _sec_tick_work: [wreg+status,2+status,0+pclath+cstack]
  5643  035F  25BA               	fcall	i1_switch_zum
  5644                           
  5645                           ;main.c: 255:     time_s++;
  5646  0360  3001               	movlw	1
  5647  0361  0020               	movlb	0	; select bank0
  5648  0362  07DD               	addwf	_time_s,f
  5649  0363  3000               	movlw	0
  5650  0364  1803               	skipnc
  5651  0365  3001               	movlw	1
  5652  0366  07DE               	addwf	_time_s+1,f
  5653  0367  3000               	movlw	0
  5654  0368  1803               	skipnc
  5655  0369  3001               	movlw	1
  5656  036A  07DF               	addwf	_time_s+2,f
  5657                           
  5658                           ;main.c: 256:     rele_tick();
  5659  036B  2490               	fcall	_rele_tick
  5660  036C  0064               	clrwdt	;# 
  5661                           
  5662                           ;main.c: 258:     if (FLAGS.bits.ALARM) {
  5663  036D  1C7C               	btfss	_FLAGS,0
  5664  036E  2B7C               	goto	i1l2176
  5665  036F  1003               	clrc
  5666  0370  0022               	movlb	2	; select bank2
  5667  0371  1E0C               	btfss	12,4	;volatile
  5668  0372  1403               	setc
  5669  0373  1C03               	btfss	3,0
  5670  0374  2B78               	goto	u128_20
  5671  0375  0022               	movlb	2	; select bank2
  5672  0376  160C               	bsf	12,4	;volatile
  5673  0377  2B7A               	goto	i1l2174
  5674  0378                     u128_20:
  5675  0378  0022               	movlb	2	; select bank2
  5676  0379  120C               	bcf	12,4	;volatile
  5677  037A                     i1l2174:
  5678                           
  5679                           ;main.c: 260:         toggle_tone();
  5680  037A  25EF               	fcall	_toggle_tone
  5681                           
  5682                           ;main.c: 261:     } else {
  5683  037B  0008               	return
  5684  037C                     i1l2176:
  5685                           
  5686                           ;main.c: 262:         get_measure();
  5687  037C  2469               	fcall	_get_measure
  5688                           
  5689                           ;main.c: 263:         static char iled;;main.c: 264:         iled++;
  5690  037D  3001               	movlw	1
  5691  037E  00F7               	movwf	??_sec_tick_work
  5692  037F  0877               	movf	??_sec_tick_work,w
  5693  0380  07FA               	addwf	sec_tick_work@iled,f
  5694                           
  5695                           ;main.c: 265:         if (iled > 2) {
  5696  0381  3003               	movlw	3
  5697  0382  027A               	subwf	sec_tick_work@iled,w
  5698  0383  1C03               	skipc
  5699  0384  0008               	return
  5700  0385  1003               	clrc
  5701  0386  0022               	movlb	2	; select bank2
  5702  0387  1E0C               	btfss	12,4	;volatile
  5703  0388  1403               	setc
  5704  0389  1C03               	btfss	3,0
  5705  038A  2B8E               	goto	u131_20
  5706  038B  0022               	movlb	2	; select bank2
  5707  038C  160C               	bsf	12,4	;volatile
  5708  038D  2B90               	goto	i1l2184
  5709  038E                     u131_20:
  5710  038E  0022               	movlb	2	; select bank2
  5711  038F  120C               	bcf	12,4	;volatile
  5712  0390                     i1l2184:
  5713                           
  5714                           ;main.c: 267:             iled = 0;
  5715  0390  01FA               	clrf	sec_tick_work@iled
  5716  0391  0008               	return
  5717  0392                     __end_of_sec_tick_work:
  5718                           
  5719                           	psect	text41
  5720  05EF                     __ptext41:	
  5721 ;; *************** function _toggle_tone *****************
  5722 ;; Defined at:
  5723 ;;		line 69 in file "main.c"
  5724 ;; Parameters:    Size  Location     Type
  5725 ;;		None
  5726 ;; Auto vars:     Size  Location     Type
  5727 ;;		None
  5728 ;; Return value:  Size  Location     Type
  5729 ;;                  1    wreg      void 
  5730 ;; Registers used:
  5731 ;;		status,0
  5732 ;; Tracked objects:
  5733 ;;		On entry : 0/0
  5734 ;;		On exit  : 0/0
  5735 ;;		Unchanged: 0/0
  5736 ;; Data sizes:     COMMON   BANK0   BANK1
  5737 ;;      Params:         0       0       0
  5738 ;;      Locals:         0       0       0
  5739 ;;      Temps:          0       0       0
  5740 ;;      Totals:         0       0       0
  5741 ;;Total ram usage:        0 bytes
  5742 ;; Hardware stack levels used: 1
  5743 ;; This function calls:
  5744 ;;		Nothing
  5745 ;; This function is called by:
  5746 ;;		_sec_tick_work
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750  05EF                     _toggle_tone:	
  5751                           ;psect for function _toggle_tone
  5752                           
  5753                           
  5754                           ;main.c: 70:     INTCONbits.TMR0IE = ~INTCONbits.TMR0IE;
  5755                           
  5756                           ;incstack = 0
  5757                           ; Regs used in _toggle_tone: [status,0]
  5758  05EF  1003               	clrc
  5759  05F0  1E8B               	btfss	11,5	;volatile
  5760  05F1  1403               	setc
  5761  05F2  1C03               	btfss	3,0
  5762  05F3  2DF6               	goto	u112_20
  5763  05F4  168B               	bsf	11,5	;volatile
  5764  05F5  0008               	return
  5765  05F6                     u112_20:
  5766  05F6  128B               	bcf	11,5	;volatile
  5767  05F7  0008               	return
  5768  05F8                     __end_of_toggle_tone:
  5769                           
  5770                           	psect	text42
  5771  0490                     __ptext42:	
  5772 ;; *************** function _rele_tick *****************
  5773 ;; Defined at:
  5774 ;;		line 230 in file "main.c"
  5775 ;; Parameters:    Size  Location     Type
  5776 ;;		None
  5777 ;; Auto vars:     Size  Location     Type
  5778 ;;		None
  5779 ;; Return value:  Size  Location     Type
  5780 ;;                  1    wreg      void 
  5781 ;; Registers used:
  5782 ;;		wreg, status,2, status,0
  5783 ;; Tracked objects:
  5784 ;;		On entry : 0/0
  5785 ;;		On exit  : 0/0
  5786 ;;		Unchanged: 0/0
  5787 ;; Data sizes:     COMMON   BANK0   BANK1
  5788 ;;      Params:         0       0       0
  5789 ;;      Locals:         0       0       0
  5790 ;;      Temps:          2       0       0
  5791 ;;      Totals:         2       0       0
  5792 ;;Total ram usage:        2 bytes
  5793 ;; Hardware stack levels used: 1
  5794 ;; This function calls:
  5795 ;;		Nothing
  5796 ;; This function is called by:
  5797 ;;		_sec_tick_work
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801  0490                     _rele_tick:	
  5802                           ;psect for function _rele_tick
  5803                           
  5804                           
  5805                           ;main.c: 231:     if (FLAGS.bits.RELE_POW_WAIT) {
  5806                           
  5807                           ;incstack = 0
  5808                           ; Regs used in _rele_tick: [wreg+status,2+status,0]
  5809  0490  1EFC               	btfss	_FLAGS,5
  5810  0491  0008               	return
  5811                           
  5812                           ;main.c: 232:         if (time_pow_s > 0) {
  5813  0492  0020               	movlb	0	; select bank0
  5814  0493  0866               	movf	_time_pow_s,w
  5815  0494  1903               	btfsc	3,2
  5816  0495  2C99               	goto	i1l409
  5817                           
  5818                           ;main.c: 233:             time_pow_s--;
  5819  0496  3001               	movlw	1
  5820  0497  02E6               	subwf	_time_pow_s,f
  5821                           
  5822                           ;main.c: 234:         } else {
  5823  0498  0008               	return
  5824  0499                     i1l409:
  5825                           
  5826                           ;main.c: 235:             if (FLAGS.bits.RELE_CON_WAIT) {
  5827  0499  1F7C               	btfss	_FLAGS,6
  5828  049A  2CAF               	goto	i1l417
  5829                           
  5830                           ;main.c: 236:                 do { LATCbits.LATC5 = 0; } while(0);
  5831  049B  0022               	movlb	2	; select bank2
  5832  049C  128E               	bcf	14,5	;volatile
  5833                           
  5834                           ;main.c: 237:                 _delay((unsigned long)((1 * 1000)*(16000000/4000.0)));
  5835  049D  3015               	movlw	21
  5836  049E  00F1               	movwf	??_rele_tick+1
  5837  049F  304B               	movlw	75
  5838  04A0  00F0               	movwf	??_rele_tick
  5839  04A1  30BE               	movlw	190
  5840  04A2                     u219_27:
  5841  04A2  0B89               	decfsz	9,f
  5842  04A3  2CA2               	goto	u219_27
  5843  04A4  0BF0               	decfsz	??_rele_tick,f
  5844  04A5  2CA2               	goto	u219_27
  5845  04A6  0BF1               	decfsz	??_rele_tick+1,f
  5846  04A7  2CA2               	goto	u219_27
  5847  04A8  3200               	nop2
  5848  04A9  0022               	movlb	2	; select bank2
  5849  04AA  120E               	bcf	14,4	;volatile
  5850                           
  5851                           ;main.c: 239:                 FLAGS.bits.CLOSED = 1;
  5852  04AB  157C               	bsf	_FLAGS,2
  5853                           
  5854                           ;main.c: 240:                 FLAGS.bits.RELE_CON_WAIT = 0;
  5855  04AC  137C               	bcf	_FLAGS,6
  5856                           
  5857                           ;main.c: 241:                 FLAGS.bits.RELE_POW_WAIT = 0;
  5858  04AD  12FC               	bcf	_FLAGS,5
  5859                           
  5860                           ;main.c: 242:             } else {
  5861  04AE  0008               	return
  5862  04AF                     i1l417:	
  5863                           ;main.c: 243:                 do { LATCbits.LATC5 = 0; } while(0);
  5864                           
  5865  04AF  0022               	movlb	2	; select bank2
  5866  04B0  128E               	bcf	14,5	;volatile
  5867                           
  5868                           ;main.c: 244:                 FLAGS.bits.CLOSED = 0;
  5869  04B1  117C               	bcf	_FLAGS,2
  5870                           
  5871                           ;main.c: 245:                 FLAGS.bits.RELE_POW_WAIT = 0;
  5872  04B2  12FC               	bcf	_FLAGS,5
  5873  04B3  0008               	return
  5874  04B4                     __end_of_rele_tick:
  5875                           
  5876                           	psect	text43
  5877  0469                     __ptext43:	
  5878 ;; *************** function _get_measure *****************
  5879 ;; Defined at:
  5880 ;;		line 126 in file "main.c"
  5881 ;; Parameters:    Size  Location     Type
  5882 ;;		None
  5883 ;; Auto vars:     Size  Location     Type
  5884 ;;  res             2    5[COMMON] unsigned int 
  5885 ;; Return value:  Size  Location     Type
  5886 ;;                  1    wreg      void 
  5887 ;; Registers used:
  5888 ;;		wreg, status,2, status,0, pclath, cstack
  5889 ;; Tracked objects:
  5890 ;;		On entry : 0/0
  5891 ;;		On exit  : 0/0
  5892 ;;		Unchanged: 0/0
  5893 ;; Data sizes:     COMMON   BANK0   BANK1
  5894 ;;      Params:         0       0       0
  5895 ;;      Locals:         2       0       0
  5896 ;;      Temps:          1       0       0
  5897 ;;      Totals:         3       0       0
  5898 ;;Total ram usage:        3 bytes
  5899 ;; Hardware stack levels used: 1
  5900 ;; Hardware stack levels required when called: 2
  5901 ;; This function calls:
  5902 ;;		_start_alarm
  5903 ;;		i1_ADC_GetConversion
  5904 ;; This function is called by:
  5905 ;;		_sec_tick_work
  5906 ;; This function uses a non-reentrant model
  5907 ;;
  5908                           
  5909  0469                     _get_measure:	
  5910                           ;psect for function _get_measure
  5911                           
  5912                           
  5913                           ;incstack = 0
  5914                           ; Regs used in _get_measure: [wreg+status,2+status,0+pclath+cstack]
  5915                           ;main.c: 127:     static unsigned char measures;;main.c: 128:     do { LATCbits.LATC1 = 
      +                          1; } while(0);
  5916  0469  0022               	movlb	2	; select bank2
  5917  046A  148E               	bsf	14,1	;volatile
  5918                           
  5919                           ;main.c: 129:     do { ANSELCbits.ANSC3 = 1; } while(0);
  5920  046B  0023               	movlb	3	; select bank3
  5921  046C  158E               	bsf	14,3	;volatile
  5922                           
  5923                           ;main.c: 130:     unsigned res = ADC_GetConversion(PIN_WSP_STATE);
  5924  046D  3007               	movlw	7
  5925  046E  2512               	fcall	i1_ADC_GetConversion
  5926  046F  0871               	movf	?i1_ADC_GetConversion+1,w
  5927  0470  00F6               	movwf	get_measure@res+1
  5928  0471  0870               	movf	?i1_ADC_GetConversion,w
  5929  0472  00F5               	movwf	get_measure@res
  5930  0473  0023               	movlb	3	; select bank3
  5931  0474  118E               	bcf	14,3	;volatile
  5932  0475  0022               	movlb	2	; select bank2
  5933  0476  108E               	bcf	14,1	;volatile
  5934                           
  5935                           ;main.c: 133:     if (res < BAD_WSP_VOLTAGE) measures++;
  5936  0477  304E               	movlw	78
  5937  0478  0276               	subwf	get_measure@res+1,w
  5938  0479  3020               	movlw	32
  5939  047A  1903               	skipnz
  5940  047B  0275               	subwf	get_measure@res,w
  5941  047C  1803               	skipnc
  5942  047D  2C83               	goto	i1l2050
  5943  047E  3001               	movlw	1
  5944  047F  00F4               	movwf	??_get_measure
  5945  0480  0874               	movf	??_get_measure,w
  5946  0481  07FB               	addwf	get_measure@measures,f
  5947  0482  2C8A               	goto	i1l2054
  5948  0483                     i1l2050:
  5949  0483  309C               	movlw	156
  5950  0484  0276               	subwf	get_measure@res+1,w
  5951  0485  3041               	movlw	65
  5952  0486  1903               	skipnz
  5953  0487  0275               	subwf	get_measure@res,w
  5954  0488  1803               	btfsc	3,0
  5955  0489  01FB               	clrf	get_measure@measures
  5956  048A                     i1l2054:
  5957                           
  5958                           ;main.c: 135:     if (measures > 2) start_alarm();
  5959  048A  3003               	movlw	3
  5960  048B  027B               	subwf	get_measure@measures,w
  5961  048C  1C03               	skipc
  5962  048D  0008               	return
  5963  048E  25E5               	fcall	_start_alarm
  5964  048F  0008               	return
  5965  0490                     __end_of_get_measure:
  5966                           
  5967                           	psect	text44
  5968  0512                     __ptext44:	
  5969 ;; *************** function i1_ADC_GetConversion *****************
  5970 ;; Defined at:
  5971 ;;		line 112 in file "mcc_generated_files/adc.c"
  5972 ;; Parameters:    Size  Location     Type
  5973 ;;  channel         1    wreg     enum E2178
  5974 ;; Auto vars:     Size  Location     Type
  5975 ;;  channel         1    3[COMMON] enum E2178
  5976 ;; Return value:  Size  Location     Type
  5977 ;;                  2    0[COMMON] unsigned short 
  5978 ;; Registers used:
  5979 ;;		wreg, status,2, status,0
  5980 ;; Tracked objects:
  5981 ;;		On entry : 0/0
  5982 ;;		On exit  : 0/0
  5983 ;;		Unchanged: 0/0
  5984 ;; Data sizes:     COMMON   BANK0   BANK1
  5985 ;;      Params:         2       0       0
  5986 ;;      Locals:         1       0       0
  5987 ;;      Temps:          1       0       0
  5988 ;;      Totals:         4       0       0
  5989 ;;Total ram usage:        4 bytes
  5990 ;; Hardware stack levels used: 1
  5991 ;; This function calls:
  5992 ;;		Nothing
  5993 ;; This function is called by:
  5994 ;;		_get_measure
  5995 ;; This function uses a non-reentrant model
  5996 ;;
  5997                           
  5998  0512                     i1_ADC_GetConversion:	
  5999                           ;psect for function i1_ADC_GetConversion
  6000                           
  6001                           
  6002                           ;incstack = 0
  6003                           ; Regs used in i1_ADC_GetConversion: [wreg+status,2+status,0]
  6004                           ;i1ADC_GetConversion@channel stored from wreg
  6005  0512  00F3               	movwf	i1ADC_GetConversion@channel
  6006                           
  6007                           ;mcc_generated_files/adc.c: 112: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 113: {;mcc_generated_files/adc.c: 115:     ADCON0bits.CHS = ch
      +                          annel;
  6008  0513  0873               	movf	i1ADC_GetConversion@channel,w
  6009  0514  00F2               	movwf	??i1_ADC_GetConversion
  6010  0515  0DF2               	rlf	??i1_ADC_GetConversion,f
  6011  0516  0DF2               	rlf	??i1_ADC_GetConversion,f
  6012  0517  0021               	movlb	1	; select bank1
  6013  0518  081D               	movf	29,w	;volatile
  6014  0519  0672               	xorwf	??i1_ADC_GetConversion,w
  6015  051A  3983               	andlw	-125
  6016  051B  0672               	xorwf	??i1_ADC_GetConversion,w
  6017  051C  009D               	movwf	29	;volatile
  6018                           
  6019                           ;mcc_generated_files/adc.c: 118:     ADCON0bits.ADON = 1;
  6020  051D  141D               	bsf	29,0	;volatile
  6021                           
  6022                           ;mcc_generated_files/adc.c: 121:     _delay((unsigned long)((5)*(16000000/4000000.0)));
  6023  051E  3006               	movlw	6
  6024  051F                     u220_27:
  6025  051F  0B89               	decfsz	9,f
  6026  0520  2D1F               	goto	u220_27
  6027  0521  3200               	nop2
  6028                           
  6029                           ;mcc_generated_files/adc.c: 124:     ADCON0bits.GO_nDONE = 1;
  6030  0522  0021               	movlb	1	; select bank1
  6031  0523  149D               	bsf	29,1	;volatile
  6032  0524                     i1l63:	
  6033                           ;mcc_generated_files/adc.c: 128:     {;mcc_generated_files/adc.c: 129:     }
  6034                           
  6035                           
  6036                           ;mcc_generated_files/adc.c: 127:     while (ADCON0bits.GO_nDONE)
  6037  0524  189D               	btfsc	29,1	;volatile
  6038  0525  2D24               	goto	i1l63
  6039                           
  6040                           ;mcc_generated_files/adc.c: 132:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  6041  0526  081C               	movf	28,w	;volatile
  6042  0527  00F1               	movwf	?i1_ADC_GetConversion+1
  6043  0528  081B               	movf	27,w	;volatile
  6044  0529  00F0               	movwf	?i1_ADC_GetConversion
  6045  052A  0008               	return
  6046  052B                     __end_ofi1_ADC_GetConversion:
  6047                           
  6048                           	psect	text45
  6049  05E5                     __ptext45:	
  6050 ;; *************** function _start_alarm *****************
  6051 ;; Defined at:
  6052 ;;		line 115 in file "main.c"
  6053 ;; Parameters:    Size  Location     Type
  6054 ;;		None
  6055 ;; Auto vars:     Size  Location     Type
  6056 ;;		None
  6057 ;; Return value:  Size  Location     Type
  6058 ;;                  1    wreg      void 
  6059 ;; Registers used:
  6060 ;;		wreg, status,2, status,0, pclath, cstack
  6061 ;; Tracked objects:
  6062 ;;		On entry : 0/0
  6063 ;;		On exit  : 0/0
  6064 ;;		Unchanged: 0/0
  6065 ;; Data sizes:     COMMON   BANK0   BANK1
  6066 ;;      Params:         0       0       0
  6067 ;;      Locals:         0       0       0
  6068 ;;      Temps:          0       0       0
  6069 ;;      Totals:         0       0       0
  6070 ;;Total ram usage:        0 bytes
  6071 ;; Hardware stack levels used: 1
  6072 ;; Hardware stack levels required when called: 1
  6073 ;; This function calls:
  6074 ;;		i1_go_close
  6075 ;;		i1_go_close_alt
  6076 ;; This function is called by:
  6077 ;;		_get_measure
  6078 ;; This function uses a non-reentrant model
  6079 ;;
  6080                           
  6081  05E5                     _start_alarm:	
  6082                           ;psect for function _start_alarm
  6083                           
  6084                           
  6085                           ;main.c: 116:     FLAGS.bits.ALARM = 1;
  6086                           
  6087                           ;incstack = 0
  6088                           ; Regs used in _start_alarm: [wreg+status,2+status,0+pclath+cstack]
  6089  05E5  147C               	bsf	_FLAGS,0
  6090                           
  6091                           ;main.c: 117:     do { LATCbits.LATC0 = 1; } while(0);
  6092  05E6  0022               	movlb	2	; select bank2
  6093  05E7  140E               	bsf	14,0	;volatile
  6094                           
  6095                           ;main.c: 118:     INTCONbits.TMR0IE = 1;
  6096  05E8  168B               	bsf	11,5	;volatile
  6097                           
  6098                           ;main.c: 119:     if (FLAGS.bits.NORMAL_WORK_MODE) {
  6099  05E9  1CFC               	btfss	_FLAGS,1
  6100  05EA  2DED               	goto	i1l2010
  6101                           
  6102                           ;main.c: 120:         go_close();
  6103  05EB  24F3               	fcall	i1_go_close
  6104                           
  6105                           ;main.c: 121:     } else {
  6106  05EC  0008               	return
  6107  05ED                     i1l2010:
  6108                           
  6109                           ;main.c: 122:         go_close_alt();
  6110  05ED  262B               	fcall	i1_go_close_alt
  6111  05EE  0008               	return
  6112  05EF                     __end_of_start_alarm:
  6113                           
  6114                           	psect	text46
  6115  062B                     __ptext46:	
  6116 ;; *************** function i1_go_close_alt *****************
  6117 ;; Defined at:
  6118 ;;		line 102 in file "main.c"
  6119 ;; Parameters:    Size  Location     Type
  6120 ;;		None
  6121 ;; Auto vars:     Size  Location     Type
  6122 ;;		None
  6123 ;; Return value:  Size  Location     Type
  6124 ;;                  1    wreg      void 
  6125 ;; Registers used:
  6126 ;;		None
  6127 ;; Tracked objects:
  6128 ;;		On entry : 0/0
  6129 ;;		On exit  : 0/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMMON   BANK0   BANK1
  6132 ;;      Params:         0       0       0
  6133 ;;      Locals:         0       0       0
  6134 ;;      Temps:          0       0       0
  6135 ;;      Totals:         0       0       0
  6136 ;;Total ram usage:        0 bytes
  6137 ;; Hardware stack levels used: 1
  6138 ;; This function calls:
  6139 ;;		Nothing
  6140 ;; This function is called by:
  6141 ;;		_start_alarm
  6142 ;; This function uses a non-reentrant model
  6143 ;;
  6144                           
  6145  062B                     i1_go_close_alt:	
  6146                           ;psect for function i1_go_close_alt
  6147                           
  6148                           
  6149                           ;main.c: 103:     FLAGS.bits.CLOSED = 1;
  6150                           
  6151                           ;incstack = 0
  6152                           ; Regs used in i1_go_close_alt: []
  6153  062B  157C               	bsf	_FLAGS,2
  6154                           
  6155                           ;main.c: 104:     do { LATCbits.LATC4 = 0; } while(0);
  6156  062C  0022               	movlb	2	; select bank2
  6157  062D  120E               	bcf	14,4	;volatile
  6158                           
  6159                           ;main.c: 105:     do { LATCbits.LATC5 = 1; } while(0);
  6160  062E  168E               	bsf	14,5	;volatile
  6161  062F  0008               	return
  6162  0630                     __end_ofi1_go_close_alt:
  6163                           
  6164                           	psect	text47
  6165  04F3                     __ptext47:	
  6166 ;; *************** function i1_go_close *****************
  6167 ;; Defined at:
  6168 ;;		line 83 in file "main.c"
  6169 ;; Parameters:    Size  Location     Type
  6170 ;;		None
  6171 ;; Auto vars:     Size  Location     Type
  6172 ;;		None
  6173 ;; Return value:  Size  Location     Type
  6174 ;;                  1    wreg      void 
  6175 ;; Registers used:
  6176 ;;		wreg
  6177 ;; Tracked objects:
  6178 ;;		On entry : 0/0
  6179 ;;		On exit  : 0/0
  6180 ;;		Unchanged: 0/0
  6181 ;; Data sizes:     COMMON   BANK0   BANK1
  6182 ;;      Params:         0       0       0
  6183 ;;      Locals:         0       0       0
  6184 ;;      Temps:          2       0       0
  6185 ;;      Totals:         2       0       0
  6186 ;;Total ram usage:        2 bytes
  6187 ;; Hardware stack levels used: 1
  6188 ;; This function calls:
  6189 ;;		Nothing
  6190 ;; This function is called by:
  6191 ;;		_start_alarm
  6192 ;; This function uses a non-reentrant model
  6193 ;;
  6194                           
  6195  04F3                     i1_go_close:	
  6196                           ;psect for function i1_go_close
  6197                           
  6198                           
  6199                           ;main.c: 84:     time_s = 0;
  6200                           
  6201                           ;incstack = 0
  6202                           ; Regs used in i1_go_close: [wreg]
  6203  04F3  3000               	movlw	0
  6204  04F4  0020               	movlb	0	; select bank0
  6205  04F5  00DD               	movwf	_time_s
  6206  04F6  3000               	movlw	0
  6207  04F7  00DE               	movwf	_time_s+1
  6208  04F8  3000               	movlw	0
  6209  04F9  00DF               	movwf	_time_s+2
  6210  04FA  0022               	movlb	2	; select bank2
  6211  04FB  160E               	bsf	14,4	;volatile
  6212                           
  6213                           ;main.c: 86:     _delay((unsigned long)((1 * 1000)*(16000000/4000.0)));
  6214  04FC  3015               	movlw	21
  6215  04FD  00F1               	movwf	??i1_go_close+1
  6216  04FE  304B               	movlw	75
  6217  04FF  00F0               	movwf	??i1_go_close
  6218  0500  30BE               	movlw	190
  6219  0501                     u221_27:
  6220  0501  0B89               	decfsz	9,f
  6221  0502  2D01               	goto	u221_27
  6222  0503  0BF0               	decfsz	??i1_go_close,f
  6223  0504  2D01               	goto	u221_27
  6224  0505  0BF1               	decfsz	??i1_go_close+1,f
  6225  0506  2D01               	goto	u221_27
  6226  0507  3200               	nop2
  6227  0508  0022               	movlb	2	; select bank2
  6228  0509  168E               	bsf	14,5	;volatile
  6229                           
  6230                           ;main.c: 88:     time_pow_s = 10;
  6231  050A  300A               	movlw	10
  6232  050B  00F0               	movwf	??i1_go_close
  6233  050C  0870               	movf	??i1_go_close,w
  6234  050D  0020               	movlb	0	; select bank0
  6235  050E  00E6               	movwf	_time_pow_s
  6236                           
  6237                           ;main.c: 89:     FLAGS.bits.RELE_POW_WAIT = 1;
  6238  050F  16FC               	bsf	_FLAGS,5
  6239                           
  6240                           ;main.c: 90:     FLAGS.bits.RELE_CON_WAIT = 1;
  6241  0510  177C               	bsf	_FLAGS,6
  6242  0511  0008               	return
  6243  0512                     __end_ofi1_go_close:
  6244                           
  6245                           	psect	text48
  6246  05AC                     __ptext48:	
  6247 ;; *************** function _TMR0_ISR *****************
  6248 ;; Defined at:
  6249 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  6250 ;; Parameters:    Size  Location     Type
  6251 ;;		None
  6252 ;; Auto vars:     Size  Location     Type
  6253 ;;		None
  6254 ;; Return value:  Size  Location     Type
  6255 ;;                  1    wreg      void 
  6256 ;; Registers used:
  6257 ;;		wreg, status,2, status,0, pclath, cstack
  6258 ;; Tracked objects:
  6259 ;;		On entry : 0/0
  6260 ;;		On exit  : 0/0
  6261 ;;		Unchanged: 0/0
  6262 ;; Data sizes:     COMMON   BANK0   BANK1
  6263 ;;      Params:         0       0       0
  6264 ;;      Locals:         0       0       0
  6265 ;;      Temps:          0       0       0
  6266 ;;      Totals:         0       0       0
  6267 ;;Total ram usage:        0 bytes
  6268 ;; Hardware stack levels used: 1
  6269 ;; Hardware stack levels required when called: 1
  6270 ;; This function calls:
  6271 ;;		Absolute function
  6272 ;;		_TMR0_DefaultInterruptHandler
  6273 ;;		i1_switch_zum
  6274 ;; This function is called by:
  6275 ;;		_INTERRUPT_InterruptManager
  6276 ;; This function uses a non-reentrant model
  6277 ;;
  6278                           
  6279  05AC                     _TMR0_ISR:	
  6280                           ;psect for function _TMR0_ISR
  6281                           
  6282                           
  6283                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
  6284                           
  6285                           ;incstack = 0
  6286                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  6287  05AC  110B               	bcf	11,2	;volatile
  6288                           
  6289                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
  6290  05AD  0020               	movlb	0	; select bank0
  6291  05AE  086C               	movf	_timer0ReloadVal,w	;volatile
  6292  05AF  0095               	movwf	21	;volatile
  6293                           
  6294                           ;mcc_generated_files/tmr0.c: 116:     if(TMR0_InterruptHandler)
  6295  05B0  0868               	movf	_TMR0_InterruptHandler,w
  6296  05B1  0469               	iorwf	_TMR0_InterruptHandler+1,w
  6297  05B2  1903               	btfsc	3,2
  6298  05B3  0008               	return
  6299                           
  6300                           ;mcc_generated_files/tmr0.c: 117:     {;mcc_generated_files/tmr0.c: 118:         TMR0_In
      +                          terruptHandler();
  6301  05B4  0869               	movf	_TMR0_InterruptHandler+1,w
  6302  05B5  008A               	movwf	10
  6303  05B6  0868               	movf	_TMR0_InterruptHandler,w
  6304  05B7  000A               	callw
  6305  05B8  3185               	pagesel	$
  6306  05B9  0008               	return
  6307  05BA                     __end_of_TMR0_ISR:
  6308                           
  6309                           	psect	text49
  6310  0648                     __ptext49:	
  6311 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  6312 ;; Defined at:
  6313 ;;		line 129 in file "mcc_generated_files/tmr0.c"
  6314 ;; Parameters:    Size  Location     Type
  6315 ;;		None
  6316 ;; Auto vars:     Size  Location     Type
  6317 ;;		None
  6318 ;; Return value:  Size  Location     Type
  6319 ;;                  1    wreg      void 
  6320 ;; Registers used:
  6321 ;;		None
  6322 ;; Tracked objects:
  6323 ;;		On entry : 0/0
  6324 ;;		On exit  : 0/0
  6325 ;;		Unchanged: 0/0
  6326 ;; Data sizes:     COMMON   BANK0   BANK1
  6327 ;;      Params:         0       0       0
  6328 ;;      Locals:         0       0       0
  6329 ;;      Temps:          0       0       0
  6330 ;;      Totals:         0       0       0
  6331 ;;Total ram usage:        0 bytes
  6332 ;; Hardware stack levels used: 1
  6333 ;; This function calls:
  6334 ;;		Nothing
  6335 ;; This function is called by:
  6336 ;;		_TMR0_Initialize
  6337 ;;		_TMR0_ISR
  6338 ;; This function uses a non-reentrant model
  6339 ;;
  6340                           
  6341  0648                     _TMR0_DefaultInterruptHandler:	
  6342                           ;psect for function _TMR0_DefaultInterruptHandler
  6343                           
  6344                           
  6345                           ;incstack = 0
  6346                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  6347  0648  0008               	return
  6348  0649                     __end_of_TMR0_DefaultInterruptHandler:
  6349                           
  6350                           	psect	text50
  6351  05BA                     __ptext50:	
  6352 ;; *************** function i1_switch_zum *****************
  6353 ;; Defined at:
  6354 ;;		line 65 in file "main.c"
  6355 ;; Parameters:    Size  Location     Type
  6356 ;;		None
  6357 ;; Auto vars:     Size  Location     Type
  6358 ;;		None
  6359 ;; Return value:  Size  Location     Type
  6360 ;;                  1    wreg      void 
  6361 ;; Registers used:
  6362 ;;		status,0
  6363 ;; Tracked objects:
  6364 ;;		On entry : 0/0
  6365 ;;		On exit  : 0/0
  6366 ;;		Unchanged: 0/0
  6367 ;; Data sizes:     COMMON   BANK0   BANK1
  6368 ;;      Params:         0       0       0
  6369 ;;      Locals:         0       0       0
  6370 ;;      Temps:          0       0       0
  6371 ;;      Totals:         0       0       0
  6372 ;;Total ram usage:        0 bytes
  6373 ;; Hardware stack levels used: 1
  6374 ;; This function calls:
  6375 ;;		Nothing
  6376 ;; This function is called by:
  6377 ;;		_sec_tick_work
  6378 ;;		_TMR0_ISR
  6379 ;; This function uses a non-reentrant model
  6380 ;;
  6381                           
  6382  05BA                     i1_switch_zum:	
  6383                           ;psect for function i1_switch_zum
  6384                           
  6385  05BA                     i1l2098:	
  6386                           ;incstack = 0
  6387                           ; Regs used in i1_switch_zum: [status,0]
  6388                           ;main.c: 66:     do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  6389                           
  6390  05BA  1003               	clrc
  6391  05BB  0022               	movlb	2	; select bank2
  6392  05BC  1E8C               	btfss	12,5	;volatile
  6393  05BD  1403               	setc
  6394  05BE  1C03               	btfss	3,0
  6395  05BF  2DC3               	goto	u122_20
  6396  05C0  0022               	movlb	2	; select bank2
  6397  05C1  168C               	bsf	12,5	;volatile
  6398  05C2  0008               	return
  6399  05C3                     u122_20:
  6400  05C3  0022               	movlb	2	; select bank2
  6401  05C4  128C               	bcf	12,5	;volatile
  6402  05C5  0008               	return
  6403  05C6                     __end_ofi1_switch_zum:
  6404  007E                     btemp	set	126	;btemp
  6405  007E                     int$flags	set	126
  6406  007E                     wtemp0	set	126
  6407                           
  6408                           	psect	idloc
  6409                           
  6410                           ;Config register IDLOC0 @ 0x8000
  6411                           ;	unspecified, using default values
  6412  8000                     	org	32768
  6413  8000  3FFF               	dw	16383
  6414                           
  6415                           ;Config register IDLOC1 @ 0x8001
  6416                           ;	unspecified, using default values
  6417  8001                     	org	32769
  6418  8001  3FFF               	dw	16383
  6419                           
  6420                           ;Config register IDLOC2 @ 0x8002
  6421                           ;	unspecified, using default values
  6422  8002                     	org	32770
  6423  8002  3FFF               	dw	16383
  6424                           
  6425                           ;Config register IDLOC3 @ 0x8003
  6426                           ;	unspecified, using default values
  6427  8003                     	org	32771
  6428  8003  3FFF               	dw	16383
  6429                           
  6430                           	psect	config
  6431                           
  6432                           ;Config register CONFIG1 @ 0x8007
  6433                           ;	Oscillator Selection
  6434                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  6435                           ;	Watchdog Timer Enable
  6436                           ;	WDTE = ON, WDT enabled
  6437                           ;	Power-up Timer Enable
  6438                           ;	PWRTE = OFF, PWRT disabled
  6439                           ;	MCLR Pin Function Select
  6440                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  6441                           ;	Flash Program Memory Code Protection
  6442                           ;	CP = OFF, Program memory code protection is disabled
  6443                           ;	Data Memory Code Protection
  6444                           ;	CPD = OFF, Data memory code protection is disabled
  6445                           ;	Brown-out Reset Enable
  6446                           ;	BOREN = ON, Brown-out Reset enabled
  6447                           ;	Clock Out Enable
  6448                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  6449                           ;	Internal/External Switchover
  6450                           ;	IESO = ON, Internal/External Switchover mode is enabled
  6451                           ;	Fail-Safe Clock Monitor Enable
  6452                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  6453  8007                     	org	32775
  6454  8007  3FFC               	dw	16380
  6455                           
  6456                           ;Config register CONFIG2 @ 0x8008
  6457                           ;	Flash Memory Self-Write Protection
  6458                           ;	WRT = OFF, Write protection off
  6459                           ;	PLL Enable
  6460                           ;	PLLEN = OFF, 4x PLL disabled
  6461                           ;	Stack Overflow/Underflow Reset Enable
  6462                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  6463                           ;	Brown-out Reset Voltage Selection
  6464                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  6465                           ;	Low-Voltage Programming Enable
  6466                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  6467  8008                     	org	32776
  6468  8008  1EFF               	dw	7935

Data Sizes:
    Strings     0
    Constant    9
    Data        0
    BSS         64
    Persistent  37
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80     45      77
    BANK1            32      0      32

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> switch_zum(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> i1_switch_zum(), switch_zum(), TMR0_DefaultInterruptHandler(), Absolute function(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> sec_tick_work(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> sec_tick_work(), Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR2_CallBack->_sec_tick_work
    _sec_tick_work->_get_measure
    _get_measure->i1_ADC_GetConversion
    _start_alarm->i1_go_close

Critical Paths under _main in BANK0

    _switch_wm->_beep
    _get_jump_full->_ADC_GetConversion
    _get_fun_full->_ADC_GetConversion
    _get_eeprom->_get_time
    _get_time->_EEPROM_ReadShortLong
    _EEPROM_ReadShortLong->_EEPROM_ReadByte
    _get_adr->_EEPROM_ReadByte
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _povorot->_go_close
    _get_voltage->_EEPROM_WriteShortLong
    _EEPROM_WriteShortLong->_EEPROM_WriteByte
    _get_jump->_ADC_GetConversion
    _get_fun->_ADC_GetConversion
    _fun_work->_beep

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6905
                           _fun_work
                            _get_fun
                           _get_jump
                        _get_voltage
                            _povorot
                        _start_setup
                          _switch_wm
 ---------------------------------------------------------------------------------
 (1) _switch_wm                                            2     2      0    1308
                                             10 BANK0      2     2      0
                               _beep
                           _go_close
                       _go_close_alt
 ---------------------------------------------------------------------------------
 (1) _start_setup                                          0     0      0    2521
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
                         _get_eeprom
                       _get_fun_full
                      _get_jump_full
 ---------------------------------------------------------------------------------
 (2) _get_jump_full                                        4     4      0      70
                                              4 BANK0      4     4      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (2) _get_fun_full                                         4     4      0      70
                                              4 BANK0      4     4      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (2) _get_eeprom                                           0     0      0    1685
                            _get_adr
                           _get_time
 ---------------------------------------------------------------------------------
 (3) _get_time                                            29    29      0     977
                                             16 BANK0     29    29      0
               _EEPROM_ReadShortLong
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     196
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _EEPROM_ReadShortLong                                13    10      3     113
                                              3 BANK0     13    10      3
                    _EEPROM_ReadByte
 ---------------------------------------------------------------------------------
 (3) _get_adr                                             38    38      0     708
                                              3 BANK0     38    38      0
                    _EEPROM_ReadByte
 ---------------------------------------------------------------------------------
 (2) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     348
                     _ADC_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      1     1      0     174
                                              2 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR0_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _povorot                                              0     0      0       0
                           _go_close
                            _go_open
 ---------------------------------------------------------------------------------
 (1) _get_voltage                                          7     7      0    1678
                                             14 BANK0      7     7      0
                  _ADC_GetConversion
                    _EEPROM_ReadByte
                   _EEPROM_WriteByte
              _EEPROM_WriteShortLong
 ---------------------------------------------------------------------------------
 (2) _EEPROM_WriteShortLong                                9     6      3     853
                                              5 BANK0      9     6      3
                   _EEPROM_WriteByte
 ---------------------------------------------------------------------------------
 (3) _EEPROM_WriteByte                                     5     4      1     599
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (5) _EEPROM_ReadByte                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _get_jump                                             3     3      0      45
                                              4 BANK0      3     3      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (1) _get_fun                                              3     3      0      45
                                              4 BANK0      3     3      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversion                                    4     2      2      22
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _fun_work                                             2     2      0    1308
                                             10 BANK0      2     2      0
                               _beep
                           _go_close
                       _go_close_alt
                            _go_open
                        _go_open_alt
 ---------------------------------------------------------------------------------
 (2) _go_open_alt                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _go_open                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _go_close_alt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _go_close                                             2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _beep                                                10     4      6    1308
                                              0 BANK0     10     4      6
                         _switch_zum
 ---------------------------------------------------------------------------------
 (3) _switch_zum                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           0     0      0      67
                           _TMR0_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR2_ISR                                             0     0      0      67
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (8) _TMR2_CallBack                                        0     0      0      67
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
                      _sec_tick_work *
 ---------------------------------------------------------------------------------
 (9) _sec_tick_work                                        1     1      0      67
                                              7 COMMON     1     1      0
                        _get_measure
                          _rele_tick
                        _toggle_tone
                       i1_switch_zum
 ---------------------------------------------------------------------------------
 (10) _toggle_tone                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _rele_tick                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _get_measure                                         3     3      0      67
                                              4 COMMON     3     3      0
                        _start_alarm
                i1_ADC_GetConversion
 ---------------------------------------------------------------------------------
 (11) i1_ADC_GetConversion                                 4     2      2      22
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (11) _start_alarm                                         0     0      0       0
                         i1_go_close
                     i1_go_close_alt
 ---------------------------------------------------------------------------------
 (12) i1_go_close_alt                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_go_close                                          2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                       i1_switch_zum *
 ---------------------------------------------------------------------------------
 (10) i1_switch_zum                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fun_work
     _beep
       _switch_zum
     _go_close
     _go_close_alt
     _go_open
     _go_open_alt
   _get_fun
     _ADC_GetConversion
   _get_jump
     _ADC_GetConversion
   _get_voltage
     _ADC_GetConversion
     _EEPROM_ReadByte
     _EEPROM_WriteByte
     _EEPROM_WriteShortLong
       _EEPROM_WriteByte
   _povorot
     _go_close
     _go_open
   _start_setup
     _SYSTEM_Initialize
       _ADC_Initialize
       _FVR_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
       _TMR2_Initialize
         _TMR2_SetInterruptHandler
       _WDT_Initialize
     _TMR0_SetInterruptHandler
     _TMR2_SetInterruptHandler
     _TMR2_StartTimer
     _get_eeprom
       _get_adr
         _EEPROM_ReadByte
       _get_time
         _EEPROM_ReadShortLong
           _EEPROM_ReadByte
         ___bmul
     _get_fun_full
       _ADC_GetConversion
     _get_jump_full
       _ADC_GetConversion
   _switch_wm
     _beep
     _go_close
     _go_close_alt

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
     i1_switch_zum *
   _TMR2_ISR
     _TMR2_CallBack
       Absolute function(Fake) *
       _TMR2_DefaultInterruptHandler *
       _sec_tick_work *
         _get_measure
           _start_alarm
             i1_go_close
             i1_go_close_alt
           i1_ADC_GetConversion
         _rele_tick
         _toggle_tone
         i1_switch_zum

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      7A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2D      4D       6       96.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0      20       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      7A       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Fri Apr 29 14:36:36 2022

        __end_of_TMR2_SetInterruptHandler 061B                          get_fun_full@flag 0027  
                      get_fun@fun_counter 0065                            ___bmul@product 0022  
                   __end_of_sec_tick_work 0392                                        l63 04E9  
                                      _RD 0CA8                                        _WR 0CA9  
                           ?_go_close_alt 0070                              ?_get_voltage 0070  
                          ?_get_jump_full 0070                    __end_of_FVR_Initialize 0638  
                         _timer0ReloadVal 006C                                       l453 0319  
                                     l448 0313                                       l561 041B  
                                     l567 0542                                       _GIE 005F  
                             _start_alarm 05E5                                       _PR2 001B  
                             _start_setup 03EF                              ?_go_open_alt 0070  
                         _TMR2_Initialize 057B                                       wreg 0009  
                              i1_go_close 04F3                               get_jump@res 0025  
                                    l2206 043E                                      l2230 011A  
                                    l2302 005F                                      l2218 0110  
                                    l2090 0572                                      l2330 00C4  
                                    l2322 0093                                      l2164 05A0  
                                    l2236 012C                                      l2308 0083  
                                    l2254 014F                                      l2086 056C  
                                    l2334 00CC                                      l2422 0247  
                                    l2414 022E                                      l2272 0173  
                                    l2248 0138                                      l2344 00D4  
                                    l2336 0044                                      l2432 0249  
                                    l2424 023D                                      l2408 021E  
                                    l2506 0354                                      l2530 03B6  
                                    l2522 03A7                                      l2258 0157  
                                    l2338 00D1                                      l2450 02F0  
                                    l2442 02D7                                      l2620 01AC  
                                    l2268 0161                                      l2348 00E4  
                                    l2460 02F2                                      l2452 02E6  
                                    l2436 02C7                                      l2382 0443  
                                    l2630 01B9                                      l2614 019C  
                                    l2376 0448                                      l2378 0457  
                                    l2572 0294                                      l2548 03D3  
                                    l2708 05D2                                      l2574 0295  
                                    l2576 02A5                                      l2586 02AF  
                                    l2498 0345                                      l2588 02B0  
                                    l2598 0300                               get_time@buf 0049  
                                    u1250 05A9                                      u1340 043D  
                                    u2045 01C7                                      _LATA 010C  
                                    _LATC 010E                                      u1360 010C  
                                    u2157 04E4                                      u2167 04C3  
                                    u1480 0035                                      u2177 044E  
                                    u1705 0279                                      u1545 0052  
                                    u2187 045D                                      u1495 0073  
                                    u1835 03DE                                      u1695 0261  
                                    u1795 03CC                                      i1l63 0524  
                                    _TMR0 0015                                      _TMR2 001A  
                                    _WREN 0CAA                                      _WPUA 020C  
                                    _WPUC 020E                                      _beep 0441  
                                    _main 05D1                                      fsr0h 0005  
                                    fsr1h 0007                                      indf0 0000  
                                    fsr0l 0004                                      indf1 0001  
                                    fsr1l 0006                      EEPROM_WriteByte@addr 0023  
                                    btemp 007E                            ??_get_fun_full 0024  
                                    start 0016                         ___bmul@multiplier 0023  
                    __end_ofi1_switch_zum 05C6                   get_fun_full@fun_counter 0064  
                          ??_go_close_alt 0020                   __end_of_TMR0_Initialize 0569  
          ??_TMR0_DefaultInterruptHandler 0070                           ?_FVR_Initialize 0070  
           __end_of_OSCILLATOR_Initialize 060F                                     ?_beep 0020  
                                   ?_main 0070                              get_time@buf2 0045  
                                   _EEADR 0191                                     _FLAGS 007C  
                                   _T2CON 001C                                     i1l110 000B  
                                   i1l116 0014                                     i1l417 04AF  
                                   i1l409 0499                                     _TRISA 008C  
                                   _TRISC 008E                 ?_TMR0_SetInterruptHandler 0020  
                         __end_of_get_adr 018D                          __end_of_TMR0_ISR 05BA  
                         __end_of_get_fun 035F                          __end_of_TMR2_ISR 059D  
                         __end_of_go_open 05E5                                     beep@i 0029  
                                   beep@j 0028                            _WDT_Initialize 0630  
                                   pclath 000A                           __end_of_povorot 03EF  
                                   status 0003                                     wtemp0 007E  
                         _TMR2_StartTimer 0644                              get_voltage@q 0034  
                         __initialization 0017                              __end_of_beep 0469  
                            __end_of_main 05DB                           ??_get_jump_full 0024  
                 __end_of_TMR2_Initialize 058C               ?_INTERRUPT_InterruptManager 0070  
                                  ??_beep 0026                             get_time@F2660 004D  
                _TMR2_SetInterruptHandler 0615                             get_time@F2662 0059  
                                  ??_main 004D                    __end_of_WDT_Initialize 0634  
                             ?i1_go_close 0070                       i1_ADC_GetConversion 0512  
                           get_time@q_825 004C                             get_time@q_826 004B  
                                  _ADCON0 009D                                    _ADCON1 009E  
                                  _ADRESH 009C                                    _ADRESL 009B  
                                  _EEDATA 0193                                    _EECON2 0196  
                                  _APFCON 011D                                    _ANSELA 018C  
                                  _ANSELC 018E                                    _BORCON 0116  
                           get_time@times 0034                                    i1l2010 05ED  
                                  i1l2050 0483                                    i1l2054 048A  
                                  u112_20 05F6                                    i1l2174 037A  
                                  i1l2184 0390                                    i1l2176 037C  
                                  i1l2098 05BA                                    u122_20 05C3  
                                  u131_20 038E                                    u220_27 051F  
                                  u221_27 0501                                    u128_20 0378  
                                  _FVRCON 0117                                    u219_27 04A2  
                        _GOOD_WSP_VOLTAGE 063B                                    _OSCCON 0099  
                                  _WDTCON 0097             __end_of_EEPROM_WriteShortLong 028A  
                    ?i1_ADC_GetConversion 0070                          __end_of_get_jump 03C1  
                        __end_of_get_time 0104                          __end_of_go_close 04D4  
                                  ___bmul 0569                      _switch_zum$intlevel0 05A0  
                        ?_TMR0_Initialize 0070                         ??_EEPROM_ReadByte 0020  
                        __end_of_fun_work 02C3                                    _time_s 005D  
                __end_of_EEPROM_WriteByte 0441                                 ??_get_adr 0023  
                               ??_get_fun 0024                                 ??_go_open 0020  
                    __end_of_get_fun_full 0251                           ?_WDT_Initialize 0070  
                          get_measure@res 0075                    EEPROM_WriteByte@status 0024  
                ADC_GetConversion@channel 0023                                 ??_povorot 0022  
                 __end_of_TMR2_StartTimer 0647  TMR0_SetInterruptHandler@InterruptHandler 0020  
TMR2_SetInterruptHandler@InterruptHandler 0020                      __end_of_go_close_alt 062B  
                       _SYSTEM_Initialize 05F8                   __end_of__initialization 0028  
                   __end_of_TMR2_CallBack 05D1                        ?_SYSTEM_Initialize 0070  
                            ?_toggle_tone 0070                     ??i1_ADC_GetConversion 0072  
                     ___bmul@multiplicand 0020                  EEPROM_ReadShortLong@addr 002F  
                          __pcstackCOMMON 0070                 get_jump_full@jump_counter 0062  
                     ??_SYSTEM_Initialize 0023                                 ?_TMR0_ISR 0070  
                               ?_TMR2_ISR 0070                     __end_of_ROTATION_TIME 063B  
                        ?_TMR2_Initialize 0070                i1ADC_GetConversion@channel 0073  
                            ?_start_alarm 0070                            _OPTION_REGbits 0095  
                            ?_start_setup 0070                              i1_switch_zum 05BA  
               __end_of_SYSTEM_Initialize 0600                                __pbssBANK0 004D  
                              __pbssBANK1 00A0                          ??_FVR_Initialize 0020  
                              __pmaintext 05D1                                   ?___bmul 0020  
        __end_of_TMR0_SetInterruptHandler 0621                                ??_TMR0_ISR 0070  
                              ??_TMR2_ISR 0078                                __pintentry 0004  
                        get_jump_full@res 0025                                _get_eeprom 0641  
                                 _OSCTUNE 0098                          ?_TMR2_StartTimer 0070  
                               ?_get_jump 0070                                 ?_get_time 0070  
                               ?_go_close 0070                                 ?_fun_work 0070  
                    _ADC_InterruptHandler 0060                ??_TMR2_SetInterruptHandler 0022  
                __end_of_GOOD_WSP_VOLTAGE 063E                                   __ptext1 02F8  
                                 __ptext2 03EF                       get_measure@measures 007B  
                                 __ptext3 02C3                                   __ptext4 0218  
                                 __ptext5 0641                                   __ptext6 002B  
                                 __ptext7 0569                                   __ptext8 01D8  
                                 __ptext9 0104                                   _get_adr 0104  
                                 _get_fun 032C                                   _go_open 05DB  
                   _OSCILLATOR_Initialize 0608                                 _T2CONbits 001C  
                ??_PIN_MANAGER_Initialize 0020                              ??i1_go_close 0070  
                                 _povorot 03C1                                   clrloop0 0610  
                              ??_get_jump 0024                                ??_get_time 0030  
                              ??_go_close 0020                         __end_of_rele_tick 04B4  
                    end_of_initialization 0028                                ??_fun_work 002A  
                         _EEPROM_ReadByte 0540                              _get_fun_full 0218  
                      __end_ofi1_go_close 0512                     __end_of_get_jump_full 02F8  
                           _sec_tick_work 035F                                _time_pow_s 0066  
                            _go_close_alt 0626                          ??_WDT_Initialize 0020  
                _TMR0_SetInterruptHandler 061B                         ?_EEPROM_WriteByte 0020  
                       __end_of_switch_wm 032C                            get_voltage@buf 0032  
                          get_voltage@res 0030                               ?_get_eeprom 0070  
                      ??_EEPROM_WriteByte 0021                                get_adr@adr 0024  
                              get_adr@buf 0048                                 _TRISAbits 008C  
                               _TRISCbits 008E                           get_fun_full@res 0025  
                              get_fun@res 0025                        EEPROM_WriteByte@dt 0020  
            __end_of_EEPROM_ReadShortLong 0218                             ??_get_measure 0074  
                   _EEPROM_WriteShortLong 0251                                _switch_zum 059D  
    __end_of_TMR2_DefaultInterruptHandler 0648              _TMR2_DefaultInterruptHandler 0647  
                          __end_of___bmul 057B                            ?_sec_tick_work 0070  
                           ??_get_voltage 002E                            _ADC_Initialize 0600  
                  ?_OSCILLATOR_Initialize 0070                            i1_go_close_alt 062B  
                           ??_go_open_alt 0020                       start_initialization 0017  
                 __end_of_EEPROM_ReadByte 0555               __end_ofi1_ADC_GetConversion 052B  
                                ??___bmul 0021                    __end_of_ADC_Initialize 0608  
                     __end_of_get_measure 0490                    __end_ofi1_go_close_alt 0630  
           ?_TMR2_DefaultInterruptHandler 0070                               __pbssCOMMON 0078  
                     __end_of_get_voltage 01D8                                 ___latbits 0000  
                           __pcstackBANK0 0020                       __end_of_go_open_alt 0626  
                        _START_EEPROM_ADR 0067                     _TMR0_InterruptHandler 0068  
                               __pnvBANK0 0068                    ?_EEPROM_WriteShortLong 0025  
                  _PIN_MANAGER_Initialize 052B                           ??_sec_tick_work 0077  
                             ?_switch_zum 0070                                 beep@delay 0020  
                         ?_ADC_Initialize 0070                                 beep@count 0025  
                               beep@pause 0022                           ?i1_go_close_alt 0070  
            ??_INTERRUPT_InterruptManager 0078               EEPROM_WriteShortLong@ucData 0025  
                                ?_get_adr 0070                                  ?_get_fun 0070  
                                ?_go_open 0070                      _EEPROM_ReadShortLong 01D8  
                       sec_tick_work@iled 007A                                  ?_povorot 0070  
                      get_time@time_count 0040                          ?_EEPROM_ReadByte 0070  
                       ??_TMR0_Initialize 0022                         get_jump_full@flag 0027  
                                _LATAbits 010C                                  _LATCbits 010E  
                               _rele_tick 0490                                 clear_ram0 060F  
                           _TMR2_CallBack 05C6                                  _PIE1bits 0091  
                             _get_measure 0469                ??_TMR0_SetInterruptHandler 0022  
                                _PIR1bits 0011                                  _TMR0_ISR 05AC  
                                _TMR2_ISR 058C                             _ROTATION_TIME 0638  
                             _get_voltage 018D                                _ADCON0bits 009D  
                   ?_EEPROM_ReadShortLong 0023                                  _WPUAbits 020C  
                                _WPUCbits 020E                                 get_time@i 0048  
                               get_time@q 004A                              ??_get_eeprom 004D  
          ??_TMR2_DefaultInterruptHandler 0070                               _go_open_alt 0621  
               ?_TMR2_SetInterruptHandler 0020                         get_time@adr_error 0044  
                               _switch_wm 02F8                         ??_TMR2_Initialize 0022  
                          ?_TMR2_CallBack 0070                                ?_rele_tick 0070  
                           ??_toggle_tone 0070                         _ADC_GetConversion 04D4  
                      __end_of_get_eeprom 0644                   ??_OSCILLATOR_Initialize 0020  
                      ?_ADC_GetConversion 0020                    EEPROM_ReadShortLong@dt 002C  
                           ??_start_alarm 0072                                _ANSELAbits 018C  
                              _ANSELCbits 018E                       ??_ADC_GetConversion 0022  
                           ??_start_setup 004D                   EEPROM_WriteShortLong@dt 002C  
                              ?_switch_wm 0070                                  __ptext10 0644  
                                __ptext11 05F8                                  __ptext20 0600  
                                __ptext12 0630                                  __ptext21 03C1  
                                __ptext13 057B                                  __ptext30 0621  
                                __ptext22 018D                                  __ptext14 0615  
                                __ptext31 05DB                                  __ptext23 0251  
                                __ptext15 0555                                  __ptext40 035F  
                                __ptext32 0626                                  __ptext24 0419  
                                __ptext16 061B                                  __ptext41 05EF  
                                __ptext33 04B4                                  __ptext25 0540  
                                __ptext17 052B                                  __ptext50 05BA  
                                __ptext42 0490                                  __ptext34 0441  
                                __ptext26 0392                                  __ptext18 0608  
                                __ptext43 0469                                  __ptext35 059D  
                                __ptext27 032C                                  __ptext19 0634  
                                __ptext44 0512                                  __ptext28 04D4  
                                __ptext45 05E5                                  __ptext37 058C  
                                __ptext29 028A                                  __ptext46 062B  
                                __ptext38 05C6                                  __ptext47 04F3  
                                __ptext39 0647                                  __ptext48 05AC  
                                __ptext49 0648                             ?i1_switch_zum 0070  
                                beep@time 0024                                  _get_jump 0392  
                                _get_time 002B                                  _go_close 04B4  
                         _BAD_WSP_VOLTAGE 063E                                  _fun_work 028A  
    __end_of_TMR0_DefaultInterruptHandler 0649              _TMR0_DefaultInterruptHandler 0648  
               __end_of_ADC_GetConversion 04F3                                  int$flags 007E  
                                get_adr@i 0044                                  get_adr@q 0045  
                       ??_TMR2_StartTimer 0020                       __end_of_toggle_tone 05F8  
      __end_of_INTERRUPT_InterruptManager 0016                _INTERRUPT_InterruptManager 0004  
                  ??_EEPROM_ReadShortLong 0026                      get_jump@jump_counter 0063  
                              _INTCONbits 000B                                _FVRCONbits 0117  
                          ??i1_switch_zum 0070                       __end_of_start_alarm 05EF  
                     __end_of_start_setup 0419                                  intlevel1 0000  
                         ??_TMR2_CallBack 0078                   ??_EEPROM_WriteShortLong 0028  
               EEPROM_WriteShortLong@addr 002D                   ?_PIN_MANAGER_Initialize 0070  
                             ??_rele_tick 0070                       EEPROM_ReadByte@addr 0022  
                        ??_ADC_Initialize 0020             ?_TMR0_DefaultInterruptHandler 0070  
                        ??i1_go_close_alt 0070                              ??_switch_zum 0020  
                           _get_jump_full 02C3                             __pstringtext1 0638  
                           __pstringtext2 063B                             __pstringtext3 063E  
                          _FVR_Initialize 0634                                _OPTION_REG 0095  
                        get_voltage@q_804 0033                     TMR2_ISR@CountCallBack 0078  
                         _TMR0_Initialize 0555                   __end_of_BAD_WSP_VOLTAGE 0641  
                             ??_switch_wm 002A                              get_adr@F2640 00A0  
                      __end_of_switch_zum 05AC            __end_of_PIN_MANAGER_Initialize 0540  
                        _EEPROM_WriteByte 0419                              get_adr@i_814 0046  
                            get_adr@q_813 0047                     _TMR2_InterruptHandler 006A  
                             _toggle_tone 05EF                             ?_get_fun_full 0070  
                            ?_get_measure 0070  
