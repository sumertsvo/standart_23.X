

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Fri Apr 29 15:30:57 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F1823
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	intentry,global,class=CODE,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,delta=2
    60                           	psect	text45,local,class=CODE,merge=1,delta=2
    61                           	psect	text46,local,class=CODE,merge=1,delta=2
    62                           	psect	text47,local,class=CODE,merge=1,delta=2
    63                           	psect	text48,local,class=CODE,merge=1,delta=2
    64                           	psect	text49,local,class=CODE,merge=1,delta=2
    65                           	psect	text50,local,class=CODE,merge=1,delta=2
    66                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    67                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    68                           	dabs	1,0x7E,2
    69  0000                     
    70                           ; Version 2.40
    71                           ; Generated 17/11/2021 GMT
    72                           ; 
    73                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution. Publication is not required when
    87                           ;        this file is used in an embedded application.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC16F1823 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     	;# 
   106  0001                     	;# 
   107  0002                     	;# 
   108  0003                     	;# 
   109  0004                     	;# 
   110  0005                     	;# 
   111  0006                     	;# 
   112  0007                     	;# 
   113  0008                     	;# 
   114  0009                     	;# 
   115  000A                     	;# 
   116  000B                     	;# 
   117  000C                     	;# 
   118  000E                     	;# 
   119  0011                     	;# 
   120  0012                     	;# 
   121  0015                     	;# 
   122  0016                     	;# 
   123  0016                     	;# 
   124  0017                     	;# 
   125  0018                     	;# 
   126  0019                     	;# 
   127  001A                     	;# 
   128  001B                     	;# 
   129  001C                     	;# 
   130  001E                     	;# 
   131  001F                     	;# 
   132  008C                     	;# 
   133  008E                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0095                     	;# 
   137  0096                     	;# 
   138  0097                     	;# 
   139  0098                     	;# 
   140  0099                     	;# 
   141  009A                     	;# 
   142  009B                     	;# 
   143  009B                     	;# 
   144  009C                     	;# 
   145  009D                     	;# 
   146  009E                     	;# 
   147  010C                     	;# 
   148  010E                     	;# 
   149  0111                     	;# 
   150  0112                     	;# 
   151  0113                     	;# 
   152  0114                     	;# 
   153  0115                     	;# 
   154  0116                     	;# 
   155  0117                     	;# 
   156  0118                     	;# 
   157  0119                     	;# 
   158  011A                     	;# 
   159  011B                     	;# 
   160  011D                     	;# 
   161  011D                     	;# 
   162  018C                     	;# 
   163  018E                     	;# 
   164  0191                     	;# 
   165  0191                     	;# 
   166  0192                     	;# 
   167  0193                     	;# 
   168  0193                     	;# 
   169  0193                     	;# 
   170  0194                     	;# 
   171  0195                     	;# 
   172  0196                     	;# 
   173  0199                     	;# 
   174  019A                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019D                     	;# 
   182  019E                     	;# 
   183  019F                     	;# 
   184  020C                     	;# 
   185  020E                     	;# 
   186  0211                     	;# 
   187  0211                     	;# 
   188  0212                     	;# 
   189  0212                     	;# 
   190  0213                     	;# 
   191  0213                     	;# 
   192  0214                     	;# 
   193  0214                     	;# 
   194  0215                     	;# 
   195  0215                     	;# 
   196  0215                     	;# 
   197  0216                     	;# 
   198  0216                     	;# 
   199  0217                     	;# 
   200  0217                     	;# 
   201  0291                     	;# 
   202  0291                     	;# 
   203  0292                     	;# 
   204  0293                     	;# 
   205  0294                     	;# 
   206  0295                     	;# 
   207  0295                     	;# 
   208  0296                     	;# 
   209  0391                     	;# 
   210  0392                     	;# 
   211  0393                     	;# 
   212  039A                     	;# 
   213  039C                     	;# 
   214  039D                     	;# 
   215  039E                     	;# 
   216  039F                     	;# 
   217  0FE4                     	;# 
   218  0FE5                     	;# 
   219  0FE6                     	;# 
   220  0FE7                     	;# 
   221  0FE8                     	;# 
   222  0FE9                     	;# 
   223  0FEA                     	;# 
   224  0FEB                     	;# 
   225  0FED                     	;# 
   226  0FEE                     	;# 
   227  0FEF                     	;# 
   228  0000                     	;# 
   229  0001                     	;# 
   230  0002                     	;# 
   231  0003                     	;# 
   232  0004                     	;# 
   233  0005                     	;# 
   234  0006                     	;# 
   235  0007                     	;# 
   236  0008                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000E                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0015                     	;# 
   245  0016                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001C                     	;# 
   253  001E                     	;# 
   254  001F                     	;# 
   255  008C                     	;# 
   256  008E                     	;# 
   257  0091                     	;# 
   258  0092                     	;# 
   259  0095                     	;# 
   260  0096                     	;# 
   261  0097                     	;# 
   262  0098                     	;# 
   263  0099                     	;# 
   264  009A                     	;# 
   265  009B                     	;# 
   266  009B                     	;# 
   267  009C                     	;# 
   268  009D                     	;# 
   269  009E                     	;# 
   270  010C                     	;# 
   271  010E                     	;# 
   272  0111                     	;# 
   273  0112                     	;# 
   274  0113                     	;# 
   275  0114                     	;# 
   276  0115                     	;# 
   277  0116                     	;# 
   278  0117                     	;# 
   279  0118                     	;# 
   280  0119                     	;# 
   281  011A                     	;# 
   282  011B                     	;# 
   283  011D                     	;# 
   284  011D                     	;# 
   285  018C                     	;# 
   286  018E                     	;# 
   287  0191                     	;# 
   288  0191                     	;# 
   289  0192                     	;# 
   290  0193                     	;# 
   291  0193                     	;# 
   292  0193                     	;# 
   293  0194                     	;# 
   294  0195                     	;# 
   295  0196                     	;# 
   296  0199                     	;# 
   297  019A                     	;# 
   298  019B                     	;# 
   299  019B                     	;# 
   300  019B                     	;# 
   301  019B                     	;# 
   302  019C                     	;# 
   303  019C                     	;# 
   304  019D                     	;# 
   305  019E                     	;# 
   306  019F                     	;# 
   307  020C                     	;# 
   308  020E                     	;# 
   309  0211                     	;# 
   310  0211                     	;# 
   311  0212                     	;# 
   312  0212                     	;# 
   313  0213                     	;# 
   314  0213                     	;# 
   315  0214                     	;# 
   316  0214                     	;# 
   317  0215                     	;# 
   318  0215                     	;# 
   319  0215                     	;# 
   320  0216                     	;# 
   321  0216                     	;# 
   322  0217                     	;# 
   323  0217                     	;# 
   324  0291                     	;# 
   325  0291                     	;# 
   326  0292                     	;# 
   327  0293                     	;# 
   328  0294                     	;# 
   329  0295                     	;# 
   330  0295                     	;# 
   331  0296                     	;# 
   332  0391                     	;# 
   333  0392                     	;# 
   334  0393                     	;# 
   335  039A                     	;# 
   336  039C                     	;# 
   337  039D                     	;# 
   338  039E                     	;# 
   339  039F                     	;# 
   340  0FE4                     	;# 
   341  0FE5                     	;# 
   342  0FE6                     	;# 
   343  0FE7                     	;# 
   344  0FE8                     	;# 
   345  0FE9                     	;# 
   346  0FEA                     	;# 
   347  0FEB                     	;# 
   348  0FED                     	;# 
   349  0FEE                     	;# 
   350  0FEF                     	;# 
   351  0000                     	;# 
   352  0001                     	;# 
   353  0002                     	;# 
   354  0003                     	;# 
   355  0004                     	;# 
   356  0005                     	;# 
   357  0006                     	;# 
   358  0007                     	;# 
   359  0008                     	;# 
   360  0009                     	;# 
   361  000A                     	;# 
   362  000B                     	;# 
   363  000C                     	;# 
   364  000E                     	;# 
   365  0011                     	;# 
   366  0012                     	;# 
   367  0015                     	;# 
   368  0016                     	;# 
   369  0016                     	;# 
   370  0017                     	;# 
   371  0018                     	;# 
   372  0019                     	;# 
   373  001A                     	;# 
   374  001B                     	;# 
   375  001C                     	;# 
   376  001E                     	;# 
   377  001F                     	;# 
   378  008C                     	;# 
   379  008E                     	;# 
   380  0091                     	;# 
   381  0092                     	;# 
   382  0095                     	;# 
   383  0096                     	;# 
   384  0097                     	;# 
   385  0098                     	;# 
   386  0099                     	;# 
   387  009A                     	;# 
   388  009B                     	;# 
   389  009B                     	;# 
   390  009C                     	;# 
   391  009D                     	;# 
   392  009E                     	;# 
   393  010C                     	;# 
   394  010E                     	;# 
   395  0111                     	;# 
   396  0112                     	;# 
   397  0113                     	;# 
   398  0114                     	;# 
   399  0115                     	;# 
   400  0116                     	;# 
   401  0117                     	;# 
   402  0118                     	;# 
   403  0119                     	;# 
   404  011A                     	;# 
   405  011B                     	;# 
   406  011D                     	;# 
   407  011D                     	;# 
   408  018C                     	;# 
   409  018E                     	;# 
   410  0191                     	;# 
   411  0191                     	;# 
   412  0192                     	;# 
   413  0193                     	;# 
   414  0193                     	;# 
   415  0193                     	;# 
   416  0194                     	;# 
   417  0195                     	;# 
   418  0196                     	;# 
   419  0199                     	;# 
   420  019A                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019C                     	;# 
   426  019C                     	;# 
   427  019D                     	;# 
   428  019E                     	;# 
   429  019F                     	;# 
   430  020C                     	;# 
   431  020E                     	;# 
   432  0211                     	;# 
   433  0211                     	;# 
   434  0212                     	;# 
   435  0212                     	;# 
   436  0213                     	;# 
   437  0213                     	;# 
   438  0214                     	;# 
   439  0214                     	;# 
   440  0215                     	;# 
   441  0215                     	;# 
   442  0215                     	;# 
   443  0216                     	;# 
   444  0216                     	;# 
   445  0217                     	;# 
   446  0217                     	;# 
   447  0291                     	;# 
   448  0291                     	;# 
   449  0292                     	;# 
   450  0293                     	;# 
   451  0294                     	;# 
   452  0295                     	;# 
   453  0295                     	;# 
   454  0296                     	;# 
   455  0391                     	;# 
   456  0392                     	;# 
   457  0393                     	;# 
   458  039A                     	;# 
   459  039C                     	;# 
   460  039D                     	;# 
   461  039E                     	;# 
   462  039F                     	;# 
   463  0FE4                     	;# 
   464  0FE5                     	;# 
   465  0FE6                     	;# 
   466  0FE7                     	;# 
   467  0FE8                     	;# 
   468  0FE9                     	;# 
   469  0FEA                     	;# 
   470  0FEB                     	;# 
   471  0FED                     	;# 
   472  0FEE                     	;# 
   473  0FEF                     	;# 
   474  0000                     	;# 
   475  0001                     	;# 
   476  0002                     	;# 
   477  0003                     	;# 
   478  0004                     	;# 
   479  0005                     	;# 
   480  0006                     	;# 
   481  0007                     	;# 
   482  0008                     	;# 
   483  0009                     	;# 
   484  000A                     	;# 
   485  000B                     	;# 
   486  000C                     	;# 
   487  000E                     	;# 
   488  0011                     	;# 
   489  0012                     	;# 
   490  0015                     	;# 
   491  0016                     	;# 
   492  0016                     	;# 
   493  0017                     	;# 
   494  0018                     	;# 
   495  0019                     	;# 
   496  001A                     	;# 
   497  001B                     	;# 
   498  001C                     	;# 
   499  001E                     	;# 
   500  001F                     	;# 
   501  008C                     	;# 
   502  008E                     	;# 
   503  0091                     	;# 
   504  0092                     	;# 
   505  0095                     	;# 
   506  0096                     	;# 
   507  0097                     	;# 
   508  0098                     	;# 
   509  0099                     	;# 
   510  009A                     	;# 
   511  009B                     	;# 
   512  009B                     	;# 
   513  009C                     	;# 
   514  009D                     	;# 
   515  009E                     	;# 
   516  010C                     	;# 
   517  010E                     	;# 
   518  0111                     	;# 
   519  0112                     	;# 
   520  0113                     	;# 
   521  0114                     	;# 
   522  0115                     	;# 
   523  0116                     	;# 
   524  0117                     	;# 
   525  0118                     	;# 
   526  0119                     	;# 
   527  011A                     	;# 
   528  011B                     	;# 
   529  011D                     	;# 
   530  011D                     	;# 
   531  018C                     	;# 
   532  018E                     	;# 
   533  0191                     	;# 
   534  0191                     	;# 
   535  0192                     	;# 
   536  0193                     	;# 
   537  0193                     	;# 
   538  0193                     	;# 
   539  0194                     	;# 
   540  0195                     	;# 
   541  0196                     	;# 
   542  0199                     	;# 
   543  019A                     	;# 
   544  019B                     	;# 
   545  019B                     	;# 
   546  019B                     	;# 
   547  019B                     	;# 
   548  019C                     	;# 
   549  019C                     	;# 
   550  019D                     	;# 
   551  019E                     	;# 
   552  019F                     	;# 
   553  020C                     	;# 
   554  020E                     	;# 
   555  0211                     	;# 
   556  0211                     	;# 
   557  0212                     	;# 
   558  0212                     	;# 
   559  0213                     	;# 
   560  0213                     	;# 
   561  0214                     	;# 
   562  0214                     	;# 
   563  0215                     	;# 
   564  0215                     	;# 
   565  0215                     	;# 
   566  0216                     	;# 
   567  0216                     	;# 
   568  0217                     	;# 
   569  0217                     	;# 
   570  0291                     	;# 
   571  0291                     	;# 
   572  0292                     	;# 
   573  0293                     	;# 
   574  0294                     	;# 
   575  0295                     	;# 
   576  0295                     	;# 
   577  0296                     	;# 
   578  0391                     	;# 
   579  0392                     	;# 
   580  0393                     	;# 
   581  039A                     	;# 
   582  039C                     	;# 
   583  039D                     	;# 
   584  039E                     	;# 
   585  039F                     	;# 
   586  0FE4                     	;# 
   587  0FE5                     	;# 
   588  0FE6                     	;# 
   589  0FE7                     	;# 
   590  0FE8                     	;# 
   591  0FE9                     	;# 
   592  0FEA                     	;# 
   593  0FEB                     	;# 
   594  0FED                     	;# 
   595  0FEE                     	;# 
   596  0FEF                     	;# 
   597  0000                     	;# 
   598  0001                     	;# 
   599  0002                     	;# 
   600  0003                     	;# 
   601  0004                     	;# 
   602  0005                     	;# 
   603  0006                     	;# 
   604  0007                     	;# 
   605  0008                     	;# 
   606  0009                     	;# 
   607  000A                     	;# 
   608  000B                     	;# 
   609  000C                     	;# 
   610  000E                     	;# 
   611  0011                     	;# 
   612  0012                     	;# 
   613  0015                     	;# 
   614  0016                     	;# 
   615  0016                     	;# 
   616  0017                     	;# 
   617  0018                     	;# 
   618  0019                     	;# 
   619  001A                     	;# 
   620  001B                     	;# 
   621  001C                     	;# 
   622  001E                     	;# 
   623  001F                     	;# 
   624  008C                     	;# 
   625  008E                     	;# 
   626  0091                     	;# 
   627  0092                     	;# 
   628  0095                     	;# 
   629  0096                     	;# 
   630  0097                     	;# 
   631  0098                     	;# 
   632  0099                     	;# 
   633  009A                     	;# 
   634  009B                     	;# 
   635  009B                     	;# 
   636  009C                     	;# 
   637  009D                     	;# 
   638  009E                     	;# 
   639  010C                     	;# 
   640  010E                     	;# 
   641  0111                     	;# 
   642  0112                     	;# 
   643  0113                     	;# 
   644  0114                     	;# 
   645  0115                     	;# 
   646  0116                     	;# 
   647  0117                     	;# 
   648  0118                     	;# 
   649  0119                     	;# 
   650  011A                     	;# 
   651  011B                     	;# 
   652  011D                     	;# 
   653  011D                     	;# 
   654  018C                     	;# 
   655  018E                     	;# 
   656  0191                     	;# 
   657  0191                     	;# 
   658  0192                     	;# 
   659  0193                     	;# 
   660  0193                     	;# 
   661  0193                     	;# 
   662  0194                     	;# 
   663  0195                     	;# 
   664  0196                     	;# 
   665  0199                     	;# 
   666  019A                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019B                     	;# 
   671  019C                     	;# 
   672  019C                     	;# 
   673  019D                     	;# 
   674  019E                     	;# 
   675  019F                     	;# 
   676  020C                     	;# 
   677  020E                     	;# 
   678  0211                     	;# 
   679  0211                     	;# 
   680  0212                     	;# 
   681  0212                     	;# 
   682  0213                     	;# 
   683  0213                     	;# 
   684  0214                     	;# 
   685  0214                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0215                     	;# 
   689  0216                     	;# 
   690  0216                     	;# 
   691  0217                     	;# 
   692  0217                     	;# 
   693  0291                     	;# 
   694  0291                     	;# 
   695  0292                     	;# 
   696  0293                     	;# 
   697  0294                     	;# 
   698  0295                     	;# 
   699  0295                     	;# 
   700  0296                     	;# 
   701  0391                     	;# 
   702  0392                     	;# 
   703  0393                     	;# 
   704  039A                     	;# 
   705  039C                     	;# 
   706  039D                     	;# 
   707  039E                     	;# 
   708  039F                     	;# 
   709  0FE4                     	;# 
   710  0FE5                     	;# 
   711  0FE6                     	;# 
   712  0FE7                     	;# 
   713  0FE8                     	;# 
   714  0FE9                     	;# 
   715  0FEA                     	;# 
   716  0FEB                     	;# 
   717  0FED                     	;# 
   718  0FEE                     	;# 
   719  0FEF                     	;# 
   720  0000                     	;# 
   721  0001                     	;# 
   722  0002                     	;# 
   723  0003                     	;# 
   724  0004                     	;# 
   725  0005                     	;# 
   726  0006                     	;# 
   727  0007                     	;# 
   728  0008                     	;# 
   729  0009                     	;# 
   730  000A                     	;# 
   731  000B                     	;# 
   732  000C                     	;# 
   733  000E                     	;# 
   734  0011                     	;# 
   735  0012                     	;# 
   736  0015                     	;# 
   737  0016                     	;# 
   738  0016                     	;# 
   739  0017                     	;# 
   740  0018                     	;# 
   741  0019                     	;# 
   742  001A                     	;# 
   743  001B                     	;# 
   744  001C                     	;# 
   745  001E                     	;# 
   746  001F                     	;# 
   747  008C                     	;# 
   748  008E                     	;# 
   749  0091                     	;# 
   750  0092                     	;# 
   751  0095                     	;# 
   752  0096                     	;# 
   753  0097                     	;# 
   754  0098                     	;# 
   755  0099                     	;# 
   756  009A                     	;# 
   757  009B                     	;# 
   758  009B                     	;# 
   759  009C                     	;# 
   760  009D                     	;# 
   761  009E                     	;# 
   762  010C                     	;# 
   763  010E                     	;# 
   764  0111                     	;# 
   765  0112                     	;# 
   766  0113                     	;# 
   767  0114                     	;# 
   768  0115                     	;# 
   769  0116                     	;# 
   770  0117                     	;# 
   771  0118                     	;# 
   772  0119                     	;# 
   773  011A                     	;# 
   774  011B                     	;# 
   775  011D                     	;# 
   776  011D                     	;# 
   777  018C                     	;# 
   778  018E                     	;# 
   779  0191                     	;# 
   780  0191                     	;# 
   781  0192                     	;# 
   782  0193                     	;# 
   783  0193                     	;# 
   784  0193                     	;# 
   785  0194                     	;# 
   786  0195                     	;# 
   787  0196                     	;# 
   788  0199                     	;# 
   789  019A                     	;# 
   790  019B                     	;# 
   791  019B                     	;# 
   792  019B                     	;# 
   793  019B                     	;# 
   794  019C                     	;# 
   795  019C                     	;# 
   796  019D                     	;# 
   797  019E                     	;# 
   798  019F                     	;# 
   799  020C                     	;# 
   800  020E                     	;# 
   801  0211                     	;# 
   802  0211                     	;# 
   803  0212                     	;# 
   804  0212                     	;# 
   805  0213                     	;# 
   806  0213                     	;# 
   807  0214                     	;# 
   808  0214                     	;# 
   809  0215                     	;# 
   810  0215                     	;# 
   811  0215                     	;# 
   812  0216                     	;# 
   813  0216                     	;# 
   814  0217                     	;# 
   815  0217                     	;# 
   816  0291                     	;# 
   817  0291                     	;# 
   818  0292                     	;# 
   819  0293                     	;# 
   820  0294                     	;# 
   821  0295                     	;# 
   822  0295                     	;# 
   823  0296                     	;# 
   824  0391                     	;# 
   825  0392                     	;# 
   826  0393                     	;# 
   827  039A                     	;# 
   828  039C                     	;# 
   829  039D                     	;# 
   830  039E                     	;# 
   831  039F                     	;# 
   832  0FE4                     	;# 
   833  0FE5                     	;# 
   834  0FE6                     	;# 
   835  0FE7                     	;# 
   836  0FE8                     	;# 
   837  0FE9                     	;# 
   838  0FEA                     	;# 
   839  0FEB                     	;# 
   840  0FED                     	;# 
   841  0FEE                     	;# 
   842  0FEF                     	;# 
   843  0000                     	;# 
   844  0001                     	;# 
   845  0002                     	;# 
   846  0003                     	;# 
   847  0004                     	;# 
   848  0005                     	;# 
   849  0006                     	;# 
   850  0007                     	;# 
   851  0008                     	;# 
   852  0009                     	;# 
   853  000A                     	;# 
   854  000B                     	;# 
   855  000C                     	;# 
   856  000E                     	;# 
   857  0011                     	;# 
   858  0012                     	;# 
   859  0015                     	;# 
   860  0016                     	;# 
   861  0016                     	;# 
   862  0017                     	;# 
   863  0018                     	;# 
   864  0019                     	;# 
   865  001A                     	;# 
   866  001B                     	;# 
   867  001C                     	;# 
   868  001E                     	;# 
   869  001F                     	;# 
   870  008C                     	;# 
   871  008E                     	;# 
   872  0091                     	;# 
   873  0092                     	;# 
   874  0095                     	;# 
   875  0096                     	;# 
   876  0097                     	;# 
   877  0098                     	;# 
   878  0099                     	;# 
   879  009A                     	;# 
   880  009B                     	;# 
   881  009B                     	;# 
   882  009C                     	;# 
   883  009D                     	;# 
   884  009E                     	;# 
   885  010C                     	;# 
   886  010E                     	;# 
   887  0111                     	;# 
   888  0112                     	;# 
   889  0113                     	;# 
   890  0114                     	;# 
   891  0115                     	;# 
   892  0116                     	;# 
   893  0117                     	;# 
   894  0118                     	;# 
   895  0119                     	;# 
   896  011A                     	;# 
   897  011B                     	;# 
   898  011D                     	;# 
   899  011D                     	;# 
   900  018C                     	;# 
   901  018E                     	;# 
   902  0191                     	;# 
   903  0191                     	;# 
   904  0192                     	;# 
   905  0193                     	;# 
   906  0193                     	;# 
   907  0193                     	;# 
   908  0194                     	;# 
   909  0195                     	;# 
   910  0196                     	;# 
   911  0199                     	;# 
   912  019A                     	;# 
   913  019B                     	;# 
   914  019B                     	;# 
   915  019B                     	;# 
   916  019B                     	;# 
   917  019C                     	;# 
   918  019C                     	;# 
   919  019D                     	;# 
   920  019E                     	;# 
   921  019F                     	;# 
   922  020C                     	;# 
   923  020E                     	;# 
   924  0211                     	;# 
   925  0211                     	;# 
   926  0212                     	;# 
   927  0212                     	;# 
   928  0213                     	;# 
   929  0213                     	;# 
   930  0214                     	;# 
   931  0214                     	;# 
   932  0215                     	;# 
   933  0215                     	;# 
   934  0215                     	;# 
   935  0216                     	;# 
   936  0216                     	;# 
   937  0217                     	;# 
   938  0217                     	;# 
   939  0291                     	;# 
   940  0291                     	;# 
   941  0292                     	;# 
   942  0293                     	;# 
   943  0294                     	;# 
   944  0295                     	;# 
   945  0295                     	;# 
   946  0296                     	;# 
   947  0391                     	;# 
   948  0392                     	;# 
   949  0393                     	;# 
   950  039A                     	;# 
   951  039C                     	;# 
   952  039D                     	;# 
   953  039E                     	;# 
   954  039F                     	;# 
   955  0FE4                     	;# 
   956  0FE5                     	;# 
   957  0FE6                     	;# 
   958  0FE7                     	;# 
   959  0FE8                     	;# 
   960  0FE9                     	;# 
   961  0FEA                     	;# 
   962  0FEB                     	;# 
   963  0FED                     	;# 
   964  0FEE                     	;# 
   965  0FEF                     	;# 
   966  0000                     	;# 
   967  0001                     	;# 
   968  0002                     	;# 
   969  0003                     	;# 
   970  0004                     	;# 
   971  0005                     	;# 
   972  0006                     	;# 
   973  0007                     	;# 
   974  0008                     	;# 
   975  0009                     	;# 
   976  000A                     	;# 
   977  000B                     	;# 
   978  000C                     	;# 
   979  000E                     	;# 
   980  0011                     	;# 
   981  0012                     	;# 
   982  0015                     	;# 
   983  0016                     	;# 
   984  0016                     	;# 
   985  0017                     	;# 
   986  0018                     	;# 
   987  0019                     	;# 
   988  001A                     	;# 
   989  001B                     	;# 
   990  001C                     	;# 
   991  001E                     	;# 
   992  001F                     	;# 
   993  008C                     	;# 
   994  008E                     	;# 
   995  0091                     	;# 
   996  0092                     	;# 
   997  0095                     	;# 
   998  0096                     	;# 
   999  0097                     	;# 
  1000  0098                     	;# 
  1001  0099                     	;# 
  1002  009A                     	;# 
  1003  009B                     	;# 
  1004  009B                     	;# 
  1005  009C                     	;# 
  1006  009D                     	;# 
  1007  009E                     	;# 
  1008  010C                     	;# 
  1009  010E                     	;# 
  1010  0111                     	;# 
  1011  0112                     	;# 
  1012  0113                     	;# 
  1013  0114                     	;# 
  1014  0115                     	;# 
  1015  0116                     	;# 
  1016  0117                     	;# 
  1017  0118                     	;# 
  1018  0119                     	;# 
  1019  011A                     	;# 
  1020  011B                     	;# 
  1021  011D                     	;# 
  1022  011D                     	;# 
  1023  018C                     	;# 
  1024  018E                     	;# 
  1025  0191                     	;# 
  1026  0191                     	;# 
  1027  0192                     	;# 
  1028  0193                     	;# 
  1029  0193                     	;# 
  1030  0193                     	;# 
  1031  0194                     	;# 
  1032  0195                     	;# 
  1033  0196                     	;# 
  1034  0199                     	;# 
  1035  019A                     	;# 
  1036  019B                     	;# 
  1037  019B                     	;# 
  1038  019B                     	;# 
  1039  019B                     	;# 
  1040  019C                     	;# 
  1041  019C                     	;# 
  1042  019D                     	;# 
  1043  019E                     	;# 
  1044  019F                     	;# 
  1045  020C                     	;# 
  1046  020E                     	;# 
  1047  0211                     	;# 
  1048  0211                     	;# 
  1049  0212                     	;# 
  1050  0212                     	;# 
  1051  0213                     	;# 
  1052  0213                     	;# 
  1053  0214                     	;# 
  1054  0214                     	;# 
  1055  0215                     	;# 
  1056  0215                     	;# 
  1057  0215                     	;# 
  1058  0216                     	;# 
  1059  0216                     	;# 
  1060  0217                     	;# 
  1061  0217                     	;# 
  1062  0291                     	;# 
  1063  0291                     	;# 
  1064  0292                     	;# 
  1065  0293                     	;# 
  1066  0294                     	;# 
  1067  0295                     	;# 
  1068  0295                     	;# 
  1069  0296                     	;# 
  1070  0391                     	;# 
  1071  0392                     	;# 
  1072  0393                     	;# 
  1073  039A                     	;# 
  1074  039C                     	;# 
  1075  039D                     	;# 
  1076  039E                     	;# 
  1077  039F                     	;# 
  1078  0FE4                     	;# 
  1079  0FE5                     	;# 
  1080  0FE6                     	;# 
  1081  0FE7                     	;# 
  1082  0FE8                     	;# 
  1083  0FE9                     	;# 
  1084  0FEA                     	;# 
  1085  0FEB                     	;# 
  1086  0FED                     	;# 
  1087  0FEE                     	;# 
  1088  0FEF                     	;# 
  1089  0000                     	;# 
  1090  0001                     	;# 
  1091  0002                     	;# 
  1092  0003                     	;# 
  1093  0004                     	;# 
  1094  0005                     	;# 
  1095  0006                     	;# 
  1096  0007                     	;# 
  1097  0008                     	;# 
  1098  0009                     	;# 
  1099  000A                     	;# 
  1100  000B                     	;# 
  1101  000C                     	;# 
  1102  000E                     	;# 
  1103  0011                     	;# 
  1104  0012                     	;# 
  1105  0015                     	;# 
  1106  0016                     	;# 
  1107  0016                     	;# 
  1108  0017                     	;# 
  1109  0018                     	;# 
  1110  0019                     	;# 
  1111  001A                     	;# 
  1112  001B                     	;# 
  1113  001C                     	;# 
  1114  001E                     	;# 
  1115  001F                     	;# 
  1116  008C                     	;# 
  1117  008E                     	;# 
  1118  0091                     	;# 
  1119  0092                     	;# 
  1120  0095                     	;# 
  1121  0096                     	;# 
  1122  0097                     	;# 
  1123  0098                     	;# 
  1124  0099                     	;# 
  1125  009A                     	;# 
  1126  009B                     	;# 
  1127  009B                     	;# 
  1128  009C                     	;# 
  1129  009D                     	;# 
  1130  009E                     	;# 
  1131  010C                     	;# 
  1132  010E                     	;# 
  1133  0111                     	;# 
  1134  0112                     	;# 
  1135  0113                     	;# 
  1136  0114                     	;# 
  1137  0115                     	;# 
  1138  0116                     	;# 
  1139  0117                     	;# 
  1140  0118                     	;# 
  1141  0119                     	;# 
  1142  011A                     	;# 
  1143  011B                     	;# 
  1144  011D                     	;# 
  1145  011D                     	;# 
  1146  018C                     	;# 
  1147  018E                     	;# 
  1148  0191                     	;# 
  1149  0191                     	;# 
  1150  0192                     	;# 
  1151  0193                     	;# 
  1152  0193                     	;# 
  1153  0193                     	;# 
  1154  0194                     	;# 
  1155  0195                     	;# 
  1156  0196                     	;# 
  1157  0199                     	;# 
  1158  019A                     	;# 
  1159  019B                     	;# 
  1160  019B                     	;# 
  1161  019B                     	;# 
  1162  019B                     	;# 
  1163  019C                     	;# 
  1164  019C                     	;# 
  1165  019D                     	;# 
  1166  019E                     	;# 
  1167  019F                     	;# 
  1168  020C                     	;# 
  1169  020E                     	;# 
  1170  0211                     	;# 
  1171  0211                     	;# 
  1172  0212                     	;# 
  1173  0212                     	;# 
  1174  0213                     	;# 
  1175  0213                     	;# 
  1176  0214                     	;# 
  1177  0214                     	;# 
  1178  0215                     	;# 
  1179  0215                     	;# 
  1180  0215                     	;# 
  1181  0216                     	;# 
  1182  0216                     	;# 
  1183  0217                     	;# 
  1184  0217                     	;# 
  1185  0291                     	;# 
  1186  0291                     	;# 
  1187  0292                     	;# 
  1188  0293                     	;# 
  1189  0294                     	;# 
  1190  0295                     	;# 
  1191  0295                     	;# 
  1192  0296                     	;# 
  1193  0391                     	;# 
  1194  0392                     	;# 
  1195  0393                     	;# 
  1196  039A                     	;# 
  1197  039C                     	;# 
  1198  039D                     	;# 
  1199  039E                     	;# 
  1200  039F                     	;# 
  1201  0FE4                     	;# 
  1202  0FE5                     	;# 
  1203  0FE6                     	;# 
  1204  0FE7                     	;# 
  1205  0FE8                     	;# 
  1206  0FE9                     	;# 
  1207  0FEA                     	;# 
  1208  0FEB                     	;# 
  1209  0FED                     	;# 
  1210  0FEE                     	;# 
  1211  0FEF                     	;# 
  1212  0000                     	;# 
  1213  0001                     	;# 
  1214  0002                     	;# 
  1215  0003                     	;# 
  1216  0004                     	;# 
  1217  0005                     	;# 
  1218  0006                     	;# 
  1219  0007                     	;# 
  1220  0008                     	;# 
  1221  0009                     	;# 
  1222  000A                     	;# 
  1223  000B                     	;# 
  1224  000C                     	;# 
  1225  000E                     	;# 
  1226  0011                     	;# 
  1227  0012                     	;# 
  1228  0015                     	;# 
  1229  0016                     	;# 
  1230  0016                     	;# 
  1231  0017                     	;# 
  1232  0018                     	;# 
  1233  0019                     	;# 
  1234  001A                     	;# 
  1235  001B                     	;# 
  1236  001C                     	;# 
  1237  001E                     	;# 
  1238  001F                     	;# 
  1239  008C                     	;# 
  1240  008E                     	;# 
  1241  0091                     	;# 
  1242  0092                     	;# 
  1243  0095                     	;# 
  1244  0096                     	;# 
  1245  0097                     	;# 
  1246  0098                     	;# 
  1247  0099                     	;# 
  1248  009A                     	;# 
  1249  009B                     	;# 
  1250  009B                     	;# 
  1251  009C                     	;# 
  1252  009D                     	;# 
  1253  009E                     	;# 
  1254  010C                     	;# 
  1255  010E                     	;# 
  1256  0111                     	;# 
  1257  0112                     	;# 
  1258  0113                     	;# 
  1259  0114                     	;# 
  1260  0115                     	;# 
  1261  0116                     	;# 
  1262  0117                     	;# 
  1263  0118                     	;# 
  1264  0119                     	;# 
  1265  011A                     	;# 
  1266  011B                     	;# 
  1267  011D                     	;# 
  1268  011D                     	;# 
  1269  018C                     	;# 
  1270  018E                     	;# 
  1271  0191                     	;# 
  1272  0191                     	;# 
  1273  0192                     	;# 
  1274  0193                     	;# 
  1275  0193                     	;# 
  1276  0193                     	;# 
  1277  0194                     	;# 
  1278  0195                     	;# 
  1279  0196                     	;# 
  1280  0199                     	;# 
  1281  019A                     	;# 
  1282  019B                     	;# 
  1283  019B                     	;# 
  1284  019B                     	;# 
  1285  019B                     	;# 
  1286  019C                     	;# 
  1287  019C                     	;# 
  1288  019D                     	;# 
  1289  019E                     	;# 
  1290  019F                     	;# 
  1291  020C                     	;# 
  1292  020E                     	;# 
  1293  0211                     	;# 
  1294  0211                     	;# 
  1295  0212                     	;# 
  1296  0212                     	;# 
  1297  0213                     	;# 
  1298  0213                     	;# 
  1299  0214                     	;# 
  1300  0214                     	;# 
  1301  0215                     	;# 
  1302  0215                     	;# 
  1303  0215                     	;# 
  1304  0216                     	;# 
  1305  0216                     	;# 
  1306  0217                     	;# 
  1307  0217                     	;# 
  1308  0291                     	;# 
  1309  0291                     	;# 
  1310  0292                     	;# 
  1311  0293                     	;# 
  1312  0294                     	;# 
  1313  0295                     	;# 
  1314  0295                     	;# 
  1315  0296                     	;# 
  1316  0391                     	;# 
  1317  0392                     	;# 
  1318  0393                     	;# 
  1319  039A                     	;# 
  1320  039C                     	;# 
  1321  039D                     	;# 
  1322  039E                     	;# 
  1323  039F                     	;# 
  1324  0FE4                     	;# 
  1325  0FE5                     	;# 
  1326  0FE6                     	;# 
  1327  0FE7                     	;# 
  1328  0FE8                     	;# 
  1329  0FE9                     	;# 
  1330  0FEA                     	;# 
  1331  0FEB                     	;# 
  1332  0FED                     	;# 
  1333  0FEE                     	;# 
  1334  0FEF                     	;# 
  1335                           
  1336                           	psect	stringtext1
  1337  0769                     __pstringtext1:
  1338  0769                     _ROTATION_TIME:
  1339  0769  343C               	retlw	60
  1340  076A  3400               	retlw	0
  1341  076B  3400               	retlw	0
  1342  076C                     __end_of_ROTATION_TIME:
  1343                           
  1344                           	psect	stringtext2
  1345  076C                     __pstringtext2:
  1346  076C                     _GOOD_WSP_VOLTAGE:
  1347  076C  3440               	retlw	64
  1348  076D  349C               	retlw	156
  1349  076E  3400               	retlw	0
  1350  076F                     __end_of_GOOD_WSP_VOLTAGE:
  1351                           
  1352                           	psect	stringtext3
  1353  076F                     __pstringtext3:
  1354  076F                     _BAD_WSP_VOLTAGE:
  1355  076F  3420               	retlw	32
  1356  0770  344E               	retlw	78
  1357  0771  3400               	retlw	0
  1358  0772                     __end_of_BAD_WSP_VOLTAGE:
  1359                           
  1360                           	psect	nvBANK0
  1361  0060                     __pnvBANK0:
  1362  0060                     _TMR0_InterruptHandler:
  1363  0060                     	ds	2
  1364  0062                     _TMR2_InterruptHandler:
  1365  0062                     	ds	2
  1366  0064                     _timer0ReloadVal:
  1367  0064                     	ds	1
  1368  0015                     _TMR0	set	21
  1369  001C                     _T2CONbits	set	28
  1370  001C                     _T2CON	set	28
  1371  001A                     _TMR2	set	26
  1372  001B                     _PR2	set	27
  1373  0011                     _PIR1bits	set	17
  1374  000B                     _INTCONbits	set	11
  1375  005F                     _GIE	set	95
  1376  008E                     _TRISCbits	set	142
  1377  008C                     _TRISAbits	set	140
  1378  0095                     _OPTION_REG	set	149
  1379  0091                     _PIE1bits	set	145
  1380  0095                     _OPTION_REGbits	set	149
  1381  008E                     _TRISC	set	142
  1382  008C                     _TRISA	set	140
  1383  009D                     _ADCON0bits	set	157
  1384  009D                     _ADCON0	set	157
  1385  009C                     _ADRESH	set	156
  1386  009B                     _ADRESL	set	155
  1387  009E                     _ADCON1	set	158
  1388  0097                     _WDTCON	set	151
  1389  0098                     _OSCTUNE	set	152
  1390  0099                     _OSCCON	set	153
  1391  010E                     _LATCbits	set	270
  1392  010C                     _LATAbits	set	268
  1393  0117                     _FVRCONbits	set	279
  1394  0117                     _FVRCON	set	279
  1395  011D                     _APFCON	set	285
  1396  010E                     _LATC	set	270
  1397  010C                     _LATA	set	268
  1398  0116                     _BORCON	set	278
  1399  0191                     _EEADR	set	401
  1400  0196                     _EECON2	set	406
  1401  0193                     _EEDATA	set	403
  1402  018C                     _ANSELAbits	set	396
  1403  018E                     _ANSELCbits	set	398
  1404  018C                     _ANSELA	set	396
  1405  018E                     _ANSELC	set	398
  1406  0CA8                     _RD	set	3240
  1407  0CAA                     _WREN	set	3242
  1408  0CA9                     _WR	set	3241
  1409  020E                     _WPUCbits	set	526
  1410  020C                     _WPUAbits	set	524
  1411  020E                     _WPUC	set	526
  1412  020C                     _WPUA	set	524
  1413                           
  1414                           	psect	cinit
  1415  0027                     start_initialization:	
  1416                           ; #config settings
  1417                           
  1418  0027                     __initialization:
  1419                           
  1420                           ; Clear objects allocated to COMMON
  1421  0027  01F8               	clrf	__pbssCOMMON& (0+127)
  1422  0028  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  1423  0029  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  1424  002A  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  1425  002B  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  1426                           
  1427                           ; Clear objects allocated to BANK0
  1428  002C  3049               	movlw	low __pbssBANK0
  1429  002D  0084               	movwf	4
  1430  002E  3000               	movlw	high __pbssBANK0
  1431  002F  0085               	movwf	5
  1432  0030  3017               	movlw	23
  1433  0031  3187  2740  3180   	fcall	clear_ram0
  1434                           
  1435                           ; Clear objects allocated to BANK1
  1436  0034  30A0               	movlw	low __pbssBANK1
  1437  0035  0084               	movwf	4
  1438  0036  3000               	movlw	high __pbssBANK1
  1439  0037  0085               	movwf	5
  1440  0038  3020               	movlw	32
  1441  0039  3187  2740  3180   	fcall	clear_ram0
  1442  003C                     end_of_initialization:	
  1443                           ;End of C runtime variable initialization code
  1444                           
  1445  003C                     __end_of__initialization:
  1446  003C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1447  003D  0020               	movlb	0
  1448  003E  2DFE               	ljmp	_main	;jump to C main() function
  1449                           
  1450                           	psect	bssCOMMON
  1451  0078                     __pbssCOMMON:
  1452  0078                     TMR2_ISR@CountCallBack:
  1453  0078                     	ds	2
  1454  007A                     sec_tick_work@iled:
  1455  007A                     	ds	1
  1456  007B                     get_measure@measures:
  1457  007B                     	ds	1
  1458  007C                     _FLAGS:
  1459  007C                     	ds	1
  1460                           
  1461                           	psect	bssBANK0
  1462  0049                     __pbssBANK0:
  1463  0049                     get_time@F2658:
  1464  0049                     	ds	9
  1465  0052                     get_time@F2660:
  1466  0052                     	ds	3
  1467  0055                     _time_s:
  1468  0055                     	ds	3
  1469  0058                     _ADC_InterruptHandler:
  1470  0058                     	ds	2
  1471  005A                     get_jump_full@jump_counter:
  1472  005A                     	ds	1
  1473  005B                     get_jump@jump_counter:
  1474  005B                     	ds	1
  1475  005C                     get_fun_full@fun_counter:
  1476  005C                     	ds	1
  1477  005D                     get_fun@fun_counter:
  1478  005D                     	ds	1
  1479  005E                     _time_pow_s:
  1480  005E                     	ds	1
  1481  005F                     _START_EEPROM_ADR:
  1482  005F                     	ds	1
  1483                           
  1484                           	psect	bssBANK1
  1485  00A0                     __pbssBANK1:
  1486  00A0                     get_adr@F2638:
  1487  00A0                     	ds	32
  1488                           
  1489                           	psect	clrtext
  1490  0740                     clear_ram0:	
  1491                           ;	Called with FSR0 containing the base address, and
  1492                           ;	WREG with the size to clear
  1493                           
  1494  0740  0064               	clrwdt	;clear the watchdog before getting into this loop
  1495  0741                     clrloop0:
  1496  0741  0180               	clrf	0	;clear RAM location pointed to by FSR
  1497  0742  3101               	addfsr 0,1
  1498  0743  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1499  0744  2F41               	goto	clrloop0	;have we reached the end yet?
  1500  0745  3400               	retlw	0	;all done for this memory range, return
  1501                           
  1502                           	psect	cstackCOMMON
  1503  0070                     __pcstackCOMMON:
  1504  0070                     ?_PIN_MANAGER_Initialize:
  1505  0070                     ?_OSCILLATOR_Initialize:	
  1506                           ; 1 bytes @ 0x0
  1507                           
  1508  0070                     ?_WDT_Initialize:	
  1509                           ; 1 bytes @ 0x0
  1510                           
  1511  0070                     ?_FVR_Initialize:	
  1512                           ; 1 bytes @ 0x0
  1513                           
  1514  0070                     ?_ADC_Initialize:	
  1515                           ; 1 bytes @ 0x0
  1516                           
  1517  0070                     ?_TMR2_Initialize:	
  1518                           ; 1 bytes @ 0x0
  1519                           
  1520  0070                     ?_TMR0_Initialize:	
  1521                           ; 1 bytes @ 0x0
  1522                           
  1523  0070                     ?_TMR0_ISR:	
  1524                           ; 1 bytes @ 0x0
  1525                           
  1526  0070                     ??_TMR0_ISR:	
  1527                           ; 1 bytes @ 0x0
  1528                           
  1529  0070                     ?_TMR2_ISR:	
  1530                           ; 1 bytes @ 0x0
  1531                           
  1532  0070                     ?_TMR2_DefaultInterruptHandler:	
  1533                           ; 1 bytes @ 0x0
  1534                           
  1535  0070                     ??_TMR2_DefaultInterruptHandler:	
  1536                           ; 1 bytes @ 0x0
  1537                           
  1538  0070                     ?_TMR2_CallBack:	
  1539                           ; 1 bytes @ 0x0
  1540                           
  1541  0070                     ?_TMR0_DefaultInterruptHandler:	
  1542                           ; 1 bytes @ 0x0
  1543                           
  1544  0070                     ??_TMR0_DefaultInterruptHandler:	
  1545                           ; 1 bytes @ 0x0
  1546                           
  1547  0070                     ?_EEPROM_ReadByte:	
  1548                           ; 1 bytes @ 0x0
  1549                           
  1550  0070                     ?_SYSTEM_Initialize:	
  1551                           ; 1 bytes @ 0x0
  1552                           
  1553  0070                     ?_INTERRUPT_InterruptManager:	
  1554                           ; 1 bytes @ 0x0
  1555                           
  1556  0070                     ?_TMR2_StartTimer:	
  1557                           ; 1 bytes @ 0x0
  1558                           
  1559  0070                     ?_switch_zum:	
  1560                           ; 1 bytes @ 0x0
  1561                           
  1562  0070                     ?_toggle_tone:	
  1563                           ; 1 bytes @ 0x0
  1564                           
  1565  0070                     ??_toggle_tone:	
  1566                           ; 1 bytes @ 0x0
  1567                           
  1568  0070                     ?_go_close:	
  1569                           ; 1 bytes @ 0x0
  1570                           
  1571  0070                     ?_go_open:	
  1572                           ; 1 bytes @ 0x0
  1573                           
  1574  0070                     ?_go_close_alt:	
  1575                           ; 1 bytes @ 0x0
  1576                           
  1577  0070                     ?_go_open_alt:	
  1578                           ; 1 bytes @ 0x0
  1579                           
  1580  0070                     ?_start_alarm:	
  1581                           ; 1 bytes @ 0x0
  1582                           
  1583  0070                     ?_get_measure:	
  1584                           ; 1 bytes @ 0x0
  1585                           
  1586  0070                     ?_get_fun:	
  1587                           ; 1 bytes @ 0x0
  1588                           
  1589  0070                     ?_get_fun_full:	
  1590                           ; 1 bytes @ 0x0
  1591                           
  1592  0070                     ?_get_jump:	
  1593                           ; 1 bytes @ 0x0
  1594                           
  1595  0070                     ?_get_jump_full:	
  1596                           ; 1 bytes @ 0x0
  1597                           
  1598  0070                     ?_rele_tick:	
  1599                           ; 1 bytes @ 0x0
  1600                           
  1601  0070                     ??_rele_tick:	
  1602                           ; 1 bytes @ 0x0
  1603                           
  1604  0070                     ?_sec_tick_work:	
  1605                           ; 1 bytes @ 0x0
  1606                           
  1607  0070                     ?_povorot:	
  1608                           ; 1 bytes @ 0x0
  1609                           
  1610  0070                     ?_fun_work:	
  1611                           ; 1 bytes @ 0x0
  1612                           
  1613  0070                     ?_switch_wm:	
  1614                           ; 1 bytes @ 0x0
  1615                           
  1616  0070                     ?_get_voltage:	
  1617                           ; 1 bytes @ 0x0
  1618                           
  1619  0070                     ?_get_adr:	
  1620                           ; 1 bytes @ 0x0
  1621                           
  1622  0070                     ?_get_time:	
  1623                           ; 1 bytes @ 0x0
  1624                           
  1625  0070                     ?_get_eeprom:	
  1626                           ; 1 bytes @ 0x0
  1627                           
  1628  0070                     ?_start_setup:	
  1629                           ; 1 bytes @ 0x0
  1630                           
  1631  0070                     ?_main:	
  1632                           ; 1 bytes @ 0x0
  1633                           
  1634  0070                     ?i1_switch_zum:	
  1635                           ; 1 bytes @ 0x0
  1636                           
  1637  0070                     ??i1_switch_zum:	
  1638                           ; 1 bytes @ 0x0
  1639                           
  1640  0070                     ?i1_go_close:	
  1641                           ; 1 bytes @ 0x0
  1642                           
  1643  0070                     ??i1_go_close:	
  1644                           ; 1 bytes @ 0x0
  1645                           
  1646  0070                     ?i1_go_close_alt:	
  1647                           ; 1 bytes @ 0x0
  1648                           
  1649  0070                     ??i1_go_close_alt:	
  1650                           ; 1 bytes @ 0x0
  1651                           
  1652  0070                     ?i1_ADC_GetConversion:	
  1653                           ; 1 bytes @ 0x0
  1654                           
  1655                           
  1656                           ; 2 bytes @ 0x0
  1657  0070                     	ds	2
  1658  0072                     ??_start_alarm:
  1659  0072                     ??i1_ADC_GetConversion:	
  1660                           ; 1 bytes @ 0x2
  1661                           
  1662                           
  1663                           ; 1 bytes @ 0x2
  1664  0072                     	ds	1
  1665  0073                     i1ADC_GetConversion@channel:
  1666                           
  1667                           ; 1 bytes @ 0x3
  1668  0073                     	ds	1
  1669  0074                     ??_get_measure:
  1670                           
  1671                           ; 1 bytes @ 0x4
  1672  0074                     	ds	1
  1673  0075                     get_measure@res:
  1674                           
  1675                           ; 2 bytes @ 0x5
  1676  0075                     	ds	2
  1677  0077                     ??_sec_tick_work:
  1678                           
  1679                           ; 1 bytes @ 0x7
  1680  0077                     	ds	1
  1681  0078                     ??_TMR2_ISR:
  1682  0078                     ??_TMR2_CallBack:	
  1683                           ; 1 bytes @ 0x8
  1684                           
  1685  0078                     ??_INTERRUPT_InterruptManager:	
  1686                           ; 1 bytes @ 0x8
  1687                           
  1688                           
  1689                           	psect	cstackBANK0
  1690  0020                     __pcstackBANK0:	
  1691                           ; 1 bytes @ 0x8
  1692                           
  1693  0020                     ??_PIN_MANAGER_Initialize:
  1694  0020                     ??_OSCILLATOR_Initialize:	
  1695                           ; 1 bytes @ 0x0
  1696                           
  1697  0020                     ??_WDT_Initialize:	
  1698                           ; 1 bytes @ 0x0
  1699                           
  1700  0020                     ??_FVR_Initialize:	
  1701                           ; 1 bytes @ 0x0
  1702                           
  1703  0020                     ??_ADC_Initialize:	
  1704                           ; 1 bytes @ 0x0
  1705                           
  1706  0020                     ?_TMR2_SetInterruptHandler:	
  1707                           ; 1 bytes @ 0x0
  1708                           
  1709  0020                     ?_TMR0_SetInterruptHandler:	
  1710                           ; 1 bytes @ 0x0
  1711                           
  1712  0020                     ??_EEPROM_ReadByte:	
  1713                           ; 1 bytes @ 0x0
  1714                           
  1715  0020                     ?_EEPROM_WriteByte:	
  1716                           ; 1 bytes @ 0x0
  1717                           
  1718  0020                     ??_TMR2_StartTimer:	
  1719                           ; 1 bytes @ 0x0
  1720                           
  1721  0020                     ??_switch_zum:	
  1722                           ; 1 bytes @ 0x0
  1723                           
  1724  0020                     ?_beep:	
  1725                           ; 1 bytes @ 0x0
  1726                           
  1727  0020                     ??_go_close:	
  1728                           ; 1 bytes @ 0x0
  1729                           
  1730  0020                     ??_go_open:	
  1731                           ; 1 bytes @ 0x0
  1732                           
  1733  0020                     ??_go_close_alt:	
  1734                           ; 1 bytes @ 0x0
  1735                           
  1736  0020                     ??_go_open_alt:	
  1737                           ; 1 bytes @ 0x0
  1738                           
  1739  0020                     ?___bmul:	
  1740                           ; 1 bytes @ 0x0
  1741                           
  1742  0020                     ?_ADC_GetConversion:	
  1743                           ; 1 bytes @ 0x0
  1744                           
  1745  0020                     beep@count:	
  1746                           ; 2 bytes @ 0x0
  1747                           
  1748  0020                     EEPROM_WriteByte@dt:	
  1749                           ; 1 bytes @ 0x0
  1750                           
  1751  0020                     ___bmul@multiplicand:	
  1752                           ; 1 bytes @ 0x0
  1753                           
  1754  0020                     TMR2_SetInterruptHandler@InterruptHandler:	
  1755                           ; 1 bytes @ 0x0
  1756                           
  1757  0020                     TMR0_SetInterruptHandler@InterruptHandler:	
  1758                           ; 2 bytes @ 0x0
  1759                           
  1760                           
  1761                           ; 2 bytes @ 0x0
  1762  0020                     	ds	1
  1763  0021                     ??_EEPROM_WriteByte:
  1764  0021                     ??_beep:	
  1765                           ; 1 bytes @ 0x1
  1766                           
  1767  0021                     ??___bmul:	
  1768                           ; 1 bytes @ 0x1
  1769                           
  1770                           
  1771                           ; 1 bytes @ 0x1
  1772  0021                     	ds	1
  1773  0022                     ??_TMR2_Initialize:
  1774  0022                     ??_TMR0_Initialize:	
  1775                           ; 1 bytes @ 0x2
  1776                           
  1777  0022                     ??_TMR2_SetInterruptHandler:	
  1778                           ; 1 bytes @ 0x2
  1779                           
  1780  0022                     ??_TMR0_SetInterruptHandler:	
  1781                           ; 1 bytes @ 0x2
  1782                           
  1783  0022                     ??_ADC_GetConversion:	
  1784                           ; 1 bytes @ 0x2
  1785                           
  1786  0022                     ??_povorot:	
  1787                           ; 1 bytes @ 0x2
  1788                           
  1789  0022                     EEPROM_ReadByte@addr:	
  1790                           ; 1 bytes @ 0x2
  1791                           
  1792  0022                     ___bmul@product:	
  1793                           ; 1 bytes @ 0x2
  1794                           
  1795                           
  1796                           ; 1 bytes @ 0x2
  1797  0022                     	ds	1
  1798  0023                     ??_SYSTEM_Initialize:
  1799  0023                     ??_get_adr:	
  1800                           ; 1 bytes @ 0x3
  1801                           
  1802  0023                     ?_EEPROM_ReadShortLong:	
  1803                           ; 1 bytes @ 0x3
  1804                           
  1805  0023                     ADC_GetConversion@channel:	
  1806                           ; 3 bytes @ 0x3
  1807                           
  1808  0023                     beep@time:	
  1809                           ; 1 bytes @ 0x3
  1810                           
  1811  0023                     EEPROM_WriteByte@addr:	
  1812                           ; 1 bytes @ 0x3
  1813                           
  1814  0023                     ___bmul@multiplier:	
  1815                           ; 1 bytes @ 0x3
  1816                           
  1817                           
  1818                           ; 1 bytes @ 0x3
  1819  0023                     	ds	1
  1820  0024                     ??_get_fun:
  1821  0024                     ??_get_fun_full:	
  1822                           ; 1 bytes @ 0x4
  1823                           
  1824  0024                     ??_get_jump:	
  1825                           ; 1 bytes @ 0x4
  1826                           
  1827  0024                     ??_get_jump_full:	
  1828                           ; 1 bytes @ 0x4
  1829                           
  1830  0024                     beep@j:	
  1831                           ; 1 bytes @ 0x4
  1832                           
  1833  0024                     EEPROM_WriteByte@status:	
  1834                           ; 1 bytes @ 0x4
  1835                           
  1836  0024                     get_adr@adr:	
  1837                           ; 1 bytes @ 0x4
  1838                           
  1839                           
  1840                           ; 32 bytes @ 0x4
  1841  0024                     	ds	1
  1842  0025                     ?_EEPROM_WriteShortLong:
  1843  0025                     beep@i:	
  1844                           ; 1 bytes @ 0x5
  1845                           
  1846  0025                     get_fun@res:	
  1847                           ; 1 bytes @ 0x5
  1848                           
  1849  0025                     get_fun_full@res:	
  1850                           ; 2 bytes @ 0x5
  1851                           
  1852  0025                     get_jump@res:	
  1853                           ; 2 bytes @ 0x5
  1854                           
  1855  0025                     get_jump_full@res:	
  1856                           ; 2 bytes @ 0x5
  1857                           
  1858  0025                     EEPROM_WriteShortLong@ucData:	
  1859                           ; 2 bytes @ 0x5
  1860                           
  1861                           
  1862                           ; 3 bytes @ 0x5
  1863  0025                     	ds	1
  1864  0026                     ??_EEPROM_ReadShortLong:
  1865  0026                     ??_fun_work:	
  1866                           ; 1 bytes @ 0x6
  1867                           
  1868  0026                     ??_switch_wm:	
  1869                           ; 1 bytes @ 0x6
  1870                           
  1871                           
  1872                           ; 1 bytes @ 0x6
  1873  0026                     	ds	1
  1874  0027                     get_fun_full@flag:
  1875  0027                     get_jump_full@flag:	
  1876                           ; 1 bytes @ 0x7
  1877                           
  1878                           
  1879                           ; 1 bytes @ 0x7
  1880  0027                     	ds	1
  1881  0028                     ??_EEPROM_WriteShortLong:
  1882                           
  1883                           ; 1 bytes @ 0x8
  1884  0028                     	ds	4
  1885  002C                     EEPROM_WriteShortLong@dt:
  1886  002C                     EEPROM_ReadShortLong@dt:	
  1887                           ; 1 bytes @ 0xC
  1888                           
  1889                           
  1890                           ; 3 bytes @ 0xC
  1891  002C                     	ds	1
  1892  002D                     EEPROM_WriteShortLong@addr:
  1893                           
  1894                           ; 1 bytes @ 0xD
  1895  002D                     	ds	1
  1896  002E                     ??_get_voltage:
  1897                           
  1898                           ; 1 bytes @ 0xE
  1899  002E                     	ds	1
  1900  002F                     EEPROM_ReadShortLong@addr:
  1901                           
  1902                           ; 1 bytes @ 0xF
  1903  002F                     	ds	1
  1904  0030                     ??_get_time:
  1905  0030                     get_voltage@res:	
  1906                           ; 1 bytes @ 0x10
  1907                           
  1908                           
  1909                           ; 2 bytes @ 0x10
  1910  0030                     	ds	2
  1911  0032                     get_voltage@buf:
  1912                           
  1913                           ; 1 bytes @ 0x12
  1914  0032                     	ds	1
  1915  0033                     get_voltage@q_802:
  1916                           
  1917                           ; 1 bytes @ 0x13
  1918  0033                     	ds	1
  1919  0034                     get_voltage@q:
  1920  0034                     get_time@times:	
  1921                           ; 1 bytes @ 0x14
  1922                           
  1923                           
  1924                           ; 9 bytes @ 0x14
  1925  0034                     	ds	9
  1926  003D                     get_time@adr_error:
  1927                           
  1928                           ; 1 bytes @ 0x1D
  1929  003D                     	ds	1
  1930  003E                     get_time@time_count:
  1931                           
  1932                           ; 3 bytes @ 0x1E
  1933  003E                     	ds	3
  1934  0041                     get_time@buf2:
  1935                           
  1936                           ; 3 bytes @ 0x21
  1937  0041                     	ds	3
  1938  0044                     get_adr@i:
  1939  0044                     get_time@i:	
  1940                           ; 1 bytes @ 0x24
  1941                           
  1942                           
  1943                           ; 1 bytes @ 0x24
  1944  0044                     	ds	1
  1945  0045                     get_adr@q:
  1946  0045                     get_time@buf:	
  1947                           ; 1 bytes @ 0x25
  1948                           
  1949                           
  1950                           ; 1 bytes @ 0x25
  1951  0045                     	ds	1
  1952  0046                     get_adr@i_812:
  1953  0046                     get_time@q:	
  1954                           ; 1 bytes @ 0x26
  1955                           
  1956                           
  1957                           ; 1 bytes @ 0x26
  1958  0046                     	ds	1
  1959  0047                     get_adr@q_811:
  1960  0047                     get_time@q_824:	
  1961                           ; 1 bytes @ 0x27
  1962                           
  1963                           
  1964                           ; 1 bytes @ 0x27
  1965  0047                     	ds	1
  1966  0048                     get_adr@buf:
  1967  0048                     get_time@q_823:	
  1968                           ; 1 bytes @ 0x28
  1969                           
  1970                           
  1971                           ; 1 bytes @ 0x28
  1972  0048                     	ds	1
  1973  0049                     ??_get_eeprom:
  1974  0049                     ??_start_setup:	
  1975                           ; 1 bytes @ 0x29
  1976                           
  1977  0049                     ??_main:	
  1978                           ; 1 bytes @ 0x29
  1979                           
  1980                           
  1981                           	psect	maintext
  1982  05FE                     __pmaintext:	
  1983                           ; 1 bytes @ 0x29
  1984 ;;
  1985 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1986 ;;
  1987 ;; *************** function _main *****************
  1988 ;; Defined at:
  1989 ;;		line 513 in file "main.c"
  1990 ;; Parameters:    Size  Location     Type
  1991 ;;		None
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;		None
  1994 ;; Return value:  Size  Location     Type
  1995 ;;                  1    wreg      void 
  1996 ;; Registers used:
  1997 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1998 ;; Tracked objects:
  1999 ;;		On entry : B1F/0
  2000 ;;		On exit  : 0/0
  2001 ;;		Unchanged: 0/0
  2002 ;; Data sizes:     COMMON   BANK0   BANK1
  2003 ;;      Params:         0       0       0
  2004 ;;      Locals:         0       0       0
  2005 ;;      Temps:          0       0       0
  2006 ;;      Totals:         0       0       0
  2007 ;;Total ram usage:        0 bytes
  2008 ;; Hardware stack levels required when called: 12
  2009 ;; This function calls:
  2010 ;;		_fun_work
  2011 ;;		_get_fun
  2012 ;;		_get_jump
  2013 ;;		_get_voltage
  2014 ;;		_povorot
  2015 ;;		_start_setup
  2016 ;;		_switch_wm
  2017 ;; This function is called by:
  2018 ;;		Startup code after reset
  2019 ;; This function uses a non-reentrant model
  2020 ;;
  2021                           
  2022  05FE                     _main:	
  2023                           ;psect for function _main
  2024                           
  2025  05FE                     l2678:	
  2026                           ;incstack = 0
  2027                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2028                           
  2029                           
  2030                           ;main.c: 515:     start_setup();
  2031  05FE  3184  2480  3185   	fcall	_start_setup
  2032  0601                     l2680:
  2033                           
  2034                           ;main.c: 518:         get_voltage();
  2035  0601  3181  21D5  3185   	fcall	_get_voltage
  2036  0604                     l2682:
  2037                           
  2038                           ;main.c: 519:         if (!FLAGS.bits.ALARM) {
  2039  0604  187C               	btfsc	_FLAGS,0
  2040  0605  2E07               	goto	u2081
  2041  0606  2E08               	goto	u2080
  2042  0607                     u2081:
  2043  0607  2E01               	goto	l2680
  2044  0608                     u2080:
  2045  0608                     l2684:
  2046                           
  2047                           ;main.c: 520:             get_fun();
  2048  0608  3184  2408  3185   	fcall	_get_fun
  2049                           
  2050                           ;main.c: 521:             fun_work();
  2051  060B  3183  2345  3185   	fcall	_fun_work
  2052                           
  2053                           ;main.c: 522:             get_jump();
  2054  060E  3184  2446  3185   	fcall	_get_jump
  2055                           
  2056                           ;main.c: 523:             switch_wm();
  2057  0611  3184  24EA  3185   	fcall	_switch_wm
  2058                           
  2059                           ;main.c: 524:             povorot();
  2060  0614  3182  22BE  3185   	fcall	_povorot
  2061  0617  2E01               	goto	l2680
  2062  0618  2826               	ljmp	start
  2063  0619                     __end_of_main:
  2064                           
  2065                           	psect	text1
  2066  04EA                     __ptext1:	
  2067 ;; *************** function _switch_wm *****************
  2068 ;; Defined at:
  2069 ;;		line 372 in file "main.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;		None
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;		None
  2074 ;; Return value:  Size  Location     Type
  2075 ;;                  1    wreg      void 
  2076 ;; Registers used:
  2077 ;;		wreg, status,2, status,0, pclath, cstack
  2078 ;; Tracked objects:
  2079 ;;		On entry : 0/0
  2080 ;;		On exit  : 0/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMMON   BANK0   BANK1
  2083 ;;      Params:         0       0       0
  2084 ;;      Locals:         0       0       0
  2085 ;;      Temps:          0       1       0
  2086 ;;      Totals:         0       1       0
  2087 ;;Total ram usage:        1 bytes
  2088 ;; Hardware stack levels used: 1
  2089 ;; Hardware stack levels required when called: 9
  2090 ;; This function calls:
  2091 ;;		_beep
  2092 ;;		_go_close
  2093 ;;		_go_close_alt
  2094 ;; This function is called by:
  2095 ;;		_main
  2096 ;; This function uses a non-reentrant model
  2097 ;;
  2098                           
  2099  04EA                     _switch_wm:	
  2100                           ;psect for function _switch_wm
  2101                           
  2102  04EA                     l2562:	
  2103                           ;incstack = 0
  2104                           ; Regs used in _switch_wm: [wreg+status,2+status,0+pclath+cstack]
  2105                           
  2106                           
  2107                           ;main.c: 373:     if (FLAGS.bits._JUMP_CONNECTED) {
  2108  04EA  1E7C               	btfss	_FLAGS,4
  2109  04EB  2CED               	goto	u1941
  2110  04EC  2CEE               	goto	u1940
  2111  04ED                     u1941:
  2112  04ED  2D04               	goto	l448
  2113  04EE                     u1940:
  2114  04EE                     l2564:
  2115                           
  2116                           ;main.c: 374:         if (FLAGS.bits.NORMAL_WORK_MODE) {
  2117  04EE  1CFC               	btfss	_FLAGS,1
  2118  04EF  2CF1               	goto	u1951
  2119  04F0  2CF2               	goto	u1950
  2120  04F1                     u1951:
  2121  04F1  2D19               	goto	l454
  2122  04F2                     u1950:
  2123  04F2                     l2566:
  2124                           
  2125                           ;main.c: 375:             FLAGS.bits.NORMAL_WORK_MODE = 0;
  2126  04F2  10FC               	bcf	_FLAGS,1
  2127                           
  2128                           ;main.c: 376:             if (FLAGS.bits.CLOSED) go_close_alt();
  2129  04F3  1D7C               	btfss	_FLAGS,2
  2130  04F4  2CF6               	goto	u1961
  2131  04F5  2CF7               	goto	u1960
  2132  04F6                     u1961:
  2133  04F6  2CFA               	goto	l2570
  2134  04F7                     u1960:
  2135  04F7                     l2568:
  2136  04F7  3187  2757  3184   	fcall	_go_close_alt
  2137  04FA                     l2570:
  2138                           
  2139                           ;main.c: 378:             beep( 40, 3);
  2140  04FA  3003               	movlw	3
  2141  04FB  0020               	movlb	0	; select bank0
  2142  04FC  00A6               	movwf	??_switch_wm
  2143  04FD  0826               	movf	??_switch_wm,w
  2144  04FE  00A0               	movwf	beep@count
  2145  04FF  3028               	movlw	40
  2146  0500  3185  251A  3184   	fcall	_beep
  2147  0503  2D19               	goto	l454
  2148  0504                     l448:
  2149                           
  2150                           ;main.c: 381:         if (!FLAGS.bits.NORMAL_WORK_MODE) {
  2151  0504  18FC               	btfsc	_FLAGS,1
  2152  0505  2D07               	goto	u1971
  2153  0506  2D08               	goto	u1970
  2154  0507                     u1971:
  2155  0507  2D19               	goto	l454
  2156  0508                     u1970:
  2157  0508                     l2572:
  2158                           
  2159                           ;main.c: 382:             FLAGS.bits.NORMAL_WORK_MODE = 1;
  2160  0508  14FC               	bsf	_FLAGS,1
  2161                           
  2162                           ;main.c: 383:             if (FLAGS.bits.CLOSED) go_close();
  2163  0509  1D7C               	btfss	_FLAGS,2
  2164  050A  2D0C               	goto	u1981
  2165  050B  2D0D               	goto	u1980
  2166  050C                     u1981:
  2167  050C  2D10               	goto	l453
  2168  050D                     u1980:
  2169  050D                     l2574:
  2170  050D  3185  25C0  3184   	fcall	_go_close
  2171  0510                     l453:
  2172                           
  2173                           ;main.c: 385:             beep(40, 2);
  2174  0510  3002               	movlw	2
  2175  0511  0020               	movlb	0	; select bank0
  2176  0512  00A6               	movwf	??_switch_wm
  2177  0513  0826               	movf	??_switch_wm,w
  2178  0514  00A0               	movwf	beep@count
  2179  0515  3028               	movlw	40
  2180  0516  3185  251A  3184   	fcall	_beep
  2181  0519                     l454:
  2182  0519  0008               	return
  2183  051A                     __end_of_switch_wm:
  2184                           
  2185                           	psect	text2
  2186  0480                     __ptext2:	
  2187 ;; *************** function _start_setup *****************
  2188 ;; Defined at:
  2189 ;;		line 478 in file "main.c"
  2190 ;; Parameters:    Size  Location     Type
  2191 ;;		None
  2192 ;; Auto vars:     Size  Location     Type
  2193 ;;		None
  2194 ;; Return value:  Size  Location     Type
  2195 ;;                  1    wreg      void 
  2196 ;; Registers used:
  2197 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2198 ;; Tracked objects:
  2199 ;;		On entry : 0/0
  2200 ;;		On exit  : 0/0
  2201 ;;		Unchanged: 0/0
  2202 ;; Data sizes:     COMMON   BANK0   BANK1
  2203 ;;      Params:         0       0       0
  2204 ;;      Locals:         0       0       0
  2205 ;;      Temps:          0       0       0
  2206 ;;      Totals:         0       0       0
  2207 ;;Total ram usage:        0 bytes
  2208 ;; Hardware stack levels used: 1
  2209 ;; Hardware stack levels required when called: 11
  2210 ;; This function calls:
  2211 ;;		_SYSTEM_Initialize
  2212 ;;		_TMR0_SetInterruptHandler
  2213 ;;		_TMR2_SetInterruptHandler
  2214 ;;		_TMR2_StartTimer
  2215 ;;		_get_eeprom
  2216 ;;		_get_fun_full
  2217 ;;		_get_jump_full
  2218 ;; This function is called by:
  2219 ;;		_main
  2220 ;; This function uses a non-reentrant model
  2221 ;;
  2222                           
  2223  0480                     _start_setup:	
  2224                           ;psect for function _start_setup
  2225                           
  2226  0480                     l2604:	
  2227                           ;incstack = 0
  2228                           ; Regs used in _start_setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2229                           
  2230                           
  2231                           ;main.c: 480:     SYSTEM_Initialize();
  2232  0480  3186  2663  3184   	fcall	_SYSTEM_Initialize
  2233  0483                     l2606:
  2234                           
  2235                           ;main.c: 481:     (INTCONbits.GIE = 1);
  2236  0483  178B               	bsf	11,7	;volatile
  2237  0484                     l2608:
  2238                           
  2239                           ;main.c: 482:     (INTCONbits.PEIE = 1);
  2240  0484  170B               	bsf	11,6	;volatile
  2241  0485                     l2610:
  2242                           
  2243                           ;main.c: 484:     get_eeprom();
  2244  0485  3187  2732  3184   	fcall	_get_eeprom
  2245  0488                     l2612:
  2246                           
  2247                           ;main.c: 485:     TMR0_SetInterruptHandler(switch_zum);
  2248  0488  30CC               	movlw	low _switch_zum
  2249  0489  0020               	movlb	0	; select bank0
  2250  048A  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2251  048B  3006               	movlw	high _switch_zum
  2252  048C  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2253  048D  3187  274C  3184   	fcall	_TMR0_SetInterruptHandler
  2254  0490                     l2614:
  2255                           
  2256                           ;main.c: 486:     TMR2_SetInterruptHandler(sec_tick_work);
  2257  0490  3088               	movlw	low _sec_tick_work
  2258  0491  0020               	movlb	0	; select bank0
  2259  0492  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  2260  0493  3003               	movlw	high _sec_tick_work
  2261  0494  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  2262  0495  3187  2746  3184   	fcall	_TMR2_SetInterruptHandler
  2263  0498                     l2616:
  2264                           
  2265                           ;main.c: 487:     TMR2_StartTimer();
  2266  0498  3187  2772  3184   	fcall	_TMR2_StartTimer
  2267  049B                     l2618:
  2268  049B  0023               	movlb	3	; select bank3
  2269  049C  118E               	bcf	14,3	;volatile
  2270  049D                     l2620:
  2271  049D  108C               	bcf	12,1	;volatile
  2272  049E                     l2622:
  2273  049E  110E               	bcf	14,2	;volatile
  2274  049F                     l2624:
  2275  049F  0024               	movlb	4	; select bank4
  2276  04A0  108C               	bcf	12,1	;volatile
  2277  04A1                     l2626:
  2278  04A1  0021               	movlb	1	; select bank1
  2279  04A2  148C               	bsf	12,1	;volatile
  2280  04A3                     l2628:
  2281  04A3  0024               	movlb	4	; select bank4
  2282  04A4  110E               	bcf	14,2	;volatile
  2283  04A5                     l2630:
  2284  04A5  0021               	movlb	1	; select bank1
  2285  04A6  150E               	bsf	14,2	;volatile
  2286  04A7                     l2632:
  2287                           
  2288                           ;main.c: 499:     INTCONbits.TMR0IE = 0;
  2289  04A7  128B               	bcf	11,5	;volatile
  2290  04A8                     l2634:
  2291                           
  2292                           ;main.c: 500:     FLAGS.value = 0;
  2293  04A8  01FC               	clrf	_FLAGS
  2294  04A9                     l2636:
  2295  04A9  0022               	movlb	2	; select bank2
  2296  04AA  128E               	bcf	14,5	;volatile
  2297  04AB                     l2638:
  2298  04AB  120E               	bcf	14,4	;volatile
  2299  04AC                     l2640:
  2300  04AC  100E               	bcf	14,0	;volatile
  2301  04AD                     l2642:
  2302  04AD  0021               	movlb	1	; select bank1
  2303  04AE  100E               	bcf	14,0	;volatile
  2304  04AF                     l2644:
  2305                           
  2306                           ;main.c: 507:     get_fun_full();
  2307  04AF  3182  2231  3184   	fcall	_get_fun_full
  2308  04B2                     l2646:
  2309                           
  2310                           ;main.c: 508:     get_jump_full();
  2311  04B2  3183  2302  3184   	fcall	_get_jump_full
  2312  04B5                     l2648:
  2313                           
  2314                           ;main.c: 509:     time_pow_s = 0;
  2315  04B5  0020               	movlb	0	; select bank0
  2316  04B6  01DE               	clrf	_time_pow_s
  2317  04B7                     l535:
  2318  04B7  0008               	return
  2319  04B8                     __end_of_start_setup:
  2320                           
  2321                           	psect	text3
  2322  0302                     __ptext3:	
  2323 ;; *************** function _get_jump_full *****************
  2324 ;; Defined at:
  2325 ;;		line 251 in file "main.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;		None
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;  res             2    5[BANK0 ] unsigned int 
  2330 ;;  flag            1    7[BANK0 ] unsigned char 
  2331 ;; Return value:  Size  Location     Type
  2332 ;;                  1    wreg      void 
  2333 ;; Registers used:
  2334 ;;		wreg, status,2, status,0, pclath, cstack
  2335 ;; Tracked objects:
  2336 ;;		On entry : 0/0
  2337 ;;		On exit  : 0/0
  2338 ;;		Unchanged: 0/0
  2339 ;; Data sizes:     COMMON   BANK0   BANK1
  2340 ;;      Params:         0       0       0
  2341 ;;      Locals:         0       3       0
  2342 ;;      Temps:          0       1       0
  2343 ;;      Totals:         0       4       0
  2344 ;;Total ram usage:        4 bytes
  2345 ;; Hardware stack levels used: 1
  2346 ;; Hardware stack levels required when called: 8
  2347 ;; This function calls:
  2348 ;;		_ADC_GetConversion
  2349 ;; This function is called by:
  2350 ;;		_start_setup
  2351 ;; This function uses a non-reentrant model
  2352 ;;
  2353                           
  2354  0302                     _get_jump_full:	
  2355                           ;psect for function _get_jump_full
  2356                           
  2357  0302                     l394:	
  2358                           ;incstack = 0
  2359                           ; Regs used in _get_jump_full: [wreg+status,2+status,0+pclath+cstack]
  2360                           ;main.c: 253:     static signed char jump_counter;;main.c: 254:     do { ANSELAbits.ANSA
      +                          1 = 1; } while(0);
  2361                           
  2362  0302  0023               	movlb	3	; select bank3
  2363  0303  148C               	bsf	12,1	;volatile
  2364  0304                     l2406:
  2365                           
  2366                           ;main.c: 255:     char flag = 0;
  2367  0304  0020               	movlb	0	; select bank0
  2368  0305  01A7               	clrf	get_jump_full@flag
  2369  0306                     l2408:
  2370                           
  2371                           ;main.c: 257:         unsigned res = ADC_GetConversion(PIN_JUMP_STATE);
  2372  0306  3001               	movlw	1
  2373  0307  3185  259F  3183   	fcall	_ADC_GetConversion
  2374  030A  0020               	movlb	0	; select bank0
  2375  030B  0821               	movf	?_ADC_GetConversion+1,w
  2376  030C  00A6               	movwf	get_jump_full@res+1
  2377  030D  0820               	movf	?_ADC_GetConversion,w
  2378  030E  00A5               	movwf	get_jump_full@res
  2379  030F                     l2410:
  2380                           
  2381                           ;main.c: 258:         if (res < 2000) jump_counter--;
  2382  030F  3007               	movlw	7
  2383  0310  0226               	subwf	get_jump_full@res+1,w
  2384  0311  30D0               	movlw	208
  2385  0312  1903               	skipnz
  2386  0313  0225               	subwf	get_jump_full@res,w
  2387  0314  1803               	skipnc
  2388  0315  2B17               	goto	u1631
  2389  0316  2B18               	goto	u1630
  2390  0317                     u1631:
  2391  0317  2B1D               	goto	l2414
  2392  0318                     u1630:
  2393  0318                     l2412:
  2394  0318  30FF               	movlw	255
  2395  0319  00A4               	movwf	??_get_jump_full
  2396  031A  0824               	movf	??_get_jump_full,w
  2397  031B  07DA               	addwf	get_jump_full@jump_counter,f
  2398  031C  2B21               	goto	l2416
  2399  031D                     l2414:
  2400  031D  3001               	movlw	1
  2401  031E  00A4               	movwf	??_get_jump_full
  2402  031F  0824               	movf	??_get_jump_full,w
  2403  0320  07DA               	addwf	get_jump_full@jump_counter,f
  2404  0321                     l2416:
  2405                           
  2406                           ;main.c: 273:         if (jump_counter > 10) {
  2407  0321  085A               	movf	get_jump_full@jump_counter,w
  2408  0322  3A80               	xorlw	128
  2409  0323  3E75               	addlw	-139
  2410  0324  1C03               	skipc
  2411  0325  2B27               	goto	u1641
  2412  0326  2B28               	goto	u1640
  2413  0327                     u1641:
  2414  0327  2B30               	goto	l2424
  2415  0328                     u1640:
  2416  0328                     l2418:
  2417                           
  2418                           ;main.c: 274:             jump_counter = 10;
  2419  0328  300A               	movlw	10
  2420  0329  00A4               	movwf	??_get_jump_full
  2421  032A  0824               	movf	??_get_jump_full,w
  2422  032B  00DA               	movwf	get_jump_full@jump_counter
  2423  032C                     l2420:
  2424                           
  2425                           ;main.c: 275:             FLAGS.bits._JUMP_CONNECTED = 0;
  2426  032C  127C               	bcf	_FLAGS,4
  2427  032D                     l2422:
  2428                           
  2429                           ;main.c: 276:             flag = 1;
  2430  032D  01A7               	clrf	get_jump_full@flag
  2431  032E  0AA7               	incf	get_jump_full@flag,f
  2432                           
  2433                           ;main.c: 277:         } else if (jump_counter<-10) {
  2434  032F  2B3D               	goto	l2432
  2435  0330                     l2424:
  2436  0330  085A               	movf	get_jump_full@jump_counter,w
  2437  0331  3A80               	xorlw	128
  2438  0332  3E8A               	addlw	138
  2439  0333  1803               	skipnc
  2440  0334  2B36               	goto	u1651
  2441  0335  2B37               	goto	u1650
  2442  0336                     u1651:
  2443  0336  2B3D               	goto	l2432
  2444  0337                     u1650:
  2445  0337                     l2426:
  2446                           
  2447                           ;main.c: 278:             jump_counter = -10;
  2448  0337  30F6               	movlw	246
  2449  0338  00A4               	movwf	??_get_jump_full
  2450  0339  0824               	movf	??_get_jump_full,w
  2451  033A  00DA               	movwf	get_jump_full@jump_counter
  2452  033B                     l2428:
  2453                           
  2454                           ;main.c: 279:             FLAGS.bits._JUMP_CONNECTED = 1;
  2455  033B  167C               	bsf	_FLAGS,4
  2456  033C  2B2D               	goto	l2422
  2457  033D                     l2432:
  2458                           
  2459                           ;main.c: 285:     } while (flag == 0);
  2460  033D  0827               	movf	get_jump_full@flag,w
  2461  033E  1903               	btfsc	3,2
  2462  033F  2B41               	goto	u1661
  2463  0340  2B42               	goto	u1660
  2464  0341                     u1661:
  2465  0341  2B06               	goto	l2408
  2466  0342                     u1660:
  2467  0342                     l403:	
  2468                           ;main.c: 286:     do { ANSELAbits.ANSA1 = 0; } while(0);
  2469                           
  2470  0342  0023               	movlb	3	; select bank3
  2471  0343  108C               	bcf	12,1	;volatile
  2472  0344                     l405:
  2473  0344  0008               	return
  2474  0345                     __end_of_get_jump_full:
  2475                           
  2476                           	psect	text4
  2477  0231                     __ptext4:	
  2478 ;; *************** function _get_fun_full *****************
  2479 ;; Defined at:
  2480 ;;		line 177 in file "main.c"
  2481 ;; Parameters:    Size  Location     Type
  2482 ;;		None
  2483 ;; Auto vars:     Size  Location     Type
  2484 ;;  res             2    5[BANK0 ] unsigned int 
  2485 ;;  flag            1    7[BANK0 ] unsigned char 
  2486 ;; Return value:  Size  Location     Type
  2487 ;;                  1    wreg      void 
  2488 ;; Registers used:
  2489 ;;		wreg, status,2, status,0, pclath, cstack
  2490 ;; Tracked objects:
  2491 ;;		On entry : 0/0
  2492 ;;		On exit  : 0/0
  2493 ;;		Unchanged: 0/0
  2494 ;; Data sizes:     COMMON   BANK0   BANK1
  2495 ;;      Params:         0       0       0
  2496 ;;      Locals:         0       3       0
  2497 ;;      Temps:          0       1       0
  2498 ;;      Totals:         0       4       0
  2499 ;;Total ram usage:        4 bytes
  2500 ;; Hardware stack levels used: 1
  2501 ;; Hardware stack levels required when called: 8
  2502 ;; This function calls:
  2503 ;;		_ADC_GetConversion
  2504 ;; This function is called by:
  2505 ;;		_start_setup
  2506 ;; This function uses a non-reentrant model
  2507 ;;
  2508                           
  2509  0231                     _get_fun_full:	
  2510                           ;psect for function _get_fun_full
  2511                           
  2512  0231                     l360:	
  2513                           ;incstack = 0
  2514                           ; Regs used in _get_fun_full: [wreg+status,2+status,0+pclath+cstack]
  2515                           ;main.c: 179:     static signed char fun_counter;;main.c: 180:     do { LATCbits.LATC1 =
      +                           1; } while(0);
  2516                           
  2517  0231  0022               	movlb	2	; select bank2
  2518  0232  148E               	bsf	14,1	;volatile
  2519  0233                     l362:	
  2520                           ;main.c: 181:     do { ANSELCbits.ANSC2 = 1; } while(0);
  2521                           
  2522  0233  0023               	movlb	3	; select bank3
  2523  0234  150E               	bsf	14,2	;volatile
  2524  0235                     l2378:
  2525                           
  2526                           ;main.c: 182:     char flag = 0;
  2527  0235  0020               	movlb	0	; select bank0
  2528  0236  01A7               	clrf	get_fun_full@flag
  2529  0237                     l2380:
  2530                           
  2531                           ;main.c: 184:         unsigned res = ADC_GetConversion(PIN_FUN_STATE);
  2532  0237  3006               	movlw	6
  2533  0238  3185  259F  3182   	fcall	_ADC_GetConversion
  2534  023B  0020               	movlb	0	; select bank0
  2535  023C  0821               	movf	?_ADC_GetConversion+1,w
  2536  023D  00A6               	movwf	get_fun_full@res+1
  2537  023E  0820               	movf	?_ADC_GetConversion,w
  2538  023F  00A5               	movwf	get_fun_full@res
  2539  0240                     l2382:
  2540                           
  2541                           ;main.c: 185:         if (res < 2000) fun_counter--;
  2542  0240  3007               	movlw	7
  2543  0241  0226               	subwf	get_fun_full@res+1,w
  2544  0242  30D0               	movlw	208
  2545  0243  1903               	skipnz
  2546  0244  0225               	subwf	get_fun_full@res,w
  2547  0245  1803               	skipnc
  2548  0246  2A48               	goto	u1591
  2549  0247  2A49               	goto	u1590
  2550  0248                     u1591:
  2551  0248  2A4E               	goto	l2386
  2552  0249                     u1590:
  2553  0249                     l2384:
  2554  0249  30FF               	movlw	255
  2555  024A  00A4               	movwf	??_get_fun_full
  2556  024B  0824               	movf	??_get_fun_full,w
  2557  024C  07DC               	addwf	get_fun_full@fun_counter,f
  2558  024D  2A52               	goto	l2388
  2559  024E                     l2386:
  2560  024E  3001               	movlw	1
  2561  024F  00A4               	movwf	??_get_fun_full
  2562  0250  0824               	movf	??_get_fun_full,w
  2563  0251  07DC               	addwf	get_fun_full@fun_counter,f
  2564  0252                     l2388:
  2565                           
  2566                           ;main.c: 201:           if (fun_counter > 10) {
  2567  0252  085C               	movf	get_fun_full@fun_counter,w
  2568  0253  3A80               	xorlw	128
  2569  0254  3E75               	addlw	-139
  2570  0255  1C03               	skipc
  2571  0256  2A58               	goto	u1601
  2572  0257  2A59               	goto	u1600
  2573  0258                     u1601:
  2574  0258  2A61               	goto	l2396
  2575  0259                     u1600:
  2576  0259                     l2390:
  2577                           
  2578                           ;main.c: 202:             fun_counter = 10;
  2579  0259  300A               	movlw	10
  2580  025A  00A4               	movwf	??_get_fun_full
  2581  025B  0824               	movf	??_get_fun_full,w
  2582  025C  00DC               	movwf	get_fun_full@fun_counter
  2583  025D                     l2392:
  2584                           
  2585                           ;main.c: 203:             FLAGS.bits._FUN_CONNECTED = 0;
  2586  025D  11FC               	bcf	_FLAGS,3
  2587  025E                     l2394:
  2588                           
  2589                           ;main.c: 204:             flag = 1;
  2590  025E  01A7               	clrf	get_fun_full@flag
  2591  025F  0AA7               	incf	get_fun_full@flag,f
  2592                           
  2593                           ;main.c: 205:         } else if (fun_counter<-10) {
  2594  0260  2A6E               	goto	l2404
  2595  0261                     l2396:
  2596  0261  085C               	movf	get_fun_full@fun_counter,w
  2597  0262  3A80               	xorlw	128
  2598  0263  3E8A               	addlw	138
  2599  0264  1803               	skipnc
  2600  0265  2A67               	goto	u1611
  2601  0266  2A68               	goto	u1610
  2602  0267                     u1611:
  2603  0267  2A6E               	goto	l2404
  2604  0268                     u1610:
  2605  0268                     l2398:
  2606                           
  2607                           ;main.c: 206:             fun_counter = 10;
  2608  0268  300A               	movlw	10
  2609  0269  00A4               	movwf	??_get_fun_full
  2610  026A  0824               	movf	??_get_fun_full,w
  2611  026B  00DC               	movwf	get_fun_full@fun_counter
  2612  026C                     l2400:
  2613                           
  2614                           ;main.c: 207:             FLAGS.bits._FUN_CONNECTED = 1;
  2615  026C  15FC               	bsf	_FLAGS,3
  2616  026D  2A5E               	goto	l2394
  2617  026E                     l2404:
  2618                           
  2619                           ;main.c: 212:     } while (flag == 0);
  2620  026E  0827               	movf	get_fun_full@flag,w
  2621  026F  1903               	btfsc	3,2
  2622  0270  2A72               	goto	u1621
  2623  0271  2A73               	goto	u1620
  2624  0272                     u1621:
  2625  0272  2A37               	goto	l2380
  2626  0273                     u1620:
  2627  0273                     l371:	
  2628                           ;main.c: 214:     do { ANSELCbits.ANSC2 = 0; } while(0);
  2629                           
  2630  0273  0023               	movlb	3	; select bank3
  2631  0274  110E               	bcf	14,2	;volatile
  2632  0275                     l373:	
  2633                           ;main.c: 215:     do { LATCbits.LATC1 = 0; } while(0);
  2634                           
  2635  0275  0022               	movlb	2	; select bank2
  2636  0276  108E               	bcf	14,1	;volatile
  2637  0277                     l375:
  2638  0277  0008               	return
  2639  0278                     __end_of_get_fun_full:
  2640                           
  2641                           	psect	text5
  2642  0732                     __ptext5:	
  2643 ;; *************** function _get_eeprom *****************
  2644 ;; Defined at:
  2645 ;;		line 473 in file "main.c"
  2646 ;; Parameters:    Size  Location     Type
  2647 ;;		None
  2648 ;; Auto vars:     Size  Location     Type
  2649 ;;		None
  2650 ;; Return value:  Size  Location     Type
  2651 ;;                  1    wreg      void 
  2652 ;; Registers used:
  2653 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2654 ;; Tracked objects:
  2655 ;;		On entry : 0/0
  2656 ;;		On exit  : 0/0
  2657 ;;		Unchanged: 0/0
  2658 ;; Data sizes:     COMMON   BANK0   BANK1
  2659 ;;      Params:         0       0       0
  2660 ;;      Locals:         0       0       0
  2661 ;;      Temps:          0       0       0
  2662 ;;      Totals:         0       0       0
  2663 ;;Total ram usage:        0 bytes
  2664 ;; Hardware stack levels used: 1
  2665 ;; Hardware stack levels required when called: 10
  2666 ;; This function calls:
  2667 ;;		_get_adr
  2668 ;;		_get_time
  2669 ;; This function is called by:
  2670 ;;		_start_setup
  2671 ;; This function uses a non-reentrant model
  2672 ;;
  2673                           
  2674  0732                     _get_eeprom:	
  2675                           ;psect for function _get_eeprom
  2676                           
  2677  0732                     l2442:	
  2678                           ;incstack = 0
  2679                           ; Regs used in _get_eeprom: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2680                           
  2681                           
  2682                           ;main.c: 474:     get_adr();
  2683  0732  3181  2132  3187   	fcall	_get_adr
  2684                           
  2685                           ;main.c: 475:     get_time();
  2686  0735  3180  203F  3187   	fcall	_get_time
  2687  0738                     l510:
  2688  0738  0008               	return
  2689  0739                     __end_of_get_eeprom:
  2690                           
  2691                           	psect	text6
  2692  003F                     __ptext6:	
  2693 ;; *************** function _get_time *****************
  2694 ;; Defined at:
  2695 ;;		line 436 in file "main.c"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;		None
  2698 ;; Auto vars:     Size  Location     Type
  2699 ;;  q               1   40[BANK0 ] unsigned char 
  2700 ;;  q               1   38[BANK0 ] unsigned char 
  2701 ;;  q               1   39[BANK0 ] unsigned char 
  2702 ;;  i               1   36[BANK0 ] unsigned char 
  2703 ;;  times           9   20[BANK0 ] unsigned um[3]
  2704 ;;  time_count      3   30[BANK0 ] unsigned char [3]
  2705 ;;  buf2            3   33[BANK0 ] unsigned um
  2706 ;;  buf             1   37[BANK0 ] unsigned char 
  2707 ;;  adr_error       1   29[BANK0 ] unsigned char 
  2708 ;; Return value:  Size  Location     Type
  2709 ;;                  1    wreg      void 
  2710 ;; Registers used:
  2711 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2712 ;; Tracked objects:
  2713 ;;		On entry : 0/0
  2714 ;;		On exit  : 0/0
  2715 ;;		Unchanged: 0/0
  2716 ;; Data sizes:     COMMON   BANK0   BANK1
  2717 ;;      Params:         0       0       0
  2718 ;;      Locals:         0      21       0
  2719 ;;      Temps:          0       4       0
  2720 ;;      Totals:         0      25       0
  2721 ;;Total ram usage:       25 bytes
  2722 ;; Hardware stack levels used: 1
  2723 ;; Hardware stack levels required when called: 9
  2724 ;; This function calls:
  2725 ;;		_EEPROM_ReadShortLong
  2726 ;;		___bmul
  2727 ;; This function is called by:
  2728 ;;		_get_eeprom
  2729 ;; This function uses a non-reentrant model
  2730 ;;
  2731                           
  2732  003F                     _get_time:	
  2733                           ;psect for function _get_time
  2734                           
  2735  003F                     l2256:	
  2736                           ;incstack = 0
  2737                           ; Regs used in _get_time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2738                           
  2739                           
  2740                           ;main.c: 438:     char adr_error = 0;
  2741  003F  0020               	movlb	0	; select bank0
  2742  0040  01BD               	clrf	get_time@adr_error
  2743                           
  2744                           ;main.c: 439:     char buf=0;
  2745  0041  01C5               	clrf	get_time@buf
  2746  0042                     l2258:
  2747  0042                     l2260:
  2748                           
  2749                           ;main.c: 441:     __uint24 times[3] = {};
  2750  0042  3034               	movlw	low get_time@times
  2751  0043  0086               	movwf	6
  2752  0044  3000               	movlw	high get_time@times
  2753  0045  0087               	movwf	7
  2754  0046  3009               	movlw	9
  2755  0047  00B0               	movwf	??_get_time
  2756  0048  3000               	movlw	0
  2757  0049                     u1460:
  2758  0049  001E               	movwi fsr1++
  2759  004A  0BB0               	decfsz	??_get_time,f
  2760  004B  2849               	goto	u1460
  2761  004C                     l2262:
  2762                           
  2763                           ;main.c: 442:     char time_count[3]={};
  2764  004C  3000               	movlw	0
  2765  004D  00BE               	movwf	get_time@time_count
  2766  004E  3000               	movlw	0
  2767  004F  00BF               	movwf	get_time@time_count+1
  2768  0050  3000               	movlw	0
  2769  0051  00C0               	movwf	get_time@time_count+2
  2770  0052                     l2264:
  2771                           
  2772                           ;main.c: 443:     for (unsigned char i = START_EEPROM_ADR; i < START_EEPROM_ADR + 0x10; 
      +                          i += 4) {
  2773  0052  085F               	movf	_START_EEPROM_ADR,w
  2774  0053  00B0               	movwf	??_get_time
  2775  0054  0830               	movf	??_get_time,w
  2776  0055  00C4               	movwf	get_time@i
  2777  0056  28E5               	goto	l2308
  2778  0057                     l2266:
  2779                           
  2780                           ;main.c: 444:         buf2 = EEPROM_ReadShortLong(i);
  2781  0057  0020               	movlb	0	; select bank0
  2782  0058  0844               	movf	get_time@i,w
  2783  0059  3182  2278  3180   	fcall	_EEPROM_ReadShortLong
  2784  005C  0020               	movlb	0	; select bank0
  2785  005D  0823               	movf	?_EEPROM_ReadShortLong,w
  2786  005E  00C1               	movwf	get_time@buf2
  2787  005F  0824               	movf	?_EEPROM_ReadShortLong+1,w
  2788  0060  00C2               	movwf	get_time@buf2+1
  2789  0061  0825               	movf	?_EEPROM_ReadShortLong+2,w
  2790  0062  00C3               	movwf	get_time@buf2+2
  2791  0063                     l2268:
  2792                           
  2793                           ;main.c: 446:         for (char q = 0; q < 3; q++) {
  2794  0063  01C6               	clrf	get_time@q
  2795  0064                     l2274:
  2796                           
  2797                           ;main.c: 447:             if (buf2 == times[q]) {
  2798  0064  3003               	movlw	3
  2799  0065  00B0               	movwf	??_get_time
  2800  0066  0830               	movf	??_get_time,w
  2801  0067  00A0               	movwf	___bmul@multiplicand
  2802  0068  0846               	movf	get_time@q,w
  2803  0069  3186  264D  3180   	fcall	___bmul
  2804  006C  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2805  006D  0086               	movwf	6
  2806  006E  0187               	clrf	7
  2807  006F  3F40               	moviw [0]fsr1
  2808  0070  0020               	movlb	0	; select bank0
  2809  0071  0641               	xorwf	get_time@buf2,w
  2810  0072  1D03               	skipz
  2811  0073  287A               	goto	u1475
  2812  0074  3F41               	moviw [1]fsr1
  2813  0075  0642               	xorwf	get_time@buf2+1,w
  2814  0076  1D03               	skipz
  2815  0077  287A               	goto	u1475
  2816  0078  3F42               	moviw [2]fsr1
  2817  0079  0643               	xorwf	get_time@buf2+2,w
  2818  007A                     u1475:
  2819  007A  1D03               	skipz
  2820  007B  287D               	goto	u1471
  2821  007C  287E               	goto	u1470
  2822  007D                     u1471:
  2823  007D  288C               	goto	l2280
  2824  007E                     u1470:
  2825  007E                     l2276:
  2826                           
  2827                           ;main.c: 448:                 time_count[q]++;
  2828  007E  3001               	movlw	1
  2829  007F  00B0               	movwf	??_get_time
  2830  0080  0846               	movf	get_time@q,w
  2831  0081  3E3E               	addlw	(low (get_time@time_count| 0))& (0+255)
  2832  0082  0086               	movwf	6
  2833  0083  0187               	clrf	7
  2834  0084  0830               	movf	??_get_time,w
  2835  0085  0781               	addwf	1,f
  2836  0086                     l2278:
  2837                           
  2838                           ;main.c: 449:                 buf2 = 0;
  2839  0086  3000               	movlw	0
  2840  0087  00C1               	movwf	get_time@buf2
  2841  0088  3000               	movlw	0
  2842  0089  00C2               	movwf	get_time@buf2+1
  2843  008A  3000               	movlw	0
  2844  008B  00C3               	movwf	get_time@buf2+2
  2845  008C                     l2280:
  2846                           
  2847                           ;main.c: 451:         }
  2848  008C  3001               	movlw	1
  2849  008D  00B0               	movwf	??_get_time
  2850  008E  0830               	movf	??_get_time,w
  2851  008F  07C6               	addwf	get_time@q,f
  2852  0090                     l2282:
  2853  0090  3003               	movlw	3
  2854  0091  0246               	subwf	get_time@q,w
  2855  0092  1C03               	skipc
  2856  0093  2895               	goto	u1481
  2857  0094  2896               	goto	u1480
  2858  0095                     u1481:
  2859  0095  2864               	goto	l2274
  2860  0096                     u1480:
  2861  0096                     l2284:
  2862                           
  2863                           ;main.c: 453:         if (buf2 != 0) {
  2864  0096  0843               	movf	get_time@buf2+2,w
  2865  0097  0442               	iorwf	get_time@buf2+1,w
  2866  0098  0441               	iorwf	get_time@buf2,w
  2867  0099  1903               	skipnz
  2868  009A  289C               	goto	u1491
  2869  009B  289D               	goto	u1490
  2870  009C                     u1491:
  2871  009C  28E1               	goto	l2306
  2872  009D                     u1490:
  2873  009D                     l2286:
  2874                           
  2875                           ;main.c: 454:             adr_error = 1;
  2876  009D  01BD               	clrf	get_time@adr_error
  2877  009E  0ABD               	incf	get_time@adr_error,f
  2878  009F                     l2288:
  2879                           
  2880                           ;main.c: 455:             for (unsigned char q = 0; q < 3; q++)
  2881  009F  01C8               	clrf	get_time@q_823
  2882  00A0                     l2294:
  2883                           
  2884                           ;main.c: 456:                 if (times[q]== 0) {
  2885  00A0  3003               	movlw	3
  2886  00A1  00B0               	movwf	??_get_time
  2887  00A2  0830               	movf	??_get_time,w
  2888  00A3  00A0               	movwf	___bmul@multiplicand
  2889  00A4  0848               	movf	get_time@q_823,w
  2890  00A5  3186  264D  3180   	fcall	___bmul
  2891  00A8  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2892  00A9  0086               	movwf	6
  2893  00AA  0187               	clrf	7
  2894  00AB  3F40               	moviw [0]fsr1
  2895  00AC  0020               	movlb	0	; select bank0
  2896  00AD  00B1               	movwf	??_get_time+1
  2897  00AE  3F41               	moviw [1]fsr1
  2898  00AF  00B2               	movwf	??_get_time+2
  2899  00B0  3F42               	moviw [2]fsr1
  2900  00B1  00B3               	movwf	??_get_time+3
  2901  00B2  0833               	movf	??_get_time+3,w
  2902  00B3  0432               	iorwf	??_get_time+2,w
  2903  00B4  0431               	iorwf	??_get_time+1,w
  2904  00B5  1D03               	skipz
  2905  00B6  28B8               	goto	u1501
  2906  00B7  28B9               	goto	u1500
  2907  00B8                     u1501:
  2908  00B8  28D7               	goto	l2302
  2909  00B9                     u1500:
  2910  00B9                     l2296:
  2911                           
  2912                           ;main.c: 457:                     times[q] = buf;
  2913  00B9  0845               	movf	get_time@buf,w
  2914  00BA  00B0               	movwf	??_get_time
  2915  00BB  01B1               	clrf	??_get_time+1
  2916  00BC  01B2               	clrf	??_get_time+2
  2917  00BD  3003               	movlw	3
  2918  00BE  00B3               	movwf	??_get_time+3
  2919  00BF  0833               	movf	??_get_time+3,w
  2920  00C0  00A0               	movwf	___bmul@multiplicand
  2921  00C1  0848               	movf	get_time@q_823,w
  2922  00C2  3186  264D  3180   	fcall	___bmul
  2923  00C5  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2924  00C6  0086               	movwf	6
  2925  00C7  0187               	clrf	7
  2926  00C8  0020               	movlb	0	; select bank0
  2927  00C9  0830               	movf	??_get_time,w
  2928  00CA  3FC0               	movwi [0]fsr1
  2929  00CB  0831               	movf	??_get_time+1,w
  2930  00CC  3FC1               	movwi [1]fsr1
  2931  00CD  0832               	movf	??_get_time+2,w
  2932  00CE  3FC2               	movwi [2]fsr1
  2933  00CF                     l2298:
  2934                           
  2935                           ;main.c: 458:                     time_count[q] = 1;
  2936  00CF  0848               	movf	get_time@q_823,w
  2937  00D0  3E3E               	addlw	(low (get_time@time_count| 0))& (0+255)
  2938  00D1  0086               	movwf	6
  2939  00D2  0187               	clrf	7
  2940  00D3  0181               	clrf	1
  2941  00D4  0A81               	incf	1,f
  2942  00D5                     l2300:
  2943                           
  2944                           ;main.c: 459:                     buf = 0;
  2945  00D5  01C5               	clrf	get_time@buf
  2946                           
  2947                           ;main.c: 460:                     break;
  2948  00D6  28E1               	goto	l2306
  2949  00D7                     l2302:
  2950  00D7  3001               	movlw	1
  2951  00D8  00B0               	movwf	??_get_time
  2952  00D9  0830               	movf	??_get_time,w
  2953  00DA  07C8               	addwf	get_time@q_823,f
  2954  00DB                     l2304:
  2955  00DB  3003               	movlw	3
  2956  00DC  0248               	subwf	get_time@q_823,w
  2957  00DD  1C03               	skipc
  2958  00DE  28E0               	goto	u1511
  2959  00DF  28E1               	goto	u1510
  2960  00E0                     u1511:
  2961  00E0  28A0               	goto	l2294
  2962  00E1                     u1510:
  2963  00E1                     l2306:
  2964                           
  2965                           ;main.c: 463:     }
  2966  00E1  3004               	movlw	4
  2967  00E2  00B0               	movwf	??_get_time
  2968  00E3  0830               	movf	??_get_time,w
  2969  00E4  07C4               	addwf	get_time@i,f
  2970  00E5                     l2308:
  2971  00E5  085F               	movf	_START_EEPROM_ADR,w
  2972  00E6  3E10               	addlw	16
  2973  00E7  00B0               	movwf	??_get_time
  2974  00E8  3000               	movlw	0
  2975  00E9  1803               	skipnc
  2976  00EA  3001               	movlw	1
  2977  00EB  00B1               	movwf	??_get_time+1
  2978  00EC  0831               	movf	??_get_time+1,w
  2979  00ED  3A80               	xorlw	128
  2980  00EE  3C80               	sublw	128
  2981  00EF  1D03               	skipz
  2982  00F0  28F3               	goto	u1525
  2983  00F1  0830               	movf	??_get_time,w
  2984  00F2  0244               	subwf	get_time@i,w
  2985  00F3                     u1525:
  2986  00F3  1C03               	skipc
  2987  00F4  28F6               	goto	u1521
  2988  00F5  28F7               	goto	u1520
  2989  00F6                     u1521:
  2990  00F6  2857               	goto	l2266
  2991  00F7                     u1520:
  2992  00F7                     l2310:
  2993                           
  2994                           ;main.c: 464:     buf = 0;
  2995  00F7  0020               	movlb	0	; select bank0
  2996  00F8  01C5               	clrf	get_time@buf
  2997                           
  2998                           ;main.c: 465:     for (unsigned char q = 0; q < 3; q++) {
  2999  00F9  01C7               	clrf	get_time@q_824
  3000  00FA                     l2316:
  3001                           
  3002                           ;main.c: 466:         if (time_count[q] > time_count[buf]) buf = q;
  3003  00FA  0845               	movf	get_time@buf,w
  3004  00FB  3E3E               	addlw	(low (get_time@time_count| 0))& (0+255)
  3005  00FC  0086               	movwf	6
  3006  00FD  0187               	clrf	7
  3007  00FE  0847               	movf	get_time@q_824,w
  3008  00FF  3E3E               	addlw	(low (get_time@time_count| 0))& (0+255)
  3009  0100  0084               	movwf	4
  3010  0101  0185               	clrf	5
  3011  0102  0800               	movf	0,w
  3012  0103  0201               	subwf	1,w
  3013  0104  1803               	skipnc
  3014  0105  2907               	goto	u1531
  3015  0106  2908               	goto	u1530
  3016  0107                     u1531:
  3017  0107  290C               	goto	l2320
  3018  0108                     u1530:
  3019  0108                     l2318:
  3020  0108  0847               	movf	get_time@q_824,w
  3021  0109  00B0               	movwf	??_get_time
  3022  010A  0830               	movf	??_get_time,w
  3023  010B  00C5               	movwf	get_time@buf
  3024  010C                     l2320:
  3025                           
  3026                           ;main.c: 467:     }
  3027  010C  3001               	movlw	1
  3028  010D  00B0               	movwf	??_get_time
  3029  010E  0830               	movf	??_get_time,w
  3030  010F  07C7               	addwf	get_time@q_824,f
  3031  0110                     l2322:
  3032  0110  3003               	movlw	3
  3033  0111  0247               	subwf	get_time@q_824,w
  3034  0112  1C03               	skipc
  3035  0113  2915               	goto	u1541
  3036  0114  2916               	goto	u1540
  3037  0115                     u1541:
  3038  0115  28FA               	goto	l2316
  3039  0116                     u1540:
  3040  0116                     l2324:
  3041                           
  3042                           ;main.c: 468:     time_s = times[buf];
  3043  0116  3003               	movlw	3
  3044  0117  00B0               	movwf	??_get_time
  3045  0118  0830               	movf	??_get_time,w
  3046  0119  00A0               	movwf	___bmul@multiplicand
  3047  011A  0845               	movf	get_time@buf,w
  3048  011B  3186  264D  3180   	fcall	___bmul
  3049  011E  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  3050  011F  0086               	movwf	6
  3051  0120  0187               	clrf	7
  3052  0121  3F40               	moviw [0]fsr1
  3053  0122  0020               	movlb	0	; select bank0
  3054  0123  00D5               	movwf	_time_s
  3055  0124  3F41               	moviw [1]fsr1
  3056  0125  00D6               	movwf	_time_s+1
  3057  0126  3F42               	moviw [2]fsr1
  3058  0127  00D7               	movwf	_time_s+2
  3059  0128                     l2326:
  3060                           
  3061                           ;main.c: 470:     if (adr_error) START_EEPROM_ADR += 0x10;
  3062  0128  083D               	movf	get_time@adr_error,w
  3063  0129  1903               	btfsc	3,2
  3064  012A  292C               	goto	u1551
  3065  012B  292D               	goto	u1550
  3066  012C                     u1551:
  3067  012C  2931               	goto	l507
  3068  012D                     u1550:
  3069  012D                     l2328:
  3070  012D  3010               	movlw	16
  3071  012E  00B0               	movwf	??_get_time
  3072  012F  0830               	movf	??_get_time,w
  3073  0130  07DF               	addwf	_START_EEPROM_ADR,f
  3074  0131                     l507:
  3075  0131  0008               	return
  3076  0132                     __end_of_get_time:
  3077                           
  3078                           	psect	text7
  3079  064D                     __ptext7:	
  3080 ;; *************** function ___bmul *****************
  3081 ;; Defined at:
  3082 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul8.c"
  3083 ;; Parameters:    Size  Location     Type
  3084 ;;  multiplier      1    wreg     unsigned char 
  3085 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3086 ;; Auto vars:     Size  Location     Type
  3087 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3088 ;;  product         1    2[BANK0 ] unsigned char 
  3089 ;; Return value:  Size  Location     Type
  3090 ;;                  1    wreg      unsigned char 
  3091 ;; Registers used:
  3092 ;;		wreg, status,2, status,0
  3093 ;; Tracked objects:
  3094 ;;		On entry : 0/0
  3095 ;;		On exit  : 0/0
  3096 ;;		Unchanged: 0/0
  3097 ;; Data sizes:     COMMON   BANK0   BANK1
  3098 ;;      Params:         0       1       0
  3099 ;;      Locals:         0       2       0
  3100 ;;      Temps:          0       1       0
  3101 ;;      Totals:         0       4       0
  3102 ;;Total ram usage:        4 bytes
  3103 ;; Hardware stack levels used: 1
  3104 ;; Hardware stack levels required when called: 7
  3105 ;; This function calls:
  3106 ;;		Nothing
  3107 ;; This function is called by:
  3108 ;;		_get_time
  3109 ;; This function uses a non-reentrant model
  3110 ;;
  3111                           
  3112  064D                     ___bmul:	
  3113                           ;psect for function ___bmul
  3114                           
  3115                           
  3116                           ;incstack = 0
  3117                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3118                           ;___bmul@multiplier stored from wreg
  3119  064D  0020               	movlb	0	; select bank0
  3120  064E  00A3               	movwf	___bmul@multiplier
  3121  064F                     l2056:
  3122  064F  01A2               	clrf	___bmul@product
  3123  0650                     l2058:
  3124  0650  1C23               	btfss	___bmul@multiplier,0
  3125  0651  2E53               	goto	u1181
  3126  0652  2E54               	goto	u1180
  3127  0653                     u1181:
  3128  0653  2E58               	goto	l2062
  3129  0654                     u1180:
  3130  0654                     l2060:
  3131  0654  0820               	movf	___bmul@multiplicand,w
  3132  0655  00A1               	movwf	??___bmul
  3133  0656  0821               	movf	??___bmul,w
  3134  0657  07A2               	addwf	___bmul@product,f
  3135  0658                     l2062:
  3136  0658  1003               	clrc
  3137  0659  0DA0               	rlf	___bmul@multiplicand,f
  3138  065A                     l2064:
  3139  065A  1003               	clrc
  3140  065B  0CA3               	rrf	___bmul@multiplier,f
  3141  065C  0823               	movf	___bmul@multiplier,w
  3142  065D  1D03               	btfss	3,2
  3143  065E  2E60               	goto	u1191
  3144  065F  2E61               	goto	u1190
  3145  0660                     u1191:
  3146  0660  2E50               	goto	l2058
  3147  0661                     u1190:
  3148  0661                     l2066:
  3149  0661  0822               	movf	___bmul@product,w
  3150  0662                     l764:
  3151  0662  0008               	return
  3152  0663                     __end_of___bmul:
  3153                           
  3154                           	psect	text8
  3155  0278                     __ptext8:	
  3156 ;; *************** function _EEPROM_ReadShortLong *****************
  3157 ;; Defined at:
  3158 ;;		line 48 in file "eeprom.c"
  3159 ;; Parameters:    Size  Location     Type
  3160 ;;  addr            1    wreg     unsigned char 
  3161 ;; Auto vars:     Size  Location     Type
  3162 ;;  addr            1   15[BANK0 ] unsigned char 
  3163 ;;  dt              3   12[BANK0 ] unsigned um
  3164 ;; Return value:  Size  Location     Type
  3165 ;;                  3    3[BANK0 ] unsigned um
  3166 ;; Registers used:
  3167 ;;		wreg, status,2, status,0, pclath, cstack
  3168 ;; Tracked objects:
  3169 ;;		On entry : 0/0
  3170 ;;		On exit  : 0/0
  3171 ;;		Unchanged: 0/0
  3172 ;; Data sizes:     COMMON   BANK0   BANK1
  3173 ;;      Params:         0       3       0
  3174 ;;      Locals:         0       4       0
  3175 ;;      Temps:          0       6       0
  3176 ;;      Totals:         0      13       0
  3177 ;;Total ram usage:       13 bytes
  3178 ;; Hardware stack levels used: 1
  3179 ;; Hardware stack levels required when called: 8
  3180 ;; This function calls:
  3181 ;;		_EEPROM_ReadByte
  3182 ;; This function is called by:
  3183 ;;		_get_time
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187  0278                     _EEPROM_ReadShortLong:	
  3188                           ;psect for function _EEPROM_ReadShortLong
  3189                           
  3190                           
  3191                           ;incstack = 0
  3192                           ; Regs used in _EEPROM_ReadShortLong: [wreg+status,2+status,0+pclath+cstack]
  3193                           ;EEPROM_ReadShortLong@addr stored from wreg
  3194  0278  0020               	movlb	0	; select bank0
  3195  0279  00AF               	movwf	EEPROM_ReadShortLong@addr
  3196  027A                     l2048:
  3197                           
  3198                           ;eeprom.c: 49:     __uint24 dt = EEPROM_ReadByte(addr + 2)*256*256;
  3199  027A  082F               	movf	EEPROM_ReadShortLong@addr,w
  3200  027B  3E02               	addlw	2
  3201  027C  3186  2634  3182   	fcall	_EEPROM_ReadByte
  3202  027F  0020               	movlb	0	; select bank0
  3203  0280  00A6               	movwf	??_EEPROM_ReadShortLong
  3204  0281  01A7               	clrf	??_EEPROM_ReadShortLong+1
  3205  0282  0826               	movf	??_EEPROM_ReadShortLong,w
  3206  0283  00A7               	movwf	??_EEPROM_ReadShortLong+1
  3207  0284  01A6               	clrf	??_EEPROM_ReadShortLong
  3208  0285  0826               	movf	??_EEPROM_ReadShortLong,w
  3209  0286  00A7               	movwf	??_EEPROM_ReadShortLong+1
  3210  0287  01A6               	clrf	??_EEPROM_ReadShortLong
  3211  0288  0826               	movf	??_EEPROM_ReadShortLong,w
  3212  0289  00AC               	movwf	EEPROM_ReadShortLong@dt
  3213  028A  0827               	movf	??_EEPROM_ReadShortLong+1,w
  3214  028B  00AD               	movwf	EEPROM_ReadShortLong@dt+1
  3215  028C  0D89               	rlf	9,f
  3216  028D  3B89               	subwfb	9,f
  3217  028E  0989               	comf	9,f
  3218  028F  00AE               	movwf	EEPROM_ReadShortLong@dt+2
  3219                           
  3220                           ;eeprom.c: 50:     dt += EEPROM_ReadByte(addr + 1)*256;
  3221  0290  082F               	movf	EEPROM_ReadShortLong@addr,w
  3222  0291  3E01               	addlw	1
  3223  0292  3186  2634  3182   	fcall	_EEPROM_ReadByte
  3224  0295  0020               	movlb	0	; select bank0
  3225  0296  00A6               	movwf	??_EEPROM_ReadShortLong
  3226  0297  01A7               	clrf	??_EEPROM_ReadShortLong+1
  3227  0298  0826               	movf	??_EEPROM_ReadShortLong,w
  3228  0299  00A7               	movwf	??_EEPROM_ReadShortLong+1
  3229  029A  01A6               	clrf	??_EEPROM_ReadShortLong
  3230  029B  0826               	movf	??_EEPROM_ReadShortLong,w
  3231  029C  00A9               	movwf	??_EEPROM_ReadShortLong+3
  3232  029D  0827               	movf	??_EEPROM_ReadShortLong+1,w
  3233  029E  00AA               	movwf	??_EEPROM_ReadShortLong+4
  3234  029F  3000               	movlw	0
  3235  02A0  1BAA               	btfsc	??_EEPROM_ReadShortLong+4,7
  3236  02A1  30FF               	movlw	255
  3237  02A2  00AB               	movwf	??_EEPROM_ReadShortLong+5
  3238  02A3  0829               	movf	??_EEPROM_ReadShortLong+3,w
  3239  02A4  07AC               	addwf	EEPROM_ReadShortLong@dt,f
  3240  02A5  082A               	movf	??_EEPROM_ReadShortLong+4,w
  3241  02A6  3DAD               	addwfc	EEPROM_ReadShortLong@dt+1,f
  3242  02A7  082B               	movf	??_EEPROM_ReadShortLong+5,w
  3243  02A8  3DAE               	addwfc	EEPROM_ReadShortLong@dt+2,f
  3244  02A9                     l2050:
  3245                           
  3246                           ;eeprom.c: 51:     dt += EEPROM_ReadByte(addr);
  3247  02A9  082F               	movf	EEPROM_ReadShortLong@addr,w
  3248  02AA  3186  2634  3182   	fcall	_EEPROM_ReadByte
  3249  02AD  0020               	movlb	0	; select bank0
  3250  02AE  00A6               	movwf	??_EEPROM_ReadShortLong
  3251  02AF  01A7               	clrf	??_EEPROM_ReadShortLong+1
  3252  02B0  01A8               	clrf	??_EEPROM_ReadShortLong+2
  3253  02B1  0826               	movf	??_EEPROM_ReadShortLong,w
  3254  02B2  07AC               	addwf	EEPROM_ReadShortLong@dt,f
  3255  02B3  0827               	movf	??_EEPROM_ReadShortLong+1,w
  3256  02B4  3DAD               	addwfc	EEPROM_ReadShortLong@dt+1,f
  3257  02B5  0828               	movf	??_EEPROM_ReadShortLong+2,w
  3258  02B6  3DAE               	addwfc	EEPROM_ReadShortLong@dt+2,f
  3259  02B7                     l2052:
  3260                           
  3261                           ;eeprom.c: 52:     return dt;
  3262  02B7  082C               	movf	EEPROM_ReadShortLong@dt,w
  3263  02B8  00A3               	movwf	?_EEPROM_ReadShortLong
  3264  02B9  082D               	movf	EEPROM_ReadShortLong@dt+1,w
  3265  02BA  00A4               	movwf	?_EEPROM_ReadShortLong+1
  3266  02BB  082E               	movf	EEPROM_ReadShortLong@dt+2,w
  3267  02BC  00A5               	movwf	?_EEPROM_ReadShortLong+2
  3268  02BD                     l582:
  3269  02BD  0008               	return
  3270  02BE                     __end_of_EEPROM_ReadShortLong:
  3271                           
  3272                           	psect	text9
  3273  0132                     __ptext9:	
  3274 ;; *************** function _get_adr *****************
  3275 ;; Defined at:
  3276 ;;		line 403 in file "main.c"
  3277 ;; Parameters:    Size  Location     Type
  3278 ;;		None
  3279 ;; Auto vars:     Size  Location     Type
  3280 ;;  q               1   39[BANK0 ] unsigned char 
  3281 ;;  q               1   37[BANK0 ] unsigned char 
  3282 ;;  i               1   38[BANK0 ] unsigned char 
  3283 ;;  i               1   36[BANK0 ] unsigned char 
  3284 ;;  adr            32    4[BANK0 ] unsigned char [2][16]
  3285 ;;  buf             1   40[BANK0 ] unsigned char 
  3286 ;; Return value:  Size  Location     Type
  3287 ;;                  1    wreg      void 
  3288 ;; Registers used:
  3289 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3290 ;; Tracked objects:
  3291 ;;		On entry : 0/0
  3292 ;;		On exit  : 0/0
  3293 ;;		Unchanged: 0/0
  3294 ;; Data sizes:     COMMON   BANK0   BANK1
  3295 ;;      Params:         0       0       0
  3296 ;;      Locals:         0      37       0
  3297 ;;      Temps:          0       1       0
  3298 ;;      Totals:         0      38       0
  3299 ;;Total ram usage:       38 bytes
  3300 ;; Hardware stack levels used: 1
  3301 ;; Hardware stack levels required when called: 8
  3302 ;; This function calls:
  3303 ;;		_EEPROM_ReadByte
  3304 ;; This function is called by:
  3305 ;;		_get_eeprom
  3306 ;; This function uses a non-reentrant model
  3307 ;;
  3308                           
  3309  0132                     _get_adr:	
  3310                           ;psect for function _get_adr
  3311                           
  3312  0132                     l2180:	
  3313                           ;incstack = 0
  3314                           ; Regs used in _get_adr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3315                           
  3316  0132                     l2182:
  3317                           
  3318                           ;main.c: 405:     char adr[16][2] = {};
  3319  0132  3024               	movlw	low get_adr@adr
  3320  0133  0086               	movwf	6
  3321  0134  3000               	movlw	high get_adr@adr
  3322  0135  0087               	movwf	7
  3323  0136  3020               	movlw	32
  3324  0137  0020               	movlb	0	; select bank0
  3325  0138  00A3               	movwf	??_get_adr
  3326  0139  3000               	movlw	0
  3327  013A                     u1340:
  3328  013A  001E               	movwi fsr1++
  3329  013B  0BA3               	decfsz	??_get_adr,f
  3330  013C  293A               	goto	u1340
  3331  013D                     l2184:
  3332                           
  3333                           ;main.c: 407:     for (unsigned char i = 0; i < 0x10; i++) {
  3334  013D  01C4               	clrf	get_adr@i
  3335  013E                     l2190:
  3336                           
  3337                           ;main.c: 408:         buf = EEPROM_ReadByte(i);
  3338  013E  0844               	movf	get_adr@i,w
  3339  013F  3186  2634  3181   	fcall	_EEPROM_ReadByte
  3340  0142  0020               	movlb	0	; select bank0
  3341  0143  00A3               	movwf	??_get_adr
  3342  0144  0823               	movf	??_get_adr,w
  3343  0145  00C8               	movwf	get_adr@buf
  3344  0146                     l2192:
  3345                           
  3346                           ;main.c: 409:         if (buf == 0) continue;
  3347  0146  0848               	movf	get_adr@buf,w
  3348  0147  1D03               	btfss	3,2
  3349  0148  294A               	goto	u1351
  3350  0149  294B               	goto	u1350
  3351  014A                     u1351:
  3352  014A  294C               	goto	l2196
  3353  014B                     u1350:
  3354  014B  2994               	goto	l2230
  3355  014C                     l2196:
  3356                           
  3357                           ;main.c: 410:         for (unsigned char q = 0; q < 16; q++) {
  3358  014C  01C5               	clrf	get_adr@q
  3359  014D                     l2202:
  3360                           
  3361                           ;main.c: 411:             if (buf == adr[q][0]) {
  3362  014D  3545               	lslf	get_adr@q,w
  3363  014E  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3364  014F  0086               	movwf	6
  3365  0150  0187               	clrf	7
  3366  0151  0801               	movf	1,w
  3367  0152  0648               	xorwf	get_adr@buf,w
  3368  0153  1D03               	skipz
  3369  0154  2956               	goto	u1361
  3370  0155  2957               	goto	u1360
  3371  0156                     u1361:
  3372  0156  2961               	goto	l2208
  3373  0157                     u1360:
  3374  0157                     l2204:
  3375                           
  3376                           ;main.c: 412:                 (adr[q][1])++;
  3377  0157  3001               	movlw	1
  3378  0158  00A3               	movwf	??_get_adr
  3379  0159  1403               	setc
  3380  015A  0D45               	rlf	get_adr@q,w
  3381  015B  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3382  015C  0086               	movwf	6
  3383  015D  0187               	clrf	7
  3384  015E  0823               	movf	??_get_adr,w
  3385  015F  0781               	addwf	1,f
  3386  0160                     l2206:
  3387                           
  3388                           ;main.c: 413:                 buf = 0;
  3389  0160  01C8               	clrf	get_adr@buf
  3390  0161                     l2208:
  3391                           
  3392                           ;main.c: 415:         }
  3393  0161  3001               	movlw	1
  3394  0162  00A3               	movwf	??_get_adr
  3395  0163  0823               	movf	??_get_adr,w
  3396  0164  07C5               	addwf	get_adr@q,f
  3397  0165                     l2210:
  3398  0165  3010               	movlw	16
  3399  0166  0245               	subwf	get_adr@q,w
  3400  0167  1C03               	skipc
  3401  0168  296A               	goto	u1371
  3402  0169  296B               	goto	u1370
  3403  016A                     u1371:
  3404  016A  294D               	goto	l2202
  3405  016B                     u1370:
  3406  016B                     l2212:
  3407                           
  3408                           ;main.c: 417:         if (buf != 0) {
  3409  016B  0848               	movf	get_adr@buf,w
  3410  016C  1903               	btfsc	3,2
  3411  016D  296F               	goto	u1381
  3412  016E  2970               	goto	u1380
  3413  016F                     u1381:
  3414  016F  2994               	goto	l2230
  3415  0170                     u1380:
  3416  0170                     l2214:
  3417                           
  3418                           ;main.c: 418:             for (unsigned char q = 0; q < 16; q++)
  3419  0170  01C7               	clrf	get_adr@q_811
  3420  0171                     l2220:
  3421                           
  3422                           ;main.c: 419:                 if (adr[q][0] == 0) {
  3423  0171  3547               	lslf	get_adr@q_811,w
  3424  0172  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3425  0173  0086               	movwf	6
  3426  0174  0187               	clrf	7
  3427  0175  0801               	movf	1,w
  3428  0176  1D03               	btfss	3,2
  3429  0177  2979               	goto	u1391
  3430  0178  297A               	goto	u1390
  3431  0179                     u1391:
  3432  0179  298A               	goto	l2226
  3433  017A                     u1390:
  3434  017A                     l2222:
  3435                           
  3436                           ;main.c: 420:                     adr[q][0] = buf;
  3437  017A  0848               	movf	get_adr@buf,w
  3438  017B  00A3               	movwf	??_get_adr
  3439  017C  3547               	lslf	get_adr@q_811,w
  3440  017D  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3441  017E  0086               	movwf	6
  3442  017F  0187               	clrf	7
  3443  0180  0823               	movf	??_get_adr,w
  3444  0181  0081               	movwf	1
  3445                           
  3446                           ;main.c: 421:                     adr[q][1] = 1;
  3447  0182  1403               	setc
  3448  0183  0D47               	rlf	get_adr@q_811,w
  3449  0184  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3450  0185  0086               	movwf	6
  3451  0186  0187               	clrf	7
  3452  0187  0181               	clrf	1
  3453  0188  0A81               	incf	1,f
  3454  0189                     l2224:
  3455                           
  3456                           ;main.c: 423:                     break;
  3457  0189  2994               	goto	l2230
  3458  018A                     l2226:
  3459  018A  3001               	movlw	1
  3460  018B  00A3               	movwf	??_get_adr
  3461  018C  0823               	movf	??_get_adr,w
  3462  018D  07C7               	addwf	get_adr@q_811,f
  3463  018E                     l2228:
  3464  018E  3010               	movlw	16
  3465  018F  0247               	subwf	get_adr@q_811,w
  3466  0190  1C03               	skipc
  3467  0191  2993               	goto	u1401
  3468  0192  2994               	goto	u1400
  3469  0193                     u1401:
  3470  0193  2971               	goto	l2220
  3471  0194                     u1400:
  3472  0194                     l2230:
  3473  0194  3001               	movlw	1
  3474  0195  00A3               	movwf	??_get_adr
  3475  0196  0823               	movf	??_get_adr,w
  3476  0197  07C4               	addwf	get_adr@i,f
  3477  0198                     l2232:
  3478  0198  3010               	movlw	16
  3479  0199  0244               	subwf	get_adr@i,w
  3480  019A  1C03               	skipc
  3481  019B  299D               	goto	u1411
  3482  019C  299E               	goto	u1410
  3483  019D                     u1411:
  3484  019D  293E               	goto	l2190
  3485  019E                     u1410:
  3486  019E                     l2234:
  3487                           
  3488                           ;main.c: 427:     buf = 0;
  3489  019E  01C8               	clrf	get_adr@buf
  3490                           
  3491                           ;main.c: 428:     for (unsigned char i = 0; i < 0x10; i++) {
  3492  019F  01C6               	clrf	get_adr@i_812
  3493  01A0                     l2240:
  3494                           
  3495                           ;main.c: 429:         if (adr[i][1] > adr[buf][1]) buf = i;
  3496  01A0  1403               	setc
  3497  01A1  0D48               	rlf	get_adr@buf,w
  3498  01A2  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3499  01A3  0086               	movwf	6
  3500  01A4  0187               	clrf	7
  3501  01A5  1403               	setc
  3502  01A6  0D46               	rlf	get_adr@i_812,w
  3503  01A7  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3504  01A8  0084               	movwf	4
  3505  01A9  0185               	clrf	5
  3506  01AA  0800               	movf	0,w
  3507  01AB  0201               	subwf	1,w
  3508  01AC  1803               	skipnc
  3509  01AD  29AF               	goto	u1421
  3510  01AE  29B0               	goto	u1420
  3511  01AF                     u1421:
  3512  01AF  29B4               	goto	l2244
  3513  01B0                     u1420:
  3514  01B0                     l2242:
  3515  01B0  0846               	movf	get_adr@i_812,w
  3516  01B1  00A3               	movwf	??_get_adr
  3517  01B2  0823               	movf	??_get_adr,w
  3518  01B3  00C8               	movwf	get_adr@buf
  3519  01B4                     l2244:
  3520                           
  3521                           ;main.c: 430:     }
  3522  01B4  3001               	movlw	1
  3523  01B5  00A3               	movwf	??_get_adr
  3524  01B6  0823               	movf	??_get_adr,w
  3525  01B7  07C6               	addwf	get_adr@i_812,f
  3526  01B8                     l2246:
  3527  01B8  3010               	movlw	16
  3528  01B9  0246               	subwf	get_adr@i_812,w
  3529  01BA  1C03               	skipc
  3530  01BB  29BD               	goto	u1431
  3531  01BC  29BE               	goto	u1430
  3532  01BD                     u1431:
  3533  01BD  29A0               	goto	l2240
  3534  01BE                     u1430:
  3535  01BE                     l2248:
  3536                           
  3537                           ;main.c: 431:     START_EEPROM_ADR = adr[buf][0];
  3538  01BE  3548               	lslf	get_adr@buf,w
  3539  01BF  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3540  01C0  0086               	movwf	6
  3541  01C1  0187               	clrf	7
  3542  01C2  0801               	movf	1,w
  3543  01C3  00A3               	movwf	??_get_adr
  3544  01C4  0823               	movf	??_get_adr,w
  3545  01C5  00DF               	movwf	_START_EEPROM_ADR
  3546  01C6                     l2250:
  3547                           
  3548                           ;main.c: 432:     if (START_EEPROM_ADR == 0 || START_EEPROM_ADR == 0xFF) START_EEPROM_AD
      +                          R = 0x10;
  3549  01C6  085F               	movf	_START_EEPROM_ADR,w
  3550  01C7  1903               	btfsc	3,2
  3551  01C8  29CA               	goto	u1441
  3552  01C9  29CB               	goto	u1440
  3553  01CA                     u1441:
  3554  01CA  29D0               	goto	l2254
  3555  01CB                     u1440:
  3556  01CB                     l2252:
  3557  01CB  0A5F               	incf	_START_EEPROM_ADR,w
  3558  01CC  1D03               	btfss	3,2
  3559  01CD  29CF               	goto	u1451
  3560  01CE  29D0               	goto	u1450
  3561  01CF                     u1451:
  3562  01CF  29D4               	goto	l486
  3563  01D0                     u1450:
  3564  01D0                     l2254:
  3565  01D0  3010               	movlw	16
  3566  01D1  00A3               	movwf	??_get_adr
  3567  01D2  0823               	movf	??_get_adr,w
  3568  01D3  00DF               	movwf	_START_EEPROM_ADR
  3569  01D4                     l486:
  3570  01D4  0008               	return
  3571  01D5                     __end_of_get_adr:
  3572                           
  3573                           	psect	text10
  3574  0772                     __ptext10:	
  3575 ;; *************** function _TMR2_StartTimer *****************
  3576 ;; Defined at:
  3577 ;;		line 87 in file "mcc_generated_files/tmr2.c"
  3578 ;; Parameters:    Size  Location     Type
  3579 ;;		None
  3580 ;; Auto vars:     Size  Location     Type
  3581 ;;		None
  3582 ;; Return value:  Size  Location     Type
  3583 ;;                  1    wreg      void 
  3584 ;; Registers used:
  3585 ;;		None
  3586 ;; Tracked objects:
  3587 ;;		On entry : 0/0
  3588 ;;		On exit  : 0/0
  3589 ;;		Unchanged: 0/0
  3590 ;; Data sizes:     COMMON   BANK0   BANK1
  3591 ;;      Params:         0       0       0
  3592 ;;      Locals:         0       0       0
  3593 ;;      Temps:          0       0       0
  3594 ;;      Totals:         0       0       0
  3595 ;;Total ram usage:        0 bytes
  3596 ;; Hardware stack levels used: 1
  3597 ;; Hardware stack levels required when called: 7
  3598 ;; This function calls:
  3599 ;;		Nothing
  3600 ;; This function is called by:
  3601 ;;		_start_setup
  3602 ;; This function uses a non-reentrant model
  3603 ;;
  3604                           
  3605  0772                     _TMR2_StartTimer:	
  3606                           ;psect for function _TMR2_StartTimer
  3607                           
  3608  0772                     l2332:	
  3609                           ;incstack = 0
  3610                           ; Regs used in _TMR2_StartTimer: []
  3611                           
  3612                           
  3613                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
  3614  0772  0020               	movlb	0	; select bank0
  3615  0773  151C               	bsf	28,2	;volatile
  3616  0774                     l142:
  3617  0774  0008               	return
  3618  0775                     __end_of_TMR2_StartTimer:
  3619                           
  3620                           	psect	text11
  3621  0663                     __ptext11:	
  3622 ;; *************** function _SYSTEM_Initialize *****************
  3623 ;; Defined at:
  3624 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3625 ;; Parameters:    Size  Location     Type
  3626 ;;		None
  3627 ;; Auto vars:     Size  Location     Type
  3628 ;;		None
  3629 ;; Return value:  Size  Location     Type
  3630 ;;                  1    wreg      void 
  3631 ;; Registers used:
  3632 ;;		wreg, status,2, status,0, pclath, cstack
  3633 ;; Tracked objects:
  3634 ;;		On entry : 0/0
  3635 ;;		On exit  : 0/0
  3636 ;;		Unchanged: 0/0
  3637 ;; Data sizes:     COMMON   BANK0   BANK1
  3638 ;;      Params:         0       0       0
  3639 ;;      Locals:         0       0       0
  3640 ;;      Temps:          0       0       0
  3641 ;;      Totals:         0       0       0
  3642 ;;Total ram usage:        0 bytes
  3643 ;; Hardware stack levels used: 1
  3644 ;; Hardware stack levels required when called: 9
  3645 ;; This function calls:
  3646 ;;		_ADC_Initialize
  3647 ;;		_FVR_Initialize
  3648 ;;		_OSCILLATOR_Initialize
  3649 ;;		_PIN_MANAGER_Initialize
  3650 ;;		_TMR0_Initialize
  3651 ;;		_TMR2_Initialize
  3652 ;;		_WDT_Initialize
  3653 ;; This function is called by:
  3654 ;;		_start_setup
  3655 ;; This function uses a non-reentrant model
  3656 ;;
  3657                           
  3658  0663                     _SYSTEM_Initialize:	
  3659                           ;psect for function _SYSTEM_Initialize
  3660                           
  3661  0663                     l2330:	
  3662                           ;incstack = 0
  3663                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3664                           
  3665                           
  3666                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  3667  0663  3186  268F  3186   	fcall	_PIN_MANAGER_Initialize
  3668                           
  3669                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  3670  0666  3187  2739  3186   	fcall	_OSCILLATOR_Initialize
  3671                           
  3672                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  3673  0669  3187  2761  3186   	fcall	_WDT_Initialize
  3674                           
  3675                           ;mcc_generated_files/mcc.c: 56:     FVR_Initialize();
  3676  066C  3187  2765  3186   	fcall	_FVR_Initialize
  3677                           
  3678                           ;mcc_generated_files/mcc.c: 57:     ADC_Initialize();
  3679  066F  3187  272A  3186   	fcall	_ADC_Initialize
  3680                           
  3681                           ;mcc_generated_files/mcc.c: 58:     TMR2_Initialize();
  3682  0672  3186  26B9  3186   	fcall	_TMR2_Initialize
  3683                           
  3684                           ;mcc_generated_files/mcc.c: 59:     TMR0_Initialize();
  3685  0675  3186  2679  3186   	fcall	_TMR0_Initialize
  3686  0678                     l25:
  3687  0678  0008               	return
  3688  0679                     __end_of_SYSTEM_Initialize:
  3689                           
  3690                           	psect	text12
  3691  0761                     __ptext12:	
  3692 ;; *************** function _WDT_Initialize *****************
  3693 ;; Defined at:
  3694 ;;		line 72 in file "mcc_generated_files/mcc.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;		None
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;		None
  3699 ;; Return value:  Size  Location     Type
  3700 ;;                  1    wreg      void 
  3701 ;; Registers used:
  3702 ;;		wreg
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMMON   BANK0   BANK1
  3708 ;;      Params:         0       0       0
  3709 ;;      Locals:         0       0       0
  3710 ;;      Temps:          0       0       0
  3711 ;;      Totals:         0       0       0
  3712 ;;Total ram usage:        0 bytes
  3713 ;; Hardware stack levels used: 1
  3714 ;; Hardware stack levels required when called: 7
  3715 ;; This function calls:
  3716 ;;		Nothing
  3717 ;; This function is called by:
  3718 ;;		_SYSTEM_Initialize
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722  0761                     _WDT_Initialize:	
  3723                           ;psect for function _WDT_Initialize
  3724                           
  3725  0761                     l2090:	
  3726                           ;incstack = 0
  3727                           ; Regs used in _WDT_Initialize: [wreg]
  3728                           
  3729                           
  3730                           ;mcc_generated_files/mcc.c: 75:     WDTCON = 0x16;
  3731  0761  3016               	movlw	22
  3732  0762  0021               	movlb	1	; select bank1
  3733  0763  0097               	movwf	23	;volatile
  3734  0764                     l31:
  3735  0764  0008               	return
  3736  0765                     __end_of_WDT_Initialize:
  3737                           
  3738                           	psect	text13
  3739  06B9                     __ptext13:	
  3740 ;; *************** function _TMR2_Initialize *****************
  3741 ;; Defined at:
  3742 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  3743 ;; Parameters:    Size  Location     Type
  3744 ;;		None
  3745 ;; Auto vars:     Size  Location     Type
  3746 ;;		None
  3747 ;; Return value:  Size  Location     Type
  3748 ;;                  1    wreg      void 
  3749 ;; Registers used:
  3750 ;;		wreg, status,2, status,0, pclath, cstack
  3751 ;; Tracked objects:
  3752 ;;		On entry : 0/0
  3753 ;;		On exit  : 0/0
  3754 ;;		Unchanged: 0/0
  3755 ;; Data sizes:     COMMON   BANK0   BANK1
  3756 ;;      Params:         0       0       0
  3757 ;;      Locals:         0       0       0
  3758 ;;      Temps:          0       0       0
  3759 ;;      Totals:         0       0       0
  3760 ;;Total ram usage:        0 bytes
  3761 ;; Hardware stack levels used: 1
  3762 ;; Hardware stack levels required when called: 8
  3763 ;; This function calls:
  3764 ;;		_TMR2_SetInterruptHandler
  3765 ;; This function is called by:
  3766 ;;		_SYSTEM_Initialize
  3767 ;; This function uses a non-reentrant model
  3768 ;;
  3769                           
  3770  06B9                     _TMR2_Initialize:	
  3771                           ;psect for function _TMR2_Initialize
  3772                           
  3773  06B9                     l2100:	
  3774                           ;incstack = 0
  3775                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3776                           
  3777                           
  3778                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0xF9;
  3779  06B9  30F9               	movlw	249
  3780  06BA  0020               	movlb	0	; select bank0
  3781  06BB  009B               	movwf	27	;volatile
  3782  06BC                     l2102:
  3783                           
  3784                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  3785  06BC  019A               	clrf	26	;volatile
  3786  06BD                     l2104:
  3787                           
  3788                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  3789  06BD  1091               	bcf	17,1	;volatile
  3790  06BE                     l2106:
  3791                           
  3792                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  3793  06BE  0021               	movlb	1	; select bank1
  3794  06BF  1491               	bsf	17,1	;volatile
  3795  06C0                     l2108:
  3796                           
  3797                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  3798  06C0  3075               	movlw	low _TMR2_DefaultInterruptHandler
  3799  06C1  0020               	movlb	0	; select bank0
  3800  06C2  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  3801  06C3  3007               	movlw	high _TMR2_DefaultInterruptHandler
  3802  06C4  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  3803  06C5  3187  2746  3186   	fcall	_TMR2_SetInterruptHandler
  3804  06C8                     l2110:
  3805                           
  3806                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x4E;
  3807  06C8  304E               	movlw	78
  3808  06C9  0020               	movlb	0	; select bank0
  3809  06CA  009C               	movwf	28	;volatile
  3810  06CB                     l139:
  3811  06CB  0008               	return
  3812  06CC                     __end_of_TMR2_Initialize:
  3813                           
  3814                           	psect	text14
  3815  0746                     __ptext14:	
  3816 ;; *************** function _TMR2_SetInterruptHandler *****************
  3817 ;; Defined at:
  3818 ;;		line 147 in file "mcc_generated_files/tmr2.c"
  3819 ;; Parameters:    Size  Location     Type
  3820 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3821 ;;		 -> sec_tick_work(1), TMR2_DefaultInterruptHandler(1), 
  3822 ;; Auto vars:     Size  Location     Type
  3823 ;;		None
  3824 ;; Return value:  Size  Location     Type
  3825 ;;                  1    wreg      void 
  3826 ;; Registers used:
  3827 ;;		wreg
  3828 ;; Tracked objects:
  3829 ;;		On entry : 0/0
  3830 ;;		On exit  : 0/0
  3831 ;;		Unchanged: 0/0
  3832 ;; Data sizes:     COMMON   BANK0   BANK1
  3833 ;;      Params:         0       2       0
  3834 ;;      Locals:         0       0       0
  3835 ;;      Temps:          0       0       0
  3836 ;;      Totals:         0       2       0
  3837 ;;Total ram usage:        2 bytes
  3838 ;; Hardware stack levels used: 1
  3839 ;; Hardware stack levels required when called: 7
  3840 ;; This function calls:
  3841 ;;		Nothing
  3842 ;; This function is called by:
  3843 ;;		_TMR2_Initialize
  3844 ;;		_start_setup
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848  0746                     _TMR2_SetInterruptHandler:	
  3849                           ;psect for function _TMR2_SetInterruptHandler
  3850                           
  3851  0746                     l2006:	
  3852                           ;incstack = 0
  3853                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  3854                           
  3855                           
  3856                           ;mcc_generated_files/tmr2.c: 148:     TMR2_InterruptHandler = InterruptHandler;
  3857  0746  0020               	movlb	0	; select bank0
  3858  0747  0821               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  3859  0748  00E3               	movwf	_TMR2_InterruptHandler+1
  3860  0749  0820               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  3861  074A  00E2               	movwf	_TMR2_InterruptHandler
  3862  074B                     l167:
  3863  074B  0008               	return
  3864  074C                     __end_of_TMR2_SetInterruptHandler:
  3865                           
  3866                           	psect	text15
  3867  0679                     __ptext15:	
  3868 ;; *************** function _TMR0_Initialize *****************
  3869 ;; Defined at:
  3870 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  3871 ;; Parameters:    Size  Location     Type
  3872 ;;		None
  3873 ;; Auto vars:     Size  Location     Type
  3874 ;;		None
  3875 ;; Return value:  Size  Location     Type
  3876 ;;                  1    wreg      void 
  3877 ;; Registers used:
  3878 ;;		wreg, status,2, status,0, pclath, cstack
  3879 ;; Tracked objects:
  3880 ;;		On entry : 0/0
  3881 ;;		On exit  : 0/0
  3882 ;;		Unchanged: 0/0
  3883 ;; Data sizes:     COMMON   BANK0   BANK1
  3884 ;;      Params:         0       0       0
  3885 ;;      Locals:         0       0       0
  3886 ;;      Temps:          0       1       0
  3887 ;;      Totals:         0       1       0
  3888 ;;Total ram usage:        1 bytes
  3889 ;; Hardware stack levels used: 1
  3890 ;; Hardware stack levels required when called: 8
  3891 ;; This function calls:
  3892 ;;		_TMR0_SetInterruptHandler
  3893 ;; This function is called by:
  3894 ;;		_SYSTEM_Initialize
  3895 ;; This function uses a non-reentrant model
  3896 ;;
  3897                           
  3898  0679                     _TMR0_Initialize:	
  3899                           ;psect for function _TMR0_Initialize
  3900                           
  3901  0679                     l2112:	
  3902                           ;incstack = 0
  3903                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3904                           
  3905                           
  3906                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD2 
      +                          & 0x3F));
  3907  0679  0021               	movlb	1	; select bank1
  3908  067A  0815               	movf	21,w	;volatile
  3909  067B  39C0               	andlw	192
  3910  067C  3812               	iorlw	18
  3911  067D  0095               	movwf	21	;volatile
  3912  067E                     l2114:
  3913                           
  3914                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x9C;
  3915  067E  309C               	movlw	156
  3916  067F  0020               	movlb	0	; select bank0
  3917  0680  0095               	movwf	21	;volatile
  3918  0681                     l2116:
  3919                           
  3920                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 156;
  3921  0681  309C               	movlw	156
  3922  0682  00A2               	movwf	??_TMR0_Initialize
  3923  0683  0822               	movf	??_TMR0_Initialize,w
  3924  0684  00E4               	movwf	_timer0ReloadVal	;volatile
  3925  0685                     l2118:
  3926                           
  3927                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  3928  0685  110B               	bcf	11,2	;volatile
  3929  0686                     l2120:
  3930                           
  3931                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  3932  0686  168B               	bsf	11,5	;volatile
  3933  0687                     l2122:
  3934                           
  3935                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  3936  0687  3076               	movlw	low _TMR0_DefaultInterruptHandler
  3937  0688  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  3938  0689  3007               	movlw	high _TMR0_DefaultInterruptHandler
  3939  068A  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  3940  068B  3187  274C  3186   	fcall	_TMR0_SetInterruptHandler
  3941  068E                     l187:
  3942  068E  0008               	return
  3943  068F                     __end_of_TMR0_Initialize:
  3944                           
  3945                           	psect	text16
  3946  074C                     __ptext16:	
  3947 ;; *************** function _TMR0_SetInterruptHandler *****************
  3948 ;; Defined at:
  3949 ;;		line 125 in file "mcc_generated_files/tmr0.c"
  3950 ;; Parameters:    Size  Location     Type
  3951 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3952 ;;		 -> switch_zum(1), TMR0_DefaultInterruptHandler(1), 
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;		None
  3955 ;; Return value:  Size  Location     Type
  3956 ;;                  1    wreg      void 
  3957 ;; Registers used:
  3958 ;;		wreg
  3959 ;; Tracked objects:
  3960 ;;		On entry : 0/0
  3961 ;;		On exit  : 0/0
  3962 ;;		Unchanged: 0/0
  3963 ;; Data sizes:     COMMON   BANK0   BANK1
  3964 ;;      Params:         0       2       0
  3965 ;;      Locals:         0       0       0
  3966 ;;      Temps:          0       0       0
  3967 ;;      Totals:         0       2       0
  3968 ;;Total ram usage:        2 bytes
  3969 ;; Hardware stack levels used: 1
  3970 ;; Hardware stack levels required when called: 7
  3971 ;; This function calls:
  3972 ;;		Nothing
  3973 ;; This function is called by:
  3974 ;;		_TMR0_Initialize
  3975 ;;		_start_setup
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979  074C                     _TMR0_SetInterruptHandler:	
  3980                           ;psect for function _TMR0_SetInterruptHandler
  3981                           
  3982  074C                     l2008:	
  3983                           ;incstack = 0
  3984                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  3985                           
  3986                           
  3987                           ;mcc_generated_files/tmr0.c: 126:     TMR0_InterruptHandler = InterruptHandler;
  3988  074C  0020               	movlb	0	; select bank0
  3989  074D  0821               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  3990  074E  00E1               	movwf	_TMR0_InterruptHandler+1
  3991  074F  0820               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  3992  0750  00E0               	movwf	_TMR0_InterruptHandler
  3993  0751                     l203:
  3994  0751  0008               	return
  3995  0752                     __end_of_TMR0_SetInterruptHandler:
  3996                           
  3997                           	psect	text17
  3998  068F                     __ptext17:	
  3999 ;; *************** function _PIN_MANAGER_Initialize *****************
  4000 ;; Defined at:
  4001 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4002 ;; Parameters:    Size  Location     Type
  4003 ;;		None
  4004 ;; Auto vars:     Size  Location     Type
  4005 ;;		None
  4006 ;; Return value:  Size  Location     Type
  4007 ;;                  1    wreg      void 
  4008 ;; Registers used:
  4009 ;;		wreg, status,2
  4010 ;; Tracked objects:
  4011 ;;		On entry : 0/0
  4012 ;;		On exit  : 0/0
  4013 ;;		Unchanged: 0/0
  4014 ;; Data sizes:     COMMON   BANK0   BANK1
  4015 ;;      Params:         0       0       0
  4016 ;;      Locals:         0       0       0
  4017 ;;      Temps:          0       0       0
  4018 ;;      Totals:         0       0       0
  4019 ;;Total ram usage:        0 bytes
  4020 ;; Hardware stack levels used: 1
  4021 ;; Hardware stack levels required when called: 7
  4022 ;; This function calls:
  4023 ;;		Nothing
  4024 ;; This function is called by:
  4025 ;;		_SYSTEM_Initialize
  4026 ;; This function uses a non-reentrant model
  4027 ;;
  4028                           
  4029  068F                     _PIN_MANAGER_Initialize:	
  4030                           ;psect for function _PIN_MANAGER_Initialize
  4031                           
  4032  068F                     l2072:	
  4033                           ;incstack = 0
  4034                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4035                           
  4036                           
  4037                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  4038  068F  0022               	movlb	2	; select bank2
  4039  0690  018C               	clrf	12	;volatile
  4040                           
  4041                           ;mcc_generated_files/pin_manager.c: 61:     LATC = 0x00;
  4042  0691  018E               	clrf	14	;volatile
  4043  0692                     l2074:
  4044                           
  4045                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0x0F;
  4046  0692  300F               	movlw	15
  4047  0693  0021               	movlb	1	; select bank1
  4048  0694  008C               	movwf	12	;volatile
  4049  0695                     l2076:
  4050                           
  4051                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0x0C;
  4052  0695  300C               	movlw	12
  4053  0696  008E               	movwf	14	;volatile
  4054  0697                     l2078:
  4055                           
  4056                           ;mcc_generated_files/pin_manager.c: 72:     ANSELC = 0x0C;
  4057  0697  300C               	movlw	12
  4058  0698  0023               	movlb	3	; select bank3
  4059  0699  008E               	movwf	14	;volatile
  4060  069A                     l2080:
  4061                           
  4062                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x07;
  4063  069A  3007               	movlw	7
  4064  069B  008C               	movwf	12	;volatile
  4065                           
  4066                           ;mcc_generated_files/pin_manager.c: 78:     WPUA = 0x00;
  4067  069C  0024               	movlb	4	; select bank4
  4068  069D  018C               	clrf	12	;volatile
  4069                           
  4070                           ;mcc_generated_files/pin_manager.c: 79:     WPUC = 0x00;
  4071  069E  018E               	clrf	14	;volatile
  4072  069F                     l2082:
  4073                           
  4074                           ;mcc_generated_files/pin_manager.c: 80:     OPTION_REGbits.nWPUEN = 1;
  4075  069F  0021               	movlb	1	; select bank1
  4076  06A0  1795               	bsf	21,7	;volatile
  4077                           
  4078                           ;mcc_generated_files/pin_manager.c: 86:     APFCON = 0x00;
  4079  06A1  0022               	movlb	2	; select bank2
  4080  06A2  019D               	clrf	29	;volatile
  4081  06A3                     l92:
  4082  06A3  0008               	return
  4083  06A4                     __end_of_PIN_MANAGER_Initialize:
  4084                           
  4085                           	psect	text18
  4086  0739                     __ptext18:	
  4087 ;; *************** function _OSCILLATOR_Initialize *****************
  4088 ;; Defined at:
  4089 ;;		line 62 in file "mcc_generated_files/mcc.c"
  4090 ;; Parameters:    Size  Location     Type
  4091 ;;		None
  4092 ;; Auto vars:     Size  Location     Type
  4093 ;;		None
  4094 ;; Return value:  Size  Location     Type
  4095 ;;                  1    wreg      void 
  4096 ;; Registers used:
  4097 ;;		wreg, status,2
  4098 ;; Tracked objects:
  4099 ;;		On entry : 0/0
  4100 ;;		On exit  : 0/0
  4101 ;;		Unchanged: 0/0
  4102 ;; Data sizes:     COMMON   BANK0   BANK1
  4103 ;;      Params:         0       0       0
  4104 ;;      Locals:         0       0       0
  4105 ;;      Temps:          0       0       0
  4106 ;;      Totals:         0       0       0
  4107 ;;Total ram usage:        0 bytes
  4108 ;; Hardware stack levels used: 1
  4109 ;; Hardware stack levels required when called: 7
  4110 ;; This function calls:
  4111 ;;		Nothing
  4112 ;; This function is called by:
  4113 ;;		_SYSTEM_Initialize
  4114 ;; This function uses a non-reentrant model
  4115 ;;
  4116                           
  4117  0739                     _OSCILLATOR_Initialize:	
  4118                           ;psect for function _OSCILLATOR_Initialize
  4119                           
  4120  0739                     l2084:	
  4121                           ;incstack = 0
  4122                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4123                           
  4124                           
  4125                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x78;
  4126  0739  3078               	movlw	120
  4127  073A  0021               	movlb	1	; select bank1
  4128  073B  0099               	movwf	25	;volatile
  4129  073C                     l2086:
  4130                           
  4131                           ;mcc_generated_files/mcc.c: 67:     OSCTUNE = 0x00;
  4132  073C  0198               	clrf	24	;volatile
  4133  073D                     l2088:
  4134                           
  4135                           ;mcc_generated_files/mcc.c: 69:     BORCON = 0x00;
  4136  073D  0022               	movlb	2	; select bank2
  4137  073E  0196               	clrf	22	;volatile
  4138  073F                     l28:
  4139  073F  0008               	return
  4140  0740                     __end_of_OSCILLATOR_Initialize:
  4141                           
  4142                           	psect	text19
  4143  0765                     __ptext19:	
  4144 ;; *************** function _FVR_Initialize *****************
  4145 ;; Defined at:
  4146 ;;		line 58 in file "mcc_generated_files/fvr.c"
  4147 ;; Parameters:    Size  Location     Type
  4148 ;;		None
  4149 ;; Auto vars:     Size  Location     Type
  4150 ;;		None
  4151 ;; Return value:  Size  Location     Type
  4152 ;;                  1    wreg      void 
  4153 ;; Registers used:
  4154 ;;		wreg
  4155 ;; Tracked objects:
  4156 ;;		On entry : 0/0
  4157 ;;		On exit  : 0/0
  4158 ;;		Unchanged: 0/0
  4159 ;; Data sizes:     COMMON   BANK0   BANK1
  4160 ;;      Params:         0       0       0
  4161 ;;      Locals:         0       0       0
  4162 ;;      Temps:          0       0       0
  4163 ;;      Totals:         0       0       0
  4164 ;;Total ram usage:        0 bytes
  4165 ;; Hardware stack levels used: 1
  4166 ;; Hardware stack levels required when called: 7
  4167 ;; This function calls:
  4168 ;;		Nothing
  4169 ;; This function is called by:
  4170 ;;		_SYSTEM_Initialize
  4171 ;; This function uses a non-reentrant model
  4172 ;;
  4173                           
  4174  0765                     _FVR_Initialize:	
  4175                           ;psect for function _FVR_Initialize
  4176                           
  4177  0765                     l2092:	
  4178                           ;incstack = 0
  4179                           ; Regs used in _FVR_Initialize: [wreg]
  4180                           
  4181                           
  4182                           ;mcc_generated_files/fvr.c: 61:     FVRCON = 0x82;
  4183  0765  3082               	movlw	130
  4184  0766  0022               	movlb	2	; select bank2
  4185  0767  0097               	movwf	23	;volatile
  4186  0768                     l213:
  4187  0768  0008               	return
  4188  0769                     __end_of_FVR_Initialize:
  4189                           
  4190                           	psect	text20
  4191  072A                     __ptext20:	
  4192 ;; *************** function _ADC_Initialize *****************
  4193 ;; Defined at:
  4194 ;;		line 67 in file "mcc_generated_files/adc.c"
  4195 ;; Parameters:    Size  Location     Type
  4196 ;;		None
  4197 ;; Auto vars:     Size  Location     Type
  4198 ;;		None
  4199 ;; Return value:  Size  Location     Type
  4200 ;;                  1    wreg      void 
  4201 ;; Registers used:
  4202 ;;		wreg, status,2
  4203 ;; Tracked objects:
  4204 ;;		On entry : 0/0
  4205 ;;		On exit  : 0/0
  4206 ;;		Unchanged: 0/0
  4207 ;; Data sizes:     COMMON   BANK0   BANK1
  4208 ;;      Params:         0       0       0
  4209 ;;      Locals:         0       0       0
  4210 ;;      Temps:          0       0       0
  4211 ;;      Totals:         0       0       0
  4212 ;;Total ram usage:        0 bytes
  4213 ;; Hardware stack levels used: 1
  4214 ;; Hardware stack levels required when called: 7
  4215 ;; This function calls:
  4216 ;;		Nothing
  4217 ;; This function is called by:
  4218 ;;		_SYSTEM_Initialize
  4219 ;; This function uses a non-reentrant model
  4220 ;;
  4221                           
  4222  072A                     _ADC_Initialize:	
  4223                           ;psect for function _ADC_Initialize
  4224                           
  4225  072A                     l2094:	
  4226                           ;incstack = 0
  4227                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4228                           
  4229                           
  4230                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0x40;
  4231  072A  3040               	movlw	64
  4232  072B  0021               	movlb	1	; select bank1
  4233  072C  009E               	movwf	30	;volatile
  4234  072D                     l2096:
  4235                           
  4236                           ;mcc_generated_files/adc.c: 75:     ADRESL = 0x00;
  4237  072D  019B               	clrf	27	;volatile
  4238  072E                     l2098:
  4239                           
  4240                           ;mcc_generated_files/adc.c: 78:     ADRESH = 0x00;
  4241  072E  019C               	clrf	28	;volatile
  4242                           
  4243                           ;mcc_generated_files/adc.c: 81:     ADCON0 = 0x7D;
  4244  072F  307D               	movlw	125
  4245  0730  009D               	movwf	29	;volatile
  4246  0731                     l48:
  4247  0731  0008               	return
  4248  0732                     __end_of_ADC_Initialize:
  4249                           
  4250                           	psect	text21
  4251  02BE                     __ptext21:	
  4252 ;; *************** function _povorot *****************
  4253 ;; Defined at:
  4254 ;;		line 331 in file "main.c"
  4255 ;; Parameters:    Size  Location     Type
  4256 ;;		None
  4257 ;; Auto vars:     Size  Location     Type
  4258 ;;		None
  4259 ;; Return value:  Size  Location     Type
  4260 ;;                  1    wreg      void 
  4261 ;; Registers used:
  4262 ;;		wreg, status,2, status,0, pclath, cstack
  4263 ;; Tracked objects:
  4264 ;;		On entry : 0/0
  4265 ;;		On exit  : 0/0
  4266 ;;		Unchanged: 0/0
  4267 ;; Data sizes:     COMMON   BANK0   BANK1
  4268 ;;      Params:         0       0       0
  4269 ;;      Locals:         0       0       0
  4270 ;;      Temps:          0       0       0
  4271 ;;      Totals:         0       0       0
  4272 ;;Total ram usage:        0 bytes
  4273 ;; Hardware stack levels used: 1
  4274 ;; Hardware stack levels required when called: 8
  4275 ;; This function calls:
  4276 ;;		_go_close
  4277 ;;		_go_open
  4278 ;; This function is called by:
  4279 ;;		_main
  4280 ;; This function uses a non-reentrant model
  4281 ;;
  4282                           
  4283  02BE                     _povorot:	
  4284                           ;psect for function _povorot
  4285                           
  4286  02BE                     l2510:	
  4287                           ;incstack = 0
  4288                           ; Regs used in _povorot: [wreg+status,2+status,0+pclath+cstack]
  4289                           
  4290                           
  4291                           ;main.c: 332:     if ((time_s > ROTATION_TIME) &&
  4292  02BE  3000               	movlw	0
  4293  02BF  0020               	movlb	0	; select bank0
  4294  02C0  0257               	subwf	_time_s+2,w
  4295  02C1  1D03               	skipz
  4296  02C2  2AC9               	goto	u1775
  4297  02C3  3000               	movlw	0
  4298  02C4  0256               	subwf	_time_s+1,w
  4299  02C5  1D03               	skipz
  4300  02C6  2AC9               	goto	u1775
  4301  02C7  303D               	movlw	61
  4302  02C8  0255               	subwf	_time_s,w
  4303  02C9                     u1775:
  4304  02C9  1C03               	skipc
  4305  02CA  2ACC               	goto	u1771
  4306  02CB  2ACD               	goto	u1770
  4307  02CC                     u1771:
  4308  02CC  2ADC               	goto	l2520
  4309  02CD                     u1770:
  4310  02CD                     l2512:
  4311  02CD  197C               	btfsc	_FLAGS,2
  4312  02CE  2AD0               	goto	u1781
  4313  02CF  2AD1               	goto	u1780
  4314  02D0                     u1781:
  4315  02D0  2ADC               	goto	l2520
  4316  02D1                     u1780:
  4317  02D1                     l2514:
  4318  02D1  187C               	btfsc	_FLAGS,0
  4319  02D2  2AD4               	goto	u1791
  4320  02D3  2AD5               	goto	u1790
  4321  02D4                     u1791:
  4322  02D4  2ADC               	goto	l2520
  4323  02D5                     u1790:
  4324  02D5                     l2516:
  4325  02D5  1CFC               	btfss	_FLAGS,1
  4326  02D6  2AD8               	goto	u1801
  4327  02D7  2AD9               	goto	u1800
  4328  02D8                     u1801:
  4329  02D8  2ADC               	goto	l2520
  4330  02D9                     u1800:
  4331  02D9                     l2518:
  4332                           
  4333                           ;main.c: 336:             ) {;main.c: 337:         go_close();
  4334  02D9  3185  25C0  3182   	fcall	_go_close
  4335  02DC                     l2520:
  4336                           
  4337                           ;main.c: 339:     if ((time_s > (ROTATION_TIME + 20 + 5 * 2)) &&
  4338  02DC  3000               	movlw	0
  4339  02DD  0020               	movlb	0	; select bank0
  4340  02DE  0257               	subwf	_time_s+2,w
  4341  02DF  1D03               	skipz
  4342  02E0  2AE7               	goto	u1815
  4343  02E1  3000               	movlw	0
  4344  02E2  0256               	subwf	_time_s+1,w
  4345  02E3  1D03               	skipz
  4346  02E4  2AE7               	goto	u1815
  4347  02E5  305B               	movlw	91
  4348  02E6  0255               	subwf	_time_s,w
  4349  02E7                     u1815:
  4350  02E7  1C03               	skipc
  4351  02E8  2AEA               	goto	u1811
  4352  02E9  2AEB               	goto	u1810
  4353  02EA                     u1811:
  4354  02EA  2B01               	goto	l436
  4355  02EB                     u1810:
  4356  02EB                     l2522:
  4357  02EB  1D7C               	btfss	_FLAGS,2
  4358  02EC  2AEE               	goto	u1821
  4359  02ED  2AEF               	goto	u1820
  4360  02EE                     u1821:
  4361  02EE  2B01               	goto	l436
  4362  02EF                     u1820:
  4363  02EF                     l2524:
  4364  02EF  187C               	btfsc	_FLAGS,0
  4365  02F0  2AF2               	goto	u1831
  4366  02F1  2AF3               	goto	u1830
  4367  02F2                     u1831:
  4368  02F2  2B01               	goto	l436
  4369  02F3                     u1830:
  4370  02F3                     l2526:
  4371  02F3  1CFC               	btfss	_FLAGS,1
  4372  02F4  2AF6               	goto	u1841
  4373  02F5  2AF7               	goto	u1840
  4374  02F6                     u1841:
  4375  02F6  2B01               	goto	l436
  4376  02F7                     u1840:
  4377  02F7                     l2528:
  4378                           
  4379                           ;main.c: 343:             ) {;main.c: 344:         go_open();
  4380  02F7  3187  2716  3182   	fcall	_go_open
  4381  02FA                     l2530:
  4382                           
  4383                           ;main.c: 345:         time_s = 0;
  4384  02FA  3000               	movlw	0
  4385  02FB  0020               	movlb	0	; select bank0
  4386  02FC  00D5               	movwf	_time_s
  4387  02FD  3000               	movlw	0
  4388  02FE  00D6               	movwf	_time_s+1
  4389  02FF  3000               	movlw	0
  4390  0300  00D7               	movwf	_time_s+2
  4391  0301                     l436:
  4392  0301  0008               	return
  4393  0302                     __end_of_povorot:
  4394                           
  4395                           	psect	text22
  4396  01D5                     __ptext22:	
  4397 ;; *************** function _get_voltage *****************
  4398 ;; Defined at:
  4399 ;;		line 390 in file "main.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;		None
  4402 ;; Auto vars:     Size  Location     Type
  4403 ;;  buf             1   18[BANK0 ] unsigned char 
  4404 ;;  q               1   19[BANK0 ] unsigned char 
  4405 ;;  q               1   20[BANK0 ] unsigned char 
  4406 ;;  res             2   16[BANK0 ] unsigned int 
  4407 ;; Return value:  Size  Location     Type
  4408 ;;                  1    wreg      void 
  4409 ;; Registers used:
  4410 ;;		wreg, status,2, status,0, pclath, cstack
  4411 ;; Tracked objects:
  4412 ;;		On entry : 0/0
  4413 ;;		On exit  : 0/0
  4414 ;;		Unchanged: 0/0
  4415 ;; Data sizes:     COMMON   BANK0   BANK1
  4416 ;;      Params:         0       0       0
  4417 ;;      Locals:         0       5       0
  4418 ;;      Temps:          0       2       0
  4419 ;;      Totals:         0       7       0
  4420 ;;Total ram usage:        7 bytes
  4421 ;; Hardware stack levels used: 1
  4422 ;; Hardware stack levels required when called: 9
  4423 ;; This function calls:
  4424 ;;		_ADC_GetConversion
  4425 ;;		_EEPROM_ReadByte
  4426 ;;		_EEPROM_WriteByte
  4427 ;;		_EEPROM_WriteShortLong
  4428 ;; This function is called by:
  4429 ;;		_main
  4430 ;; This function uses a non-reentrant model
  4431 ;;
  4432                           
  4433  01D5                     _get_voltage:	
  4434                           ;psect for function _get_voltage
  4435                           
  4436  01D5                     l2576:	
  4437                           ;incstack = 0
  4438                           ; Regs used in _get_voltage: [wreg+status,2+status,0+pclath+cstack]
  4439                           
  4440                           
  4441                           ;main.c: 391:     unsigned res = ADC_GetConversion(channel_FVR);
  4442  01D5  301F               	movlw	31
  4443  01D6  3185  259F  3181   	fcall	_ADC_GetConversion
  4444  01D9  0020               	movlb	0	; select bank0
  4445  01DA  0821               	movf	?_ADC_GetConversion+1,w
  4446  01DB  00B1               	movwf	get_voltage@res+1
  4447  01DC  0820               	movf	?_ADC_GetConversion,w
  4448  01DD  00B0               	movwf	get_voltage@res
  4449  01DE                     l2578:
  4450                           
  4451                           ;main.c: 392:     if (res > 46200) {
  4452  01DE  30B4               	movlw	180
  4453  01DF  0231               	subwf	get_voltage@res+1,w
  4454  01E0  3079               	movlw	121
  4455  01E1  1903               	skipnz
  4456  01E2  0230               	subwf	get_voltage@res,w
  4457  01E3  1C03               	skipc
  4458  01E4  29E6               	goto	u1991
  4459  01E5  29E7               	goto	u1990
  4460  01E6                     u1991:
  4461  01E6  2A30               	goto	l464
  4462  01E7                     u1990:
  4463  01E7                     l2580:
  4464                           
  4465                           ;main.c: 393:         for (char q = 0; q < 0x10; q++) {
  4466  01E7  01B4               	clrf	get_voltage@q
  4467  01E8                     l2586:
  4468                           
  4469                           ;main.c: 394:             char buf = EEPROM_ReadByte(q);
  4470  01E8  0834               	movf	get_voltage@q,w
  4471  01E9  3186  2634  3181   	fcall	_EEPROM_ReadByte
  4472  01EC  0020               	movlb	0	; select bank0
  4473  01ED  00AE               	movwf	??_get_voltage
  4474  01EE  082E               	movf	??_get_voltage,w
  4475  01EF  00B2               	movwf	get_voltage@buf
  4476  01F0                     l2588:
  4477                           
  4478                           ;main.c: 395:             if (buf != START_EEPROM_ADR) EEPROM_WriteByte(q, START_EEPROM_
      +                          ADR);
  4479  01F0  0832               	movf	get_voltage@buf,w
  4480  01F1  065F               	xorwf	_START_EEPROM_ADR,w
  4481  01F2  1903               	skipnz
  4482  01F3  29F5               	goto	u2001
  4483  01F4  29F6               	goto	u2000
  4484  01F5                     u2001:
  4485  01F5  29FE               	goto	l2592
  4486  01F6                     u2000:
  4487  01F6                     l2590:
  4488  01F6  085F               	movf	_START_EEPROM_ADR,w
  4489  01F7  00AE               	movwf	??_get_voltage
  4490  01F8  082E               	movf	??_get_voltage,w
  4491  01F9  00A0               	movwf	EEPROM_WriteByte@dt
  4492  01FA  0834               	movf	get_voltage@q,w
  4493  01FB  3185  254A  3181   	fcall	_EEPROM_WriteByte
  4494  01FE                     l2592:
  4495                           
  4496                           ;main.c: 396:         }
  4497  01FE  3001               	movlw	1
  4498  01FF  0020               	movlb	0	; select bank0
  4499  0200  00AE               	movwf	??_get_voltage
  4500  0201  082E               	movf	??_get_voltage,w
  4501  0202  07B4               	addwf	get_voltage@q,f
  4502  0203                     l2594:
  4503  0203  3010               	movlw	16
  4504  0204  0234               	subwf	get_voltage@q,w
  4505  0205  1C03               	skipc
  4506  0206  2A08               	goto	u2011
  4507  0207  2A09               	goto	u2010
  4508  0208                     u2011:
  4509  0208  29E8               	goto	l2586
  4510  0209                     u2010:
  4511  0209                     l2596:
  4512                           
  4513                           ;main.c: 397:         for (char q = START_EEPROM_ADR; q < START_EEPROM_ADR + 16; q += 4)
      +                           {
  4514  0209  085F               	movf	_START_EEPROM_ADR,w
  4515  020A  00AE               	movwf	??_get_voltage
  4516  020B  082E               	movf	??_get_voltage,w
  4517  020C  00B3               	movwf	get_voltage@q_802
  4518  020D  2A1E               	goto	l2602
  4519  020E                     l2598:
  4520                           
  4521                           ;main.c: 398:             EEPROM_WriteShortLong(q, time_s);
  4522  020E  0020               	movlb	0	; select bank0
  4523  020F  0855               	movf	_time_s,w
  4524  0210  00A5               	movwf	EEPROM_WriteShortLong@ucData
  4525  0211  0856               	movf	_time_s+1,w
  4526  0212  00A6               	movwf	EEPROM_WriteShortLong@ucData+1
  4527  0213  0857               	movf	_time_s+2,w
  4528  0214  00A7               	movwf	EEPROM_WriteShortLong@ucData+2
  4529  0215  0833               	movf	get_voltage@q_802,w
  4530  0216  3183  23C9  3181   	fcall	_EEPROM_WriteShortLong
  4531  0219                     l2600:
  4532                           
  4533                           ;main.c: 399:         }
  4534  0219  3004               	movlw	4
  4535  021A  0020               	movlb	0	; select bank0
  4536  021B  00AE               	movwf	??_get_voltage
  4537  021C  082E               	movf	??_get_voltage,w
  4538  021D  07B3               	addwf	get_voltage@q_802,f
  4539  021E                     l2602:
  4540  021E  085F               	movf	_START_EEPROM_ADR,w
  4541  021F  3E10               	addlw	16
  4542  0220  00AE               	movwf	??_get_voltage
  4543  0221  3000               	movlw	0
  4544  0222  1803               	skipnc
  4545  0223  3001               	movlw	1
  4546  0224  00AF               	movwf	??_get_voltage+1
  4547  0225  082F               	movf	??_get_voltage+1,w
  4548  0226  3A80               	xorlw	128
  4549  0227  3C80               	sublw	128
  4550  0228  1D03               	skipz
  4551  0229  2A2C               	goto	u2025
  4552  022A  082E               	movf	??_get_voltage,w
  4553  022B  0233               	subwf	get_voltage@q_802,w
  4554  022C                     u2025:
  4555  022C  1C03               	skipc
  4556  022D  2A2F               	goto	u2021
  4557  022E  2A30               	goto	u2020
  4558  022F                     u2021:
  4559  022F  2A0E               	goto	l2598
  4560  0230                     u2020:
  4561  0230                     l464:
  4562  0230  0008               	return
  4563  0231                     __end_of_get_voltage:
  4564                           
  4565                           	psect	text23
  4566  03C9                     __ptext23:	
  4567 ;; *************** function _EEPROM_WriteShortLong *****************
  4568 ;; Defined at:
  4569 ;;		line 40 in file "eeprom.c"
  4570 ;; Parameters:    Size  Location     Type
  4571 ;;  addr            1    wreg     unsigned char 
  4572 ;;  ucData          3    5[BANK0 ] unsigned um
  4573 ;; Auto vars:     Size  Location     Type
  4574 ;;  addr            1   13[BANK0 ] unsigned char 
  4575 ;;  dt              1   12[BANK0 ] unsigned char 
  4576 ;; Return value:  Size  Location     Type
  4577 ;;                  1    wreg      void 
  4578 ;; Registers used:
  4579 ;;		wreg, status,2, status,0, pclath, cstack
  4580 ;; Tracked objects:
  4581 ;;		On entry : 0/0
  4582 ;;		On exit  : 0/0
  4583 ;;		Unchanged: 0/0
  4584 ;; Data sizes:     COMMON   BANK0   BANK1
  4585 ;;      Params:         0       3       0
  4586 ;;      Locals:         0       2       0
  4587 ;;      Temps:          0       4       0
  4588 ;;      Totals:         0       9       0
  4589 ;;Total ram usage:        9 bytes
  4590 ;; Hardware stack levels used: 1
  4591 ;; Hardware stack levels required when called: 8
  4592 ;; This function calls:
  4593 ;;		_EEPROM_WriteByte
  4594 ;; This function is called by:
  4595 ;;		_get_voltage
  4596 ;; This function uses a non-reentrant model
  4597 ;;
  4598                           
  4599  03C9                     _EEPROM_WriteShortLong:	
  4600                           ;psect for function _EEPROM_WriteShortLong
  4601                           
  4602                           
  4603                           ;incstack = 0
  4604                           ; Regs used in _EEPROM_WriteShortLong: [wreg+status,2+status,0+pclath+cstack]
  4605                           ;EEPROM_WriteShortLong@addr stored from wreg
  4606  03C9  0020               	movlb	0	; select bank0
  4607  03CA  00AD               	movwf	EEPROM_WriteShortLong@addr
  4608  03CB                     l2434:
  4609                           
  4610                           ;eeprom.c: 41:     EEPROM_WriteByte(addr, (unsigned char) ucData);
  4611  03CB  0825               	movf	EEPROM_WriteShortLong@ucData,w
  4612  03CC  00A8               	movwf	??_EEPROM_WriteShortLong
  4613  03CD  0828               	movf	??_EEPROM_WriteShortLong,w
  4614  03CE  00A0               	movwf	EEPROM_WriteByte@dt
  4615  03CF  082D               	movf	EEPROM_WriteShortLong@addr,w
  4616  03D0  3185  254A  3183   	fcall	_EEPROM_WriteByte
  4617  03D3                     l2436:
  4618                           
  4619                           ;eeprom.c: 42:      char dt = ucData >> 8;
  4620  03D3  0020               	movlb	0	; select bank0
  4621  03D4  0825               	movf	EEPROM_WriteShortLong@ucData,w
  4622  03D5  00A8               	movwf	??_EEPROM_WriteShortLong
  4623  03D6  0826               	movf	EEPROM_WriteShortLong@ucData+1,w
  4624  03D7  00A9               	movwf	??_EEPROM_WriteShortLong+1
  4625  03D8  0827               	movf	EEPROM_WriteShortLong@ucData+2,w
  4626  03D9  00AA               	movwf	??_EEPROM_WriteShortLong+2
  4627  03DA  3008               	movlw	8
  4628  03DB                     u1675:
  4629  03DB  36AA               	lsrf	??_EEPROM_WriteShortLong+2,f
  4630  03DC  0CA9               	rrf	??_EEPROM_WriteShortLong+1,f
  4631  03DD  0CA8               	rrf	??_EEPROM_WriteShortLong,f
  4632  03DE                     u1670:
  4633  03DE  0B89               	decfsz	9,f
  4634  03DF  2BDB               	goto	u1675
  4635  03E0  0828               	movf	??_EEPROM_WriteShortLong,w
  4636  03E1  00AB               	movwf	??_EEPROM_WriteShortLong+3
  4637  03E2  082B               	movf	??_EEPROM_WriteShortLong+3,w
  4638  03E3  00AC               	movwf	EEPROM_WriteShortLong@dt
  4639  03E4                     l2438:
  4640                           
  4641                           ;eeprom.c: 43:     EEPROM_WriteByte(addr + 1, dt);
  4642  03E4  082C               	movf	EEPROM_WriteShortLong@dt,w
  4643  03E5  00A8               	movwf	??_EEPROM_WriteShortLong
  4644  03E6  0828               	movf	??_EEPROM_WriteShortLong,w
  4645  03E7  00A0               	movwf	EEPROM_WriteByte@dt
  4646  03E8  082D               	movf	EEPROM_WriteShortLong@addr,w
  4647  03E9  3E01               	addlw	1
  4648  03EA  3185  254A  3183   	fcall	_EEPROM_WriteByte
  4649                           
  4650                           ;eeprom.c: 44:     dt = ucData >> 16;
  4651  03ED  0020               	movlb	0	; select bank0
  4652  03EE  0825               	movf	EEPROM_WriteShortLong@ucData,w
  4653  03EF  00A8               	movwf	??_EEPROM_WriteShortLong
  4654  03F0  0826               	movf	EEPROM_WriteShortLong@ucData+1,w
  4655  03F1  00A9               	movwf	??_EEPROM_WriteShortLong+1
  4656  03F2  0827               	movf	EEPROM_WriteShortLong@ucData+2,w
  4657  03F3  00AA               	movwf	??_EEPROM_WriteShortLong+2
  4658  03F4  3010               	movlw	16
  4659  03F5                     u1685:
  4660  03F5  36AA               	lsrf	??_EEPROM_WriteShortLong+2,f
  4661  03F6  0CA9               	rrf	??_EEPROM_WriteShortLong+1,f
  4662  03F7  0CA8               	rrf	??_EEPROM_WriteShortLong,f
  4663  03F8                     u1680:
  4664  03F8  0B89               	decfsz	9,f
  4665  03F9  2BF5               	goto	u1685
  4666  03FA  0828               	movf	??_EEPROM_WriteShortLong,w
  4667  03FB  00AB               	movwf	??_EEPROM_WriteShortLong+3
  4668  03FC  082B               	movf	??_EEPROM_WriteShortLong+3,w
  4669  03FD  00AC               	movwf	EEPROM_WriteShortLong@dt
  4670  03FE                     l2440:
  4671                           
  4672                           ;eeprom.c: 45:     EEPROM_WriteByte(addr + 2, dt);
  4673  03FE  082C               	movf	EEPROM_WriteShortLong@dt,w
  4674  03FF  00A8               	movwf	??_EEPROM_WriteShortLong
  4675  0400  0828               	movf	??_EEPROM_WriteShortLong,w
  4676  0401  00A0               	movwf	EEPROM_WriteByte@dt
  4677  0402  082D               	movf	EEPROM_WriteShortLong@addr,w
  4678  0403  3E02               	addlw	2
  4679  0404  3185  254A  3183   	fcall	_EEPROM_WriteByte
  4680  0407                     l579:
  4681  0407  0008               	return
  4682  0408                     __end_of_EEPROM_WriteShortLong:
  4683                           
  4684                           	psect	text24
  4685  054A                     __ptext24:	
  4686 ;; *************** function _EEPROM_WriteByte *****************
  4687 ;; Defined at:
  4688 ;;		line 6 in file "eeprom.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;  addr            1    wreg     unsigned char 
  4691 ;;  dt              1    0[BANK0 ] unsigned char 
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;  addr            1    3[BANK0 ] unsigned char 
  4694 ;;  status          1    4[BANK0 ] unsigned char 
  4695 ;; Return value:  Size  Location     Type
  4696 ;;                  1    wreg      void 
  4697 ;; Registers used:
  4698 ;;		wreg, status,2
  4699 ;; Tracked objects:
  4700 ;;		On entry : 0/0
  4701 ;;		On exit  : 0/0
  4702 ;;		Unchanged: 0/0
  4703 ;; Data sizes:     COMMON   BANK0   BANK1
  4704 ;;      Params:         0       1       0
  4705 ;;      Locals:         0       2       0
  4706 ;;      Temps:          0       2       0
  4707 ;;      Totals:         0       5       0
  4708 ;;Total ram usage:        5 bytes
  4709 ;; Hardware stack levels used: 1
  4710 ;; Hardware stack levels required when called: 7
  4711 ;; This function calls:
  4712 ;;		Nothing
  4713 ;; This function is called by:
  4714 ;;		_get_voltage
  4715 ;;		_EEPROM_WriteShortLong
  4716 ;;		_EEPROM_WriteWord
  4717 ;; This function uses a non-reentrant model
  4718 ;;
  4719                           
  4720  054A                     _EEPROM_WriteByte:	
  4721                           ;psect for function _EEPROM_WriteByte
  4722                           
  4723                           
  4724                           ;incstack = 0
  4725                           ; Regs used in _EEPROM_WriteByte: [wreg+status,2]
  4726                           ;EEPROM_WriteByte@addr stored from wreg
  4727  054A  0020               	movlb	0	; select bank0
  4728  054B  00A3               	movwf	EEPROM_WriteByte@addr
  4729  054C                     l2158:
  4730  054C                     l561:	
  4731                           ;eeprom.c: 7:     unsigned char status;;eeprom.c: 8:     while (WR);
  4732                           
  4733  054C  0023               	movlb	3	; select bank3
  4734  054D  1895               	btfsc	21,1	;volsfr
  4735  054E  2D50               	goto	u1311
  4736  054F  2D51               	goto	u1310
  4737  0550                     u1311:
  4738  0550  2D4C               	goto	l561
  4739  0551                     u1310:
  4740  0551                     l2160:
  4741                           
  4742                           ;eeprom.c: 9:     status = GIE;
  4743  0551  3000               	movlw	0
  4744  0552  1B8B               	btfsc	11,7	;volatile
  4745  0553  3001               	movlw	1
  4746  0554  0020               	movlb	0	; select bank0
  4747  0555  00A4               	movwf	EEPROM_WriteByte@status
  4748  0556                     l2162:
  4749                           
  4750                           ;eeprom.c: 10:     GIE = 0;
  4751  0556  138B               	bcf	11,7	;volatile
  4752  0557                     l2164:
  4753                           
  4754                           ;eeprom.c: 11:     EEADR = addr;
  4755  0557  0823               	movf	EEPROM_WriteByte@addr,w
  4756  0558  00A1               	movwf	??_EEPROM_WriteByte
  4757  0559  01A2               	clrf	??_EEPROM_WriteByte+1
  4758  055A  0821               	movf	??_EEPROM_WriteByte,w
  4759  055B  0023               	movlb	3	; select bank3
  4760  055C  0091               	movwf	17	;volatile
  4761  055D  0020               	movlb	0	; select bank0
  4762  055E  0822               	movf	??_EEPROM_WriteByte+1,w
  4763  055F  0023               	movlb	3	; select bank3
  4764  0560  0092               	movwf	18	;volatile
  4765  0561                     l2166:
  4766                           
  4767                           ;eeprom.c: 12:     EEDATA = dt;
  4768  0561  0020               	movlb	0	; select bank0
  4769  0562  0820               	movf	EEPROM_WriteByte@dt,w
  4770  0563  0023               	movlb	3	; select bank3
  4771  0564  0093               	movwf	19	;volatile
  4772  0565                     l2168:
  4773                           
  4774                           ;eeprom.c: 13:     WREN = 1;
  4775  0565  1515               	bsf	21,2	;volsfr
  4776  0566                     l2170:
  4777                           
  4778                           ;eeprom.c: 14:     EECON2 = 0x55;
  4779  0566  3055               	movlw	85
  4780  0567  0096               	movwf	22	;volsfr
  4781  0568                     l2172:
  4782                           
  4783                           ;eeprom.c: 15:     EECON2 = 0xAA;
  4784  0568  30AA               	movlw	170
  4785  0569  0096               	movwf	22	;volsfr
  4786  056A                     l2174:
  4787                           
  4788                           ;eeprom.c: 16:     WR = 1;
  4789  056A  1495               	bsf	21,1	;volsfr
  4790  056B                     l2176:
  4791                           
  4792                           ;eeprom.c: 17:     GIE = status;
  4793  056B  0020               	movlb	0	; select bank0
  4794  056C  1824               	btfsc	EEPROM_WriteByte@status,0
  4795  056D  2D6F               	goto	u1321
  4796  056E  2D71               	goto	u1320
  4797  056F                     u1321:
  4798  056F  178B               	bsf	11,7	;volatile
  4799  0570  2D72               	goto	u1334
  4800  0571                     u1320:
  4801  0571  138B               	bcf	11,7	;volatile
  4802  0572                     u1334:
  4803  0572                     l2178:
  4804                           
  4805                           ;eeprom.c: 18:     WREN = 0;
  4806  0572  0023               	movlb	3	; select bank3
  4807  0573  1115               	bcf	21,2	;volsfr
  4808  0574                     l564:
  4809  0574  0008               	return
  4810  0575                     __end_of_EEPROM_WriteByte:
  4811                           
  4812                           	psect	text25
  4813  0634                     __ptext25:	
  4814 ;; *************** function _EEPROM_ReadByte *****************
  4815 ;; Defined at:
  4816 ;;		line 21 in file "eeprom.c"
  4817 ;; Parameters:    Size  Location     Type
  4818 ;;  addr            1    wreg     unsigned char 
  4819 ;; Auto vars:     Size  Location     Type
  4820 ;;  addr            1    2[BANK0 ] unsigned char 
  4821 ;; Return value:  Size  Location     Type
  4822 ;;                  1    wreg      unsigned char 
  4823 ;; Registers used:
  4824 ;;		wreg
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMMON   BANK0   BANK1
  4830 ;;      Params:         0       0       0
  4831 ;;      Locals:         0       1       0
  4832 ;;      Temps:          0       2       0
  4833 ;;      Totals:         0       3       0
  4834 ;;Total ram usage:        3 bytes
  4835 ;; Hardware stack levels used: 1
  4836 ;; Hardware stack levels required when called: 7
  4837 ;; This function calls:
  4838 ;;		Nothing
  4839 ;; This function is called by:
  4840 ;;		_get_voltage
  4841 ;;		_get_adr
  4842 ;;		_EEPROM_ReadShortLong
  4843 ;;		_EEPROM_ReadWord
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847  0634                     _EEPROM_ReadByte:	
  4848                           ;psect for function _EEPROM_ReadByte
  4849                           
  4850                           
  4851                           ;incstack = 0
  4852                           ; Regs used in _EEPROM_ReadByte: [wreg]
  4853                           ;EEPROM_ReadByte@addr stored from wreg
  4854  0634  0020               	movlb	0	; select bank0
  4855  0635  00A2               	movwf	EEPROM_ReadByte@addr
  4856  0636                     l1984:
  4857  0636                     l567:	
  4858                           ;eeprom.c: 22:     while (RD || WR);
  4859                           
  4860  0636  0023               	movlb	3	; select bank3
  4861  0637  1815               	btfsc	21,0	;volsfr
  4862  0638  2E3A               	goto	u1071
  4863  0639  2E3B               	goto	u1070
  4864  063A                     u1071:
  4865  063A  2E36               	goto	l567
  4866  063B                     u1070:
  4867  063B                     l1986:
  4868  063B  1895               	btfsc	21,1	;volsfr
  4869  063C  2E3E               	goto	u1081
  4870  063D  2E3F               	goto	u1080
  4871  063E                     u1081:
  4872  063E  2E36               	goto	l567
  4873  063F                     u1080:
  4874  063F                     l1988:
  4875                           
  4876                           ;eeprom.c: 23:     EEADR = addr;
  4877  063F  0020               	movlb	0	; select bank0
  4878  0640  0822               	movf	EEPROM_ReadByte@addr,w
  4879  0641  00A0               	movwf	??_EEPROM_ReadByte
  4880  0642  01A1               	clrf	??_EEPROM_ReadByte+1
  4881  0643  0820               	movf	??_EEPROM_ReadByte,w
  4882  0644  0023               	movlb	3	; select bank3
  4883  0645  0091               	movwf	17	;volatile
  4884  0646  0020               	movlb	0	; select bank0
  4885  0647  0821               	movf	??_EEPROM_ReadByte+1,w
  4886  0648  0023               	movlb	3	; select bank3
  4887  0649  0092               	movwf	18	;volatile
  4888  064A                     l1990:
  4889                           
  4890                           ;eeprom.c: 24:     RD = 1;
  4891  064A  1415               	bsf	21,0	;volsfr
  4892                           
  4893                           ;eeprom.c: 25:     return EEDATA;
  4894  064B  0813               	movf	19,w	;volatile
  4895  064C                     l570:
  4896  064C  0008               	return
  4897  064D                     __end_of_EEPROM_ReadByte:
  4898                           
  4899                           	psect	text26
  4900  0446                     __ptext26:	
  4901 ;; *************** function _get_jump *****************
  4902 ;; Defined at:
  4903 ;;		line 219 in file "main.c"
  4904 ;; Parameters:    Size  Location     Type
  4905 ;;		None
  4906 ;; Auto vars:     Size  Location     Type
  4907 ;;  res             2    5[BANK0 ] unsigned int 
  4908 ;; Return value:  Size  Location     Type
  4909 ;;                  1    wreg      void 
  4910 ;; Registers used:
  4911 ;;		wreg, status,2, status,0, pclath, cstack
  4912 ;; Tracked objects:
  4913 ;;		On entry : 0/0
  4914 ;;		On exit  : 0/0
  4915 ;;		Unchanged: 0/0
  4916 ;; Data sizes:     COMMON   BANK0   BANK1
  4917 ;;      Params:         0       0       0
  4918 ;;      Locals:         0       2       0
  4919 ;;      Temps:          0       1       0
  4920 ;;      Totals:         0       3       0
  4921 ;;Total ram usage:        3 bytes
  4922 ;; Hardware stack levels used: 1
  4923 ;; Hardware stack levels required when called: 8
  4924 ;; This function calls:
  4925 ;;		_ADC_GetConversion
  4926 ;; This function is called by:
  4927 ;;		_main
  4928 ;; This function uses a non-reentrant model
  4929 ;;
  4930                           
  4931  0446                     _get_jump:	
  4932                           ;psect for function _get_jump
  4933                           
  4934  0446                     l380:	
  4935                           ;incstack = 0
  4936                           ; Regs used in _get_jump: [wreg+status,2+status,0+pclath+cstack]
  4937                           ;main.c: 221:     static signed char jump_counter;;main.c: 222:     do { ANSELAbits.ANSA
      +                          1 = 1; } while(0);
  4938                           
  4939  0446  0023               	movlb	3	; select bank3
  4940  0447  148C               	bsf	12,1	;volatile
  4941  0448                     l2486:
  4942                           
  4943                           ;main.c: 223:     unsigned res = ADC_GetConversion(PIN_JUMP_STATE);
  4944  0448  3001               	movlw	1
  4945  0449  3185  259F  3184   	fcall	_ADC_GetConversion
  4946  044C  0020               	movlb	0	; select bank0
  4947  044D  0821               	movf	?_ADC_GetConversion+1,w
  4948  044E  00A6               	movwf	get_jump@res+1
  4949  044F  0820               	movf	?_ADC_GetConversion,w
  4950  0450  00A5               	movwf	get_jump@res
  4951  0451                     l2488:
  4952  0451  0023               	movlb	3	; select bank3
  4953  0452  108C               	bcf	12,1	;volatile
  4954  0453                     l2490:
  4955                           
  4956                           ;main.c: 227:     if (res < 2000) jump_counter--;
  4957  0453  3007               	movlw	7
  4958  0454  0020               	movlb	0	; select bank0
  4959  0455  0226               	subwf	get_jump@res+1,w
  4960  0456  30D0               	movlw	208
  4961  0457  1903               	skipnz
  4962  0458  0225               	subwf	get_jump@res,w
  4963  0459  1803               	skipnc
  4964  045A  2C5C               	goto	u1741
  4965  045B  2C5D               	goto	u1740
  4966  045C                     u1741:
  4967  045C  2C62               	goto	l2494
  4968  045D                     u1740:
  4969  045D                     l2492:
  4970  045D  30FF               	movlw	255
  4971  045E  00A4               	movwf	??_get_jump
  4972  045F  0824               	movf	??_get_jump,w
  4973  0460  07DB               	addwf	get_jump@jump_counter,f
  4974  0461  2C66               	goto	l2496
  4975  0462                     l2494:
  4976  0462  3001               	movlw	1
  4977  0463  00A4               	movwf	??_get_jump
  4978  0464  0824               	movf	??_get_jump,w
  4979  0465  07DB               	addwf	get_jump@jump_counter,f
  4980  0466                     l2496:
  4981                           
  4982                           ;main.c: 239:     if (jump_counter > 10) {
  4983  0466  085B               	movf	get_jump@jump_counter,w
  4984  0467  3A80               	xorlw	128
  4985  0468  3E75               	addlw	-139
  4986  0469  1C03               	skipc
  4987  046A  2C6C               	goto	u1751
  4988  046B  2C6D               	goto	u1750
  4989  046C                     u1751:
  4990  046C  2C73               	goto	l2502
  4991  046D                     u1750:
  4992  046D                     l2498:
  4993                           
  4994                           ;main.c: 240:         jump_counter = 10;
  4995  046D  300A               	movlw	10
  4996  046E  00A4               	movwf	??_get_jump
  4997  046F  0824               	movf	??_get_jump,w
  4998  0470  00DB               	movwf	get_jump@jump_counter
  4999  0471                     l2500:
  5000                           
  5001                           ;main.c: 241:         FLAGS.bits._JUMP_CONNECTED = 0;
  5002  0471  127C               	bcf	_FLAGS,4
  5003                           
  5004                           ;main.c: 242:     } else if (jump_counter<-10) {
  5005  0472  2C7F               	goto	l389
  5006  0473                     l2502:
  5007  0473  085B               	movf	get_jump@jump_counter,w
  5008  0474  3A80               	xorlw	128
  5009  0475  3E8A               	addlw	138
  5010  0476  1803               	skipnc
  5011  0477  2C79               	goto	u1761
  5012  0478  2C7A               	goto	u1760
  5013  0479                     u1761:
  5014  0479  2C7F               	goto	l389
  5015  047A                     u1760:
  5016  047A                     l2504:
  5017                           
  5018                           ;main.c: 243:         jump_counter = -10;
  5019  047A  30F6               	movlw	246
  5020  047B  00A4               	movwf	??_get_jump
  5021  047C  0824               	movf	??_get_jump,w
  5022  047D  00DB               	movwf	get_jump@jump_counter
  5023  047E                     l2506:
  5024                           
  5025                           ;main.c: 244:         FLAGS.bits._JUMP_CONNECTED = 1;
  5026  047E  167C               	bsf	_FLAGS,4
  5027  047F                     l389:
  5028  047F  0008               	return
  5029  0480                     __end_of_get_jump:
  5030                           
  5031                           	psect	text27
  5032  0408                     __ptext27:	
  5033 ;; *************** function _get_fun *****************
  5034 ;; Defined at:
  5035 ;;		line 145 in file "main.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;		None
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;  res             2    5[BANK0 ] unsigned int 
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  1    wreg      void 
  5042 ;; Registers used:
  5043 ;;		wreg, status,2, status,0, pclath, cstack
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMMON   BANK0   BANK1
  5049 ;;      Params:         0       0       0
  5050 ;;      Locals:         0       2       0
  5051 ;;      Temps:          0       1       0
  5052 ;;      Totals:         0       3       0
  5053 ;;Total ram usage:        3 bytes
  5054 ;; Hardware stack levels used: 1
  5055 ;; Hardware stack levels required when called: 8
  5056 ;; This function calls:
  5057 ;;		_ADC_GetConversion
  5058 ;; This function is called by:
  5059 ;;		_main
  5060 ;; This function uses a non-reentrant model
  5061 ;;
  5062                           
  5063  0408                     _get_fun:	
  5064                           ;psect for function _get_fun
  5065                           
  5066  0408                     l342:	
  5067                           ;incstack = 0
  5068                           ; Regs used in _get_fun: [wreg+status,2+status,0+pclath+cstack]
  5069                           ;main.c: 147:     static signed char fun_counter;;main.c: 148:     do { LATCbits.LATC1 =
      +                           1; } while(0);
  5070                           
  5071  0408  0022               	movlb	2	; select bank2
  5072  0409  148E               	bsf	14,1	;volatile
  5073  040A                     l344:	
  5074                           ;main.c: 149:     do { ANSELCbits.ANSC2 = 1; } while(0);
  5075                           
  5076  040A  0023               	movlb	3	; select bank3
  5077  040B  150E               	bsf	14,2	;volatile
  5078  040C                     l2460:
  5079                           
  5080                           ;main.c: 150:     unsigned res = ADC_GetConversion(PIN_FUN_STATE);
  5081  040C  3006               	movlw	6
  5082  040D  3185  259F  3184   	fcall	_ADC_GetConversion
  5083  0410  0020               	movlb	0	; select bank0
  5084  0411  0821               	movf	?_ADC_GetConversion+1,w
  5085  0412  00A6               	movwf	get_fun@res+1
  5086  0413  0820               	movf	?_ADC_GetConversion,w
  5087  0414  00A5               	movwf	get_fun@res
  5088  0415                     l2462:
  5089  0415  0023               	movlb	3	; select bank3
  5090  0416  110E               	bcf	14,2	;volatile
  5091  0417                     l2464:
  5092  0417  0022               	movlb	2	; select bank2
  5093  0418  108E               	bcf	14,1	;volatile
  5094  0419                     l2466:
  5095                           
  5096                           ;main.c: 153:     if (res < 2000) fun_counter--;
  5097  0419  3007               	movlw	7
  5098  041A  0020               	movlb	0	; select bank0
  5099  041B  0226               	subwf	get_fun@res+1,w
  5100  041C  30D0               	movlw	208
  5101  041D  1903               	skipnz
  5102  041E  0225               	subwf	get_fun@res,w
  5103  041F  1803               	skipnc
  5104  0420  2C22               	goto	u1711
  5105  0421  2C23               	goto	u1710
  5106  0422                     u1711:
  5107  0422  2C28               	goto	l2470
  5108  0423                     u1710:
  5109  0423                     l2468:
  5110  0423  30FF               	movlw	255
  5111  0424  00A4               	movwf	??_get_fun
  5112  0425  0824               	movf	??_get_fun,w
  5113  0426  07DD               	addwf	get_fun@fun_counter,f
  5114  0427  2C2C               	goto	l2472
  5115  0428                     l2470:
  5116  0428  3001               	movlw	1
  5117  0429  00A4               	movwf	??_get_fun
  5118  042A  0824               	movf	??_get_fun,w
  5119  042B  07DD               	addwf	get_fun@fun_counter,f
  5120  042C                     l2472:
  5121                           
  5122                           ;main.c: 166:        if (fun_counter > 10) {
  5123  042C  085D               	movf	get_fun@fun_counter,w
  5124  042D  3A80               	xorlw	128
  5125  042E  3E75               	addlw	-139
  5126  042F  1C03               	skipc
  5127  0430  2C32               	goto	u1721
  5128  0431  2C33               	goto	u1720
  5129  0432                     u1721:
  5130  0432  2C39               	goto	l2478
  5131  0433                     u1720:
  5132  0433                     l2474:
  5133                           
  5134                           ;main.c: 167:         fun_counter = 10;
  5135  0433  300A               	movlw	10
  5136  0434  00A4               	movwf	??_get_fun
  5137  0435  0824               	movf	??_get_fun,w
  5138  0436  00DD               	movwf	get_fun@fun_counter
  5139  0437                     l2476:
  5140                           
  5141                           ;main.c: 168:         FLAGS.bits._FUN_CONNECTED = 0;
  5142  0437  11FC               	bcf	_FLAGS,3
  5143                           
  5144                           ;main.c: 169:     } else if (fun_counter<-10) {
  5145  0438  2C45               	goto	l355
  5146  0439                     l2478:
  5147  0439  085D               	movf	get_fun@fun_counter,w
  5148  043A  3A80               	xorlw	128
  5149  043B  3E8A               	addlw	138
  5150  043C  1803               	skipnc
  5151  043D  2C3F               	goto	u1731
  5152  043E  2C40               	goto	u1730
  5153  043F                     u1731:
  5154  043F  2C45               	goto	l355
  5155  0440                     u1730:
  5156  0440                     l2480:
  5157                           
  5158                           ;main.c: 170:         fun_counter = -10;
  5159  0440  30F6               	movlw	246
  5160  0441  00A4               	movwf	??_get_fun
  5161  0442  0824               	movf	??_get_fun,w
  5162  0443  00DD               	movwf	get_fun@fun_counter
  5163  0444                     l2482:
  5164                           
  5165                           ;main.c: 171:         FLAGS.bits._FUN_CONNECTED = 1;
  5166  0444  15FC               	bsf	_FLAGS,3
  5167  0445                     l355:
  5168  0445  0008               	return
  5169  0446                     __end_of_get_fun:
  5170                           
  5171                           	psect	text28
  5172  059F                     __ptext28:	
  5173 ;; *************** function _ADC_GetConversion *****************
  5174 ;; Defined at:
  5175 ;;		line 112 in file "mcc_generated_files/adc.c"
  5176 ;; Parameters:    Size  Location     Type
  5177 ;;  channel         1    wreg     enum E2178
  5178 ;; Auto vars:     Size  Location     Type
  5179 ;;  channel         1    3[BANK0 ] enum E2178
  5180 ;; Return value:  Size  Location     Type
  5181 ;;                  2    0[BANK0 ] unsigned short 
  5182 ;; Registers used:
  5183 ;;		wreg, status,2, status,0
  5184 ;; Tracked objects:
  5185 ;;		On entry : 0/0
  5186 ;;		On exit  : 0/0
  5187 ;;		Unchanged: 0/0
  5188 ;; Data sizes:     COMMON   BANK0   BANK1
  5189 ;;      Params:         0       2       0
  5190 ;;      Locals:         0       1       0
  5191 ;;      Temps:          0       1       0
  5192 ;;      Totals:         0       4       0
  5193 ;;Total ram usage:        4 bytes
  5194 ;; Hardware stack levels used: 1
  5195 ;; Hardware stack levels required when called: 7
  5196 ;; This function calls:
  5197 ;;		Nothing
  5198 ;; This function is called by:
  5199 ;;		_get_fun
  5200 ;;		_get_fun_full
  5201 ;;		_get_jump
  5202 ;;		_get_jump_full
  5203 ;;		_get_voltage
  5204 ;; This function uses a non-reentrant model
  5205 ;;
  5206                           
  5207  059F                     _ADC_GetConversion:	
  5208                           ;psect for function _ADC_GetConversion
  5209                           
  5210                           
  5211                           ;incstack = 0
  5212                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  5213                           ;ADC_GetConversion@channel stored from wreg
  5214  059F  0020               	movlb	0	; select bank0
  5215  05A0  00A3               	movwf	ADC_GetConversion@channel
  5216  05A1                     l2124:
  5217                           
  5218                           ;mcc_generated_files/adc.c: 112: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 113: {;mcc_generated_files/adc.c: 115:     ADCON0bits.CHS = ch
      +                          annel;
  5219  05A1  0823               	movf	ADC_GetConversion@channel,w
  5220  05A2  00A2               	movwf	??_ADC_GetConversion
  5221  05A3  0DA2               	rlf	??_ADC_GetConversion,f
  5222  05A4  0DA2               	rlf	??_ADC_GetConversion,f
  5223  05A5  0021               	movlb	1	; select bank1
  5224  05A6  081D               	movf	29,w	;volatile
  5225  05A7  0020               	movlb	0	; select bank0
  5226  05A8  0622               	xorwf	??_ADC_GetConversion,w
  5227  05A9  3983               	andlw	-125
  5228  05AA  0622               	xorwf	??_ADC_GetConversion,w
  5229  05AB  0021               	movlb	1	; select bank1
  5230  05AC  009D               	movwf	29	;volatile
  5231  05AD                     l2126:
  5232                           
  5233                           ;mcc_generated_files/adc.c: 118:     ADCON0bits.ADON = 1;
  5234  05AD  141D               	bsf	29,0	;volatile
  5235  05AE                     l2128:
  5236                           
  5237                           ;mcc_generated_files/adc.c: 121:     _delay((unsigned long)((5)*(16000000/4000000.0)));
  5238  05AE  3006               	movlw	6
  5239  05AF                     u2117:
  5240  05AF  0B89               	decfsz	9,f
  5241  05B0  2DAF               	goto	u2117
  5242  05B1  3200               	nop2
  5243  05B2                     l2130:
  5244                           
  5245                           ;mcc_generated_files/adc.c: 124:     ADCON0bits.GO_nDONE = 1;
  5246  05B2  0021               	movlb	1	; select bank1
  5247  05B3  149D               	bsf	29,1	;volatile
  5248  05B4                     l63:	
  5249                           ;mcc_generated_files/adc.c: 128:     {;mcc_generated_files/adc.c: 129:     }
  5250                           
  5251                           
  5252                           ;mcc_generated_files/adc.c: 127:     while (ADCON0bits.GO_nDONE)
  5253  05B4  189D               	btfsc	29,1	;volatile
  5254  05B5  2DB7               	goto	u1221
  5255  05B6  2DB8               	goto	u1220
  5256  05B7                     u1221:
  5257  05B7  2DB4               	goto	l63
  5258  05B8                     u1220:
  5259  05B8                     l2132:
  5260                           
  5261                           ;mcc_generated_files/adc.c: 132:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  5262  05B8  081C               	movf	28,w	;volatile
  5263  05B9  0020               	movlb	0	; select bank0
  5264  05BA  00A1               	movwf	?_ADC_GetConversion+1
  5265  05BB  0021               	movlb	1	; select bank1
  5266  05BC  081B               	movf	27,w	;volatile
  5267  05BD  0020               	movlb	0	; select bank0
  5268  05BE  00A0               	movwf	?_ADC_GetConversion
  5269  05BF                     l66:
  5270  05BF  0008               	return
  5271  05C0                     __end_of_ADC_GetConversion:
  5272                           
  5273                           	psect	text29
  5274  0345                     __ptext29:	
  5275 ;; *************** function _fun_work *****************
  5276 ;; Defined at:
  5277 ;;		line 350 in file "main.c"
  5278 ;; Parameters:    Size  Location     Type
  5279 ;;		None
  5280 ;; Auto vars:     Size  Location     Type
  5281 ;;		None
  5282 ;; Return value:  Size  Location     Type
  5283 ;;                  1    wreg      void 
  5284 ;; Registers used:
  5285 ;;		wreg, status,2, status,0, pclath, cstack
  5286 ;; Tracked objects:
  5287 ;;		On entry : 0/0
  5288 ;;		On exit  : 0/0
  5289 ;;		Unchanged: 0/0
  5290 ;; Data sizes:     COMMON   BANK0   BANK1
  5291 ;;      Params:         0       0       0
  5292 ;;      Locals:         0       0       0
  5293 ;;      Temps:          0       1       0
  5294 ;;      Totals:         0       1       0
  5295 ;;Total ram usage:        1 bytes
  5296 ;; Hardware stack levels used: 1
  5297 ;; Hardware stack levels required when called: 9
  5298 ;; This function calls:
  5299 ;;		_beep
  5300 ;;		_go_close
  5301 ;;		_go_close_alt
  5302 ;;		_go_open
  5303 ;;		_go_open_alt
  5304 ;; This function is called by:
  5305 ;;		_main
  5306 ;; This function uses a non-reentrant model
  5307 ;;
  5308                           
  5309  0345                     _fun_work:	
  5310                           ;psect for function _fun_work
  5311                           
  5312  0345                     l2532:	
  5313                           ;incstack = 0
  5314                           ; Regs used in _fun_work: [wreg+status,2+status,0+pclath+cstack]
  5315                           
  5316                           
  5317                           ;main.c: 351:     {;main.c: 352:         if (FLAGS.bits._FUN_CONNECTED &&
  5318  0345  1DFC               	btfss	_FLAGS,3
  5319  0346  2B48               	goto	u1851
  5320  0347  2B49               	goto	u1850
  5321  0348                     u1851:
  5322  0348  2B67               	goto	l2548
  5323  0349                     u1850:
  5324  0349                     l2534:
  5325  0349  187C               	btfsc	_FLAGS,0
  5326  034A  2B4C               	goto	u1861
  5327  034B  2B4D               	goto	u1860
  5328  034C                     u1861:
  5329  034C  2B67               	goto	l2548
  5330  034D                     u1860:
  5331  034D                     l2536:
  5332  034D  1D7C               	btfss	_FLAGS,2
  5333  034E  2B50               	goto	u1871
  5334  034F  2B51               	goto	u1870
  5335  0350                     u1871:
  5336  0350  2B67               	goto	l2548
  5337  0351                     u1870:
  5338  0351                     l2538:
  5339  0351  1AFC               	btfsc	_FLAGS,5
  5340  0352  2B54               	goto	u1881
  5341  0353  2B55               	goto	u1880
  5342  0354                     u1881:
  5343  0354  2B67               	goto	l2548
  5344  0355                     u1880:
  5345  0355                     l2540:
  5346                           
  5347                           ;main.c: 355:                 !FLAGS.bits.RELE_POW_WAIT) {;main.c: 356:             if (
      +                          FLAGS.bits.NORMAL_WORK_MODE) go_open();
  5348  0355  1CFC               	btfss	_FLAGS,1
  5349  0356  2B58               	goto	u1891
  5350  0357  2B59               	goto	u1890
  5351  0358                     u1891:
  5352  0358  2B5D               	goto	l2544
  5353  0359                     u1890:
  5354  0359                     l2542:
  5355  0359  3187  2716  3183   	fcall	_go_open
  5356  035C  2B60               	goto	l2546
  5357  035D                     l2544:
  5358  035D  3187  2752  3183   	fcall	_go_open_alt
  5359  0360                     l2546:
  5360                           
  5361                           ;main.c: 359:             beep( 40, 1);
  5362  0360  0020               	movlb	0	; select bank0
  5363  0361  01A0               	clrf	beep@count
  5364  0362  0AA0               	incf	beep@count,f
  5365  0363  3028               	movlw	40
  5366  0364  3185  251A  3183   	fcall	_beep
  5367  0367                     l2548:
  5368                           
  5369                           ;main.c: 361:         if (!FLAGS.bits._FUN_CONNECTED &&
  5370  0367  19FC               	btfsc	_FLAGS,3
  5371  0368  2B6A               	goto	u1901
  5372  0369  2B6B               	goto	u1900
  5373  036A                     u1901:
  5374  036A  2B87               	goto	l445
  5375  036B                     u1900:
  5376  036B                     l2550:
  5377  036B  197C               	btfsc	_FLAGS,2
  5378  036C  2B6E               	goto	u1911
  5379  036D  2B6F               	goto	u1910
  5380  036E                     u1911:
  5381  036E  2B87               	goto	l445
  5382  036F                     u1910:
  5383  036F                     l2552:
  5384  036F  1AFC               	btfsc	_FLAGS,5
  5385  0370  2B72               	goto	u1921
  5386  0371  2B73               	goto	u1920
  5387  0372                     u1921:
  5388  0372  2B87               	goto	l445
  5389  0373                     u1920:
  5390  0373                     l2554:
  5391                           
  5392                           ;main.c: 363:                 !FLAGS.bits.RELE_POW_WAIT) {;main.c: 364:             if (
      +                          FLAGS.bits.NORMAL_WORK_MODE) go_close();
  5393  0373  1CFC               	btfss	_FLAGS,1
  5394  0374  2B76               	goto	u1931
  5395  0375  2B77               	goto	u1930
  5396  0376                     u1931:
  5397  0376  2B7B               	goto	l2558
  5398  0377                     u1930:
  5399  0377                     l2556:
  5400  0377  3185  25C0  3183   	fcall	_go_close
  5401  037A  2B7E               	goto	l2560
  5402  037B                     l2558:
  5403  037B  3187  2757  3183   	fcall	_go_close_alt
  5404  037E                     l2560:
  5405                           
  5406                           ;main.c: 367:             beep( 40, 2);
  5407  037E  3002               	movlw	2
  5408  037F  0020               	movlb	0	; select bank0
  5409  0380  00A6               	movwf	??_fun_work
  5410  0381  0826               	movf	??_fun_work,w
  5411  0382  00A0               	movwf	beep@count
  5412  0383  3028               	movlw	40
  5413  0384  3185  251A  3183   	fcall	_beep
  5414  0387                     l445:
  5415  0387  0008               	return
  5416  0388                     __end_of_fun_work:
  5417                           
  5418                           	psect	text30
  5419  0752                     __ptext30:	
  5420 ;; *************** function _go_open_alt *****************
  5421 ;; Defined at:
  5422 ;;		line 114 in file "main.c"
  5423 ;; Parameters:    Size  Location     Type
  5424 ;;		None
  5425 ;; Auto vars:     Size  Location     Type
  5426 ;;		None
  5427 ;; Return value:  Size  Location     Type
  5428 ;;                  1    wreg      void 
  5429 ;; Registers used:
  5430 ;;		None
  5431 ;; Tracked objects:
  5432 ;;		On entry : 0/0
  5433 ;;		On exit  : 0/0
  5434 ;;		Unchanged: 0/0
  5435 ;; Data sizes:     COMMON   BANK0   BANK1
  5436 ;;      Params:         0       0       0
  5437 ;;      Locals:         0       0       0
  5438 ;;      Temps:          0       0       0
  5439 ;;      Totals:         0       0       0
  5440 ;;Total ram usage:        0 bytes
  5441 ;; Hardware stack levels used: 1
  5442 ;; Hardware stack levels required when called: 7
  5443 ;; This function calls:
  5444 ;;		Nothing
  5445 ;; This function is called by:
  5446 ;;		_fun_work
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450  0752                     _go_open_alt:	
  5451                           ;psect for function _go_open_alt
  5452                           
  5453  0752                     l2376:	
  5454                           ;incstack = 0
  5455                           ; Regs used in _go_open_alt: []
  5456                           
  5457                           
  5458                           ;main.c: 115:     FLAGS.bits.CLOSED = 0;
  5459  0752  117C               	bcf	_FLAGS,2
  5460  0753                     l309:	
  5461                           ;main.c: 116:     do { LATCbits.LATC4 = 0; } while(0);
  5462                           
  5463  0753  0022               	movlb	2	; select bank2
  5464  0754  120E               	bcf	14,4	;volatile
  5465  0755                     l311:	
  5466                           ;main.c: 117:     do { LATCbits.LATC5 = 0; } while(0);
  5467                           
  5468  0755  128E               	bcf	14,5	;volatile
  5469  0756                     l313:
  5470  0756  0008               	return
  5471  0757                     __end_of_go_open_alt:
  5472                           
  5473                           	psect	text31
  5474  0716                     __ptext31:	
  5475 ;; *************** function _go_open *****************
  5476 ;; Defined at:
  5477 ;;		line 100 in file "main.c"
  5478 ;; Parameters:    Size  Location     Type
  5479 ;;		None
  5480 ;; Auto vars:     Size  Location     Type
  5481 ;;		None
  5482 ;; Return value:  Size  Location     Type
  5483 ;;                  1    wreg      void 
  5484 ;; Registers used:
  5485 ;;		wreg
  5486 ;; Tracked objects:
  5487 ;;		On entry : 0/0
  5488 ;;		On exit  : 0/0
  5489 ;;		Unchanged: 0/0
  5490 ;; Data sizes:     COMMON   BANK0   BANK1
  5491 ;;      Params:         0       0       0
  5492 ;;      Locals:         0       0       0
  5493 ;;      Temps:          0       1       0
  5494 ;;      Totals:         0       1       0
  5495 ;;Total ram usage:        1 bytes
  5496 ;; Hardware stack levels used: 1
  5497 ;; Hardware stack levels required when called: 7
  5498 ;; This function calls:
  5499 ;;		Nothing
  5500 ;; This function is called by:
  5501 ;;		_povorot
  5502 ;;		_fun_work
  5503 ;; This function uses a non-reentrant model
  5504 ;;
  5505                           
  5506  0716                     _go_open:	
  5507                           ;psect for function _go_open
  5508                           
  5509  0716                     l295:	
  5510                           ;incstack = 0
  5511                           ; Regs used in _go_open: [wreg]
  5512                           ;main.c: 101:     do { LATCbits.LATC4 = 0; } while(0);
  5513                           
  5514  0716  0022               	movlb	2	; select bank2
  5515  0717  120E               	bcf	14,4	;volatile
  5516  0718                     l297:	
  5517                           ;main.c: 102:     do { LATCbits.LATC5 = 1; } while(0);
  5518                           
  5519  0718  168E               	bsf	14,5	;volatile
  5520  0719                     l2368:
  5521                           
  5522                           ;main.c: 103:     time_pow_s = 20;
  5523  0719  3014               	movlw	20
  5524  071A  0020               	movlb	0	; select bank0
  5525  071B  00A0               	movwf	??_go_open
  5526  071C  0820               	movf	??_go_open,w
  5527  071D  00DE               	movwf	_time_pow_s
  5528  071E                     l2370:
  5529                           
  5530                           ;main.c: 104:     FLAGS.bits.RELE_POW_WAIT = 1;
  5531  071E  16FC               	bsf	_FLAGS,5
  5532  071F                     l299:
  5533  071F  0008               	return
  5534  0720                     __end_of_go_open:
  5535                           
  5536                           	psect	text32
  5537  0757                     __ptext32:	
  5538 ;; *************** function _go_close_alt *****************
  5539 ;; Defined at:
  5540 ;;		line 108 in file "main.c"
  5541 ;; Parameters:    Size  Location     Type
  5542 ;;		None
  5543 ;; Auto vars:     Size  Location     Type
  5544 ;;		None
  5545 ;; Return value:  Size  Location     Type
  5546 ;;                  1    wreg      void 
  5547 ;; Registers used:
  5548 ;;		None
  5549 ;; Tracked objects:
  5550 ;;		On entry : 0/0
  5551 ;;		On exit  : 0/0
  5552 ;;		Unchanged: 0/0
  5553 ;; Data sizes:     COMMON   BANK0   BANK1
  5554 ;;      Params:         0       0       0
  5555 ;;      Locals:         0       0       0
  5556 ;;      Temps:          0       0       0
  5557 ;;      Totals:         0       0       0
  5558 ;;Total ram usage:        0 bytes
  5559 ;; Hardware stack levels used: 1
  5560 ;; Hardware stack levels required when called: 7
  5561 ;; This function calls:
  5562 ;;		Nothing
  5563 ;; This function is called by:
  5564 ;;		_fun_work
  5565 ;;		_switch_wm
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569  0757                     _go_close_alt:	
  5570                           ;psect for function _go_close_alt
  5571                           
  5572  0757                     l2374:	
  5573                           ;incstack = 0
  5574                           ; Regs used in _go_close_alt: []
  5575                           
  5576                           
  5577                           ;main.c: 109:     FLAGS.bits.CLOSED = 1;
  5578  0757  157C               	bsf	_FLAGS,2
  5579  0758                     l302:	
  5580                           ;main.c: 110:     do { LATCbits.LATC4 = 0; } while(0);
  5581                           
  5582  0758  0022               	movlb	2	; select bank2
  5583  0759  120E               	bcf	14,4	;volatile
  5584  075A                     l304:	
  5585                           ;main.c: 111:     do { LATCbits.LATC5 = 1; } while(0);
  5586                           
  5587  075A  168E               	bsf	14,5	;volatile
  5588  075B                     l306:
  5589  075B  0008               	return
  5590  075C                     __end_of_go_close_alt:
  5591                           
  5592                           	psect	text33
  5593  05C0                     __ptext33:	
  5594 ;; *************** function _go_close *****************
  5595 ;; Defined at:
  5596 ;;		line 89 in file "main.c"
  5597 ;; Parameters:    Size  Location     Type
  5598 ;;		None
  5599 ;; Auto vars:     Size  Location     Type
  5600 ;;		None
  5601 ;; Return value:  Size  Location     Type
  5602 ;;                  1    wreg      void 
  5603 ;; Registers used:
  5604 ;;		wreg
  5605 ;; Tracked objects:
  5606 ;;		On entry : 0/0
  5607 ;;		On exit  : 0/0
  5608 ;;		Unchanged: 0/0
  5609 ;; Data sizes:     COMMON   BANK0   BANK1
  5610 ;;      Params:         0       0       0
  5611 ;;      Locals:         0       0       0
  5612 ;;      Temps:          0       2       0
  5613 ;;      Totals:         0       2       0
  5614 ;;Total ram usage:        2 bytes
  5615 ;; Hardware stack levels used: 1
  5616 ;; Hardware stack levels required when called: 7
  5617 ;; This function calls:
  5618 ;;		Nothing
  5619 ;; This function is called by:
  5620 ;;		_povorot
  5621 ;;		_fun_work
  5622 ;;		_switch_wm
  5623 ;; This function uses a non-reentrant model
  5624 ;;
  5625                           
  5626  05C0                     _go_close:	
  5627                           ;psect for function _go_close
  5628                           
  5629  05C0                     l2356:	
  5630                           ;incstack = 0
  5631                           ; Regs used in _go_close: [wreg]
  5632                           
  5633                           
  5634                           ;main.c: 90:     time_s = 0;
  5635  05C0  3000               	movlw	0
  5636  05C1  0020               	movlb	0	; select bank0
  5637  05C2  00D5               	movwf	_time_s
  5638  05C3  3000               	movlw	0
  5639  05C4  00D6               	movwf	_time_s+1
  5640  05C5  3000               	movlw	0
  5641  05C6  00D7               	movwf	_time_s+2
  5642  05C7                     l2358:
  5643  05C7  0022               	movlb	2	; select bank2
  5644  05C8  160E               	bsf	14,4	;volatile
  5645  05C9                     l289:
  5646                           
  5647                           ;main.c: 92:     _delay((unsigned long)((5 * 1000)*(16000000/4000.0)));
  5648  05C9  3066               	movlw	102
  5649  05CA  0020               	movlb	0	; select bank0
  5650  05CB  00A1               	movwf	??_go_close+1
  5651  05CC  3076               	movlw	118
  5652  05CD  00A0               	movwf	??_go_close
  5653  05CE  30C1               	movlw	193
  5654  05CF                     u2127:
  5655  05CF  0B89               	decfsz	9,f
  5656  05D0  2DCF               	goto	u2127
  5657  05D1  0BA0               	decfsz	??_go_close,f
  5658  05D2  2DCF               	goto	u2127
  5659  05D3  0BA1               	decfsz	??_go_close+1,f
  5660  05D4  2DCF               	goto	u2127
  5661  05D5                     l2360:
  5662  05D5  0022               	movlb	2	; select bank2
  5663  05D6  168E               	bsf	14,5	;volatile
  5664  05D7                     l291:
  5665                           
  5666                           ;main.c: 94:     time_pow_s = 20;
  5667  05D7  3014               	movlw	20
  5668  05D8  0020               	movlb	0	; select bank0
  5669  05D9  00A0               	movwf	??_go_close
  5670  05DA  0820               	movf	??_go_close,w
  5671  05DB  00DE               	movwf	_time_pow_s
  5672  05DC                     l2362:
  5673                           
  5674                           ;main.c: 95:     FLAGS.bits.RELE_POW_WAIT = 1;
  5675  05DC  16FC               	bsf	_FLAGS,5
  5676  05DD                     l2364:
  5677                           
  5678                           ;main.c: 96:     FLAGS.bits.RELE_CON_WAIT = 1;
  5679  05DD  177C               	bsf	_FLAGS,6
  5680  05DE                     l292:
  5681  05DE  0008               	return
  5682  05DF                     __end_of_go_close:
  5683                           
  5684                           	psect	text34
  5685  051A                     __ptext34:	
  5686 ;; *************** function _beep *****************
  5687 ;; Defined at:
  5688 ;;		line 79 in file "main.c"
  5689 ;; Parameters:    Size  Location     Type
  5690 ;;  time            1    wreg     unsigned char 
  5691 ;;  count           1    0[BANK0 ] unsigned char 
  5692 ;; Auto vars:     Size  Location     Type
  5693 ;;  time            1    3[BANK0 ] unsigned char 
  5694 ;;  i               1    5[BANK0 ] unsigned char 
  5695 ;;  j               1    4[BANK0 ] unsigned char 
  5696 ;; Return value:  Size  Location     Type
  5697 ;;                  1    wreg      void 
  5698 ;; Registers used:
  5699 ;;		wreg, status,2, status,0, pclath, cstack
  5700 ;; Tracked objects:
  5701 ;;		On entry : 0/0
  5702 ;;		On exit  : 0/0
  5703 ;;		Unchanged: 0/0
  5704 ;; Data sizes:     COMMON   BANK0   BANK1
  5705 ;;      Params:         0       1       0
  5706 ;;      Locals:         0       3       0
  5707 ;;      Temps:          0       2       0
  5708 ;;      Totals:         0       6       0
  5709 ;;Total ram usage:        6 bytes
  5710 ;; Hardware stack levels used: 1
  5711 ;; Hardware stack levels required when called: 8
  5712 ;; This function calls:
  5713 ;;		_switch_zum
  5714 ;; This function is called by:
  5715 ;;		_fun_work
  5716 ;;		_switch_wm
  5717 ;; This function uses a non-reentrant model
  5718 ;;
  5719                           
  5720  051A                     _beep:	
  5721                           ;psect for function _beep
  5722                           
  5723                           
  5724                           ;incstack = 0
  5725                           ; Regs used in _beep: [wreg+status,2+status,0+pclath+cstack]
  5726                           ;beep@time stored from wreg
  5727  051A  0020               	movlb	0	; select bank0
  5728  051B  00A3               	movwf	beep@time
  5729  051C                     l2338:
  5730                           
  5731                           ;main.c: 80:     for (char j = 0; j < count; j++) {
  5732  051C  01A4               	clrf	beep@j
  5733  051D  2D43               	goto	l2354
  5734  051E                     l2340:
  5735                           
  5736                           ;main.c: 81:         for (char i = 0; i < time; i++) {
  5737  051E  01A5               	clrf	beep@i
  5738  051F  2D2C               	goto	l2348
  5739  0520                     l2342:
  5740                           
  5741                           ;main.c: 82:             switch_zum();
  5742  0520  3186  26CC  3185   	fcall	_switch_zum
  5743  0523                     l2344:
  5744                           
  5745                           ;main.c: 83:             _delay((unsigned long)((300)*(16000000/4000000.0)));
  5746  0523  30F0               	movlw	240
  5747  0524                     u2137:
  5748  0524  3200               	nop2
  5749  0525  0B89               	decfsz	9,f
  5750  0526  2D24               	goto	u2137
  5751  0527                     l2346:
  5752                           
  5753                           ;main.c: 84:         }
  5754  0527  3001               	movlw	1
  5755  0528  0020               	movlb	0	; select bank0
  5756  0529  00A1               	movwf	??_beep
  5757  052A  0821               	movf	??_beep,w
  5758  052B  07A5               	addwf	beep@i,f
  5759  052C                     l2348:
  5760  052C  0823               	movf	beep@time,w
  5761  052D  0225               	subwf	beep@i,w
  5762  052E  1C03               	skipc
  5763  052F  2D31               	goto	u1571
  5764  0530  2D32               	goto	u1570
  5765  0531                     u1571:
  5766  0531  2D20               	goto	l2342
  5767  0532                     u1570:
  5768  0532                     l2350:
  5769                           
  5770                           ;main.c: 85:         _delay((unsigned long)((100)*(16000000/4000.0)));
  5771  0532  3003               	movlw	3
  5772  0533  0020               	movlb	0	; select bank0
  5773  0534  00A2               	movwf	??_beep+1
  5774  0535  3008               	movlw	8
  5775  0536  00A1               	movwf	??_beep
  5776  0537  3077               	movlw	119
  5777  0538                     u2147:
  5778  0538  0B89               	decfsz	9,f
  5779  0539  2D38               	goto	u2147
  5780  053A  0BA1               	decfsz	??_beep,f
  5781  053B  2D38               	goto	u2147
  5782  053C  0BA2               	decfsz	??_beep+1,f
  5783  053D  2D38               	goto	u2147
  5784  053E                     l2352:
  5785                           
  5786                           ;main.c: 86:     }
  5787  053E  3001               	movlw	1
  5788  053F  0020               	movlb	0	; select bank0
  5789  0540  00A1               	movwf	??_beep
  5790  0541  0821               	movf	??_beep,w
  5791  0542  07A4               	addwf	beep@j,f
  5792  0543                     l2354:
  5793  0543  0820               	movf	beep@count,w
  5794  0544  0224               	subwf	beep@j,w
  5795  0545  1C03               	skipc
  5796  0546  2D48               	goto	u1581
  5797  0547  2D49               	goto	u1580
  5798  0548                     u1581:
  5799  0548  2D1E               	goto	l2340
  5800  0549                     u1580:
  5801  0549                     l285:
  5802  0549  0008               	return
  5803  054A                     __end_of_beep:
  5804                           
  5805                           	psect	text35
  5806  06CC                     __ptext35:	
  5807 ;; *************** function _switch_zum *****************
  5808 ;; Defined at:
  5809 ;;		line 71 in file "main.c"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;		None
  5812 ;; Auto vars:     Size  Location     Type
  5813 ;;		None
  5814 ;; Return value:  Size  Location     Type
  5815 ;;                  1    wreg      void 
  5816 ;; Registers used:
  5817 ;;		status,0
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMMON   BANK0   BANK1
  5823 ;;      Params:         0       0       0
  5824 ;;      Locals:         0       0       0
  5825 ;;      Temps:          0       0       0
  5826 ;;      Totals:         0       0       0
  5827 ;;Total ram usage:        0 bytes
  5828 ;; Hardware stack levels used: 1
  5829 ;; Hardware stack levels required when called: 7
  5830 ;; This function calls:
  5831 ;;		Nothing
  5832 ;; This function is called by:
  5833 ;;		_beep
  5834 ;;		_start_setup
  5835 ;;		_TMR0_ISR
  5836 ;; This function uses a non-reentrant model
  5837 ;;
  5838                           
  5839  06CC                     _switch_zum:	
  5840                           ;psect for function _switch_zum
  5841                           
  5842                           
  5843                           ;Skip over the trampoline to the duplicate function for level 1
  5844  06CC  1C7E               	btfss	int$flags,0
  5845  06CD  2ECF               	goto	_switch_zum$intlevel0
  5846  06CE  2F09               	ljmp	i1_switch_zum
  5847  06CF                     _switch_zum$intlevel0:
  5848  06CF                     l271:	
  5849                           ;incstack = 0
  5850                           ; Regs used in _switch_zum: [status,0]
  5851                           ;main.c: 72:     do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  5852                           
  5853  06CF                     l2136:
  5854  06CF  1003               	clrc
  5855  06D0  0022               	movlb	2	; select bank2
  5856  06D1  1E8C               	btfss	12,5	;volatile
  5857  06D2  1403               	setc
  5858  06D3  1803               	btfsc	3,0
  5859  06D4  2ED6               	goto	u1231
  5860  06D5  2ED9               	goto	u1230
  5861  06D6                     u1231:
  5862  06D6  0022               	movlb	2	; select bank2
  5863  06D7  168C               	bsf	12,5	;volatile
  5864  06D8  2EDB               	goto	u1244
  5865  06D9                     u1230:
  5866  06D9  0022               	movlb	2	; select bank2
  5867  06DA  128C               	bcf	12,5	;volatile
  5868  06DB                     u1244:
  5869  06DB                     l273:
  5870  06DB  0008               	return
  5871  06DC                     __end_of_switch_zum:
  5872                           
  5873                           	psect	intentry
  5874  0004                     __pintentry:	
  5875 ;; *************** function _INTERRUPT_InterruptManager *****************
  5876 ;; Defined at:
  5877 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5878 ;; Parameters:    Size  Location     Type
  5879 ;;		None
  5880 ;; Auto vars:     Size  Location     Type
  5881 ;;		None
  5882 ;; Return value:  Size  Location     Type
  5883 ;;                  1    wreg      void 
  5884 ;; Registers used:
  5885 ;;		wreg, status,2, status,0, pclath, cstack
  5886 ;; Tracked objects:
  5887 ;;		On entry : 0/0
  5888 ;;		On exit  : 0/0
  5889 ;;		Unchanged: 0/0
  5890 ;; Data sizes:     COMMON   BANK0   BANK1
  5891 ;;      Params:         0       0       0
  5892 ;;      Locals:         0       0       0
  5893 ;;      Temps:          0       0       0
  5894 ;;      Totals:         0       0       0
  5895 ;;Total ram usage:        0 bytes
  5896 ;; Hardware stack levels used: 1
  5897 ;; Hardware stack levels required when called: 6
  5898 ;; This function calls:
  5899 ;;		_TMR0_ISR
  5900 ;;		_TMR2_ISR
  5901 ;; This function is called by:
  5902 ;;		Interrupt level 1
  5903 ;; This function uses a non-reentrant model
  5904 ;;
  5905                           
  5906  0004                     _INTERRUPT_InterruptManager:
  5907                           
  5908                           ;incstack = 0
  5909  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  5910                           
  5911                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  5912  0005  3180               	pagesel	$
  5913  0006                     i1l2664:
  5914                           
  5915                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  5916  0006  1E8B               	btfss	11,5	;volatile
  5917  0007  2809               	goto	u203_21
  5918  0008  280A               	goto	u203_20
  5919  0009                     u203_21:
  5920  0009  2812               	goto	i1l110
  5921  000A                     u203_20:
  5922  000A                     i1l2666:
  5923  000A  1D0B               	btfss	11,2	;volatile
  5924  000B  280D               	goto	u204_21
  5925  000C  280E               	goto	u204_20
  5926  000D                     u204_21:
  5927  000D  2812               	goto	i1l110
  5928  000E                     u204_20:
  5929  000E                     i1l2668:
  5930                           
  5931                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
  5932  000E  3186  26EC  3180   	fcall	_TMR0_ISR
  5933                           
  5934                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  5935  0011  2824               	goto	i1l116
  5936  0012                     i1l110:	
  5937                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
  5938                           
  5939  0012  1F0B               	btfss	11,6	;volatile
  5940  0013  2815               	goto	u205_21
  5941  0014  2816               	goto	u205_20
  5942  0015                     u205_21:
  5943  0015  2824               	goto	i1l116
  5944  0016                     u205_20:
  5945  0016                     i1l2670:
  5946                           
  5947                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  5948  0016  0021               	movlb	1	; select bank1
  5949  0017  1C91               	btfss	17,1	;volatile
  5950  0018  281A               	goto	u206_21
  5951  0019  281B               	goto	u206_20
  5952  001A                     u206_21:
  5953  001A  2824               	goto	i1l115
  5954  001B                     u206_20:
  5955  001B                     i1l2672:
  5956  001B  0020               	movlb	0	; select bank0
  5957  001C  1C91               	btfss	17,1	;volatile
  5958  001D  281F               	goto	u207_21
  5959  001E  2820               	goto	u207_20
  5960  001F                     u207_21:
  5961  001F  2824               	goto	i1l115
  5962  0020                     u207_20:
  5963  0020                     i1l2674:
  5964                           
  5965                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR2_ISR();
  5966  0020  3186  26A4  3180   	fcall	_TMR2_ISR
  5967                           
  5968                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  5969  0023  2824               	goto	i1l116
  5970  0024                     i1l115:	
  5971                           ;mcc_generated_files/interrupt_manager.c: 71:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 73:     }
  5972                           
  5973  0024                     i1l116:
  5974  0024  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5975  0025  0009               	retfie
  5976  0026                     __end_of_INTERRUPT_InterruptManager:
  5977                           
  5978                           	psect	text37
  5979  06A4                     __ptext37:	
  5980 ;; *************** function _TMR2_ISR *****************
  5981 ;; Defined at:
  5982 ;;		line 119 in file "mcc_generated_files/tmr2.c"
  5983 ;; Parameters:    Size  Location     Type
  5984 ;;		None
  5985 ;; Auto vars:     Size  Location     Type
  5986 ;;		None
  5987 ;; Return value:  Size  Location     Type
  5988 ;;                  1    wreg      void 
  5989 ;; Registers used:
  5990 ;;		wreg, status,2, status,0, pclath, cstack
  5991 ;; Tracked objects:
  5992 ;;		On entry : 0/0
  5993 ;;		On exit  : 0/0
  5994 ;;		Unchanged: 0/0
  5995 ;; Data sizes:     COMMON   BANK0   BANK1
  5996 ;;      Params:         0       0       0
  5997 ;;      Locals:         0       0       0
  5998 ;;      Temps:          0       0       0
  5999 ;;      Totals:         0       0       0
  6000 ;;Total ram usage:        0 bytes
  6001 ;; Hardware stack levels used: 1
  6002 ;; Hardware stack levels required when called: 5
  6003 ;; This function calls:
  6004 ;;		_TMR2_CallBack
  6005 ;; This function is called by:
  6006 ;;		_INTERRUPT_InterruptManager
  6007 ;; This function uses a non-reentrant model
  6008 ;;
  6009                           
  6010  06A4                     _TMR2_ISR:	
  6011                           ;psect for function _TMR2_ISR
  6012                           
  6013  06A4                     i1l2452:	
  6014                           ;incstack = 0
  6015                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
  6016                           
  6017                           
  6018                           ;mcc_generated_files/tmr2.c: 121:     static volatile unsigned int CountCallBack = 0;;mc
      +                          c_generated_files/tmr2.c: 124:     PIR1bits.TMR2IF = 0;
  6019  06A4  0020               	movlb	0	; select bank0
  6020  06A5  1091               	bcf	17,1	;volatile
  6021  06A6                     i1l2454:
  6022                           
  6023                           ;mcc_generated_files/tmr2.c: 127:     if (++CountCallBack >= 100)
  6024  06A6  3001               	movlw	1
  6025  06A7  07F8               	addwf	TMR2_ISR@CountCallBack,f	;volatile
  6026  06A8  3000               	movlw	0
  6027  06A9  3DF9               	addwfc	TMR2_ISR@CountCallBack+1,f	;volatile
  6028  06AA  3000               	movlw	0
  6029  06AB  0279               	subwf	TMR2_ISR@CountCallBack+1,w	;volatile
  6030  06AC  3064               	movlw	100
  6031  06AD  1903               	skipnz
  6032  06AE  0278               	subwf	TMR2_ISR@CountCallBack,w	;volatile
  6033  06AF  1C03               	skipc
  6034  06B0  2EB2               	goto	u170_21
  6035  06B1  2EB3               	goto	u170_20
  6036  06B2                     u170_21:
  6037  06B2  2EB8               	goto	i1l160
  6038  06B3                     u170_20:
  6039  06B3                     i1l2456:
  6040                           
  6041                           ;mcc_generated_files/tmr2.c: 128:     {;mcc_generated_files/tmr2.c: 130:         TMR2_Ca
      +                          llBack();
  6042  06B3  3186  26FC  3186   	fcall	_TMR2_CallBack
  6043  06B6                     i1l2458:
  6044                           
  6045                           ;mcc_generated_files/tmr2.c: 133:         CountCallBack = 0;
  6046  06B6  01F8               	clrf	TMR2_ISR@CountCallBack	;volatile
  6047  06B7  01F9               	clrf	TMR2_ISR@CountCallBack+1	;volatile
  6048  06B8                     i1l160:
  6049  06B8  0008               	return
  6050  06B9                     __end_of_TMR2_ISR:
  6051                           
  6052                           	psect	text38
  6053  06FC                     __ptext38:	
  6054 ;; *************** function _TMR2_CallBack *****************
  6055 ;; Defined at:
  6056 ;;		line 137 in file "mcc_generated_files/tmr2.c"
  6057 ;; Parameters:    Size  Location     Type
  6058 ;;		None
  6059 ;; Auto vars:     Size  Location     Type
  6060 ;;		None
  6061 ;; Return value:  Size  Location     Type
  6062 ;;                  1    wreg      void 
  6063 ;; Registers used:
  6064 ;;		wreg, status,2, status,0, pclath, cstack
  6065 ;; Tracked objects:
  6066 ;;		On entry : 0/0
  6067 ;;		On exit  : 0/0
  6068 ;;		Unchanged: 0/0
  6069 ;; Data sizes:     COMMON   BANK0   BANK1
  6070 ;;      Params:         0       0       0
  6071 ;;      Locals:         0       0       0
  6072 ;;      Temps:          0       0       0
  6073 ;;      Totals:         0       0       0
  6074 ;;Total ram usage:        0 bytes
  6075 ;; Hardware stack levels used: 1
  6076 ;; Hardware stack levels required when called: 4
  6077 ;; This function calls:
  6078 ;;		Absolute function
  6079 ;;		_TMR2_DefaultInterruptHandler
  6080 ;;		_sec_tick_work
  6081 ;; This function is called by:
  6082 ;;		_TMR2_ISR
  6083 ;; This function uses a non-reentrant model
  6084 ;;
  6085                           
  6086  06FC                     _TMR2_CallBack:	
  6087                           ;psect for function _TMR2_CallBack
  6088                           
  6089  06FC                     i1l2334:	
  6090                           ;incstack = 0
  6091                           ; Regs used in _TMR2_CallBack: [wreg+status,2+status,0+pclath+cstack]
  6092                           
  6093                           
  6094                           ;mcc_generated_files/tmr2.c: 141:     if(TMR2_InterruptHandler)
  6095  06FC  0020               	movlb	0	; select bank0
  6096  06FD  0862               	movf	_TMR2_InterruptHandler,w
  6097  06FE  0463               	iorwf	_TMR2_InterruptHandler+1,w
  6098  06FF  1903               	btfsc	3,2
  6099  0700  2F02               	goto	u156_21
  6100  0701  2F03               	goto	u156_20
  6101  0702                     u156_21:
  6102  0702  2F08               	goto	i1l164
  6103  0703                     u156_20:
  6104  0703                     i1l2336:
  6105                           
  6106                           ;mcc_generated_files/tmr2.c: 142:     {;mcc_generated_files/tmr2.c: 143:         TMR2_In
      +                          terruptHandler();
  6107  0703  0863               	movf	_TMR2_InterruptHandler+1,w
  6108  0704  008A               	movwf	10
  6109  0705  0862               	movf	_TMR2_InterruptHandler,w
  6110  0706  000A               	callw
  6111  0707  3186               	pagesel	$
  6112  0708                     i1l164:
  6113  0708  0008               	return
  6114  0709                     __end_of_TMR2_CallBack:
  6115                           
  6116                           	psect	text39
  6117  0775                     __ptext39:	
  6118 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  6119 ;; Defined at:
  6120 ;;		line 151 in file "mcc_generated_files/tmr2.c"
  6121 ;; Parameters:    Size  Location     Type
  6122 ;;		None
  6123 ;; Auto vars:     Size  Location     Type
  6124 ;;		None
  6125 ;; Return value:  Size  Location     Type
  6126 ;;                  1    wreg      void 
  6127 ;; Registers used:
  6128 ;;		None
  6129 ;; Tracked objects:
  6130 ;;		On entry : 0/0
  6131 ;;		On exit  : 0/0
  6132 ;;		Unchanged: 0/0
  6133 ;; Data sizes:     COMMON   BANK0   BANK1
  6134 ;;      Params:         0       0       0
  6135 ;;      Locals:         0       0       0
  6136 ;;      Temps:          0       0       0
  6137 ;;      Totals:         0       0       0
  6138 ;;Total ram usage:        0 bytes
  6139 ;; Hardware stack levels used: 1
  6140 ;; This function calls:
  6141 ;;		Nothing
  6142 ;; This function is called by:
  6143 ;;		_TMR2_Initialize
  6144 ;;		_TMR2_CallBack
  6145 ;; This function uses a non-reentrant model
  6146 ;;
  6147                           
  6148  0775                     _TMR2_DefaultInterruptHandler:	
  6149                           ;psect for function _TMR2_DefaultInterruptHandler
  6150                           
  6151  0775                     i1l170:	
  6152                           ;incstack = 0
  6153                           ; Regs used in _TMR2_DefaultInterruptHandler: []
  6154                           
  6155  0775  0008               	return
  6156  0776                     __end_of_TMR2_DefaultInterruptHandler:
  6157                           
  6158                           	psect	text40
  6159  0388                     __ptext40:	
  6160 ;; *************** function _sec_tick_work *****************
  6161 ;; Defined at:
  6162 ;;		line 310 in file "main.c"
  6163 ;; Parameters:    Size  Location     Type
  6164 ;;		None
  6165 ;; Auto vars:     Size  Location     Type
  6166 ;;		None
  6167 ;; Return value:  Size  Location     Type
  6168 ;;                  1    wreg      void 
  6169 ;; Registers used:
  6170 ;;		wreg, status,2, status,0, pclath, cstack
  6171 ;; Tracked objects:
  6172 ;;		On entry : 0/0
  6173 ;;		On exit  : 0/0
  6174 ;;		Unchanged: 0/0
  6175 ;; Data sizes:     COMMON   BANK0   BANK1
  6176 ;;      Params:         0       0       0
  6177 ;;      Locals:         0       0       0
  6178 ;;      Temps:          1       0       0
  6179 ;;      Totals:         1       0       0
  6180 ;;Total ram usage:        1 bytes
  6181 ;; Hardware stack levels used: 1
  6182 ;; Hardware stack levels required when called: 3
  6183 ;; This function calls:
  6184 ;;		_get_measure
  6185 ;;		_rele_tick
  6186 ;;		_toggle_tone
  6187 ;;		i1_switch_zum
  6188 ;; This function is called by:
  6189 ;;		_start_setup
  6190 ;;		_TMR2_CallBack
  6191 ;; This function uses a non-reentrant model
  6192 ;;
  6193                           
  6194  0388                     _sec_tick_work:	
  6195                           ;psect for function _sec_tick_work
  6196                           
  6197  0388                     i1l2138:	
  6198                           ;incstack = 0
  6199                           ; Regs used in _sec_tick_work: [wreg+status,2+status,0+pclath+cstack]
  6200                           
  6201                           
  6202                           ;main.c: 312:     switch_zum();
  6203  0388  3187  2709  3183   	fcall	i1_switch_zum
  6204  038B                     i1l2140:
  6205                           
  6206                           ;main.c: 314:     time_s++;
  6207  038B  3001               	movlw	1
  6208  038C  0020               	movlb	0	; select bank0
  6209  038D  07D5               	addwf	_time_s,f
  6210  038E  3000               	movlw	0
  6211  038F  1803               	skipnc
  6212  0390  3001               	movlw	1
  6213  0391  07D6               	addwf	_time_s+1,f
  6214  0392  3000               	movlw	0
  6215  0393  1803               	skipnc
  6216  0394  3001               	movlw	1
  6217  0395  07D7               	addwf	_time_s+2,f
  6218                           
  6219                           ;main.c: 315:     rele_tick();
  6220  0396  3185  2575  3183   	fcall	_rele_tick
  6221  0399  0064               	clrwdt	;# 
  6222  039A                     i1l2142:
  6223                           
  6224                           ;main.c: 317:     if (FLAGS.bits.ALARM) {
  6225  039A  1C7C               	btfss	_FLAGS,0
  6226  039B  2B9D               	goto	u125_21
  6227  039C  2B9E               	goto	u125_20
  6228  039D                     u125_21:
  6229  039D  2BAE               	goto	i1l2148
  6230  039E                     u125_20:
  6231  039E                     i1l2144:
  6232  039E  1003               	clrc
  6233  039F  0022               	movlb	2	; select bank2
  6234  03A0  1E0C               	btfss	12,4	;volatile
  6235  03A1  1403               	setc
  6236  03A2  1803               	btfsc	3,0
  6237  03A3  2BA5               	goto	u126_21
  6238  03A4  2BA8               	goto	u126_20
  6239  03A5                     u126_21:
  6240  03A5  0022               	movlb	2	; select bank2
  6241  03A6  160C               	bsf	12,4	;volatile
  6242  03A7  2BAA               	goto	u127_24
  6243  03A8                     u126_20:
  6244  03A8  0022               	movlb	2	; select bank2
  6245  03A9  120C               	bcf	12,4	;volatile
  6246  03AA                     u127_24:
  6247  03AA                     i1l2146:
  6248                           
  6249                           ;main.c: 319:         toggle_tone();
  6250  03AA  3187  2720  3183   	fcall	_toggle_tone
  6251                           
  6252                           ;main.c: 320:     } else {
  6253  03AD  2BC8               	goto	i1l431
  6254  03AE                     i1l2148:
  6255                           
  6256                           ;main.c: 321:         get_measure();
  6257  03AE  3184  24B8  3183   	fcall	_get_measure
  6258  03B1                     i1l2150:
  6259                           
  6260                           ;main.c: 322:         static char iled;;main.c: 323:         iled++;
  6261  03B1  3001               	movlw	1
  6262  03B2  00F7               	movwf	??_sec_tick_work
  6263  03B3  0877               	movf	??_sec_tick_work,w
  6264  03B4  07FA               	addwf	sec_tick_work@iled,f
  6265  03B5                     i1l2152:
  6266                           
  6267                           ;main.c: 324:         if (iled > 2) {
  6268  03B5  3003               	movlw	3
  6269  03B6  027A               	subwf	sec_tick_work@iled,w
  6270  03B7  1C03               	skipc
  6271  03B8  2BBA               	goto	u128_21
  6272  03B9  2BBB               	goto	u128_20
  6273  03BA                     u128_21:
  6274  03BA  2BC8               	goto	i1l431
  6275  03BB                     u128_20:
  6276  03BB                     i1l2154:
  6277  03BB  1003               	clrc
  6278  03BC  0022               	movlb	2	; select bank2
  6279  03BD  1E0C               	btfss	12,4	;volatile
  6280  03BE  1403               	setc
  6281  03BF  1803               	btfsc	3,0
  6282  03C0  2BC2               	goto	u129_21
  6283  03C1  2BC5               	goto	u129_20
  6284  03C2                     u129_21:
  6285  03C2  0022               	movlb	2	; select bank2
  6286  03C3  160C               	bsf	12,4	;volatile
  6287  03C4  2BC7               	goto	u130_24
  6288  03C5                     u129_20:
  6289  03C5  0022               	movlb	2	; select bank2
  6290  03C6  120C               	bcf	12,4	;volatile
  6291  03C7                     u130_24:
  6292  03C7                     i1l2156:
  6293                           
  6294                           ;main.c: 326:             iled = 0;
  6295  03C7  01FA               	clrf	sec_tick_work@iled
  6296  03C8                     i1l431:
  6297  03C8  0008               	return
  6298  03C9                     __end_of_sec_tick_work:
  6299                           
  6300                           	psect	text41
  6301  0720                     __ptext41:	
  6302 ;; *************** function _toggle_tone *****************
  6303 ;; Defined at:
  6304 ;;		line 75 in file "main.c"
  6305 ;; Parameters:    Size  Location     Type
  6306 ;;		None
  6307 ;; Auto vars:     Size  Location     Type
  6308 ;;		None
  6309 ;; Return value:  Size  Location     Type
  6310 ;;                  1    wreg      void 
  6311 ;; Registers used:
  6312 ;;		status,0
  6313 ;; Tracked objects:
  6314 ;;		On entry : 0/0
  6315 ;;		On exit  : 0/0
  6316 ;;		Unchanged: 0/0
  6317 ;; Data sizes:     COMMON   BANK0   BANK1
  6318 ;;      Params:         0       0       0
  6319 ;;      Locals:         0       0       0
  6320 ;;      Temps:          0       0       0
  6321 ;;      Totals:         0       0       0
  6322 ;;Total ram usage:        0 bytes
  6323 ;; Hardware stack levels used: 1
  6324 ;; This function calls:
  6325 ;;		Nothing
  6326 ;; This function is called by:
  6327 ;;		_sec_tick_work
  6328 ;; This function uses a non-reentrant model
  6329 ;;
  6330                           
  6331  0720                     _toggle_tone:	
  6332                           ;psect for function _toggle_tone
  6333                           
  6334  0720                     i1l2010:	
  6335                           ;incstack = 0
  6336                           ; Regs used in _toggle_tone: [status,0]
  6337                           
  6338                           
  6339                           ;main.c: 76:     INTCONbits.TMR0IE = ~INTCONbits.TMR0IE;
  6340  0720  1003               	clrc
  6341  0721  1E8B               	btfss	11,5	;volatile
  6342  0722  1403               	setc
  6343  0723  1803               	btfsc	3,0
  6344  0724  2F26               	goto	u110_21
  6345  0725  2F28               	goto	u110_20
  6346  0726                     u110_21:
  6347  0726  168B               	bsf	11,5	;volatile
  6348  0727  2F29               	goto	u111_24
  6349  0728                     u110_20:
  6350  0728  128B               	bcf	11,5	;volatile
  6351  0729                     u111_24:
  6352  0729                     i1l276:
  6353  0729  0008               	return
  6354  072A                     __end_of_toggle_tone:
  6355                           
  6356                           	psect	text42
  6357  0575                     __ptext42:	
  6358 ;; *************** function _rele_tick *****************
  6359 ;; Defined at:
  6360 ;;		line 289 in file "main.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;		None
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;		None
  6365 ;; Return value:  Size  Location     Type
  6366 ;;                  1    wreg      void 
  6367 ;; Registers used:
  6368 ;;		wreg, status,2, status,0
  6369 ;; Tracked objects:
  6370 ;;		On entry : 0/0
  6371 ;;		On exit  : 0/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMMON   BANK0   BANK1
  6374 ;;      Params:         0       0       0
  6375 ;;      Locals:         0       0       0
  6376 ;;      Temps:          2       0       0
  6377 ;;      Totals:         2       0       0
  6378 ;;Total ram usage:        2 bytes
  6379 ;; Hardware stack levels used: 1
  6380 ;; This function calls:
  6381 ;;		Nothing
  6382 ;; This function is called by:
  6383 ;;		_sec_tick_work
  6384 ;; This function uses a non-reentrant model
  6385 ;;
  6386                           
  6387  0575                     _rele_tick:	
  6388                           ;psect for function _rele_tick
  6389                           
  6390  0575                     i1l2032:	
  6391                           ;incstack = 0
  6392                           ; Regs used in _rele_tick: [wreg+status,2+status,0]
  6393                           
  6394                           
  6395                           ;main.c: 290:     if (FLAGS.bits.RELE_POW_WAIT) {
  6396  0575  1EFC               	btfss	_FLAGS,5
  6397  0576  2D78               	goto	u115_21
  6398  0577  2D79               	goto	u115_20
  6399  0578                     u115_21:
  6400  0578  2D9E               	goto	i1l419
  6401  0579                     u115_20:
  6402  0579                     i1l2034:
  6403                           
  6404                           ;main.c: 291:         if (time_pow_s > 0) {
  6405  0579  0020               	movlb	0	; select bank0
  6406  057A  085E               	movf	_time_pow_s,w
  6407  057B  1903               	btfsc	3,2
  6408  057C  2D7E               	goto	u116_21
  6409  057D  2D7F               	goto	u116_20
  6410  057E                     u116_21:
  6411  057E  2D82               	goto	i1l409
  6412  057F                     u116_20:
  6413  057F                     i1l2036:
  6414                           
  6415                           ;main.c: 292:             time_pow_s--;
  6416  057F  3001               	movlw	1
  6417  0580  02DE               	subwf	_time_pow_s,f
  6418                           
  6419                           ;main.c: 293:         } else {
  6420  0581  2D9E               	goto	i1l419
  6421  0582                     i1l409:
  6422                           
  6423                           ;main.c: 294:             if (FLAGS.bits.RELE_CON_WAIT) {
  6424  0582  1F7C               	btfss	_FLAGS,6
  6425  0583  2D85               	goto	u117_21
  6426  0584  2D86               	goto	u117_20
  6427  0585                     u117_21:
  6428  0585  2D9A               	goto	i1l417
  6429  0586                     u117_20:
  6430  0586                     i1l412:	
  6431                           ;main.c: 295:                 do { LATCbits.LATC5 = 0; } while(0);
  6432                           
  6433  0586  0022               	movlb	2	; select bank2
  6434  0587  128E               	bcf	14,5	;volatile
  6435  0588                     i1l2038:
  6436                           
  6437                           ;main.c: 296:                 _delay((unsigned long)((5 * 1000)*(16000000/4000.0)));
  6438  0588  3066               	movlw	102
  6439  0589  00F1               	movwf	??_rele_tick+1
  6440  058A  3076               	movlw	118
  6441  058B  00F0               	movwf	??_rele_tick
  6442  058C  30C1               	movlw	193
  6443  058D                     u215_27:
  6444  058D  0B89               	decfsz	9,f
  6445  058E  2D8D               	goto	u215_27
  6446  058F  0BF0               	decfsz	??_rele_tick,f
  6447  0590  2D8D               	goto	u215_27
  6448  0591  0BF1               	decfsz	??_rele_tick+1,f
  6449  0592  2D8D               	goto	u215_27
  6450  0593  0000               	nop
  6451  0594                     i1l2040:
  6452  0594  0022               	movlb	2	; select bank2
  6453  0595  120E               	bcf	14,4	;volatile
  6454  0596                     i1l2042:
  6455                           
  6456                           ;main.c: 298:                 FLAGS.bits.CLOSED = 1;
  6457  0596  157C               	bsf	_FLAGS,2
  6458  0597                     i1l2044:
  6459                           
  6460                           ;main.c: 299:                 FLAGS.bits.RELE_CON_WAIT = 0;
  6461  0597  137C               	bcf	_FLAGS,6
  6462  0598                     i1l2046:
  6463                           
  6464                           ;main.c: 300:                 FLAGS.bits.RELE_POW_WAIT = 0;
  6465  0598  12FC               	bcf	_FLAGS,5
  6466                           
  6467                           ;main.c: 301:             } else {
  6468  0599  2D9E               	goto	i1l419
  6469  059A                     i1l417:	
  6470                           ;main.c: 302:                 do { LATCbits.LATC5 = 0; } while(0);
  6471                           
  6472  059A  0022               	movlb	2	; select bank2
  6473  059B  128E               	bcf	14,5	;volatile
  6474  059C                     i1l418:
  6475                           
  6476                           ;main.c: 303:                 FLAGS.bits.CLOSED = 0;
  6477  059C  117C               	bcf	_FLAGS,2
  6478                           
  6479                           ;main.c: 304:                 FLAGS.bits.RELE_POW_WAIT = 0;
  6480  059D  12FC               	bcf	_FLAGS,5
  6481  059E                     i1l419:
  6482  059E  0008               	return
  6483  059F                     __end_of_rele_tick:
  6484                           
  6485                           	psect	text43
  6486  04B8                     __ptext43:	
  6487 ;; *************** function _get_measure *****************
  6488 ;; Defined at:
  6489 ;;		line 132 in file "main.c"
  6490 ;; Parameters:    Size  Location     Type
  6491 ;;		None
  6492 ;; Auto vars:     Size  Location     Type
  6493 ;;  res             2    5[COMMON] unsigned int 
  6494 ;; Return value:  Size  Location     Type
  6495 ;;                  1    wreg      void 
  6496 ;; Registers used:
  6497 ;;		wreg, status,2, status,0, pclath, cstack
  6498 ;; Tracked objects:
  6499 ;;		On entry : 0/0
  6500 ;;		On exit  : 0/0
  6501 ;;		Unchanged: 0/0
  6502 ;; Data sizes:     COMMON   BANK0   BANK1
  6503 ;;      Params:         0       0       0
  6504 ;;      Locals:         2       0       0
  6505 ;;      Temps:          1       0       0
  6506 ;;      Totals:         3       0       0
  6507 ;;Total ram usage:        3 bytes
  6508 ;; Hardware stack levels used: 1
  6509 ;; Hardware stack levels required when called: 2
  6510 ;; This function calls:
  6511 ;;		_start_alarm
  6512 ;;		i1_ADC_GetConversion
  6513 ;; This function is called by:
  6514 ;;		_sec_tick_work
  6515 ;; This function uses a non-reentrant model
  6516 ;;
  6517                           
  6518  04B8                     _get_measure:	
  6519                           ;psect for function _get_measure
  6520                           
  6521  04B8                     i1l325:	
  6522                           ;incstack = 0
  6523                           ; Regs used in _get_measure: [wreg+status,2+status,0+pclath+cstack]
  6524                           ;main.c: 133:     static unsigned char measures;;main.c: 134:     do { LATCbits.LATC1 = 
      +                          1; } while(0);
  6525                           
  6526  04B8  0022               	movlb	2	; select bank2
  6527  04B9  148E               	bsf	14,1	;volatile
  6528  04BA                     i1l327:	
  6529                           ;main.c: 135:     do { ANSELCbits.ANSC3 = 1; } while(0);
  6530                           
  6531  04BA  0023               	movlb	3	; select bank3
  6532  04BB  158E               	bsf	14,3	;volatile
  6533  04BC                     i1l2012:
  6534                           
  6535                           ;main.c: 136:     unsigned res = ADC_GetConversion(PIN_WSP_STATE);
  6536  04BC  3007               	movlw	7
  6537  04BD  3186  2619  3184   	fcall	i1_ADC_GetConversion
  6538  04C0  0871               	movf	?i1_ADC_GetConversion+1,w
  6539  04C1  00F6               	movwf	get_measure@res+1
  6540  04C2  0870               	movf	?i1_ADC_GetConversion,w
  6541  04C3  00F5               	movwf	get_measure@res
  6542  04C4                     i1l2014:
  6543  04C4  0023               	movlb	3	; select bank3
  6544  04C5  118E               	bcf	14,3	;volatile
  6545  04C6                     i1l2016:
  6546  04C6  0022               	movlb	2	; select bank2
  6547  04C7  108E               	bcf	14,1	;volatile
  6548  04C8                     i1l2018:
  6549                           
  6550                           ;main.c: 139:     if (res < BAD_WSP_VOLTAGE) measures++;
  6551  04C8  304E               	movlw	78
  6552  04C9  0276               	subwf	get_measure@res+1,w
  6553  04CA  3020               	movlw	32
  6554  04CB  1903               	skipnz
  6555  04CC  0275               	subwf	get_measure@res,w
  6556  04CD  1803               	skipnc
  6557  04CE  2CD0               	goto	u112_21
  6558  04CF  2CD1               	goto	u112_20
  6559  04D0                     u112_21:
  6560  04D0  2CD6               	goto	i1l2022
  6561  04D1                     u112_20:
  6562  04D1                     i1l2020:
  6563  04D1  3001               	movlw	1
  6564  04D2  00F4               	movwf	??_get_measure
  6565  04D3  0874               	movf	??_get_measure,w
  6566  04D4  07FB               	addwf	get_measure@measures,f
  6567  04D5  2CE0               	goto	i1l2026
  6568  04D6                     i1l2022:
  6569  04D6  309C               	movlw	156
  6570  04D7  0276               	subwf	get_measure@res+1,w
  6571  04D8  3041               	movlw	65
  6572  04D9  1903               	skipnz
  6573  04DA  0275               	subwf	get_measure@res,w
  6574  04DB  1C03               	skipc
  6575  04DC  2CDE               	goto	u113_21
  6576  04DD  2CDF               	goto	u113_20
  6577  04DE                     u113_21:
  6578  04DE  2CE0               	goto	i1l2026
  6579  04DF                     u113_20:
  6580  04DF                     i1l2024:
  6581  04DF  01FB               	clrf	get_measure@measures
  6582  04E0                     i1l2026:
  6583                           
  6584                           ;main.c: 141:     if (measures > 2) start_alarm();
  6585  04E0  3003               	movlw	3
  6586  04E1  027B               	subwf	get_measure@measures,w
  6587  04E2  1C03               	skipc
  6588  04E3  2CE5               	goto	u114_21
  6589  04E4  2CE6               	goto	u114_20
  6590  04E5                     u114_21:
  6591  04E5  2CE9               	goto	i1l337
  6592  04E6                     u114_20:
  6593  04E6                     i1l2028:
  6594  04E6  3186  26DC  3184   	fcall	_start_alarm
  6595  04E9                     i1l337:
  6596  04E9  0008               	return
  6597  04EA                     __end_of_get_measure:
  6598                           
  6599                           	psect	text44
  6600  0619                     __ptext44:	
  6601 ;; *************** function i1_ADC_GetConversion *****************
  6602 ;; Defined at:
  6603 ;;		line 112 in file "mcc_generated_files/adc.c"
  6604 ;; Parameters:    Size  Location     Type
  6605 ;;  channel         1    wreg     enum E2178
  6606 ;; Auto vars:     Size  Location     Type
  6607 ;;  channel         1    3[COMMON] enum E2178
  6608 ;; Return value:  Size  Location     Type
  6609 ;;                  2    0[COMMON] unsigned short 
  6610 ;; Registers used:
  6611 ;;		wreg, status,2, status,0
  6612 ;; Tracked objects:
  6613 ;;		On entry : 0/0
  6614 ;;		On exit  : 0/0
  6615 ;;		Unchanged: 0/0
  6616 ;; Data sizes:     COMMON   BANK0   BANK1
  6617 ;;      Params:         2       0       0
  6618 ;;      Locals:         1       0       0
  6619 ;;      Temps:          1       0       0
  6620 ;;      Totals:         4       0       0
  6621 ;;Total ram usage:        4 bytes
  6622 ;; Hardware stack levels used: 1
  6623 ;; This function calls:
  6624 ;;		Nothing
  6625 ;; This function is called by:
  6626 ;;		_get_measure
  6627 ;; This function uses a non-reentrant model
  6628 ;;
  6629                           
  6630  0619                     i1_ADC_GetConversion:	
  6631                           ;psect for function i1_ADC_GetConversion
  6632                           
  6633                           
  6634                           ;incstack = 0
  6635                           ; Regs used in i1_ADC_GetConversion: [wreg+status,2+status,0]
  6636                           ;i1ADC_GetConversion@channel stored from wreg
  6637  0619  00F3               	movwf	i1ADC_GetConversion@channel
  6638  061A                     i1l1994:
  6639                           
  6640                           ;mcc_generated_files/adc.c: 112: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 113: {;mcc_generated_files/adc.c: 115:     ADCON0bits.CHS = ch
      +                          annel;
  6641  061A  0873               	movf	i1ADC_GetConversion@channel,w
  6642  061B  00F2               	movwf	??i1_ADC_GetConversion
  6643  061C  0DF2               	rlf	??i1_ADC_GetConversion,f
  6644  061D  0DF2               	rlf	??i1_ADC_GetConversion,f
  6645  061E  0021               	movlb	1	; select bank1
  6646  061F  081D               	movf	29,w	;volatile
  6647  0620  0672               	xorwf	??i1_ADC_GetConversion,w
  6648  0621  3983               	andlw	-125
  6649  0622  0672               	xorwf	??i1_ADC_GetConversion,w
  6650  0623  009D               	movwf	29	;volatile
  6651  0624                     i1l1996:
  6652                           
  6653                           ;mcc_generated_files/adc.c: 118:     ADCON0bits.ADON = 1;
  6654  0624  141D               	bsf	29,0	;volatile
  6655  0625                     i1l1998:
  6656                           
  6657                           ;mcc_generated_files/adc.c: 121:     _delay((unsigned long)((5)*(16000000/4000000.0)));
  6658  0625  3006               	movlw	6
  6659  0626                     u216_27:
  6660  0626  0B89               	decfsz	9,f
  6661  0627  2E26               	goto	u216_27
  6662  0628  3200               	nop2
  6663  0629                     i1l2000:
  6664                           
  6665                           ;mcc_generated_files/adc.c: 124:     ADCON0bits.GO_nDONE = 1;
  6666  0629  0021               	movlb	1	; select bank1
  6667  062A  149D               	bsf	29,1	;volatile
  6668  062B                     i1l63:	
  6669                           ;mcc_generated_files/adc.c: 128:     {;mcc_generated_files/adc.c: 129:     }
  6670                           
  6671                           
  6672                           ;mcc_generated_files/adc.c: 127:     while (ADCON0bits.GO_nDONE)
  6673  062B  189D               	btfsc	29,1	;volatile
  6674  062C  2E2E               	goto	u109_21
  6675  062D  2E2F               	goto	u109_20
  6676  062E                     u109_21:
  6677  062E  2E2B               	goto	i1l63
  6678  062F                     u109_20:
  6679  062F                     i1l2002:
  6680                           
  6681                           ;mcc_generated_files/adc.c: 132:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  6682  062F  081C               	movf	28,w	;volatile
  6683  0630  00F1               	movwf	?i1_ADC_GetConversion+1
  6684  0631  081B               	movf	27,w	;volatile
  6685  0632  00F0               	movwf	?i1_ADC_GetConversion
  6686  0633                     i1l66:
  6687  0633  0008               	return
  6688  0634                     __end_ofi1_ADC_GetConversion:
  6689                           
  6690                           	psect	text45
  6691  06DC                     __ptext45:	
  6692 ;; *************** function _start_alarm *****************
  6693 ;; Defined at:
  6694 ;;		line 121 in file "main.c"
  6695 ;; Parameters:    Size  Location     Type
  6696 ;;		None
  6697 ;; Auto vars:     Size  Location     Type
  6698 ;;		None
  6699 ;; Return value:  Size  Location     Type
  6700 ;;                  1    wreg      void 
  6701 ;; Registers used:
  6702 ;;		wreg, status,2, status,0, pclath, cstack
  6703 ;; Tracked objects:
  6704 ;;		On entry : 0/0
  6705 ;;		On exit  : 0/0
  6706 ;;		Unchanged: 0/0
  6707 ;; Data sizes:     COMMON   BANK0   BANK1
  6708 ;;      Params:         0       0       0
  6709 ;;      Locals:         0       0       0
  6710 ;;      Temps:          0       0       0
  6711 ;;      Totals:         0       0       0
  6712 ;;Total ram usage:        0 bytes
  6713 ;; Hardware stack levels used: 1
  6714 ;; Hardware stack levels required when called: 1
  6715 ;; This function calls:
  6716 ;;		i1_go_close
  6717 ;;		i1_go_close_alt
  6718 ;; This function is called by:
  6719 ;;		_get_measure
  6720 ;; This function uses a non-reentrant model
  6721 ;;
  6722                           
  6723  06DC                     _start_alarm:	
  6724                           ;psect for function _start_alarm
  6725                           
  6726  06DC                     i1l1978:	
  6727                           ;incstack = 0
  6728                           ; Regs used in _start_alarm: [wreg+status,2+status,0+pclath+cstack]
  6729                           
  6730                           
  6731                           ;main.c: 122:     FLAGS.bits.ALARM = 1;
  6732  06DC  147C               	bsf	_FLAGS,0
  6733  06DD                     i1l316:	
  6734                           ;main.c: 123:     do { LATCbits.LATC0 = 1; } while(0);
  6735                           
  6736  06DD  0022               	movlb	2	; select bank2
  6737  06DE  140E               	bsf	14,0	;volatile
  6738  06DF                     i1l317:
  6739                           
  6740                           ;main.c: 124:     INTCONbits.TMR0IE = 1;
  6741  06DF  168B               	bsf	11,5	;volatile
  6742                           
  6743                           ;main.c: 125:     if (FLAGS.bits.NORMAL_WORK_MODE) {
  6744  06E0  1CFC               	btfss	_FLAGS,1
  6745  06E1  2EE3               	goto	u106_21
  6746  06E2  2EE4               	goto	u106_20
  6747  06E3                     u106_21:
  6748  06E3  2EE8               	goto	i1l1982
  6749  06E4                     u106_20:
  6750  06E4                     i1l1980:
  6751                           
  6752                           ;main.c: 126:         go_close();
  6753  06E4  3185  25DF  3186   	fcall	i1_go_close
  6754                           
  6755                           ;main.c: 127:     } else {
  6756  06E7  2EEB               	goto	i1l320
  6757  06E8                     i1l1982:
  6758                           
  6759                           ;main.c: 128:         go_close_alt();
  6760  06E8  3187  275C  3186   	fcall	i1_go_close_alt
  6761  06EB                     i1l320:
  6762  06EB  0008               	return
  6763  06EC                     __end_of_start_alarm:
  6764                           
  6765                           	psect	text46
  6766  075C                     __ptext46:	
  6767 ;; *************** function i1_go_close_alt *****************
  6768 ;; Defined at:
  6769 ;;		line 108 in file "main.c"
  6770 ;; Parameters:    Size  Location     Type
  6771 ;;		None
  6772 ;; Auto vars:     Size  Location     Type
  6773 ;;		None
  6774 ;; Return value:  Size  Location     Type
  6775 ;;                  1    wreg      void 
  6776 ;; Registers used:
  6777 ;;		None
  6778 ;; Tracked objects:
  6779 ;;		On entry : 0/0
  6780 ;;		On exit  : 0/0
  6781 ;;		Unchanged: 0/0
  6782 ;; Data sizes:     COMMON   BANK0   BANK1
  6783 ;;      Params:         0       0       0
  6784 ;;      Locals:         0       0       0
  6785 ;;      Temps:          0       0       0
  6786 ;;      Totals:         0       0       0
  6787 ;;Total ram usage:        0 bytes
  6788 ;; Hardware stack levels used: 1
  6789 ;; This function calls:
  6790 ;;		Nothing
  6791 ;; This function is called by:
  6792 ;;		_start_alarm
  6793 ;; This function uses a non-reentrant model
  6794 ;;
  6795                           
  6796  075C                     i1_go_close_alt:	
  6797                           ;psect for function i1_go_close_alt
  6798                           
  6799  075C                     i1l1976:	
  6800                           ;incstack = 0
  6801                           ; Regs used in i1_go_close_alt: []
  6802                           
  6803                           
  6804                           ;main.c: 109:     FLAGS.bits.CLOSED = 1;
  6805  075C  157C               	bsf	_FLAGS,2
  6806  075D                     i1l302:	
  6807                           ;main.c: 110:     do { LATCbits.LATC4 = 0; } while(0);
  6808                           
  6809  075D  0022               	movlb	2	; select bank2
  6810  075E  120E               	bcf	14,4	;volatile
  6811  075F                     i1l304:	
  6812                           ;main.c: 111:     do { LATCbits.LATC5 = 1; } while(0);
  6813                           
  6814  075F  168E               	bsf	14,5	;volatile
  6815  0760                     i1l306:
  6816  0760  0008               	return
  6817  0761                     __end_ofi1_go_close_alt:
  6818                           
  6819                           	psect	text47
  6820  05DF                     __ptext47:	
  6821 ;; *************** function i1_go_close *****************
  6822 ;; Defined at:
  6823 ;;		line 89 in file "main.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;		None
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;		None
  6828 ;; Return value:  Size  Location     Type
  6829 ;;                  1    wreg      void 
  6830 ;; Registers used:
  6831 ;;		wreg
  6832 ;; Tracked objects:
  6833 ;;		On entry : 0/0
  6834 ;;		On exit  : 0/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMMON   BANK0   BANK1
  6837 ;;      Params:         0       0       0
  6838 ;;      Locals:         0       0       0
  6839 ;;      Temps:          2       0       0
  6840 ;;      Totals:         2       0       0
  6841 ;;Total ram usage:        2 bytes
  6842 ;; Hardware stack levels used: 1
  6843 ;; This function calls:
  6844 ;;		Nothing
  6845 ;; This function is called by:
  6846 ;;		_start_alarm
  6847 ;; This function uses a non-reentrant model
  6848 ;;
  6849                           
  6850  05DF                     i1_go_close:	
  6851                           ;psect for function i1_go_close
  6852                           
  6853  05DF                     i1l1964:	
  6854                           ;incstack = 0
  6855                           ; Regs used in i1_go_close: [wreg]
  6856                           
  6857                           
  6858                           ;main.c: 90:     time_s = 0;
  6859  05DF  3000               	movlw	0
  6860  05E0  0020               	movlb	0	; select bank0
  6861  05E1  00D5               	movwf	_time_s
  6862  05E2  3000               	movlw	0
  6863  05E3  00D6               	movwf	_time_s+1
  6864  05E4  3000               	movlw	0
  6865  05E5  00D7               	movwf	_time_s+2
  6866  05E6                     i1l1966:
  6867  05E6  0022               	movlb	2	; select bank2
  6868  05E7  160E               	bsf	14,4	;volatile
  6869  05E8                     i1l289:
  6870                           
  6871                           ;main.c: 92:     _delay((unsigned long)((5 * 1000)*(16000000/4000.0)));
  6872  05E8  3066               	movlw	102
  6873  05E9  00F1               	movwf	??i1_go_close+1
  6874  05EA  3076               	movlw	118
  6875  05EB  00F0               	movwf	??i1_go_close
  6876  05EC  30C1               	movlw	193
  6877  05ED                     u217_27:
  6878  05ED  0B89               	decfsz	9,f
  6879  05EE  2DED               	goto	u217_27
  6880  05EF  0BF0               	decfsz	??i1_go_close,f
  6881  05F0  2DED               	goto	u217_27
  6882  05F1  0BF1               	decfsz	??i1_go_close+1,f
  6883  05F2  2DED               	goto	u217_27
  6884  05F3  0000               	nop
  6885  05F4                     i1l1968:
  6886  05F4  0022               	movlb	2	; select bank2
  6887  05F5  168E               	bsf	14,5	;volatile
  6888  05F6                     i1l291:
  6889                           
  6890                           ;main.c: 94:     time_pow_s = 20;
  6891  05F6  3014               	movlw	20
  6892  05F7  00F0               	movwf	??i1_go_close
  6893  05F8  0870               	movf	??i1_go_close,w
  6894  05F9  0020               	movlb	0	; select bank0
  6895  05FA  00DE               	movwf	_time_pow_s
  6896  05FB                     i1l1970:
  6897                           
  6898                           ;main.c: 95:     FLAGS.bits.RELE_POW_WAIT = 1;
  6899  05FB  16FC               	bsf	_FLAGS,5
  6900  05FC                     i1l1972:
  6901                           
  6902                           ;main.c: 96:     FLAGS.bits.RELE_CON_WAIT = 1;
  6903  05FC  177C               	bsf	_FLAGS,6
  6904  05FD                     i1l292:
  6905  05FD  0008               	return
  6906  05FE                     __end_ofi1_go_close:
  6907                           
  6908                           	psect	text48
  6909  06EC                     __ptext48:	
  6910 ;; *************** function _TMR0_ISR *****************
  6911 ;; Defined at:
  6912 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  6913 ;; Parameters:    Size  Location     Type
  6914 ;;		None
  6915 ;; Auto vars:     Size  Location     Type
  6916 ;;		None
  6917 ;; Return value:  Size  Location     Type
  6918 ;;                  1    wreg      void 
  6919 ;; Registers used:
  6920 ;;		wreg, status,2, status,0, pclath, cstack
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMMON   BANK0   BANK1
  6926 ;;      Params:         0       0       0
  6927 ;;      Locals:         0       0       0
  6928 ;;      Temps:          0       0       0
  6929 ;;      Totals:         0       0       0
  6930 ;;Total ram usage:        0 bytes
  6931 ;; Hardware stack levels used: 1
  6932 ;; Hardware stack levels required when called: 1
  6933 ;; This function calls:
  6934 ;;		Absolute function
  6935 ;;		_TMR0_DefaultInterruptHandler
  6936 ;;		i1_switch_zum
  6937 ;; This function is called by:
  6938 ;;		_INTERRUPT_InterruptManager
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942  06EC                     _TMR0_ISR:	
  6943                           ;psect for function _TMR0_ISR
  6944                           
  6945  06EC                     i1l2444:	
  6946                           ;incstack = 0
  6947                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  6948                           
  6949                           
  6950                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
  6951  06EC  110B               	bcf	11,2	;volatile
  6952  06ED                     i1l2446:
  6953                           
  6954                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
  6955  06ED  0020               	movlb	0	; select bank0
  6956  06EE  0864               	movf	_timer0ReloadVal,w	;volatile
  6957  06EF  0095               	movwf	21	;volatile
  6958  06F0                     i1l2448:
  6959                           
  6960                           ;mcc_generated_files/tmr0.c: 116:     if(TMR0_InterruptHandler)
  6961  06F0  0860               	movf	_TMR0_InterruptHandler,w
  6962  06F1  0461               	iorwf	_TMR0_InterruptHandler+1,w
  6963  06F2  1903               	btfsc	3,2
  6964  06F3  2EF5               	goto	u169_21
  6965  06F4  2EF6               	goto	u169_20
  6966  06F5                     u169_21:
  6967  06F5  2EFB               	goto	i1l200
  6968  06F6                     u169_20:
  6969  06F6                     i1l2450:
  6970                           
  6971                           ;mcc_generated_files/tmr0.c: 117:     {;mcc_generated_files/tmr0.c: 118:         TMR0_In
      +                          terruptHandler();
  6972  06F6  0861               	movf	_TMR0_InterruptHandler+1,w
  6973  06F7  008A               	movwf	10
  6974  06F8  0860               	movf	_TMR0_InterruptHandler,w
  6975  06F9  000A               	callw
  6976  06FA  3186               	pagesel	$
  6977  06FB                     i1l200:
  6978  06FB  0008               	return
  6979  06FC                     __end_of_TMR0_ISR:
  6980                           
  6981                           	psect	text49
  6982  0776                     __ptext49:	
  6983 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  6984 ;; Defined at:
  6985 ;;		line 129 in file "mcc_generated_files/tmr0.c"
  6986 ;; Parameters:    Size  Location     Type
  6987 ;;		None
  6988 ;; Auto vars:     Size  Location     Type
  6989 ;;		None
  6990 ;; Return value:  Size  Location     Type
  6991 ;;                  1    wreg      void 
  6992 ;; Registers used:
  6993 ;;		None
  6994 ;; Tracked objects:
  6995 ;;		On entry : 0/0
  6996 ;;		On exit  : 0/0
  6997 ;;		Unchanged: 0/0
  6998 ;; Data sizes:     COMMON   BANK0   BANK1
  6999 ;;      Params:         0       0       0
  7000 ;;      Locals:         0       0       0
  7001 ;;      Temps:          0       0       0
  7002 ;;      Totals:         0       0       0
  7003 ;;Total ram usage:        0 bytes
  7004 ;; Hardware stack levels used: 1
  7005 ;; This function calls:
  7006 ;;		Nothing
  7007 ;; This function is called by:
  7008 ;;		_TMR0_Initialize
  7009 ;;		_TMR0_ISR
  7010 ;; This function uses a non-reentrant model
  7011 ;;
  7012                           
  7013  0776                     _TMR0_DefaultInterruptHandler:	
  7014                           ;psect for function _TMR0_DefaultInterruptHandler
  7015                           
  7016  0776                     i1l206:	
  7017                           ;incstack = 0
  7018                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  7019                           
  7020  0776  0008               	return
  7021  0777                     __end_of_TMR0_DefaultInterruptHandler:
  7022                           
  7023                           	psect	text50
  7024  0709                     __ptext50:	
  7025 ;; *************** function i1_switch_zum *****************
  7026 ;; Defined at:
  7027 ;;		line 71 in file "main.c"
  7028 ;; Parameters:    Size  Location     Type
  7029 ;;		None
  7030 ;; Auto vars:     Size  Location     Type
  7031 ;;		None
  7032 ;; Return value:  Size  Location     Type
  7033 ;;                  1    wreg      void 
  7034 ;; Registers used:
  7035 ;;		status,0
  7036 ;; Tracked objects:
  7037 ;;		On entry : 0/0
  7038 ;;		On exit  : 0/0
  7039 ;;		Unchanged: 0/0
  7040 ;; Data sizes:     COMMON   BANK0   BANK1
  7041 ;;      Params:         0       0       0
  7042 ;;      Locals:         0       0       0
  7043 ;;      Temps:          0       0       0
  7044 ;;      Totals:         0       0       0
  7045 ;;Total ram usage:        0 bytes
  7046 ;; Hardware stack levels used: 1
  7047 ;; This function calls:
  7048 ;;		Nothing
  7049 ;; This function is called by:
  7050 ;;		_sec_tick_work
  7051 ;;		_TMR0_ISR
  7052 ;; This function uses a non-reentrant model
  7053 ;;
  7054                           
  7055  0709                     i1_switch_zum:	
  7056                           ;psect for function i1_switch_zum
  7057                           
  7058  0709                     i1l271:	
  7059                           ;incstack = 0
  7060                           ; Regs used in i1_switch_zum: [status,0]
  7061                           ;main.c: 72:     do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  7062                           
  7063  0709                     i1l2070:
  7064  0709  1003               	clrc
  7065  070A  0022               	movlb	2	; select bank2
  7066  070B  1E8C               	btfss	12,5	;volatile
  7067  070C  1403               	setc
  7068  070D  1803               	btfsc	3,0
  7069  070E  2F10               	goto	u120_21
  7070  070F  2F13               	goto	u120_20
  7071  0710                     u120_21:
  7072  0710  0022               	movlb	2	; select bank2
  7073  0711  168C               	bsf	12,5	;volatile
  7074  0712  2F15               	goto	u121_24
  7075  0713                     u120_20:
  7076  0713  0022               	movlb	2	; select bank2
  7077  0714  128C               	bcf	12,5	;volatile
  7078  0715                     u121_24:
  7079  0715                     i1l273:
  7080  0715  0008               	return
  7081  0716                     __end_ofi1_switch_zum:
  7082  007E                     btemp	set	126	;btemp
  7083  007E                     int$flags	set	126
  7084  007E                     wtemp0	set	126
  7085                           
  7086                           	psect	idloc
  7087                           
  7088                           ;Config register IDLOC0 @ 0x8000
  7089                           ;	unspecified, using default values
  7090  8000                     	org	32768
  7091  8000  3FFF               	dw	16383
  7092                           
  7093                           ;Config register IDLOC1 @ 0x8001
  7094                           ;	unspecified, using default values
  7095  8001                     	org	32769
  7096  8001  3FFF               	dw	16383
  7097                           
  7098                           ;Config register IDLOC2 @ 0x8002
  7099                           ;	unspecified, using default values
  7100  8002                     	org	32770
  7101  8002  3FFF               	dw	16383
  7102                           
  7103                           ;Config register IDLOC3 @ 0x8003
  7104                           ;	unspecified, using default values
  7105  8003                     	org	32771
  7106  8003  3FFF               	dw	16383
  7107                           
  7108                           	psect	config
  7109                           
  7110                           ;Config register CONFIG1 @ 0x8007
  7111                           ;	Oscillator Selection
  7112                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  7113                           ;	Watchdog Timer Enable
  7114                           ;	WDTE = ON, WDT enabled
  7115                           ;	Power-up Timer Enable
  7116                           ;	PWRTE = OFF, PWRT disabled
  7117                           ;	MCLR Pin Function Select
  7118                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  7119                           ;	Flash Program Memory Code Protection
  7120                           ;	CP = OFF, Program memory code protection is disabled
  7121                           ;	Data Memory Code Protection
  7122                           ;	CPD = OFF, Data memory code protection is disabled
  7123                           ;	Brown-out Reset Enable
  7124                           ;	BOREN = ON, Brown-out Reset enabled
  7125                           ;	Clock Out Enable
  7126                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  7127                           ;	Internal/External Switchover
  7128                           ;	IESO = ON, Internal/External Switchover mode is enabled
  7129                           ;	Fail-Safe Clock Monitor Enable
  7130                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  7131  8007                     	org	32775
  7132  8007  3FFC               	dw	16380
  7133                           
  7134                           ;Config register CONFIG2 @ 0x8008
  7135                           ;	Flash Memory Self-Write Protection
  7136                           ;	WRT = OFF, Write protection off
  7137                           ;	PLL Enable
  7138                           ;	PLLEN = OFF, 4x PLL disabled
  7139                           ;	Stack Overflow/Underflow Reset Enable
  7140                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  7141                           ;	Brown-out Reset Voltage Selection
  7142                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  7143                           ;	Low-Voltage Programming Enable
  7144                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  7145  8008                     	org	32776
  7146  8008  1EFF               	dw	7935

Data Sizes:
    Strings     0
    Constant    9
    Data        0
    BSS         60
    Persistent  37
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80     41      69
    BANK1            32      0      32

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> switch_zum(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> i1_switch_zum(), switch_zum(), TMR0_DefaultInterruptHandler(), Absolute function(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> sec_tick_work(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> sec_tick_work(), Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR2_CallBack->_sec_tick_work
    _sec_tick_work->_get_measure
    _get_measure->i1_ADC_GetConversion
    _start_alarm->i1_go_close

Critical Paths under _main in BANK0

    _switch_wm->_beep
    _get_jump_full->_ADC_GetConversion
    _get_fun_full->_ADC_GetConversion
    _get_eeprom->_get_adr
    _get_eeprom->_get_time
    _get_time->_EEPROM_ReadShortLong
    _EEPROM_ReadShortLong->_EEPROM_ReadByte
    _get_adr->_EEPROM_ReadByte
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _povorot->_go_close
    _get_voltage->_EEPROM_WriteShortLong
    _EEPROM_WriteShortLong->_EEPROM_WriteByte
    _get_jump->_ADC_GetConversion
    _get_fun->_ADC_GetConversion
    _fun_work->_beep

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4929
                           _fun_work
                            _get_fun
                           _get_jump
                        _get_voltage
                            _povorot
                        _start_setup
                          _switch_wm
 ---------------------------------------------------------------------------------
 (1) _switch_wm                                            1     1      0     396
                                              6 BANK0      1     1      0
                               _beep
                           _go_close
                       _go_close_alt
 ---------------------------------------------------------------------------------
 (1) _start_setup                                          0     0      0    2521
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
                         _get_eeprom
                       _get_fun_full
                      _get_jump_full
 ---------------------------------------------------------------------------------
 (2) _get_jump_full                                        4     4      0      70
                                              4 BANK0      4     4      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (2) _get_fun_full                                         4     4      0      70
                                              4 BANK0      4     4      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (2) _get_eeprom                                           0     0      0    1685
                            _get_adr
                           _get_time
 ---------------------------------------------------------------------------------
 (3) _get_time                                            25    25      0     977
                                             16 BANK0     25    25      0
               _EEPROM_ReadShortLong
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     196
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _EEPROM_ReadShortLong                                13    10      3     113
                                              3 BANK0     13    10      3
                    _EEPROM_ReadByte
 ---------------------------------------------------------------------------------
 (3) _get_adr                                             38    38      0     708
                                              3 BANK0     38    38      0
                    _EEPROM_ReadByte
 ---------------------------------------------------------------------------------
 (2) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     348
                     _ADC_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      1     1      0     174
                                              2 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR0_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _povorot                                              0     0      0       0
                           _go_close
                            _go_open
 ---------------------------------------------------------------------------------
 (1) _get_voltage                                          7     7      0    1526
                                             14 BANK0      7     7      0
                  _ADC_GetConversion
                    _EEPROM_ReadByte
                   _EEPROM_WriteByte
              _EEPROM_WriteShortLong
 ---------------------------------------------------------------------------------
 (2) _EEPROM_WriteShortLong                                9     6      3     777
                                              5 BANK0      9     6      3
                   _EEPROM_WriteByte
 ---------------------------------------------------------------------------------
 (3) _EEPROM_WriteByte                                     5     4      1     523
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (5) _EEPROM_ReadByte                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _get_jump                                             3     3      0      45
                                              4 BANK0      3     3      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (1) _get_fun                                              3     3      0      45
                                              4 BANK0      3     3      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversion                                    4     2      2      22
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _fun_work                                             1     1      0     396
                                              6 BANK0      1     1      0
                               _beep
                           _go_close
                       _go_close_alt
                            _go_open
                        _go_open_alt
 ---------------------------------------------------------------------------------
 (2) _go_open_alt                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _go_open                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _go_close_alt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _go_close                                             2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _beep                                                 6     5      1     396
                                              0 BANK0      6     5      1
                         _switch_zum
 ---------------------------------------------------------------------------------
 (3) _switch_zum                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           0     0      0      67
                           _TMR0_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR2_ISR                                             0     0      0      67
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (8) _TMR2_CallBack                                        0     0      0      67
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
                      _sec_tick_work *
 ---------------------------------------------------------------------------------
 (9) _sec_tick_work                                        1     1      0      67
                                              7 COMMON     1     1      0
                        _get_measure
                          _rele_tick
                        _toggle_tone
                       i1_switch_zum
 ---------------------------------------------------------------------------------
 (10) _toggle_tone                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _rele_tick                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _get_measure                                         3     3      0      67
                                              4 COMMON     3     3      0
                        _start_alarm
                i1_ADC_GetConversion
 ---------------------------------------------------------------------------------
 (11) i1_ADC_GetConversion                                 4     2      2      22
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (11) _start_alarm                                         0     0      0       0
                         i1_go_close
                     i1_go_close_alt
 ---------------------------------------------------------------------------------
 (12) i1_go_close_alt                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_go_close                                          2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                       i1_switch_zum *
 ---------------------------------------------------------------------------------
 (10) i1_switch_zum                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fun_work
     _beep
       _switch_zum
     _go_close
     _go_close_alt
     _go_open
     _go_open_alt
   _get_fun
     _ADC_GetConversion
   _get_jump
     _ADC_GetConversion
   _get_voltage
     _ADC_GetConversion
     _EEPROM_ReadByte
     _EEPROM_WriteByte
     _EEPROM_WriteShortLong
       _EEPROM_WriteByte
   _povorot
     _go_close
     _go_open
   _start_setup
     _SYSTEM_Initialize
       _ADC_Initialize
       _FVR_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
       _TMR2_Initialize
         _TMR2_SetInterruptHandler
       _WDT_Initialize
     _TMR0_SetInterruptHandler
     _TMR2_SetInterruptHandler
     _TMR2_StartTimer
     _get_eeprom
       _get_adr
         _EEPROM_ReadByte
       _get_time
         _EEPROM_ReadShortLong
           _EEPROM_ReadByte
         ___bmul
     _get_fun_full
       _ADC_GetConversion
     _get_jump_full
       _ADC_GetConversion
   _switch_wm
     _beep
     _go_close
     _go_close_alt

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
     i1_switch_zum *
   _TMR2_ISR
     _TMR2_CallBack
       Absolute function(Fake) *
       _TMR2_DefaultInterruptHandler *
       _sec_tick_work *
         _get_measure
           _start_alarm
             i1_go_close
             i1_go_close_alt
           i1_ADC_GetConversion
         _rele_tick
         _toggle_tone
         i1_switch_zum

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      72       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     29      45       6       86.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0      20       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      72       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Fri Apr 29 15:30:57 2022

        __end_of_TMR2_SetInterruptHandler 074C                          get_fun_full@flag 0027  
                      get_fun@fun_counter 005D                            ___bmul@product 0022  
                   __end_of_sec_tick_work 03C9                                        l31 0764  
                                      l25 0678                                        l28 073F  
                                      l63 05B4                                        l48 0731  
                                      l66 05BF                                        l92 06A3  
                                      _RD 0CA8                                        _WR 0CA9  
                           ?_go_close_alt 0070                              ?_get_voltage 0070  
                          ?_get_jump_full 0070                    __end_of_FVR_Initialize 0769  
                         _timer0ReloadVal 0064                                       l203 0751  
                                     l213 0768                                       l302 0758  
                                     l142 0774                                       l311 0755  
                                     l304 075A                                       l313 0756  
                                     l306 075B                                       l139 06CB  
                                     l403 0342                                       l309 0753  
                                     l405 0344                                       l342 0408  
                                     l510 0738                                       l271 06CF  
                                     l167 074B                                       l344 040A  
                                     l360 0231                                       l273 06DB  
                                     l362 0233                                       l291 05D7  
                                     l355 0445                                       l187 068E  
                                     l507 0131                                       l371 0273  
                                     l292 05DE                                       l380 0446  
                                     l436 0301                                       l285 0549  
                                     l445 0387                                       l373 0275  
                                     l453 0510                                       l454 0519  
                                     l295 0716                                       l375 0277  
                                     l535 04B7                                       l464 0230  
                                     l448 0504                                       l289 05C9  
                                     l297 0718                                       l561 054C  
                                     l570 064C                                       l394 0302  
                                     l299 071F                                       l564 0574  
                                     l389 047F                                       l486 01D4  
                                     l582 02BD                                       l567 0636  
                                     l579 0407                                       l764 0662  
                                     _GIE 005F                               _start_alarm 06DC  
                                     _PR2 001B                               _start_setup 0480  
                            ?_go_open_alt 0070                           _TMR2_Initialize 06B9  
                                     wreg 0009                                i1_go_close 05DF  
                             get_jump@res 0025                                      l2100 06B9  
                                    l2006 0746                                      l2110 06C8  
                                    l2102 06BC                                      l2008 074C  
                                    l2120 0686                                      l2112 0679  
                                    l2104 06BD                                      l2130 05B2  
                                    l2122 0687                                      l2114 067E  
                                    l2106 06BE                                      l2210 0165  
                                    l2202 014D                                      l2050 02A9  
                                    l2132 05B8                                      l2124 05A1  
                                    l2116 0681                                      l2108 06C0  
                                    l2220 0171                                      l2212 016B  
                                    l2204 0157                                      l2052 02B7  
                                    l2060 0654                                      l2300 00D5  
                                    l2126 05AD                                      l2118 0685  
                                    l2222 017A                                      l2214 0170  
                                    l2206 0160                                      l2230 0194  
                                    l2062 0658                                      l2310 00F7  
                                    l2302 00D7                                      l2136 06CF  
                                    l2128 05AE                                      l2160 0551  
                                    l2080 069A                                      l2072 068F  
                                    l2240 01A0                                      l2232 0198  
                                    l2224 0189                                      l2208 0161  
                                    l2048 027A                                      l2064 065A  
                                    l2056 064F                                      l2320 010C  
                                    l2304 00DB                                      l2400 026C  
                                    l2170 0566                                      l2162 0556  
                                    l2082 069F                                      l2074 0692  
                                    l2090 0761                                      l2330 0663  
                                    l2250 01C6                                      l2242 01B0  
                                    l2234 019E                                      l2226 018A  
                                    l2066 0661                                      l2058 0650  
                                    l2322 0110                                      l2306 00E1  
                                    l2410 030F                                      l2340 051E  
                                    l2500 0471                                      l2172 0568  
                                    l2164 0557                                      l2092 0765  
                                    l2084 0739                                      l2076 0695  
                                    l2332 0772                                      l2252 01CB  
                                    l2244 01B4                                      l2228 018E  
                                    l2180 0132                                      l2324 0116  
                                    l2316 00FA                                      l2308 00E5  
                                    l2260 0042                                      l2404 026E  
                                    l2420 032C                                      l2412 0318  
                                    l2350 0532                                      l2342 0520  
                                    l2502 0473                                      l2174 056A  
                                    l2166 0561                                      l2158 054C  
                                    l2510 02BE                                      l2094 072A  
                                    l2086 073C                                      l2078 0697  
                                    l2254 01D0                                      l2246 01B8  
                                    l2190 013E                                      l2182 0132  
                                    l2326 0128                                      l2318 0108  
                                    l2262 004C                                      l2422 032D  
                                    l2414 031D                                      l2406 0304  
                                    l2352 053E                                      l2344 0523  
                                    l2360 05D5                                      l2504 047A  
                                    l2176 056B                                      l2168 0565  
                                    l2440 03FE                                      l2600 0219  
                                    l2512 02CD                                      l2520 02DC  
                                    l2096 072D                                      l2088 073D  
                                    l2248 01BE                                      l2192 0146  
                                    l2184 013D                                      l2328 012D  
                                    l2280 008C                                      l2264 0052  
                                    l2256 003F                                      l2432 033D  
                                    l2424 0330                                      l2416 0321  
                                    l2408 0306                                      l2346 0527  
                                    l2354 0543                                      l2338 051C  
                                    l2362 05DC                                      l2370 071E  
                                    l2506 047E                                      l2178 0572  
                                    l2434 03CB                                      l2602 021E  
                                    l2530 02FA                                      l2522 02EB  
                                    l2514 02D1                                      l2098 072E  
                                    l2282 0090                                      l2274 0064  
                                    l2266 0057                                      l2258 0042  
                                    l2442 0732                                      l2426 0337  
                                    l2418 0328                                      l2610 0485  
                                    l2348 052C                                      l2364 05DD  
                                    l2356 05C0                                      l2540 0355  
                                    l2532 0345                                      l2460 040C  
                                    l2436 03D3                                      l2524 02EF  
                                    l2516 02D5                                      l2196 014C  
                                    l2284 0096                                      l2276 007E  
                                    l2268 0063                                      l2380 0237  
                                    l2428 033B                                      l2620 049D  
                                    l2612 0488                                      l2604 0480  
                                    l2358 05C7                                      l2374 0757  
                                    l2550 036B                                      l2542 0359  
                                    l2534 0349                                      l2470 0428  
                                    l2462 0415                                      l2438 03E4  
                                    l2526 02F3                                      l2518 02D9  
                                    l2294 00A0                                      l2286 009D  
                                    l2278 0086                                      l2390 0259  
                                    l2382 0240                                      l2630 04A5  
                                    l2622 049E                                      l2614 0490  
                                    l2606 0483                                      l2368 0719  
                                    l2376 0752                                      l2560 037E  
                                    l2552 036F                                      l2544 035D  
                                    l2536 034D                                      l2480 0440  
                                    l2472 042C                                      l2464 0417  
                                    l2528 02F7                                      l2296 00B9  
                                    l2288 009F                                      l2392 025D  
                                    l2384 0249                                      l2640 04AC  
                                    l2632 04A7                                      l2624 049F  
                                    l2616 0498                                      l2608 0484  
                                    l2554 0373                                      l2546 0360  
                                    l2538 0351                                      l2482 0444  
                                    l2474 0433                                      l2466 0419  
                                    l2490 0453                                      l2298 00CF  
                                    l2394 025E                                      l2386 024E  
                                    l2378 0235                                      l2642 04AD  
                                    l2634 04A8                                      l2626 04A1  
                                    l2618 049B                                      l2570 04FA  
                                    l2562 04EA                                      l2556 0377  
                                    l2548 0367                                      l2476 0437  
                                    l2468 0423                                      l2492 045D  
                                    l2580 01E7                                      l2396 0261  
                                    l2388 0252                                      l2644 04AF  
                                    l2636 04A9                                      l2628 04A3  
                                    l2572 0508                                      l2564 04EE  
                                    l2558 037B                                      l2478 0439  
                                    l2494 0462                                      l2486 0448  
                                    l2590 01F6                                      l2398 0268  
                                    l2646 04B2                                      l2638 04AB  
                                    l2574 050D                                      l2566 04F2  
                                    l2496 0466                                      l2488 0451  
                                    l2592 01FE                                      l2576 01D5  
                                    l2648 04B5                                      l2568 04F7  
                                    l2680 0601                                      l2498 046D  
                                    l2594 0203                                      l2586 01E8  
                                    l2578 01DE                                      l2682 0604  
                                    l2596 0209                                      l2588 01F0  
                                    l2684 0608                                      l1990 064A  
                                    l2598 020E                                      l2678 05FE  
                                    l1984 0636                                      l1986 063B  
                                    l1988 063F                               get_time@buf 0045  
                                    u2000 01F6                                      u2001 01F5  
                                    u2010 0209                                      u2011 0208  
                                    u1220 05B8                                      u2020 0230  
                                    u1221 05B7                                      u2021 022F  
                                    u1230 06D9                                      u1070 063B  
                                    u1310 0551                                      u1231 06D6  
                                    u1071 063A                                      u1311 0550  
                                    u1080 063F                                      u1320 0571  
                                    u1400 0194                                      u1081 063E  
                                    u1321 056F                                      u2025 022C  
                                    u1401 0193                                      u1410 019E  
                                    u1411 019D                                      u1244 06DB  
                                    u1420 01B0                                      u1340 013A  
                                    u1180 0654                                      u1500 00B9  
                                    u2117 05AF                                      u1421 01AF  
                                    u1181 0653                                      u1501 00B8  
                                    _LATA 010C                                      u1334 0572  
                                    u1430 01BE                                      u1350 014B  
                                    u1190 0661                                      u1510 00E1  
                                    u2127 05CF                                      u1431 01BD  
                                    u1351 014A                                      u1191 0660  
                                    u1511 00E0                                      _LATC 010E  
                                    u1440 01CB                                      u1360 0157  
                                    u1520 00F7                                      u1600 0259  
                                    u2080 0608                                      u2137 0524  
                                    u1441 01CA                                      u1361 0156  
                                    u1521 00F6                                      u1601 0258  
                                    u2081 0607                                      u1450 01D0  
                                    u1370 016B                                      u1530 0108  
                                    u1610 0268                                      u2147 0538  
                                    u1451 01CF                                      u1371 016A  
                                    u1531 0107                                      u1611 0267  
                                    u1380 0170                                      u1540 0116  
                                    u1460 0049                                      u1620 0273  
                                    u1381 016F                                      u1541 0115  
                                    u1525 00F3                                      u1621 0272  
                                    u1710 0423                                      u1390 017A  
                                    u1550 012D                                      u1470 007E  
                                    u1630 0318                                      u1711 0422  
                                    u1391 0179                                      u1551 012C  
                                    u1471 007D                                      u1631 0317  
                                    u1720 0433                                      u1800 02D9  
                                    u1480 0096                                      u1640 0328  
                                    u1721 0432                                      u1801 02D8  
                                    u1481 0095                                      u1641 0327  
                                    u1570 0532                                      u1730 0440  
                                    u1810 02EB                                      u1490 009D  
                                    u1650 0337                                      u1571 0531  
                                    u1731 043F                                      u1811 02EA  
                                    u1491 009C                                      u1475 007A  
                                    u1651 0336                                      u1580 0549  
                                    u1900 036B                                      u1740 045D  
                                    u1820 02EF                                      u1660 0342  
                                    u1581 0548                                      u1901 036A  
                                    u1741 045C                                      u1821 02EE  
                                    u1661 0341                                      u1910 036F  
                                    u1750 046D                                      u1670 03DE  
                                    u1830 02F3                                      u1590 0249  
                                    u1911 036E                                      u1751 046C  
                                    u1831 02F2                                      u1815 02E7  
                                    u1591 0248                                      u1920 0373  
                                    u1760 047A                                      u1680 03F8  
                                    u1840 02F7                                      u1921 0372  
                                    u1761 0479                                      u1841 02F6  
                                    u1930 0377                                      u1850 0349  
                                    u1770 02CD                                      u1931 0376  
                                    u1851 0348                                      u1675 03DB  
                                    u1771 02CC                                      u1860 034D  
                                    u1780 02D1                                      u1940 04EE  
                                    u1861 034C                                      u1685 03F5  
                                    u1781 02D0                                      u1941 04ED  
                                    u1870 0351                                      u1790 02D5  
                                    u1950 04F2                                      u1871 0350  
                                    u1791 02D4                                      u1775 02C9  
                                    u1951 04F1                                      u1880 0355  
                                    u1960 04F7                                      u1881 0354  
                                    u1961 04F6                                      u1890 0359  
                                    u1970 0508                                      u1891 0358  
                                    u1971 0507                                      u1980 050D  
                                    u1981 050C                                      u1990 01E7  
                                    u1991 01E6                                      i1l63 062B  
                                    i1l66 0633                                      _TMR0 0015  
                                    _TMR2 001A                                      _WREN 0CAA  
                                    _WPUA 020C                                      _WPUC 020E  
                                    _beep 051A                                      _main 05FE  
                                    fsr0h 0005                                      fsr1h 0007  
                                    indf0 0000                                      fsr0l 0004  
                                    indf1 0001                                      fsr1l 0006  
                    EEPROM_WriteByte@addr 0023                                      btemp 007E  
                          ??_get_fun_full 0024                                      start 0026  
                       ___bmul@multiplier 0023                      __end_ofi1_switch_zum 0716  
                 get_fun_full@fun_counter 005C                            ??_go_close_alt 0020  
                 __end_of_TMR0_Initialize 068F            ??_TMR0_DefaultInterruptHandler 0070  
                         ?_FVR_Initialize 0070             __end_of_OSCILLATOR_Initialize 0740  
                                   ?_beep 0020                                     ?_main 0070  
                            get_time@buf2 0041                                     _EEADR 0191  
                                   _FLAGS 007C                                     _T2CON 001C  
                                   i1l110 0012                                     i1l200 06FB  
                                   i1l115 0024                                     i1l116 0024  
                                   i1l206 0776                                     i1l302 075D  
                                   i1l304 075F                                     i1l320 06EB  
                                   i1l160 06B8                                     i1l306 0760  
                                   i1l170 0775                                     i1l316 06DD  
                                   i1l412 0586                                     i1l164 0708  
                                   i1l317 06DF                                     i1l325 04B8  
                                   i1l271 0709                                     i1l327 04BA  
                                   i1l431 03C8                                     i1l273 0715  
                                   i1l337 04E9                                     i1l417 059A  
                                   i1l409 0582                                     i1l418 059C  
                                   i1l291 05F6                                     i1l419 059E  
                                   i1l292 05FD                                     i1l276 0729  
                                   i1l289 05E8                                     _TRISA 008C  
                                   _TRISC 008E                 ?_TMR0_SetInterruptHandler 0020  
                         __end_of_get_adr 01D5                          __end_of_TMR0_ISR 06FC  
                         __end_of_get_fun 0446                          __end_of_TMR2_ISR 06B9  
                         __end_of_go_open 0720                                     beep@i 0025  
                                   beep@j 0024                            _WDT_Initialize 0761  
                                   pclath 000A                           __end_of_povorot 0302  
                                   status 0003                                     wtemp0 007E  
                         _TMR2_StartTimer 0772                              get_voltage@q 0034  
                         __initialization 0027                              __end_of_beep 054A  
                            __end_of_main 0619                           ??_get_jump_full 0024  
                 __end_of_TMR2_Initialize 06CC               ?_INTERRUPT_InterruptManager 0070  
                                  ??_beep 0021                             get_time@F2660 0052  
                _TMR2_SetInterruptHandler 0746                                    ??_main 0049  
                           get_time@F2658 0049                    __end_of_WDT_Initialize 0765  
                             ?i1_go_close 0070                       i1_ADC_GetConversion 0619  
                           get_time@q_823 0048                             get_time@q_824 0047  
                                  _ADCON0 009D                                    _ADCON1 009E  
                                  _ADRESH 009C                                    _ADRESL 009B  
                                  _EEDATA 0193                                    _EECON2 0196  
                                  _APFCON 011D                                    _ANSELA 018C  
                                  _ANSELC 018E                                    _BORCON 0116  
                           get_time@times 0034                                    i1l2000 0629  
                                  u110_20 0728                                    u110_21 0726  
                                  i1l2002 062F                                    i1l2010 0720  
                                  i1l2020 04D1                                    i1l2012 04BC  
                                  i1l2022 04D6                                    i1l2014 04C4  
                                  i1l2024 04DF                                    i1l2016 04C6  
                                  i1l2040 0594                                    i1l2032 0575  
                                  i1l2026 04E0                                    i1l2018 04C8  
                                  i1l2042 0596                                    i1l2034 0579  
                                  i1l2028 04E6                                    i1l2044 0597  
                                  i1l2036 057F                                    u111_24 0729  
                                  i1l2140 038B                                    i1l2070 0709  
                                  i1l2046 0598                                    i1l2038 0588  
                                  i1l2150 03B1                                    i1l2142 039A  
                                  u120_20 0713                                    u112_20 04D1  
                                  i1l2152 03B5                                    i1l2144 039E  
                                  u120_21 0710                                    u112_21 04D0  
                                  i1l2154 03BB                                    i1l2146 03AA  
                                  i1l2138 0388                                    i1l2156 03C7  
                                  i1l2148 03AE                                    i1l2334 06FC  
                                  u113_20 04DF                                    i1l2336 0703  
                                  u113_21 04DE                                    i1l2450 06F6  
                                  u121_24 0715                                    i1l2444 06EC  
                                  i1l2452 06A4                                    i1l2446 06ED  
                                  i1l2454 06A6                                    i1l2448 06F0  
                                  u106_20 06E4                                    u114_20 04E6  
                                  i1l2456 06B3                                    u106_21 06E3  
                                  u114_21 04E5                                    i1l2458 06B6  
                                  u130_24 03C7                                    i1l2670 0016  
                                  u115_20 0579                                    i1l2672 001B  
                                  u203_20 000A                                    i1l2664 0006  
                                  u115_21 0578                                    u203_21 0009  
                                  i1l1970 05FB                                    i1l2674 0020  
                                  i1l2666 000A                                    i1l1972 05FC  
                                  i1l1964 05DF                                    i1l1980 06E4  
                                  i1l2668 000E                                    i1l1966 05E6  
                                  i1l1982 06E8                                    i1l1968 05F4  
                                  i1l1976 075C                                    u116_20 057F  
                                  u204_20 000E                                    u116_21 057E  
                                  u204_21 000D                                    i1l1978 06DC  
                                  i1l1994 061A                                    i1l1996 0624  
                                  i1l1998 0625                                    u109_20 062F  
                                  u117_20 0586                                    u125_20 039E  
                                  u205_20 0016                                    u109_21 062E  
                                  u117_21 0585                                    u125_21 039D  
                                  u205_21 0015                                    u126_20 03A8  
                                  u206_20 001B                                    u126_21 03A5  
                                  u206_21 001A                                    u207_20 0020  
                                  u207_21 001F                                    u127_24 03AA  
                                  u215_27 058D                                    u128_20 03BB  
                                  u128_21 03BA                                    u216_27 0626  
                                  u129_20 03C5                                    u129_21 03C2  
                                  u217_27 05ED                                    u170_20 06B3  
                                  u170_21 06B2                                    _FVRCON 0117  
                                  u156_20 0703                                    u156_21 0702  
                                  u169_20 06F6                                    u169_21 06F5  
                        _GOOD_WSP_VOLTAGE 076C                                    _OSCCON 0099  
                                  _WDTCON 0097             __end_of_EEPROM_WriteShortLong 0408  
                    ?i1_ADC_GetConversion 0070                          __end_of_get_jump 0480  
                        __end_of_get_time 0132                          __end_of_go_close 05DF  
                                  ___bmul 064D                      _switch_zum$intlevel0 06CF  
                        ?_TMR0_Initialize 0070                         ??_EEPROM_ReadByte 0020  
                        __end_of_fun_work 0388                                    _time_s 0055  
                __end_of_EEPROM_WriteByte 0575                                 ??_get_adr 0023  
                               ??_get_fun 0024                                 ??_go_open 0020  
                    __end_of_get_fun_full 0278                           ?_WDT_Initialize 0070  
                          get_measure@res 0075                    EEPROM_WriteByte@status 0024  
                ADC_GetConversion@channel 0023                                 ??_povorot 0022  
                 __end_of_TMR2_StartTimer 0775  TMR0_SetInterruptHandler@InterruptHandler 0020  
TMR2_SetInterruptHandler@InterruptHandler 0020                      __end_of_go_close_alt 075C  
                       _SYSTEM_Initialize 0663                   __end_of__initialization 003C  
                   __end_of_TMR2_CallBack 0709                        ?_SYSTEM_Initialize 0070  
                            ?_toggle_tone 0070                     ??i1_ADC_GetConversion 0072  
                     ___bmul@multiplicand 0020                  EEPROM_ReadShortLong@addr 002F  
                          __pcstackCOMMON 0070                 get_jump_full@jump_counter 005A  
                     ??_SYSTEM_Initialize 0023                                 ?_TMR0_ISR 0070  
                               ?_TMR2_ISR 0070                     __end_of_ROTATION_TIME 076C  
                        ?_TMR2_Initialize 0070                i1ADC_GetConversion@channel 0073  
                            ?_start_alarm 0070                            _OPTION_REGbits 0095  
                            ?_start_setup 0070                              i1_switch_zum 0709  
               __end_of_SYSTEM_Initialize 0679                                __pbssBANK0 0049  
                              __pbssBANK1 00A0                          ??_FVR_Initialize 0020  
                              __pmaintext 05FE                                   ?___bmul 0020  
        __end_of_TMR0_SetInterruptHandler 0752                                ??_TMR0_ISR 0070  
                              ??_TMR2_ISR 0078                                __pintentry 0004  
                        get_jump_full@res 0025                                _get_eeprom 0732  
                                 _OSCTUNE 0098                          ?_TMR2_StartTimer 0070  
                               ?_get_jump 0070                                 ?_get_time 0070  
                               ?_go_close 0070                                 ?_fun_work 0070  
                    _ADC_InterruptHandler 0058                ??_TMR2_SetInterruptHandler 0022  
                __end_of_GOOD_WSP_VOLTAGE 076F                                   __ptext1 04EA  
                                 __ptext2 0480                       get_measure@measures 007B  
                                 __ptext3 0302                                   __ptext4 0231  
                                 __ptext5 0732                                   __ptext6 003F  
                                 __ptext7 064D                                   __ptext8 0278  
                                 __ptext9 0132                                   _get_adr 0132  
                                 _get_fun 0408                                   _go_open 0716  
                   _OSCILLATOR_Initialize 0739                                 _T2CONbits 001C  
                ??_PIN_MANAGER_Initialize 0020                              ??i1_go_close 0070  
                                 _povorot 02BE                                   clrloop0 0741  
                              ??_get_jump 0024                                ??_get_time 0030  
                              ??_go_close 0020                         __end_of_rele_tick 059F  
                    end_of_initialization 003C                                ??_fun_work 0026  
                         _EEPROM_ReadByte 0634                              _get_fun_full 0231  
                      __end_ofi1_go_close 05FE                     __end_of_get_jump_full 0345  
                           _sec_tick_work 0388                                _time_pow_s 005E  
                            _go_close_alt 0757                          ??_WDT_Initialize 0020  
                _TMR0_SetInterruptHandler 074C                         ?_EEPROM_WriteByte 0020  
                       __end_of_switch_wm 051A                            get_voltage@buf 0032  
                          get_voltage@res 0030                               ?_get_eeprom 0070  
                      ??_EEPROM_WriteByte 0021                                get_adr@adr 0024  
                              get_adr@buf 0048                                 _TRISAbits 008C  
                               _TRISCbits 008E                           get_fun_full@res 0025  
                              get_fun@res 0025                        EEPROM_WriteByte@dt 0020  
            __end_of_EEPROM_ReadShortLong 02BE                             ??_get_measure 0074  
                   _EEPROM_WriteShortLong 03C9                                _switch_zum 06CC  
    __end_of_TMR2_DefaultInterruptHandler 0776              _TMR2_DefaultInterruptHandler 0775  
                          __end_of___bmul 0663                            ?_sec_tick_work 0070  
                           ??_get_voltage 002E                            _ADC_Initialize 072A  
                  ?_OSCILLATOR_Initialize 0070                            i1_go_close_alt 075C  
                           ??_go_open_alt 0020                       start_initialization 0027  
                 __end_of_EEPROM_ReadByte 064D               __end_ofi1_ADC_GetConversion 0634  
                                ??___bmul 0021                    __end_of_ADC_Initialize 0732  
                     __end_of_get_measure 04EA                    __end_ofi1_go_close_alt 0761  
           ?_TMR2_DefaultInterruptHandler 0070                               __pbssCOMMON 0078  
                     __end_of_get_voltage 0231                                 ___latbits 0000  
                           __pcstackBANK0 0020                       __end_of_go_open_alt 0757  
                        _START_EEPROM_ADR 005F                     _TMR0_InterruptHandler 0060  
                               __pnvBANK0 0060                    ?_EEPROM_WriteShortLong 0025  
                  _PIN_MANAGER_Initialize 068F                           ??_sec_tick_work 0077  
                             ?_switch_zum 0070                           ?_ADC_Initialize 0070  
                               beep@count 0020                           ?i1_go_close_alt 0070  
            ??_INTERRUPT_InterruptManager 0078               EEPROM_WriteShortLong@ucData 0025  
                                ?_get_adr 0070                                  ?_get_fun 0070  
                                ?_go_open 0070                      _EEPROM_ReadShortLong 0278  
                       sec_tick_work@iled 007A                                  ?_povorot 0070  
                      get_time@time_count 003E                          ?_EEPROM_ReadByte 0070  
                       ??_TMR0_Initialize 0022                         get_jump_full@flag 0027  
                                _LATAbits 010C                                  _LATCbits 010E  
                               _rele_tick 0575                                 clear_ram0 0740  
                           _TMR2_CallBack 06FC                                  _PIE1bits 0091  
                             _get_measure 04B8                ??_TMR0_SetInterruptHandler 0022  
                                _PIR1bits 0011                                  _TMR0_ISR 06EC  
                                _TMR2_ISR 06A4                             _ROTATION_TIME 0769  
                             _get_voltage 01D5                                _ADCON0bits 009D  
                   ?_EEPROM_ReadShortLong 0023                                  _WPUAbits 020C  
                                _WPUCbits 020E                                 get_time@i 0044  
                               get_time@q 0046                              ??_get_eeprom 0049  
          ??_TMR2_DefaultInterruptHandler 0070                               _go_open_alt 0752  
               ?_TMR2_SetInterruptHandler 0020                         get_time@adr_error 003D  
                               _switch_wm 04EA                         ??_TMR2_Initialize 0022  
                          ?_TMR2_CallBack 0070                                ?_rele_tick 0070  
                           ??_toggle_tone 0070                         _ADC_GetConversion 059F  
                      __end_of_get_eeprom 0739                   ??_OSCILLATOR_Initialize 0020  
                      ?_ADC_GetConversion 0020                    EEPROM_ReadShortLong@dt 002C  
                           ??_start_alarm 0072                                _ANSELAbits 018C  
                              _ANSELCbits 018E                       ??_ADC_GetConversion 0022  
                           ??_start_setup 0049                   EEPROM_WriteShortLong@dt 002C  
                              ?_switch_wm 0070                                  __ptext10 0772  
                                __ptext11 0663                                  __ptext20 072A  
                                __ptext12 0761                                  __ptext21 02BE  
                                __ptext13 06B9                                  __ptext30 0752  
                                __ptext22 01D5                                  __ptext14 0746  
                                __ptext31 0716                                  __ptext23 03C9  
                                __ptext15 0679                                  __ptext40 0388  
                                __ptext32 0757                                  __ptext24 054A  
                                __ptext16 074C                                  __ptext41 0720  
                                __ptext33 05C0                                  __ptext25 0634  
                                __ptext17 068F                                  __ptext50 0709  
                                __ptext42 0575                                  __ptext34 051A  
                                __ptext26 0446                                  __ptext18 0739  
                                __ptext43 04B8                                  __ptext35 06CC  
                                __ptext27 0408                                  __ptext19 0765  
                                __ptext44 0619                                  __ptext28 059F  
                                __ptext45 06DC                                  __ptext37 06A4  
                                __ptext29 0345                                  __ptext46 075C  
                                __ptext38 06FC                                  __ptext47 05DF  
                                __ptext39 0775                                  __ptext48 06EC  
                                __ptext49 0776                             ?i1_switch_zum 0070  
                                beep@time 0023                                  _get_jump 0446  
                                _get_time 003F                                  _go_close 05C0  
                         _BAD_WSP_VOLTAGE 076F                                  _fun_work 0345  
    __end_of_TMR0_DefaultInterruptHandler 0777              _TMR0_DefaultInterruptHandler 0776  
               __end_of_ADC_GetConversion 05C0                                  int$flags 007E  
                                get_adr@i 0044                                  get_adr@q 0045  
                       ??_TMR2_StartTimer 0020                       __end_of_toggle_tone 072A  
      __end_of_INTERRUPT_InterruptManager 0026                _INTERRUPT_InterruptManager 0004  
                  ??_EEPROM_ReadShortLong 0026                      get_jump@jump_counter 005B  
                              _INTCONbits 000B                                _FVRCONbits 0117  
                          ??i1_switch_zum 0070                       __end_of_start_alarm 06EC  
                     __end_of_start_setup 04B8                                  intlevel1 0000  
                         ??_TMR2_CallBack 0078                   ??_EEPROM_WriteShortLong 0028  
               EEPROM_WriteShortLong@addr 002D                   ?_PIN_MANAGER_Initialize 0070  
                             ??_rele_tick 0070                       EEPROM_ReadByte@addr 0022  
                        ??_ADC_Initialize 0020             ?_TMR0_DefaultInterruptHandler 0070  
                        ??i1_go_close_alt 0070                              ??_switch_zum 0020  
                           _get_jump_full 0302                             __pstringtext1 0769  
                           __pstringtext2 076C                             __pstringtext3 076F  
                          _FVR_Initialize 0765                                _OPTION_REG 0095  
                        get_voltage@q_802 0033                     TMR2_ISR@CountCallBack 0078  
                         _TMR0_Initialize 0679                   __end_of_BAD_WSP_VOLTAGE 0772  
                             ??_switch_wm 0026                              get_adr@F2638 00A0  
                      __end_of_switch_zum 06DC            __end_of_PIN_MANAGER_Initialize 06A4  
                        _EEPROM_WriteByte 054A                              get_adr@i_812 0046  
                            get_adr@q_811 0047                     _TMR2_InterruptHandler 0062  
                             _toggle_tone 0720                             ?_get_fun_full 0070  
                            ?_get_measure 0070  
