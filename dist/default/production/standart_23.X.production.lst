

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Thu May 05 10:28:21 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F1823
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	intentry,global,class=CODE,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,delta=2
    60                           	psect	text45,local,class=CODE,merge=1,delta=2
    61                           	psect	text46,local,class=CODE,merge=1,delta=2
    62                           	psect	text47,local,class=CODE,merge=1,delta=2
    63                           	psect	text48,local,class=CODE,merge=1,delta=2
    64                           	psect	text49,local,class=CODE,merge=1,delta=2
    65                           	psect	text50,local,class=CODE,merge=1,delta=2
    66                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    67                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    68                           	dabs	1,0x7E,2
    69  0000                     
    70                           ; Version 2.40
    71                           ; Generated 17/11/2021 GMT
    72                           ; 
    73                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution. Publication is not required when
    87                           ;        this file is used in an embedded application.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC16F1823 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     	;# 
   106  0001                     	;# 
   107  0002                     	;# 
   108  0003                     	;# 
   109  0004                     	;# 
   110  0005                     	;# 
   111  0006                     	;# 
   112  0007                     	;# 
   113  0008                     	;# 
   114  0009                     	;# 
   115  000A                     	;# 
   116  000B                     	;# 
   117  000C                     	;# 
   118  000E                     	;# 
   119  0011                     	;# 
   120  0012                     	;# 
   121  0015                     	;# 
   122  0016                     	;# 
   123  0016                     	;# 
   124  0017                     	;# 
   125  0018                     	;# 
   126  0019                     	;# 
   127  001A                     	;# 
   128  001B                     	;# 
   129  001C                     	;# 
   130  001E                     	;# 
   131  001F                     	;# 
   132  008C                     	;# 
   133  008E                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0095                     	;# 
   137  0096                     	;# 
   138  0097                     	;# 
   139  0098                     	;# 
   140  0099                     	;# 
   141  009A                     	;# 
   142  009B                     	;# 
   143  009B                     	;# 
   144  009C                     	;# 
   145  009D                     	;# 
   146  009E                     	;# 
   147  010C                     	;# 
   148  010E                     	;# 
   149  0111                     	;# 
   150  0112                     	;# 
   151  0113                     	;# 
   152  0114                     	;# 
   153  0115                     	;# 
   154  0116                     	;# 
   155  0117                     	;# 
   156  0118                     	;# 
   157  0119                     	;# 
   158  011A                     	;# 
   159  011B                     	;# 
   160  011D                     	;# 
   161  011D                     	;# 
   162  018C                     	;# 
   163  018E                     	;# 
   164  0191                     	;# 
   165  0191                     	;# 
   166  0192                     	;# 
   167  0193                     	;# 
   168  0193                     	;# 
   169  0193                     	;# 
   170  0194                     	;# 
   171  0195                     	;# 
   172  0196                     	;# 
   173  0199                     	;# 
   174  019A                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019D                     	;# 
   182  019E                     	;# 
   183  019F                     	;# 
   184  020C                     	;# 
   185  020E                     	;# 
   186  0211                     	;# 
   187  0211                     	;# 
   188  0212                     	;# 
   189  0212                     	;# 
   190  0213                     	;# 
   191  0213                     	;# 
   192  0214                     	;# 
   193  0214                     	;# 
   194  0215                     	;# 
   195  0215                     	;# 
   196  0215                     	;# 
   197  0216                     	;# 
   198  0216                     	;# 
   199  0217                     	;# 
   200  0217                     	;# 
   201  0291                     	;# 
   202  0291                     	;# 
   203  0292                     	;# 
   204  0293                     	;# 
   205  0294                     	;# 
   206  0295                     	;# 
   207  0295                     	;# 
   208  0296                     	;# 
   209  0391                     	;# 
   210  0392                     	;# 
   211  0393                     	;# 
   212  039A                     	;# 
   213  039C                     	;# 
   214  039D                     	;# 
   215  039E                     	;# 
   216  039F                     	;# 
   217  0FE4                     	;# 
   218  0FE5                     	;# 
   219  0FE6                     	;# 
   220  0FE7                     	;# 
   221  0FE8                     	;# 
   222  0FE9                     	;# 
   223  0FEA                     	;# 
   224  0FEB                     	;# 
   225  0FED                     	;# 
   226  0FEE                     	;# 
   227  0FEF                     	;# 
   228  0000                     	;# 
   229  0001                     	;# 
   230  0002                     	;# 
   231  0003                     	;# 
   232  0004                     	;# 
   233  0005                     	;# 
   234  0006                     	;# 
   235  0007                     	;# 
   236  0008                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000E                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0015                     	;# 
   245  0016                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001C                     	;# 
   253  001E                     	;# 
   254  001F                     	;# 
   255  008C                     	;# 
   256  008E                     	;# 
   257  0091                     	;# 
   258  0092                     	;# 
   259  0095                     	;# 
   260  0096                     	;# 
   261  0097                     	;# 
   262  0098                     	;# 
   263  0099                     	;# 
   264  009A                     	;# 
   265  009B                     	;# 
   266  009B                     	;# 
   267  009C                     	;# 
   268  009D                     	;# 
   269  009E                     	;# 
   270  010C                     	;# 
   271  010E                     	;# 
   272  0111                     	;# 
   273  0112                     	;# 
   274  0113                     	;# 
   275  0114                     	;# 
   276  0115                     	;# 
   277  0116                     	;# 
   278  0117                     	;# 
   279  0118                     	;# 
   280  0119                     	;# 
   281  011A                     	;# 
   282  011B                     	;# 
   283  011D                     	;# 
   284  011D                     	;# 
   285  018C                     	;# 
   286  018E                     	;# 
   287  0191                     	;# 
   288  0191                     	;# 
   289  0192                     	;# 
   290  0193                     	;# 
   291  0193                     	;# 
   292  0193                     	;# 
   293  0194                     	;# 
   294  0195                     	;# 
   295  0196                     	;# 
   296  0199                     	;# 
   297  019A                     	;# 
   298  019B                     	;# 
   299  019B                     	;# 
   300  019B                     	;# 
   301  019B                     	;# 
   302  019C                     	;# 
   303  019C                     	;# 
   304  019D                     	;# 
   305  019E                     	;# 
   306  019F                     	;# 
   307  020C                     	;# 
   308  020E                     	;# 
   309  0211                     	;# 
   310  0211                     	;# 
   311  0212                     	;# 
   312  0212                     	;# 
   313  0213                     	;# 
   314  0213                     	;# 
   315  0214                     	;# 
   316  0214                     	;# 
   317  0215                     	;# 
   318  0215                     	;# 
   319  0215                     	;# 
   320  0216                     	;# 
   321  0216                     	;# 
   322  0217                     	;# 
   323  0217                     	;# 
   324  0291                     	;# 
   325  0291                     	;# 
   326  0292                     	;# 
   327  0293                     	;# 
   328  0294                     	;# 
   329  0295                     	;# 
   330  0295                     	;# 
   331  0296                     	;# 
   332  0391                     	;# 
   333  0392                     	;# 
   334  0393                     	;# 
   335  039A                     	;# 
   336  039C                     	;# 
   337  039D                     	;# 
   338  039E                     	;# 
   339  039F                     	;# 
   340  0FE4                     	;# 
   341  0FE5                     	;# 
   342  0FE6                     	;# 
   343  0FE7                     	;# 
   344  0FE8                     	;# 
   345  0FE9                     	;# 
   346  0FEA                     	;# 
   347  0FEB                     	;# 
   348  0FED                     	;# 
   349  0FEE                     	;# 
   350  0FEF                     	;# 
   351  0000                     	;# 
   352  0001                     	;# 
   353  0002                     	;# 
   354  0003                     	;# 
   355  0004                     	;# 
   356  0005                     	;# 
   357  0006                     	;# 
   358  0007                     	;# 
   359  0008                     	;# 
   360  0009                     	;# 
   361  000A                     	;# 
   362  000B                     	;# 
   363  000C                     	;# 
   364  000E                     	;# 
   365  0011                     	;# 
   366  0012                     	;# 
   367  0015                     	;# 
   368  0016                     	;# 
   369  0016                     	;# 
   370  0017                     	;# 
   371  0018                     	;# 
   372  0019                     	;# 
   373  001A                     	;# 
   374  001B                     	;# 
   375  001C                     	;# 
   376  001E                     	;# 
   377  001F                     	;# 
   378  008C                     	;# 
   379  008E                     	;# 
   380  0091                     	;# 
   381  0092                     	;# 
   382  0095                     	;# 
   383  0096                     	;# 
   384  0097                     	;# 
   385  0098                     	;# 
   386  0099                     	;# 
   387  009A                     	;# 
   388  009B                     	;# 
   389  009B                     	;# 
   390  009C                     	;# 
   391  009D                     	;# 
   392  009E                     	;# 
   393  010C                     	;# 
   394  010E                     	;# 
   395  0111                     	;# 
   396  0112                     	;# 
   397  0113                     	;# 
   398  0114                     	;# 
   399  0115                     	;# 
   400  0116                     	;# 
   401  0117                     	;# 
   402  0118                     	;# 
   403  0119                     	;# 
   404  011A                     	;# 
   405  011B                     	;# 
   406  011D                     	;# 
   407  011D                     	;# 
   408  018C                     	;# 
   409  018E                     	;# 
   410  0191                     	;# 
   411  0191                     	;# 
   412  0192                     	;# 
   413  0193                     	;# 
   414  0193                     	;# 
   415  0193                     	;# 
   416  0194                     	;# 
   417  0195                     	;# 
   418  0196                     	;# 
   419  0199                     	;# 
   420  019A                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019C                     	;# 
   426  019C                     	;# 
   427  019D                     	;# 
   428  019E                     	;# 
   429  019F                     	;# 
   430  020C                     	;# 
   431  020E                     	;# 
   432  0211                     	;# 
   433  0211                     	;# 
   434  0212                     	;# 
   435  0212                     	;# 
   436  0213                     	;# 
   437  0213                     	;# 
   438  0214                     	;# 
   439  0214                     	;# 
   440  0215                     	;# 
   441  0215                     	;# 
   442  0215                     	;# 
   443  0216                     	;# 
   444  0216                     	;# 
   445  0217                     	;# 
   446  0217                     	;# 
   447  0291                     	;# 
   448  0291                     	;# 
   449  0292                     	;# 
   450  0293                     	;# 
   451  0294                     	;# 
   452  0295                     	;# 
   453  0295                     	;# 
   454  0296                     	;# 
   455  0391                     	;# 
   456  0392                     	;# 
   457  0393                     	;# 
   458  039A                     	;# 
   459  039C                     	;# 
   460  039D                     	;# 
   461  039E                     	;# 
   462  039F                     	;# 
   463  0FE4                     	;# 
   464  0FE5                     	;# 
   465  0FE6                     	;# 
   466  0FE7                     	;# 
   467  0FE8                     	;# 
   468  0FE9                     	;# 
   469  0FEA                     	;# 
   470  0FEB                     	;# 
   471  0FED                     	;# 
   472  0FEE                     	;# 
   473  0FEF                     	;# 
   474  0000                     	;# 
   475  0001                     	;# 
   476  0002                     	;# 
   477  0003                     	;# 
   478  0004                     	;# 
   479  0005                     	;# 
   480  0006                     	;# 
   481  0007                     	;# 
   482  0008                     	;# 
   483  0009                     	;# 
   484  000A                     	;# 
   485  000B                     	;# 
   486  000C                     	;# 
   487  000E                     	;# 
   488  0011                     	;# 
   489  0012                     	;# 
   490  0015                     	;# 
   491  0016                     	;# 
   492  0016                     	;# 
   493  0017                     	;# 
   494  0018                     	;# 
   495  0019                     	;# 
   496  001A                     	;# 
   497  001B                     	;# 
   498  001C                     	;# 
   499  001E                     	;# 
   500  001F                     	;# 
   501  008C                     	;# 
   502  008E                     	;# 
   503  0091                     	;# 
   504  0092                     	;# 
   505  0095                     	;# 
   506  0096                     	;# 
   507  0097                     	;# 
   508  0098                     	;# 
   509  0099                     	;# 
   510  009A                     	;# 
   511  009B                     	;# 
   512  009B                     	;# 
   513  009C                     	;# 
   514  009D                     	;# 
   515  009E                     	;# 
   516  010C                     	;# 
   517  010E                     	;# 
   518  0111                     	;# 
   519  0112                     	;# 
   520  0113                     	;# 
   521  0114                     	;# 
   522  0115                     	;# 
   523  0116                     	;# 
   524  0117                     	;# 
   525  0118                     	;# 
   526  0119                     	;# 
   527  011A                     	;# 
   528  011B                     	;# 
   529  011D                     	;# 
   530  011D                     	;# 
   531  018C                     	;# 
   532  018E                     	;# 
   533  0191                     	;# 
   534  0191                     	;# 
   535  0192                     	;# 
   536  0193                     	;# 
   537  0193                     	;# 
   538  0193                     	;# 
   539  0194                     	;# 
   540  0195                     	;# 
   541  0196                     	;# 
   542  0199                     	;# 
   543  019A                     	;# 
   544  019B                     	;# 
   545  019B                     	;# 
   546  019B                     	;# 
   547  019B                     	;# 
   548  019C                     	;# 
   549  019C                     	;# 
   550  019D                     	;# 
   551  019E                     	;# 
   552  019F                     	;# 
   553  020C                     	;# 
   554  020E                     	;# 
   555  0211                     	;# 
   556  0211                     	;# 
   557  0212                     	;# 
   558  0212                     	;# 
   559  0213                     	;# 
   560  0213                     	;# 
   561  0214                     	;# 
   562  0214                     	;# 
   563  0215                     	;# 
   564  0215                     	;# 
   565  0215                     	;# 
   566  0216                     	;# 
   567  0216                     	;# 
   568  0217                     	;# 
   569  0217                     	;# 
   570  0291                     	;# 
   571  0291                     	;# 
   572  0292                     	;# 
   573  0293                     	;# 
   574  0294                     	;# 
   575  0295                     	;# 
   576  0295                     	;# 
   577  0296                     	;# 
   578  0391                     	;# 
   579  0392                     	;# 
   580  0393                     	;# 
   581  039A                     	;# 
   582  039C                     	;# 
   583  039D                     	;# 
   584  039E                     	;# 
   585  039F                     	;# 
   586  0FE4                     	;# 
   587  0FE5                     	;# 
   588  0FE6                     	;# 
   589  0FE7                     	;# 
   590  0FE8                     	;# 
   591  0FE9                     	;# 
   592  0FEA                     	;# 
   593  0FEB                     	;# 
   594  0FED                     	;# 
   595  0FEE                     	;# 
   596  0FEF                     	;# 
   597  0000                     	;# 
   598  0001                     	;# 
   599  0002                     	;# 
   600  0003                     	;# 
   601  0004                     	;# 
   602  0005                     	;# 
   603  0006                     	;# 
   604  0007                     	;# 
   605  0008                     	;# 
   606  0009                     	;# 
   607  000A                     	;# 
   608  000B                     	;# 
   609  000C                     	;# 
   610  000E                     	;# 
   611  0011                     	;# 
   612  0012                     	;# 
   613  0015                     	;# 
   614  0016                     	;# 
   615  0016                     	;# 
   616  0017                     	;# 
   617  0018                     	;# 
   618  0019                     	;# 
   619  001A                     	;# 
   620  001B                     	;# 
   621  001C                     	;# 
   622  001E                     	;# 
   623  001F                     	;# 
   624  008C                     	;# 
   625  008E                     	;# 
   626  0091                     	;# 
   627  0092                     	;# 
   628  0095                     	;# 
   629  0096                     	;# 
   630  0097                     	;# 
   631  0098                     	;# 
   632  0099                     	;# 
   633  009A                     	;# 
   634  009B                     	;# 
   635  009B                     	;# 
   636  009C                     	;# 
   637  009D                     	;# 
   638  009E                     	;# 
   639  010C                     	;# 
   640  010E                     	;# 
   641  0111                     	;# 
   642  0112                     	;# 
   643  0113                     	;# 
   644  0114                     	;# 
   645  0115                     	;# 
   646  0116                     	;# 
   647  0117                     	;# 
   648  0118                     	;# 
   649  0119                     	;# 
   650  011A                     	;# 
   651  011B                     	;# 
   652  011D                     	;# 
   653  011D                     	;# 
   654  018C                     	;# 
   655  018E                     	;# 
   656  0191                     	;# 
   657  0191                     	;# 
   658  0192                     	;# 
   659  0193                     	;# 
   660  0193                     	;# 
   661  0193                     	;# 
   662  0194                     	;# 
   663  0195                     	;# 
   664  0196                     	;# 
   665  0199                     	;# 
   666  019A                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019B                     	;# 
   671  019C                     	;# 
   672  019C                     	;# 
   673  019D                     	;# 
   674  019E                     	;# 
   675  019F                     	;# 
   676  020C                     	;# 
   677  020E                     	;# 
   678  0211                     	;# 
   679  0211                     	;# 
   680  0212                     	;# 
   681  0212                     	;# 
   682  0213                     	;# 
   683  0213                     	;# 
   684  0214                     	;# 
   685  0214                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0215                     	;# 
   689  0216                     	;# 
   690  0216                     	;# 
   691  0217                     	;# 
   692  0217                     	;# 
   693  0291                     	;# 
   694  0291                     	;# 
   695  0292                     	;# 
   696  0293                     	;# 
   697  0294                     	;# 
   698  0295                     	;# 
   699  0295                     	;# 
   700  0296                     	;# 
   701  0391                     	;# 
   702  0392                     	;# 
   703  0393                     	;# 
   704  039A                     	;# 
   705  039C                     	;# 
   706  039D                     	;# 
   707  039E                     	;# 
   708  039F                     	;# 
   709  0FE4                     	;# 
   710  0FE5                     	;# 
   711  0FE6                     	;# 
   712  0FE7                     	;# 
   713  0FE8                     	;# 
   714  0FE9                     	;# 
   715  0FEA                     	;# 
   716  0FEB                     	;# 
   717  0FED                     	;# 
   718  0FEE                     	;# 
   719  0FEF                     	;# 
   720  0000                     	;# 
   721  0001                     	;# 
   722  0002                     	;# 
   723  0003                     	;# 
   724  0004                     	;# 
   725  0005                     	;# 
   726  0006                     	;# 
   727  0007                     	;# 
   728  0008                     	;# 
   729  0009                     	;# 
   730  000A                     	;# 
   731  000B                     	;# 
   732  000C                     	;# 
   733  000E                     	;# 
   734  0011                     	;# 
   735  0012                     	;# 
   736  0015                     	;# 
   737  0016                     	;# 
   738  0016                     	;# 
   739  0017                     	;# 
   740  0018                     	;# 
   741  0019                     	;# 
   742  001A                     	;# 
   743  001B                     	;# 
   744  001C                     	;# 
   745  001E                     	;# 
   746  001F                     	;# 
   747  008C                     	;# 
   748  008E                     	;# 
   749  0091                     	;# 
   750  0092                     	;# 
   751  0095                     	;# 
   752  0096                     	;# 
   753  0097                     	;# 
   754  0098                     	;# 
   755  0099                     	;# 
   756  009A                     	;# 
   757  009B                     	;# 
   758  009B                     	;# 
   759  009C                     	;# 
   760  009D                     	;# 
   761  009E                     	;# 
   762  010C                     	;# 
   763  010E                     	;# 
   764  0111                     	;# 
   765  0112                     	;# 
   766  0113                     	;# 
   767  0114                     	;# 
   768  0115                     	;# 
   769  0116                     	;# 
   770  0117                     	;# 
   771  0118                     	;# 
   772  0119                     	;# 
   773  011A                     	;# 
   774  011B                     	;# 
   775  011D                     	;# 
   776  011D                     	;# 
   777  018C                     	;# 
   778  018E                     	;# 
   779  0191                     	;# 
   780  0191                     	;# 
   781  0192                     	;# 
   782  0193                     	;# 
   783  0193                     	;# 
   784  0193                     	;# 
   785  0194                     	;# 
   786  0195                     	;# 
   787  0196                     	;# 
   788  0199                     	;# 
   789  019A                     	;# 
   790  019B                     	;# 
   791  019B                     	;# 
   792  019B                     	;# 
   793  019B                     	;# 
   794  019C                     	;# 
   795  019C                     	;# 
   796  019D                     	;# 
   797  019E                     	;# 
   798  019F                     	;# 
   799  020C                     	;# 
   800  020E                     	;# 
   801  0211                     	;# 
   802  0211                     	;# 
   803  0212                     	;# 
   804  0212                     	;# 
   805  0213                     	;# 
   806  0213                     	;# 
   807  0214                     	;# 
   808  0214                     	;# 
   809  0215                     	;# 
   810  0215                     	;# 
   811  0215                     	;# 
   812  0216                     	;# 
   813  0216                     	;# 
   814  0217                     	;# 
   815  0217                     	;# 
   816  0291                     	;# 
   817  0291                     	;# 
   818  0292                     	;# 
   819  0293                     	;# 
   820  0294                     	;# 
   821  0295                     	;# 
   822  0295                     	;# 
   823  0296                     	;# 
   824  0391                     	;# 
   825  0392                     	;# 
   826  0393                     	;# 
   827  039A                     	;# 
   828  039C                     	;# 
   829  039D                     	;# 
   830  039E                     	;# 
   831  039F                     	;# 
   832  0FE4                     	;# 
   833  0FE5                     	;# 
   834  0FE6                     	;# 
   835  0FE7                     	;# 
   836  0FE8                     	;# 
   837  0FE9                     	;# 
   838  0FEA                     	;# 
   839  0FEB                     	;# 
   840  0FED                     	;# 
   841  0FEE                     	;# 
   842  0FEF                     	;# 
   843  0000                     	;# 
   844  0001                     	;# 
   845  0002                     	;# 
   846  0003                     	;# 
   847  0004                     	;# 
   848  0005                     	;# 
   849  0006                     	;# 
   850  0007                     	;# 
   851  0008                     	;# 
   852  0009                     	;# 
   853  000A                     	;# 
   854  000B                     	;# 
   855  000C                     	;# 
   856  000E                     	;# 
   857  0011                     	;# 
   858  0012                     	;# 
   859  0015                     	;# 
   860  0016                     	;# 
   861  0016                     	;# 
   862  0017                     	;# 
   863  0018                     	;# 
   864  0019                     	;# 
   865  001A                     	;# 
   866  001B                     	;# 
   867  001C                     	;# 
   868  001E                     	;# 
   869  001F                     	;# 
   870  008C                     	;# 
   871  008E                     	;# 
   872  0091                     	;# 
   873  0092                     	;# 
   874  0095                     	;# 
   875  0096                     	;# 
   876  0097                     	;# 
   877  0098                     	;# 
   878  0099                     	;# 
   879  009A                     	;# 
   880  009B                     	;# 
   881  009B                     	;# 
   882  009C                     	;# 
   883  009D                     	;# 
   884  009E                     	;# 
   885  010C                     	;# 
   886  010E                     	;# 
   887  0111                     	;# 
   888  0112                     	;# 
   889  0113                     	;# 
   890  0114                     	;# 
   891  0115                     	;# 
   892  0116                     	;# 
   893  0117                     	;# 
   894  0118                     	;# 
   895  0119                     	;# 
   896  011A                     	;# 
   897  011B                     	;# 
   898  011D                     	;# 
   899  011D                     	;# 
   900  018C                     	;# 
   901  018E                     	;# 
   902  0191                     	;# 
   903  0191                     	;# 
   904  0192                     	;# 
   905  0193                     	;# 
   906  0193                     	;# 
   907  0193                     	;# 
   908  0194                     	;# 
   909  0195                     	;# 
   910  0196                     	;# 
   911  0199                     	;# 
   912  019A                     	;# 
   913  019B                     	;# 
   914  019B                     	;# 
   915  019B                     	;# 
   916  019B                     	;# 
   917  019C                     	;# 
   918  019C                     	;# 
   919  019D                     	;# 
   920  019E                     	;# 
   921  019F                     	;# 
   922  020C                     	;# 
   923  020E                     	;# 
   924  0211                     	;# 
   925  0211                     	;# 
   926  0212                     	;# 
   927  0212                     	;# 
   928  0213                     	;# 
   929  0213                     	;# 
   930  0214                     	;# 
   931  0214                     	;# 
   932  0215                     	;# 
   933  0215                     	;# 
   934  0215                     	;# 
   935  0216                     	;# 
   936  0216                     	;# 
   937  0217                     	;# 
   938  0217                     	;# 
   939  0291                     	;# 
   940  0291                     	;# 
   941  0292                     	;# 
   942  0293                     	;# 
   943  0294                     	;# 
   944  0295                     	;# 
   945  0295                     	;# 
   946  0296                     	;# 
   947  0391                     	;# 
   948  0392                     	;# 
   949  0393                     	;# 
   950  039A                     	;# 
   951  039C                     	;# 
   952  039D                     	;# 
   953  039E                     	;# 
   954  039F                     	;# 
   955  0FE4                     	;# 
   956  0FE5                     	;# 
   957  0FE6                     	;# 
   958  0FE7                     	;# 
   959  0FE8                     	;# 
   960  0FE9                     	;# 
   961  0FEA                     	;# 
   962  0FEB                     	;# 
   963  0FED                     	;# 
   964  0FEE                     	;# 
   965  0FEF                     	;# 
   966  0000                     	;# 
   967  0001                     	;# 
   968  0002                     	;# 
   969  0003                     	;# 
   970  0004                     	;# 
   971  0005                     	;# 
   972  0006                     	;# 
   973  0007                     	;# 
   974  0008                     	;# 
   975  0009                     	;# 
   976  000A                     	;# 
   977  000B                     	;# 
   978  000C                     	;# 
   979  000E                     	;# 
   980  0011                     	;# 
   981  0012                     	;# 
   982  0015                     	;# 
   983  0016                     	;# 
   984  0016                     	;# 
   985  0017                     	;# 
   986  0018                     	;# 
   987  0019                     	;# 
   988  001A                     	;# 
   989  001B                     	;# 
   990  001C                     	;# 
   991  001E                     	;# 
   992  001F                     	;# 
   993  008C                     	;# 
   994  008E                     	;# 
   995  0091                     	;# 
   996  0092                     	;# 
   997  0095                     	;# 
   998  0096                     	;# 
   999  0097                     	;# 
  1000  0098                     	;# 
  1001  0099                     	;# 
  1002  009A                     	;# 
  1003  009B                     	;# 
  1004  009B                     	;# 
  1005  009C                     	;# 
  1006  009D                     	;# 
  1007  009E                     	;# 
  1008  010C                     	;# 
  1009  010E                     	;# 
  1010  0111                     	;# 
  1011  0112                     	;# 
  1012  0113                     	;# 
  1013  0114                     	;# 
  1014  0115                     	;# 
  1015  0116                     	;# 
  1016  0117                     	;# 
  1017  0118                     	;# 
  1018  0119                     	;# 
  1019  011A                     	;# 
  1020  011B                     	;# 
  1021  011D                     	;# 
  1022  011D                     	;# 
  1023  018C                     	;# 
  1024  018E                     	;# 
  1025  0191                     	;# 
  1026  0191                     	;# 
  1027  0192                     	;# 
  1028  0193                     	;# 
  1029  0193                     	;# 
  1030  0193                     	;# 
  1031  0194                     	;# 
  1032  0195                     	;# 
  1033  0196                     	;# 
  1034  0199                     	;# 
  1035  019A                     	;# 
  1036  019B                     	;# 
  1037  019B                     	;# 
  1038  019B                     	;# 
  1039  019B                     	;# 
  1040  019C                     	;# 
  1041  019C                     	;# 
  1042  019D                     	;# 
  1043  019E                     	;# 
  1044  019F                     	;# 
  1045  020C                     	;# 
  1046  020E                     	;# 
  1047  0211                     	;# 
  1048  0211                     	;# 
  1049  0212                     	;# 
  1050  0212                     	;# 
  1051  0213                     	;# 
  1052  0213                     	;# 
  1053  0214                     	;# 
  1054  0214                     	;# 
  1055  0215                     	;# 
  1056  0215                     	;# 
  1057  0215                     	;# 
  1058  0216                     	;# 
  1059  0216                     	;# 
  1060  0217                     	;# 
  1061  0217                     	;# 
  1062  0291                     	;# 
  1063  0291                     	;# 
  1064  0292                     	;# 
  1065  0293                     	;# 
  1066  0294                     	;# 
  1067  0295                     	;# 
  1068  0295                     	;# 
  1069  0296                     	;# 
  1070  0391                     	;# 
  1071  0392                     	;# 
  1072  0393                     	;# 
  1073  039A                     	;# 
  1074  039C                     	;# 
  1075  039D                     	;# 
  1076  039E                     	;# 
  1077  039F                     	;# 
  1078  0FE4                     	;# 
  1079  0FE5                     	;# 
  1080  0FE6                     	;# 
  1081  0FE7                     	;# 
  1082  0FE8                     	;# 
  1083  0FE9                     	;# 
  1084  0FEA                     	;# 
  1085  0FEB                     	;# 
  1086  0FED                     	;# 
  1087  0FEE                     	;# 
  1088  0FEF                     	;# 
  1089  0000                     	;# 
  1090  0001                     	;# 
  1091  0002                     	;# 
  1092  0003                     	;# 
  1093  0004                     	;# 
  1094  0005                     	;# 
  1095  0006                     	;# 
  1096  0007                     	;# 
  1097  0008                     	;# 
  1098  0009                     	;# 
  1099  000A                     	;# 
  1100  000B                     	;# 
  1101  000C                     	;# 
  1102  000E                     	;# 
  1103  0011                     	;# 
  1104  0012                     	;# 
  1105  0015                     	;# 
  1106  0016                     	;# 
  1107  0016                     	;# 
  1108  0017                     	;# 
  1109  0018                     	;# 
  1110  0019                     	;# 
  1111  001A                     	;# 
  1112  001B                     	;# 
  1113  001C                     	;# 
  1114  001E                     	;# 
  1115  001F                     	;# 
  1116  008C                     	;# 
  1117  008E                     	;# 
  1118  0091                     	;# 
  1119  0092                     	;# 
  1120  0095                     	;# 
  1121  0096                     	;# 
  1122  0097                     	;# 
  1123  0098                     	;# 
  1124  0099                     	;# 
  1125  009A                     	;# 
  1126  009B                     	;# 
  1127  009B                     	;# 
  1128  009C                     	;# 
  1129  009D                     	;# 
  1130  009E                     	;# 
  1131  010C                     	;# 
  1132  010E                     	;# 
  1133  0111                     	;# 
  1134  0112                     	;# 
  1135  0113                     	;# 
  1136  0114                     	;# 
  1137  0115                     	;# 
  1138  0116                     	;# 
  1139  0117                     	;# 
  1140  0118                     	;# 
  1141  0119                     	;# 
  1142  011A                     	;# 
  1143  011B                     	;# 
  1144  011D                     	;# 
  1145  011D                     	;# 
  1146  018C                     	;# 
  1147  018E                     	;# 
  1148  0191                     	;# 
  1149  0191                     	;# 
  1150  0192                     	;# 
  1151  0193                     	;# 
  1152  0193                     	;# 
  1153  0193                     	;# 
  1154  0194                     	;# 
  1155  0195                     	;# 
  1156  0196                     	;# 
  1157  0199                     	;# 
  1158  019A                     	;# 
  1159  019B                     	;# 
  1160  019B                     	;# 
  1161  019B                     	;# 
  1162  019B                     	;# 
  1163  019C                     	;# 
  1164  019C                     	;# 
  1165  019D                     	;# 
  1166  019E                     	;# 
  1167  019F                     	;# 
  1168  020C                     	;# 
  1169  020E                     	;# 
  1170  0211                     	;# 
  1171  0211                     	;# 
  1172  0212                     	;# 
  1173  0212                     	;# 
  1174  0213                     	;# 
  1175  0213                     	;# 
  1176  0214                     	;# 
  1177  0214                     	;# 
  1178  0215                     	;# 
  1179  0215                     	;# 
  1180  0215                     	;# 
  1181  0216                     	;# 
  1182  0216                     	;# 
  1183  0217                     	;# 
  1184  0217                     	;# 
  1185  0291                     	;# 
  1186  0291                     	;# 
  1187  0292                     	;# 
  1188  0293                     	;# 
  1189  0294                     	;# 
  1190  0295                     	;# 
  1191  0295                     	;# 
  1192  0296                     	;# 
  1193  0391                     	;# 
  1194  0392                     	;# 
  1195  0393                     	;# 
  1196  039A                     	;# 
  1197  039C                     	;# 
  1198  039D                     	;# 
  1199  039E                     	;# 
  1200  039F                     	;# 
  1201  0FE4                     	;# 
  1202  0FE5                     	;# 
  1203  0FE6                     	;# 
  1204  0FE7                     	;# 
  1205  0FE8                     	;# 
  1206  0FE9                     	;# 
  1207  0FEA                     	;# 
  1208  0FEB                     	;# 
  1209  0FED                     	;# 
  1210  0FEE                     	;# 
  1211  0FEF                     	;# 
  1212  0000                     	;# 
  1213  0001                     	;# 
  1214  0002                     	;# 
  1215  0003                     	;# 
  1216  0004                     	;# 
  1217  0005                     	;# 
  1218  0006                     	;# 
  1219  0007                     	;# 
  1220  0008                     	;# 
  1221  0009                     	;# 
  1222  000A                     	;# 
  1223  000B                     	;# 
  1224  000C                     	;# 
  1225  000E                     	;# 
  1226  0011                     	;# 
  1227  0012                     	;# 
  1228  0015                     	;# 
  1229  0016                     	;# 
  1230  0016                     	;# 
  1231  0017                     	;# 
  1232  0018                     	;# 
  1233  0019                     	;# 
  1234  001A                     	;# 
  1235  001B                     	;# 
  1236  001C                     	;# 
  1237  001E                     	;# 
  1238  001F                     	;# 
  1239  008C                     	;# 
  1240  008E                     	;# 
  1241  0091                     	;# 
  1242  0092                     	;# 
  1243  0095                     	;# 
  1244  0096                     	;# 
  1245  0097                     	;# 
  1246  0098                     	;# 
  1247  0099                     	;# 
  1248  009A                     	;# 
  1249  009B                     	;# 
  1250  009B                     	;# 
  1251  009C                     	;# 
  1252  009D                     	;# 
  1253  009E                     	;# 
  1254  010C                     	;# 
  1255  010E                     	;# 
  1256  0111                     	;# 
  1257  0112                     	;# 
  1258  0113                     	;# 
  1259  0114                     	;# 
  1260  0115                     	;# 
  1261  0116                     	;# 
  1262  0117                     	;# 
  1263  0118                     	;# 
  1264  0119                     	;# 
  1265  011A                     	;# 
  1266  011B                     	;# 
  1267  011D                     	;# 
  1268  011D                     	;# 
  1269  018C                     	;# 
  1270  018E                     	;# 
  1271  0191                     	;# 
  1272  0191                     	;# 
  1273  0192                     	;# 
  1274  0193                     	;# 
  1275  0193                     	;# 
  1276  0193                     	;# 
  1277  0194                     	;# 
  1278  0195                     	;# 
  1279  0196                     	;# 
  1280  0199                     	;# 
  1281  019A                     	;# 
  1282  019B                     	;# 
  1283  019B                     	;# 
  1284  019B                     	;# 
  1285  019B                     	;# 
  1286  019C                     	;# 
  1287  019C                     	;# 
  1288  019D                     	;# 
  1289  019E                     	;# 
  1290  019F                     	;# 
  1291  020C                     	;# 
  1292  020E                     	;# 
  1293  0211                     	;# 
  1294  0211                     	;# 
  1295  0212                     	;# 
  1296  0212                     	;# 
  1297  0213                     	;# 
  1298  0213                     	;# 
  1299  0214                     	;# 
  1300  0214                     	;# 
  1301  0215                     	;# 
  1302  0215                     	;# 
  1303  0215                     	;# 
  1304  0216                     	;# 
  1305  0216                     	;# 
  1306  0217                     	;# 
  1307  0217                     	;# 
  1308  0291                     	;# 
  1309  0291                     	;# 
  1310  0292                     	;# 
  1311  0293                     	;# 
  1312  0294                     	;# 
  1313  0295                     	;# 
  1314  0295                     	;# 
  1315  0296                     	;# 
  1316  0391                     	;# 
  1317  0392                     	;# 
  1318  0393                     	;# 
  1319  039A                     	;# 
  1320  039C                     	;# 
  1321  039D                     	;# 
  1322  039E                     	;# 
  1323  039F                     	;# 
  1324  0FE4                     	;# 
  1325  0FE5                     	;# 
  1326  0FE6                     	;# 
  1327  0FE7                     	;# 
  1328  0FE8                     	;# 
  1329  0FE9                     	;# 
  1330  0FEA                     	;# 
  1331  0FEB                     	;# 
  1332  0FED                     	;# 
  1333  0FEE                     	;# 
  1334  0FEF                     	;# 
  1335                           
  1336                           	psect	stringtext1
  1337  0761                     __pstringtext1:
  1338  0761                     _ROTATION_TIME:
  1339  0761  3478               	retlw	120
  1340  0762  3400               	retlw	0
  1341  0763  3400               	retlw	0
  1342  0764                     __end_of_ROTATION_TIME:
  1343                           
  1344                           	psect	stringtext2
  1345  0764                     __pstringtext2:
  1346  0764                     _GOOD_WSP_VOLTAGE:
  1347  0764  3440               	retlw	64
  1348  0765  349C               	retlw	156
  1349  0766  3400               	retlw	0
  1350  0767                     __end_of_GOOD_WSP_VOLTAGE:
  1351                           
  1352                           	psect	stringtext3
  1353  0767                     __pstringtext3:
  1354  0767                     _BAD_WSP_VOLTAGE:
  1355  0767  3420               	retlw	32
  1356  0768  344E               	retlw	78
  1357  0769  3400               	retlw	0
  1358  076A                     __end_of_BAD_WSP_VOLTAGE:
  1359                           
  1360                           	psect	nvBANK0
  1361  0060                     __pnvBANK0:
  1362  0060                     _TMR0_InterruptHandler:
  1363  0060                     	ds	2
  1364  0062                     _TMR2_InterruptHandler:
  1365  0062                     	ds	2
  1366  0064                     _timer0ReloadVal:
  1367  0064                     	ds	1
  1368  0015                     _TMR0	set	21
  1369  001C                     _T2CONbits	set	28
  1370  001C                     _T2CON	set	28
  1371  001A                     _TMR2	set	26
  1372  001B                     _PR2	set	27
  1373  0011                     _PIR1bits	set	17
  1374  000B                     _INTCONbits	set	11
  1375  005F                     _GIE	set	95
  1376  008E                     _TRISCbits	set	142
  1377  008C                     _TRISAbits	set	140
  1378  0095                     _OPTION_REG	set	149
  1379  0091                     _PIE1bits	set	145
  1380  0095                     _OPTION_REGbits	set	149
  1381  008E                     _TRISC	set	142
  1382  008C                     _TRISA	set	140
  1383  009D                     _ADCON0bits	set	157
  1384  009D                     _ADCON0	set	157
  1385  009C                     _ADRESH	set	156
  1386  009B                     _ADRESL	set	155
  1387  009E                     _ADCON1	set	158
  1388  0097                     _WDTCON	set	151
  1389  0098                     _OSCTUNE	set	152
  1390  0099                     _OSCCON	set	153
  1391  010E                     _LATCbits	set	270
  1392  010C                     _LATAbits	set	268
  1393  0117                     _FVRCONbits	set	279
  1394  0117                     _FVRCON	set	279
  1395  011D                     _APFCON	set	285
  1396  010E                     _LATC	set	270
  1397  010C                     _LATA	set	268
  1398  0116                     _BORCON	set	278
  1399  0191                     _EEADR	set	401
  1400  0196                     _EECON2	set	406
  1401  0193                     _EEDATA	set	403
  1402  018C                     _ANSELAbits	set	396
  1403  018E                     _ANSELCbits	set	398
  1404  018C                     _ANSELA	set	396
  1405  018E                     _ANSELC	set	398
  1406  0CA8                     _RD	set	3240
  1407  0CAA                     _WREN	set	3242
  1408  0CA9                     _WR	set	3241
  1409  020E                     _WPUCbits	set	526
  1410  020C                     _WPUAbits	set	524
  1411  020E                     _WPUC	set	526
  1412  020C                     _WPUA	set	524
  1413                           
  1414                           	psect	cinit
  1415  0027                     start_initialization:	
  1416                           ; #config settings
  1417                           
  1418  0027                     __initialization:
  1419                           
  1420                           ; Clear objects allocated to COMMON
  1421  0027  01F8               	clrf	__pbssCOMMON& (0+127)
  1422  0028  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  1423  0029  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  1424  002A  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  1425  002B  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  1426                           
  1427                           ; Clear objects allocated to BANK0
  1428  002C  3049               	movlw	low __pbssBANK0
  1429  002D  0084               	movwf	4
  1430  002E  3000               	movlw	high __pbssBANK0
  1431  002F  0085               	movwf	5
  1432  0030  3017               	movlw	23
  1433  0031  3187  2738  3180   	fcall	clear_ram0
  1434                           
  1435                           ; Clear objects allocated to BANK1
  1436  0034  30A0               	movlw	low __pbssBANK1
  1437  0035  0084               	movwf	4
  1438  0036  3000               	movlw	high __pbssBANK1
  1439  0037  0085               	movwf	5
  1440  0038  3010               	movlw	16
  1441  0039  3187  2738  3180   	fcall	clear_ram0
  1442  003C                     end_of_initialization:	
  1443                           ;End of C runtime variable initialization code
  1444                           
  1445  003C                     __end_of__initialization:
  1446  003C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1447  003D  0020               	movlb	0
  1448  003E  2DF6               	ljmp	_main	;jump to C main() function
  1449                           
  1450                           	psect	bssCOMMON
  1451  0078                     __pbssCOMMON:
  1452  0078                     TMR2_ISR@CountCallBack:
  1453  0078                     	ds	2
  1454  007A                     sec_tick_work@iled:
  1455  007A                     	ds	1
  1456  007B                     get_measure@measures:
  1457  007B                     	ds	1
  1458  007C                     _FLAGS:
  1459  007C                     	ds	1
  1460                           
  1461                           	psect	bssBANK0
  1462  0049                     __pbssBANK0:
  1463  0049                     get_time@F2659:
  1464  0049                     	ds	9
  1465  0052                     get_time@F2661:
  1466  0052                     	ds	3
  1467  0055                     _time_s:
  1468  0055                     	ds	3
  1469  0058                     _ADC_InterruptHandler:
  1470  0058                     	ds	2
  1471  005A                     get_jump_full@jump_counter:
  1472  005A                     	ds	1
  1473  005B                     get_jump@jump_counter:
  1474  005B                     	ds	1
  1475  005C                     get_fun_full@fun_counter:
  1476  005C                     	ds	1
  1477  005D                     get_fun@fun_counter:
  1478  005D                     	ds	1
  1479  005E                     _time_pow_s:
  1480  005E                     	ds	1
  1481  005F                     _START_EEPROM_ADR:
  1482  005F                     	ds	1
  1483                           
  1484                           	psect	bssBANK1
  1485  00A0                     __pbssBANK1:
  1486  00A0                     get_adr@F2639:
  1487  00A0                     	ds	16
  1488                           
  1489                           	psect	clrtext
  1490  0738                     clear_ram0:	
  1491                           ;	Called with FSR0 containing the base address, and
  1492                           ;	WREG with the size to clear
  1493                           
  1494  0738  0064               	clrwdt	;clear the watchdog before getting into this loop
  1495  0739                     clrloop0:
  1496  0739  0180               	clrf	0	;clear RAM location pointed to by FSR
  1497  073A  3101               	addfsr 0,1
  1498  073B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1499  073C  2F39               	goto	clrloop0	;have we reached the end yet?
  1500  073D  3400               	retlw	0	;all done for this memory range, return
  1501                           
  1502                           	psect	cstackCOMMON
  1503  0070                     __pcstackCOMMON:
  1504  0070                     ?_PIN_MANAGER_Initialize:
  1505  0070                     ?_OSCILLATOR_Initialize:	
  1506                           ; 1 bytes @ 0x0
  1507                           
  1508  0070                     ?_WDT_Initialize:	
  1509                           ; 1 bytes @ 0x0
  1510                           
  1511  0070                     ?_FVR_Initialize:	
  1512                           ; 1 bytes @ 0x0
  1513                           
  1514  0070                     ?_ADC_Initialize:	
  1515                           ; 1 bytes @ 0x0
  1516                           
  1517  0070                     ?_TMR2_Initialize:	
  1518                           ; 1 bytes @ 0x0
  1519                           
  1520  0070                     ?_TMR0_Initialize:	
  1521                           ; 1 bytes @ 0x0
  1522                           
  1523  0070                     ?_TMR0_ISR:	
  1524                           ; 1 bytes @ 0x0
  1525                           
  1526  0070                     ??_TMR0_ISR:	
  1527                           ; 1 bytes @ 0x0
  1528                           
  1529  0070                     ?_TMR2_ISR:	
  1530                           ; 1 bytes @ 0x0
  1531                           
  1532  0070                     ?_TMR2_DefaultInterruptHandler:	
  1533                           ; 1 bytes @ 0x0
  1534                           
  1535  0070                     ??_TMR2_DefaultInterruptHandler:	
  1536                           ; 1 bytes @ 0x0
  1537                           
  1538  0070                     ?_TMR2_CallBack:	
  1539                           ; 1 bytes @ 0x0
  1540                           
  1541  0070                     ?_TMR0_DefaultInterruptHandler:	
  1542                           ; 1 bytes @ 0x0
  1543                           
  1544  0070                     ??_TMR0_DefaultInterruptHandler:	
  1545                           ; 1 bytes @ 0x0
  1546                           
  1547  0070                     ?_EEPROM_ReadByte:	
  1548                           ; 1 bytes @ 0x0
  1549                           
  1550  0070                     ?_SYSTEM_Initialize:	
  1551                           ; 1 bytes @ 0x0
  1552                           
  1553  0070                     ?_INTERRUPT_InterruptManager:	
  1554                           ; 1 bytes @ 0x0
  1555                           
  1556  0070                     ?_TMR2_StartTimer:	
  1557                           ; 1 bytes @ 0x0
  1558                           
  1559  0070                     ?_switch_zum:	
  1560                           ; 1 bytes @ 0x0
  1561                           
  1562  0070                     ?_toggle_tone:	
  1563                           ; 1 bytes @ 0x0
  1564                           
  1565  0070                     ??_toggle_tone:	
  1566                           ; 1 bytes @ 0x0
  1567                           
  1568  0070                     ?_go_close:	
  1569                           ; 1 bytes @ 0x0
  1570                           
  1571  0070                     ?_go_open:	
  1572                           ; 1 bytes @ 0x0
  1573                           
  1574  0070                     ?_go_close_alt:	
  1575                           ; 1 bytes @ 0x0
  1576                           
  1577  0070                     ?_go_open_alt:	
  1578                           ; 1 bytes @ 0x0
  1579                           
  1580  0070                     ?_start_alarm:	
  1581                           ; 1 bytes @ 0x0
  1582                           
  1583  0070                     ?_get_measure:	
  1584                           ; 1 bytes @ 0x0
  1585                           
  1586  0070                     ?_get_fun:	
  1587                           ; 1 bytes @ 0x0
  1588                           
  1589  0070                     ?_get_fun_full:	
  1590                           ; 1 bytes @ 0x0
  1591                           
  1592  0070                     ?_get_jump:	
  1593                           ; 1 bytes @ 0x0
  1594                           
  1595  0070                     ?_get_jump_full:	
  1596                           ; 1 bytes @ 0x0
  1597                           
  1598  0070                     ?_rele_tick:	
  1599                           ; 1 bytes @ 0x0
  1600                           
  1601  0070                     ??_rele_tick:	
  1602                           ; 1 bytes @ 0x0
  1603                           
  1604  0070                     ?_sec_tick_work:	
  1605                           ; 1 bytes @ 0x0
  1606                           
  1607  0070                     ?_povorot:	
  1608                           ; 1 bytes @ 0x0
  1609                           
  1610  0070                     ?_fun_work:	
  1611                           ; 1 bytes @ 0x0
  1612                           
  1613  0070                     ?_switch_wm:	
  1614                           ; 1 bytes @ 0x0
  1615                           
  1616  0070                     ?_get_voltage:	
  1617                           ; 1 bytes @ 0x0
  1618                           
  1619  0070                     ?_get_adr:	
  1620                           ; 1 bytes @ 0x0
  1621                           
  1622  0070                     ?_get_time:	
  1623                           ; 1 bytes @ 0x0
  1624                           
  1625  0070                     ?_get_eeprom:	
  1626                           ; 1 bytes @ 0x0
  1627                           
  1628  0070                     ?_start_setup:	
  1629                           ; 1 bytes @ 0x0
  1630                           
  1631  0070                     ?_main:	
  1632                           ; 1 bytes @ 0x0
  1633                           
  1634  0070                     ?i1_switch_zum:	
  1635                           ; 1 bytes @ 0x0
  1636                           
  1637  0070                     ??i1_switch_zum:	
  1638                           ; 1 bytes @ 0x0
  1639                           
  1640  0070                     ?i1_go_close:	
  1641                           ; 1 bytes @ 0x0
  1642                           
  1643  0070                     ??i1_go_close:	
  1644                           ; 1 bytes @ 0x0
  1645                           
  1646  0070                     ?i1_go_close_alt:	
  1647                           ; 1 bytes @ 0x0
  1648                           
  1649  0070                     ??i1_go_close_alt:	
  1650                           ; 1 bytes @ 0x0
  1651                           
  1652  0070                     ?i1_ADC_GetConversion:	
  1653                           ; 1 bytes @ 0x0
  1654                           
  1655                           
  1656                           ; 2 bytes @ 0x0
  1657  0070                     	ds	2
  1658  0072                     ??_start_alarm:
  1659  0072                     ??i1_ADC_GetConversion:	
  1660                           ; 1 bytes @ 0x2
  1661                           
  1662                           
  1663                           ; 1 bytes @ 0x2
  1664  0072                     	ds	1
  1665  0073                     i1ADC_GetConversion@channel:
  1666                           
  1667                           ; 1 bytes @ 0x3
  1668  0073                     	ds	1
  1669  0074                     ??_get_measure:
  1670                           
  1671                           ; 1 bytes @ 0x4
  1672  0074                     	ds	1
  1673  0075                     get_measure@res:
  1674                           
  1675                           ; 2 bytes @ 0x5
  1676  0075                     	ds	2
  1677  0077                     ??_sec_tick_work:
  1678                           
  1679                           ; 1 bytes @ 0x7
  1680  0077                     	ds	1
  1681  0078                     ??_TMR2_ISR:
  1682  0078                     ??_TMR2_CallBack:	
  1683                           ; 1 bytes @ 0x8
  1684                           
  1685  0078                     ??_INTERRUPT_InterruptManager:	
  1686                           ; 1 bytes @ 0x8
  1687                           
  1688                           
  1689                           	psect	cstackBANK0
  1690  0020                     __pcstackBANK0:	
  1691                           ; 1 bytes @ 0x8
  1692                           
  1693  0020                     ??_PIN_MANAGER_Initialize:
  1694  0020                     ??_OSCILLATOR_Initialize:	
  1695                           ; 1 bytes @ 0x0
  1696                           
  1697  0020                     ??_WDT_Initialize:	
  1698                           ; 1 bytes @ 0x0
  1699                           
  1700  0020                     ??_FVR_Initialize:	
  1701                           ; 1 bytes @ 0x0
  1702                           
  1703  0020                     ??_ADC_Initialize:	
  1704                           ; 1 bytes @ 0x0
  1705                           
  1706  0020                     ?_TMR2_SetInterruptHandler:	
  1707                           ; 1 bytes @ 0x0
  1708                           
  1709  0020                     ?_TMR0_SetInterruptHandler:	
  1710                           ; 1 bytes @ 0x0
  1711                           
  1712  0020                     ??_EEPROM_ReadByte:	
  1713                           ; 1 bytes @ 0x0
  1714                           
  1715  0020                     ?_EEPROM_WriteByte:	
  1716                           ; 1 bytes @ 0x0
  1717                           
  1718  0020                     ??_TMR2_StartTimer:	
  1719                           ; 1 bytes @ 0x0
  1720                           
  1721  0020                     ??_switch_zum:	
  1722                           ; 1 bytes @ 0x0
  1723                           
  1724  0020                     ?_beep:	
  1725                           ; 1 bytes @ 0x0
  1726                           
  1727  0020                     ??_go_close:	
  1728                           ; 1 bytes @ 0x0
  1729                           
  1730  0020                     ??_go_open:	
  1731                           ; 1 bytes @ 0x0
  1732                           
  1733  0020                     ??_go_close_alt:	
  1734                           ; 1 bytes @ 0x0
  1735                           
  1736  0020                     ??_go_open_alt:	
  1737                           ; 1 bytes @ 0x0
  1738                           
  1739  0020                     ?___bmul:	
  1740                           ; 1 bytes @ 0x0
  1741                           
  1742  0020                     ?_ADC_GetConversion:	
  1743                           ; 1 bytes @ 0x0
  1744                           
  1745  0020                     beep@count:	
  1746                           ; 2 bytes @ 0x0
  1747                           
  1748  0020                     EEPROM_WriteByte@dt:	
  1749                           ; 1 bytes @ 0x0
  1750                           
  1751  0020                     ___bmul@multiplicand:	
  1752                           ; 1 bytes @ 0x0
  1753                           
  1754  0020                     TMR2_SetInterruptHandler@InterruptHandler:	
  1755                           ; 1 bytes @ 0x0
  1756                           
  1757  0020                     TMR0_SetInterruptHandler@InterruptHandler:	
  1758                           ; 2 bytes @ 0x0
  1759                           
  1760                           
  1761                           ; 2 bytes @ 0x0
  1762  0020                     	ds	1
  1763  0021                     ??_EEPROM_WriteByte:
  1764  0021                     ??_beep:	
  1765                           ; 1 bytes @ 0x1
  1766                           
  1767  0021                     ??___bmul:	
  1768                           ; 1 bytes @ 0x1
  1769                           
  1770                           
  1771                           ; 1 bytes @ 0x1
  1772  0021                     	ds	1
  1773  0022                     ??_TMR2_Initialize:
  1774  0022                     ??_TMR0_Initialize:	
  1775                           ; 1 bytes @ 0x2
  1776                           
  1777  0022                     ??_TMR2_SetInterruptHandler:	
  1778                           ; 1 bytes @ 0x2
  1779                           
  1780  0022                     ??_TMR0_SetInterruptHandler:	
  1781                           ; 1 bytes @ 0x2
  1782                           
  1783  0022                     ??_ADC_GetConversion:	
  1784                           ; 1 bytes @ 0x2
  1785                           
  1786  0022                     ??_povorot:	
  1787                           ; 1 bytes @ 0x2
  1788                           
  1789  0022                     EEPROM_ReadByte@addr:	
  1790                           ; 1 bytes @ 0x2
  1791                           
  1792  0022                     ___bmul@product:	
  1793                           ; 1 bytes @ 0x2
  1794                           
  1795                           
  1796                           ; 1 bytes @ 0x2
  1797  0022                     	ds	1
  1798  0023                     ??_SYSTEM_Initialize:
  1799  0023                     ??_get_adr:	
  1800                           ; 1 bytes @ 0x3
  1801                           
  1802  0023                     ?_EEPROM_ReadShortLong:	
  1803                           ; 1 bytes @ 0x3
  1804                           
  1805  0023                     ADC_GetConversion@channel:	
  1806                           ; 3 bytes @ 0x3
  1807                           
  1808  0023                     beep@time:	
  1809                           ; 1 bytes @ 0x3
  1810                           
  1811  0023                     EEPROM_WriteByte@addr:	
  1812                           ; 1 bytes @ 0x3
  1813                           
  1814  0023                     ___bmul@multiplier:	
  1815                           ; 1 bytes @ 0x3
  1816                           
  1817                           
  1818                           ; 1 bytes @ 0x3
  1819  0023                     	ds	1
  1820  0024                     ??_get_fun:
  1821  0024                     ??_get_fun_full:	
  1822                           ; 1 bytes @ 0x4
  1823                           
  1824  0024                     ??_get_jump:	
  1825                           ; 1 bytes @ 0x4
  1826                           
  1827  0024                     ??_get_jump_full:	
  1828                           ; 1 bytes @ 0x4
  1829                           
  1830  0024                     beep@j:	
  1831                           ; 1 bytes @ 0x4
  1832                           
  1833  0024                     EEPROM_WriteByte@status:	
  1834                           ; 1 bytes @ 0x4
  1835                           
  1836  0024                     get_adr@adr:	
  1837                           ; 1 bytes @ 0x4
  1838                           
  1839                           
  1840                           ; 16 bytes @ 0x4
  1841  0024                     	ds	1
  1842  0025                     ?_EEPROM_WriteShortLong:
  1843  0025                     beep@i:	
  1844                           ; 1 bytes @ 0x5
  1845                           
  1846  0025                     get_fun@res:	
  1847                           ; 1 bytes @ 0x5
  1848                           
  1849  0025                     get_fun_full@res:	
  1850                           ; 2 bytes @ 0x5
  1851                           
  1852  0025                     get_jump@res:	
  1853                           ; 2 bytes @ 0x5
  1854                           
  1855  0025                     get_jump_full@res:	
  1856                           ; 2 bytes @ 0x5
  1857                           
  1858  0025                     EEPROM_WriteShortLong@ucData:	
  1859                           ; 2 bytes @ 0x5
  1860                           
  1861                           
  1862                           ; 3 bytes @ 0x5
  1863  0025                     	ds	1
  1864  0026                     ??_EEPROM_ReadShortLong:
  1865  0026                     ??_fun_work:	
  1866                           ; 1 bytes @ 0x6
  1867                           
  1868  0026                     ??_switch_wm:	
  1869                           ; 1 bytes @ 0x6
  1870                           
  1871                           
  1872                           ; 1 bytes @ 0x6
  1873  0026                     	ds	1
  1874  0027                     get_fun_full@flag:
  1875  0027                     get_jump_full@flag:	
  1876                           ; 1 bytes @ 0x7
  1877                           
  1878                           
  1879                           ; 1 bytes @ 0x7
  1880  0027                     	ds	1
  1881  0028                     ??_EEPROM_WriteShortLong:
  1882                           
  1883                           ; 1 bytes @ 0x8
  1884  0028                     	ds	4
  1885  002C                     EEPROM_WriteShortLong@dt:
  1886  002C                     EEPROM_ReadShortLong@dt:	
  1887                           ; 1 bytes @ 0xC
  1888                           
  1889                           
  1890                           ; 3 bytes @ 0xC
  1891  002C                     	ds	1
  1892  002D                     EEPROM_WriteShortLong@addr:
  1893                           
  1894                           ; 1 bytes @ 0xD
  1895  002D                     	ds	1
  1896  002E                     ??_get_voltage:
  1897                           
  1898                           ; 1 bytes @ 0xE
  1899  002E                     	ds	1
  1900  002F                     EEPROM_ReadShortLong@addr:
  1901                           
  1902                           ; 1 bytes @ 0xF
  1903  002F                     	ds	1
  1904  0030                     ??_get_time:
  1905  0030                     get_voltage@buf_800:	
  1906                           ; 1 bytes @ 0x10
  1907                           
  1908                           
  1909                           ; 3 bytes @ 0x10
  1910  0030                     	ds	3
  1911  0033                     get_voltage@res:
  1912                           
  1913                           ; 2 bytes @ 0x13
  1914  0033                     	ds	1
  1915  0034                     get_adr@i:
  1916  0034                     get_time@times:	
  1917                           ; 1 bytes @ 0x14
  1918                           
  1919                           
  1920                           ; 9 bytes @ 0x14
  1921  0034                     	ds	1
  1922  0035                     get_voltage@buf:
  1923  0035                     get_adr@q:	
  1924                           ; 1 bytes @ 0x15
  1925                           
  1926                           
  1927                           ; 1 bytes @ 0x15
  1928  0035                     	ds	1
  1929  0036                     get_voltage@q_801:
  1930  0036                     get_adr@i_811:	
  1931                           ; 1 bytes @ 0x16
  1932                           
  1933                           
  1934                           ; 1 bytes @ 0x16
  1935  0036                     	ds	1
  1936  0037                     get_voltage@q:
  1937  0037                     get_adr@q_810:	
  1938                           ; 1 bytes @ 0x17
  1939                           
  1940                           
  1941                           ; 1 bytes @ 0x17
  1942  0037                     	ds	1
  1943  0038                     get_adr@buf:
  1944                           
  1945                           ; 1 bytes @ 0x18
  1946  0038                     	ds	5
  1947  003D                     get_time@adr_error:
  1948                           
  1949                           ; 1 bytes @ 0x1D
  1950  003D                     	ds	1
  1951  003E                     get_time@time_count:
  1952                           
  1953                           ; 3 bytes @ 0x1E
  1954  003E                     	ds	3
  1955  0041                     get_time@buf2:
  1956                           
  1957                           ; 3 bytes @ 0x21
  1958  0041                     	ds	3
  1959  0044                     get_time@i:
  1960                           
  1961                           ; 1 bytes @ 0x24
  1962  0044                     	ds	1
  1963  0045                     get_time@buf:
  1964                           
  1965                           ; 1 bytes @ 0x25
  1966  0045                     	ds	1
  1967  0046                     get_time@q:
  1968                           
  1969                           ; 1 bytes @ 0x26
  1970  0046                     	ds	1
  1971  0047                     get_time@q_823:
  1972                           
  1973                           ; 1 bytes @ 0x27
  1974  0047                     	ds	1
  1975  0048                     get_time@q_822:
  1976                           
  1977                           ; 1 bytes @ 0x28
  1978  0048                     	ds	1
  1979  0049                     ??_get_eeprom:
  1980  0049                     ??_start_setup:	
  1981                           ; 1 bytes @ 0x29
  1982                           
  1983  0049                     ??_main:	
  1984                           ; 1 bytes @ 0x29
  1985                           
  1986                           
  1987                           	psect	maintext
  1988  05F6                     __pmaintext:	
  1989                           ; 1 bytes @ 0x29
  1990 ;;
  1991 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1992 ;;
  1993 ;; *************** function _main *****************
  1994 ;; Defined at:
  1995 ;;		line 513 in file "main.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;		None
  1998 ;; Auto vars:     Size  Location     Type
  1999 ;;		None
  2000 ;; Return value:  Size  Location     Type
  2001 ;;                  1    wreg      void 
  2002 ;; Registers used:
  2003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2004 ;; Tracked objects:
  2005 ;;		On entry : B1F/0
  2006 ;;		On exit  : 0/0
  2007 ;;		Unchanged: 0/0
  2008 ;; Data sizes:     COMMON   BANK0   BANK1
  2009 ;;      Params:         0       0       0
  2010 ;;      Locals:         0       0       0
  2011 ;;      Temps:          0       0       0
  2012 ;;      Totals:         0       0       0
  2013 ;;Total ram usage:        0 bytes
  2014 ;; Hardware stack levels required when called: 12
  2015 ;; This function calls:
  2016 ;;		_fun_work
  2017 ;;		_get_fun
  2018 ;;		_get_jump
  2019 ;;		_get_voltage
  2020 ;;		_povorot
  2021 ;;		_start_setup
  2022 ;;		_switch_wm
  2023 ;; This function is called by:
  2024 ;;		Startup code after reset
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028  05F6                     _main:	
  2029                           ;psect for function _main
  2030                           
  2031  05F6                     l2693:	
  2032                           ;incstack = 0
  2033                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2034                           
  2035                           
  2036                           ;main.c: 515:     start_setup();
  2037  05F6  3184  2486  3185   	fcall	_start_setup
  2038  05F9                     l2695:
  2039                           
  2040                           ;main.c: 518:         get_voltage();
  2041  05F9  3181  21D8  3185   	fcall	_get_voltage
  2042  05FC                     l2697:
  2043                           
  2044                           ;main.c: 519:         if (!FLAGS.bits.ALARM) {
  2045  05FC  187C               	btfsc	_FLAGS,0
  2046  05FD  2DFF               	goto	u2061
  2047  05FE  2E00               	goto	u2060
  2048  05FF                     u2061:
  2049  05FF  2DF9               	goto	l2695
  2050  0600                     u2060:
  2051  0600                     l2699:
  2052                           
  2053                           ;main.c: 520:             get_fun();
  2054  0600  3183  23D0  3185   	fcall	_get_fun
  2055                           
  2056                           ;main.c: 521:             fun_work();
  2057  0603  3183  234E  3185   	fcall	_fun_work
  2058                           
  2059                           ;main.c: 522:             get_jump();
  2060  0606  3184  244C  3185   	fcall	_get_jump
  2061                           
  2062                           ;main.c: 523:             switch_wm();
  2063  0609  3185  2575  3185   	fcall	_switch_wm
  2064                           
  2065                           ;main.c: 524:             povorot();
  2066  060C  3182  22C7  3185   	fcall	_povorot
  2067  060F  2DF9               	goto	l2695
  2068  0610  2826               	ljmp	start
  2069  0611                     __end_of_main:
  2070                           
  2071                           	psect	text1
  2072  0575                     __ptext1:	
  2073 ;; *************** function _switch_wm *****************
  2074 ;; Defined at:
  2075 ;;		line 372 in file "main.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;		None
  2078 ;; Auto vars:     Size  Location     Type
  2079 ;;		None
  2080 ;; Return value:  Size  Location     Type
  2081 ;;                  1    wreg      void 
  2082 ;; Registers used:
  2083 ;;		wreg, status,2, status,0, pclath, cstack
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMMON   BANK0   BANK1
  2089 ;;      Params:         0       0       0
  2090 ;;      Locals:         0       0       0
  2091 ;;      Temps:          0       1       0
  2092 ;;      Totals:         0       1       0
  2093 ;;Total ram usage:        1 bytes
  2094 ;; Hardware stack levels used: 1
  2095 ;; Hardware stack levels required when called: 9
  2096 ;; This function calls:
  2097 ;;		_beep
  2098 ;; This function is called by:
  2099 ;;		_main
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103  0575                     _switch_wm:	
  2104                           ;psect for function _switch_wm
  2105                           
  2106  0575                     l2579:	
  2107                           ;incstack = 0
  2108                           ; Regs used in _switch_wm: [wreg+status,2+status,0+pclath+cstack]
  2109                           
  2110                           
  2111                           ;main.c: 373:     if (FLAGS.bits._JUMP_CONNECTED) {
  2112  0575  1E7C               	btfss	_FLAGS,4
  2113  0576  2D78               	goto	u1941
  2114  0577  2D79               	goto	u1940
  2115  0578                     u1941:
  2116  0578  2D88               	goto	l445
  2117  0579                     u1940:
  2118  0579                     l2581:
  2119                           
  2120                           ;main.c: 374:         if (FLAGS.bits.NORMAL_WORK_MODE) {
  2121  0579  1CFC               	btfss	_FLAGS,1
  2122  057A  2D7C               	goto	u1951
  2123  057B  2D7D               	goto	u1950
  2124  057C                     u1951:
  2125  057C  2D96               	goto	l449
  2126  057D                     u1950:
  2127  057D                     l2583:
  2128                           
  2129                           ;main.c: 375:             FLAGS.bits.NORMAL_WORK_MODE = 0;
  2130  057D  10FC               	bcf	_FLAGS,1
  2131  057E                     l2585:
  2132                           
  2133                           ;main.c: 378:             beep( 40, 8);
  2134  057E  3008               	movlw	8
  2135  057F  0020               	movlb	0	; select bank0
  2136  0580  00A6               	movwf	??_switch_wm
  2137  0581  0826               	movf	??_switch_wm,w
  2138  0582  00A0               	movwf	beep@count
  2139  0583  3028               	movlw	40
  2140  0584  3184  24F0  3185   	fcall	_beep
  2141  0587  2D96               	goto	l449
  2142  0588                     l445:
  2143                           
  2144                           ;main.c: 381:         if (!FLAGS.bits.NORMAL_WORK_MODE) {
  2145  0588  18FC               	btfsc	_FLAGS,1
  2146  0589  2D8B               	goto	u1961
  2147  058A  2D8C               	goto	u1960
  2148  058B                     u1961:
  2149  058B  2D96               	goto	l449
  2150  058C                     u1960:
  2151  058C                     l2587:
  2152                           
  2153                           ;main.c: 382:             FLAGS.bits.NORMAL_WORK_MODE = 1;
  2154  058C  14FC               	bsf	_FLAGS,1
  2155  058D                     l2589:
  2156                           
  2157                           ;main.c: 385:             beep(40, 4);
  2158  058D  3004               	movlw	4
  2159  058E  0020               	movlb	0	; select bank0
  2160  058F  00A6               	movwf	??_switch_wm
  2161  0590  0826               	movf	??_switch_wm,w
  2162  0591  00A0               	movwf	beep@count
  2163  0592  3028               	movlw	40
  2164  0593  3184  24F0  3185   	fcall	_beep
  2165  0596                     l449:
  2166  0596  0008               	return
  2167  0597                     __end_of_switch_wm:
  2168                           
  2169                           	psect	text2
  2170  0486                     __ptext2:	
  2171 ;; *************** function _start_setup *****************
  2172 ;; Defined at:
  2173 ;;		line 479 in file "main.c"
  2174 ;; Parameters:    Size  Location     Type
  2175 ;;		None
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;		None
  2178 ;; Return value:  Size  Location     Type
  2179 ;;                  1    wreg      void 
  2180 ;; Registers used:
  2181 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2182 ;; Tracked objects:
  2183 ;;		On entry : 0/0
  2184 ;;		On exit  : 0/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMMON   BANK0   BANK1
  2187 ;;      Params:         0       0       0
  2188 ;;      Locals:         0       0       0
  2189 ;;      Temps:          0       0       0
  2190 ;;      Totals:         0       0       0
  2191 ;;Total ram usage:        0 bytes
  2192 ;; Hardware stack levels used: 1
  2193 ;; Hardware stack levels required when called: 11
  2194 ;; This function calls:
  2195 ;;		_SYSTEM_Initialize
  2196 ;;		_TMR0_SetInterruptHandler
  2197 ;;		_TMR2_SetInterruptHandler
  2198 ;;		_TMR2_StartTimer
  2199 ;;		_get_eeprom
  2200 ;;		_get_fun_full
  2201 ;;		_get_jump_full
  2202 ;; This function is called by:
  2203 ;;		_main
  2204 ;; This function uses a non-reentrant model
  2205 ;;
  2206                           
  2207  0486                     _start_setup:	
  2208                           ;psect for function _start_setup
  2209                           
  2210  0486                     l2619:	
  2211                           ;incstack = 0
  2212                           ; Regs used in _start_setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2213                           
  2214                           
  2215                           ;main.c: 481:     SYSTEM_Initialize();
  2216  0486  3186  265B  3184   	fcall	_SYSTEM_Initialize
  2217  0489                     l2621:
  2218                           
  2219                           ;main.c: 482:     (INTCONbits.GIE = 1);
  2220  0489  178B               	bsf	11,7	;volatile
  2221  048A                     l2623:
  2222                           
  2223                           ;main.c: 483:     (INTCONbits.PEIE = 1);
  2224  048A  170B               	bsf	11,6	;volatile
  2225  048B                     l2625:
  2226                           
  2227                           ;main.c: 485:     get_eeprom();
  2228  048B  3187  272A  3184   	fcall	_get_eeprom
  2229  048E                     l2627:
  2230                           
  2231                           ;main.c: 486:     TMR0_SetInterruptHandler(switch_zum);
  2232  048E  30C4               	movlw	low _switch_zum
  2233  048F  0020               	movlb	0	; select bank0
  2234  0490  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2235  0491  3006               	movlw	high _switch_zum
  2236  0492  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2237  0493  3187  2744  3184   	fcall	_TMR0_SetInterruptHandler
  2238  0496                     l2629:
  2239                           
  2240                           ;main.c: 487:     TMR2_SetInterruptHandler(sec_tick_work);
  2241  0496  300E               	movlw	low _sec_tick_work
  2242  0497  0020               	movlb	0	; select bank0
  2243  0498  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  2244  0499  3004               	movlw	high _sec_tick_work
  2245  049A  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  2246  049B  3187  273E  3184   	fcall	_TMR2_SetInterruptHandler
  2247  049E                     l2631:
  2248                           
  2249                           ;main.c: 488:     TMR2_StartTimer();
  2250  049E  3187  276A  3184   	fcall	_TMR2_StartTimer
  2251  04A1                     l2633:
  2252  04A1  0023               	movlb	3	; select bank3
  2253  04A2  118E               	bcf	14,3	;volatile
  2254  04A3                     l2635:
  2255  04A3  108C               	bcf	12,1	;volatile
  2256  04A4                     l2637:
  2257  04A4  110E               	bcf	14,2	;volatile
  2258  04A5                     l2639:
  2259  04A5  0024               	movlb	4	; select bank4
  2260  04A6  108C               	bcf	12,1	;volatile
  2261  04A7                     l2641:
  2262  04A7  0021               	movlb	1	; select bank1
  2263  04A8  148C               	bsf	12,1	;volatile
  2264  04A9                     l2643:
  2265  04A9  0024               	movlb	4	; select bank4
  2266  04AA  110E               	bcf	14,2	;volatile
  2267  04AB                     l2645:
  2268  04AB  0021               	movlb	1	; select bank1
  2269  04AC  150E               	bsf	14,2	;volatile
  2270  04AD                     l2647:
  2271                           
  2272                           ;main.c: 500:     INTCONbits.TMR0IE = 0;
  2273  04AD  128B               	bcf	11,5	;volatile
  2274  04AE                     l2649:
  2275                           
  2276                           ;main.c: 501:     FLAGS.value = 0;
  2277  04AE  01FC               	clrf	_FLAGS
  2278  04AF                     l2651:
  2279  04AF  0022               	movlb	2	; select bank2
  2280  04B0  128E               	bcf	14,5	;volatile
  2281  04B1                     l2653:
  2282  04B1  120E               	bcf	14,4	;volatile
  2283  04B2                     l2655:
  2284  04B2  100E               	bcf	14,0	;volatile
  2285  04B3                     l2657:
  2286  04B3  0021               	movlb	1	; select bank1
  2287  04B4  100E               	bcf	14,0	;volatile
  2288  04B5                     l2659:
  2289                           
  2290                           ;main.c: 508:     get_fun_full();
  2291  04B5  3182  223A  3184   	fcall	_get_fun_full
  2292  04B8                     l2661:
  2293                           
  2294                           ;main.c: 509:     get_jump_full();
  2295  04B8  3183  230B  3184   	fcall	_get_jump_full
  2296  04BB                     l2663:
  2297                           
  2298                           ;main.c: 510:     time_pow_s = 0;
  2299  04BB  0020               	movlb	0	; select bank0
  2300  04BC  01DE               	clrf	_time_pow_s
  2301  04BD                     l530:
  2302  04BD  0008               	return
  2303  04BE                     __end_of_start_setup:
  2304                           
  2305                           	psect	text3
  2306  030B                     __ptext3:	
  2307 ;; *************** function _get_jump_full *****************
  2308 ;; Defined at:
  2309 ;;		line 251 in file "main.c"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;		None
  2312 ;; Auto vars:     Size  Location     Type
  2313 ;;  res             2    5[BANK0 ] unsigned int 
  2314 ;;  flag            1    7[BANK0 ] unsigned char 
  2315 ;; Return value:  Size  Location     Type
  2316 ;;                  1    wreg      void 
  2317 ;; Registers used:
  2318 ;;		wreg, status,2, status,0, pclath, cstack
  2319 ;; Tracked objects:
  2320 ;;		On entry : 0/0
  2321 ;;		On exit  : 0/0
  2322 ;;		Unchanged: 0/0
  2323 ;; Data sizes:     COMMON   BANK0   BANK1
  2324 ;;      Params:         0       0       0
  2325 ;;      Locals:         0       3       0
  2326 ;;      Temps:          0       1       0
  2327 ;;      Totals:         0       4       0
  2328 ;;Total ram usage:        4 bytes
  2329 ;; Hardware stack levels used: 1
  2330 ;; Hardware stack levels required when called: 8
  2331 ;; This function calls:
  2332 ;;		_ADC_GetConversion
  2333 ;; This function is called by:
  2334 ;;		_start_setup
  2335 ;; This function uses a non-reentrant model
  2336 ;;
  2337                           
  2338  030B                     _get_jump_full:	
  2339                           ;psect for function _get_jump_full
  2340                           
  2341  030B                     l391:	
  2342                           ;incstack = 0
  2343                           ; Regs used in _get_jump_full: [wreg+status,2+status,0+pclath+cstack]
  2344                           ;main.c: 253:     static signed char jump_counter;;main.c: 254:     do { ANSELAbits.ANSA
      +                          1 = 1; } while(0);
  2345                           
  2346  030B  0023               	movlb	3	; select bank3
  2347  030C  148C               	bsf	12,1	;volatile
  2348  030D                     l2421:
  2349                           
  2350                           ;main.c: 255:     char flag = 0;
  2351  030D  0020               	movlb	0	; select bank0
  2352  030E  01A7               	clrf	get_jump_full@flag
  2353  030F                     l2423:
  2354                           
  2355                           ;main.c: 257:         unsigned res = ADC_GetConversion(PIN_JUMP_STATE);
  2356  030F  3001               	movlw	1
  2357  0310  3185  2597  3183   	fcall	_ADC_GetConversion
  2358  0313  0020               	movlb	0	; select bank0
  2359  0314  0821               	movf	?_ADC_GetConversion+1,w
  2360  0315  00A6               	movwf	get_jump_full@res+1
  2361  0316  0820               	movf	?_ADC_GetConversion,w
  2362  0317  00A5               	movwf	get_jump_full@res
  2363  0318                     l2425:
  2364                           
  2365                           ;main.c: 258:         if (res < 2000) jump_counter--;
  2366  0318  3007               	movlw	7
  2367  0319  0226               	subwf	get_jump_full@res+1,w
  2368  031A  30D0               	movlw	208
  2369  031B  1903               	skipnz
  2370  031C  0225               	subwf	get_jump_full@res,w
  2371  031D  1803               	skipnc
  2372  031E  2B20               	goto	u1611
  2373  031F  2B21               	goto	u1610
  2374  0320                     u1611:
  2375  0320  2B26               	goto	l2429
  2376  0321                     u1610:
  2377  0321                     l2427:
  2378  0321  30FF               	movlw	255
  2379  0322  00A4               	movwf	??_get_jump_full
  2380  0323  0824               	movf	??_get_jump_full,w
  2381  0324  07DA               	addwf	get_jump_full@jump_counter,f
  2382  0325  2B2A               	goto	l2431
  2383  0326                     l2429:
  2384  0326  3001               	movlw	1
  2385  0327  00A4               	movwf	??_get_jump_full
  2386  0328  0824               	movf	??_get_jump_full,w
  2387  0329  07DA               	addwf	get_jump_full@jump_counter,f
  2388  032A                     l2431:
  2389                           
  2390                           ;main.c: 273:         if (jump_counter > 10) {
  2391  032A  085A               	movf	get_jump_full@jump_counter,w
  2392  032B  3A80               	xorlw	128
  2393  032C  3E75               	addlw	-139
  2394  032D  1C03               	skipc
  2395  032E  2B30               	goto	u1621
  2396  032F  2B31               	goto	u1620
  2397  0330                     u1621:
  2398  0330  2B39               	goto	l2439
  2399  0331                     u1620:
  2400  0331                     l2433:
  2401                           
  2402                           ;main.c: 274:             jump_counter = 10;
  2403  0331  300A               	movlw	10
  2404  0332  00A4               	movwf	??_get_jump_full
  2405  0333  0824               	movf	??_get_jump_full,w
  2406  0334  00DA               	movwf	get_jump_full@jump_counter
  2407  0335                     l2435:
  2408                           
  2409                           ;main.c: 275:             FLAGS.bits._JUMP_CONNECTED = 0;
  2410  0335  127C               	bcf	_FLAGS,4
  2411  0336                     l2437:
  2412                           
  2413                           ;main.c: 276:             flag = 1;
  2414  0336  01A7               	clrf	get_jump_full@flag
  2415  0337  0AA7               	incf	get_jump_full@flag,f
  2416                           
  2417                           ;main.c: 277:         } else if (jump_counter<-10) {
  2418  0338  2B46               	goto	l2447
  2419  0339                     l2439:
  2420  0339  085A               	movf	get_jump_full@jump_counter,w
  2421  033A  3A80               	xorlw	128
  2422  033B  3E8A               	addlw	138
  2423  033C  1803               	skipnc
  2424  033D  2B3F               	goto	u1631
  2425  033E  2B40               	goto	u1630
  2426  033F                     u1631:
  2427  033F  2B46               	goto	l2447
  2428  0340                     u1630:
  2429  0340                     l2441:
  2430                           
  2431                           ;main.c: 278:             jump_counter = -10;
  2432  0340  30F6               	movlw	246
  2433  0341  00A4               	movwf	??_get_jump_full
  2434  0342  0824               	movf	??_get_jump_full,w
  2435  0343  00DA               	movwf	get_jump_full@jump_counter
  2436  0344                     l2443:
  2437                           
  2438                           ;main.c: 279:             FLAGS.bits._JUMP_CONNECTED = 1;
  2439  0344  167C               	bsf	_FLAGS,4
  2440  0345  2B36               	goto	l2437
  2441  0346                     l2447:
  2442                           
  2443                           ;main.c: 285:     } while (flag == 0);
  2444  0346  0827               	movf	get_jump_full@flag,w
  2445  0347  1903               	btfsc	3,2
  2446  0348  2B4A               	goto	u1641
  2447  0349  2B4B               	goto	u1640
  2448  034A                     u1641:
  2449  034A  2B0F               	goto	l2423
  2450  034B                     u1640:
  2451  034B                     l400:	
  2452                           ;main.c: 286:     do { ANSELAbits.ANSA1 = 0; } while(0);
  2453                           
  2454  034B  0023               	movlb	3	; select bank3
  2455  034C  108C               	bcf	12,1	;volatile
  2456  034D                     l402:
  2457  034D  0008               	return
  2458  034E                     __end_of_get_jump_full:
  2459                           
  2460                           	psect	text4
  2461  023A                     __ptext4:	
  2462 ;; *************** function _get_fun_full *****************
  2463 ;; Defined at:
  2464 ;;		line 177 in file "main.c"
  2465 ;; Parameters:    Size  Location     Type
  2466 ;;		None
  2467 ;; Auto vars:     Size  Location     Type
  2468 ;;  res             2    5[BANK0 ] unsigned int 
  2469 ;;  flag            1    7[BANK0 ] unsigned char 
  2470 ;; Return value:  Size  Location     Type
  2471 ;;                  1    wreg      void 
  2472 ;; Registers used:
  2473 ;;		wreg, status,2, status,0, pclath, cstack
  2474 ;; Tracked objects:
  2475 ;;		On entry : 0/0
  2476 ;;		On exit  : 0/0
  2477 ;;		Unchanged: 0/0
  2478 ;; Data sizes:     COMMON   BANK0   BANK1
  2479 ;;      Params:         0       0       0
  2480 ;;      Locals:         0       3       0
  2481 ;;      Temps:          0       1       0
  2482 ;;      Totals:         0       4       0
  2483 ;;Total ram usage:        4 bytes
  2484 ;; Hardware stack levels used: 1
  2485 ;; Hardware stack levels required when called: 8
  2486 ;; This function calls:
  2487 ;;		_ADC_GetConversion
  2488 ;; This function is called by:
  2489 ;;		_start_setup
  2490 ;; This function uses a non-reentrant model
  2491 ;;
  2492                           
  2493  023A                     _get_fun_full:	
  2494                           ;psect for function _get_fun_full
  2495                           
  2496  023A                     l357:	
  2497                           ;incstack = 0
  2498                           ; Regs used in _get_fun_full: [wreg+status,2+status,0+pclath+cstack]
  2499                           ;main.c: 179:     static signed char fun_counter;;main.c: 180:     do { LATCbits.LATC1 =
      +                           1; } while(0);
  2500                           
  2501  023A  0022               	movlb	2	; select bank2
  2502  023B  148E               	bsf	14,1	;volatile
  2503  023C                     l359:	
  2504                           ;main.c: 181:     do { ANSELCbits.ANSC2 = 1; } while(0);
  2505                           
  2506  023C  0023               	movlb	3	; select bank3
  2507  023D  150E               	bsf	14,2	;volatile
  2508  023E                     l2393:
  2509                           
  2510                           ;main.c: 182:     char flag = 0;
  2511  023E  0020               	movlb	0	; select bank0
  2512  023F  01A7               	clrf	get_fun_full@flag
  2513  0240                     l2395:
  2514                           
  2515                           ;main.c: 184:         unsigned res = ADC_GetConversion(PIN_FUN_STATE);
  2516  0240  3006               	movlw	6
  2517  0241  3185  2597  3182   	fcall	_ADC_GetConversion
  2518  0244  0020               	movlb	0	; select bank0
  2519  0245  0821               	movf	?_ADC_GetConversion+1,w
  2520  0246  00A6               	movwf	get_fun_full@res+1
  2521  0247  0820               	movf	?_ADC_GetConversion,w
  2522  0248  00A5               	movwf	get_fun_full@res
  2523  0249                     l2397:
  2524                           
  2525                           ;main.c: 185:         if (res < 2000) fun_counter--;
  2526  0249  3007               	movlw	7
  2527  024A  0226               	subwf	get_fun_full@res+1,w
  2528  024B  30D0               	movlw	208
  2529  024C  1903               	skipnz
  2530  024D  0225               	subwf	get_fun_full@res,w
  2531  024E  1803               	skipnc
  2532  024F  2A51               	goto	u1571
  2533  0250  2A52               	goto	u1570
  2534  0251                     u1571:
  2535  0251  2A57               	goto	l2401
  2536  0252                     u1570:
  2537  0252                     l2399:
  2538  0252  30FF               	movlw	255
  2539  0253  00A4               	movwf	??_get_fun_full
  2540  0254  0824               	movf	??_get_fun_full,w
  2541  0255  07DC               	addwf	get_fun_full@fun_counter,f
  2542  0256  2A5B               	goto	l2403
  2543  0257                     l2401:
  2544  0257  3001               	movlw	1
  2545  0258  00A4               	movwf	??_get_fun_full
  2546  0259  0824               	movf	??_get_fun_full,w
  2547  025A  07DC               	addwf	get_fun_full@fun_counter,f
  2548  025B                     l2403:
  2549                           
  2550                           ;main.c: 201:           if (fun_counter > 10) {
  2551  025B  085C               	movf	get_fun_full@fun_counter,w
  2552  025C  3A80               	xorlw	128
  2553  025D  3E75               	addlw	-139
  2554  025E  1C03               	skipc
  2555  025F  2A61               	goto	u1581
  2556  0260  2A62               	goto	u1580
  2557  0261                     u1581:
  2558  0261  2A6A               	goto	l2411
  2559  0262                     u1580:
  2560  0262                     l2405:
  2561                           
  2562                           ;main.c: 202:             fun_counter = 10;
  2563  0262  300A               	movlw	10
  2564  0263  00A4               	movwf	??_get_fun_full
  2565  0264  0824               	movf	??_get_fun_full,w
  2566  0265  00DC               	movwf	get_fun_full@fun_counter
  2567  0266                     l2407:
  2568                           
  2569                           ;main.c: 203:             FLAGS.bits._FUN_CONNECTED = 0;
  2570  0266  11FC               	bcf	_FLAGS,3
  2571  0267                     l2409:
  2572                           
  2573                           ;main.c: 204:             flag = 1;
  2574  0267  01A7               	clrf	get_fun_full@flag
  2575  0268  0AA7               	incf	get_fun_full@flag,f
  2576                           
  2577                           ;main.c: 205:         } else if (fun_counter<-10) {
  2578  0269  2A77               	goto	l2419
  2579  026A                     l2411:
  2580  026A  085C               	movf	get_fun_full@fun_counter,w
  2581  026B  3A80               	xorlw	128
  2582  026C  3E8A               	addlw	138
  2583  026D  1803               	skipnc
  2584  026E  2A70               	goto	u1591
  2585  026F  2A71               	goto	u1590
  2586  0270                     u1591:
  2587  0270  2A77               	goto	l2419
  2588  0271                     u1590:
  2589  0271                     l2413:
  2590                           
  2591                           ;main.c: 206:             fun_counter = 10;
  2592  0271  300A               	movlw	10
  2593  0272  00A4               	movwf	??_get_fun_full
  2594  0273  0824               	movf	??_get_fun_full,w
  2595  0274  00DC               	movwf	get_fun_full@fun_counter
  2596  0275                     l2415:
  2597                           
  2598                           ;main.c: 207:             FLAGS.bits._FUN_CONNECTED = 1;
  2599  0275  15FC               	bsf	_FLAGS,3
  2600  0276  2A67               	goto	l2409
  2601  0277                     l2419:
  2602                           
  2603                           ;main.c: 212:     } while (flag == 0);
  2604  0277  0827               	movf	get_fun_full@flag,w
  2605  0278  1903               	btfsc	3,2
  2606  0279  2A7B               	goto	u1601
  2607  027A  2A7C               	goto	u1600
  2608  027B                     u1601:
  2609  027B  2A40               	goto	l2395
  2610  027C                     u1600:
  2611  027C                     l368:	
  2612                           ;main.c: 214:     do { ANSELCbits.ANSC2 = 0; } while(0);
  2613                           
  2614  027C  0023               	movlb	3	; select bank3
  2615  027D  110E               	bcf	14,2	;volatile
  2616  027E                     l370:	
  2617                           ;main.c: 215:     do { LATCbits.LATC1 = 0; } while(0);
  2618                           
  2619  027E  0022               	movlb	2	; select bank2
  2620  027F  108E               	bcf	14,1	;volatile
  2621  0280                     l372:
  2622  0280  0008               	return
  2623  0281                     __end_of_get_fun_full:
  2624                           
  2625                           	psect	text5
  2626  072A                     __ptext5:	
  2627 ;; *************** function _get_eeprom *****************
  2628 ;; Defined at:
  2629 ;;		line 474 in file "main.c"
  2630 ;; Parameters:    Size  Location     Type
  2631 ;;		None
  2632 ;; Auto vars:     Size  Location     Type
  2633 ;;		None
  2634 ;; Return value:  Size  Location     Type
  2635 ;;                  1    wreg      void 
  2636 ;; Registers used:
  2637 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2638 ;; Tracked objects:
  2639 ;;		On entry : 0/0
  2640 ;;		On exit  : 0/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMMON   BANK0   BANK1
  2643 ;;      Params:         0       0       0
  2644 ;;      Locals:         0       0       0
  2645 ;;      Temps:          0       0       0
  2646 ;;      Totals:         0       0       0
  2647 ;;Total ram usage:        0 bytes
  2648 ;; Hardware stack levels used: 1
  2649 ;; Hardware stack levels required when called: 10
  2650 ;; This function calls:
  2651 ;;		_get_adr
  2652 ;;		_get_time
  2653 ;; This function is called by:
  2654 ;;		_start_setup
  2655 ;; This function uses a non-reentrant model
  2656 ;;
  2657                           
  2658  072A                     _get_eeprom:	
  2659                           ;psect for function _get_eeprom
  2660                           
  2661  072A                     l2457:	
  2662                           ;incstack = 0
  2663                           ; Regs used in _get_eeprom: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2664                           
  2665                           
  2666                           ;main.c: 475:     get_adr();
  2667  072A  3181  2135  3187   	fcall	_get_adr
  2668                           
  2669                           ;main.c: 476:     get_time();
  2670  072D  3180  203F  3187   	fcall	_get_time
  2671  0730                     l505:
  2672  0730  0008               	return
  2673  0731                     __end_of_get_eeprom:
  2674                           
  2675                           	psect	text6
  2676  003F                     __ptext6:	
  2677 ;; *************** function _get_time *****************
  2678 ;; Defined at:
  2679 ;;		line 437 in file "main.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;		None
  2682 ;; Auto vars:     Size  Location     Type
  2683 ;;  q               1   40[BANK0 ] unsigned char 
  2684 ;;  q               1   38[BANK0 ] unsigned char 
  2685 ;;  q               1   39[BANK0 ] unsigned char 
  2686 ;;  i               1   36[BANK0 ] unsigned char 
  2687 ;;  times           9   20[BANK0 ] unsigned um[3]
  2688 ;;  time_count      3   30[BANK0 ] unsigned char [3]
  2689 ;;  buf2            3   33[BANK0 ] unsigned um
  2690 ;;  buf             1   37[BANK0 ] unsigned char 
  2691 ;;  adr_error       1   29[BANK0 ] unsigned char 
  2692 ;; Return value:  Size  Location     Type
  2693 ;;                  1    wreg      void 
  2694 ;; Registers used:
  2695 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2696 ;; Tracked objects:
  2697 ;;		On entry : 0/0
  2698 ;;		On exit  : 0/0
  2699 ;;		Unchanged: 0/0
  2700 ;; Data sizes:     COMMON   BANK0   BANK1
  2701 ;;      Params:         0       0       0
  2702 ;;      Locals:         0      21       0
  2703 ;;      Temps:          0       4       0
  2704 ;;      Totals:         0      25       0
  2705 ;;Total ram usage:       25 bytes
  2706 ;; Hardware stack levels used: 1
  2707 ;; Hardware stack levels required when called: 9
  2708 ;; This function calls:
  2709 ;;		_EEPROM_ReadShortLong
  2710 ;;		___bmul
  2711 ;; This function is called by:
  2712 ;;		_get_eeprom
  2713 ;; This function uses a non-reentrant model
  2714 ;;
  2715                           
  2716  003F                     _get_time:	
  2717                           ;psect for function _get_time
  2718                           
  2719  003F                     l2271:	
  2720                           ;incstack = 0
  2721                           ; Regs used in _get_time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2722                           
  2723                           
  2724                           ;main.c: 439:     char adr_error = 0;
  2725  003F  0020               	movlb	0	; select bank0
  2726  0040  01BD               	clrf	get_time@adr_error
  2727                           
  2728                           ;main.c: 440:     char buf=0;
  2729  0041  01C5               	clrf	get_time@buf
  2730  0042                     l2273:
  2731  0042                     l2275:
  2732                           
  2733                           ;main.c: 442:     __uint24 times[3] = {};
  2734  0042  3034               	movlw	low get_time@times
  2735  0043  0086               	movwf	6
  2736  0044  3000               	movlw	high get_time@times
  2737  0045  0087               	movwf	7
  2738  0046  3009               	movlw	9
  2739  0047  00B0               	movwf	??_get_time
  2740  0048  3000               	movlw	0
  2741  0049                     u1440:
  2742  0049  001E               	movwi fsr1++
  2743  004A  0BB0               	decfsz	??_get_time,f
  2744  004B  2849               	goto	u1440
  2745  004C                     l2277:
  2746                           
  2747                           ;main.c: 443:     char time_count[3]={};
  2748  004C  3000               	movlw	0
  2749  004D  00BE               	movwf	get_time@time_count
  2750  004E  3000               	movlw	0
  2751  004F  00BF               	movwf	get_time@time_count+1
  2752  0050  3000               	movlw	0
  2753  0051  00C0               	movwf	get_time@time_count+2
  2754  0052                     l2279:
  2755                           
  2756                           ;main.c: 444:     for (unsigned char i = START_EEPROM_ADR; i < START_EEPROM_ADR + 0x10; 
      +                          i += 4) {
  2757  0052  085F               	movf	_START_EEPROM_ADR,w
  2758  0053  00B0               	movwf	??_get_time
  2759  0054  0830               	movf	??_get_time,w
  2760  0055  00C4               	movwf	get_time@i
  2761  0056  28E7               	goto	l2323
  2762  0057                     l2281:
  2763                           
  2764                           ;main.c: 445:         buf2 = EEPROM_ReadShortLong(i);
  2765  0057  0020               	movlb	0	; select bank0
  2766  0058  0844               	movf	get_time@i,w
  2767  0059  3182  2281  3180   	fcall	_EEPROM_ReadShortLong
  2768  005C  0020               	movlb	0	; select bank0
  2769  005D  0823               	movf	?_EEPROM_ReadShortLong,w
  2770  005E  00C1               	movwf	get_time@buf2
  2771  005F  0824               	movf	?_EEPROM_ReadShortLong+1,w
  2772  0060  00C2               	movwf	get_time@buf2+1
  2773  0061  0825               	movf	?_EEPROM_ReadShortLong+2,w
  2774  0062  00C3               	movwf	get_time@buf2+2
  2775  0063                     l2283:
  2776                           
  2777                           ;main.c: 447:         for (char q = 0; q < 3; q++) {
  2778  0063  01C6               	clrf	get_time@q
  2779  0064                     l2289:
  2780                           
  2781                           ;main.c: 448:             if (buf2 == times[q]) {
  2782  0064  3003               	movlw	3
  2783  0065  00B0               	movwf	??_get_time
  2784  0066  0830               	movf	??_get_time,w
  2785  0067  00A0               	movwf	___bmul@multiplicand
  2786  0068  0846               	movf	get_time@q,w
  2787  0069  3186  2645  3180   	fcall	___bmul
  2788  006C  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2789  006D  0086               	movwf	6
  2790  006E  0187               	clrf	7
  2791  006F  3F40               	moviw [0]fsr1
  2792  0070  0020               	movlb	0	; select bank0
  2793  0071  0641               	xorwf	get_time@buf2,w
  2794  0072  1D03               	skipz
  2795  0073  287A               	goto	u1455
  2796  0074  3F41               	moviw [1]fsr1
  2797  0075  0642               	xorwf	get_time@buf2+1,w
  2798  0076  1D03               	skipz
  2799  0077  287A               	goto	u1455
  2800  0078  3F42               	moviw [2]fsr1
  2801  0079  0643               	xorwf	get_time@buf2+2,w
  2802  007A                     u1455:
  2803  007A  1D03               	skipz
  2804  007B  287D               	goto	u1451
  2805  007C  287E               	goto	u1450
  2806  007D                     u1451:
  2807  007D  288C               	goto	l2295
  2808  007E                     u1450:
  2809  007E                     l2291:
  2810                           
  2811                           ;main.c: 449:                 time_count[q]++;
  2812  007E  3001               	movlw	1
  2813  007F  00B0               	movwf	??_get_time
  2814  0080  0846               	movf	get_time@q,w
  2815  0081  3E3E               	addlw	(low (get_time@time_count| 0))& (0+255)
  2816  0082  0086               	movwf	6
  2817  0083  0187               	clrf	7
  2818  0084  0830               	movf	??_get_time,w
  2819  0085  0781               	addwf	1,f
  2820  0086                     l2293:
  2821                           
  2822                           ;main.c: 450:                 buf2 = 0;
  2823  0086  3000               	movlw	0
  2824  0087  00C1               	movwf	get_time@buf2
  2825  0088  3000               	movlw	0
  2826  0089  00C2               	movwf	get_time@buf2+1
  2827  008A  3000               	movlw	0
  2828  008B  00C3               	movwf	get_time@buf2+2
  2829  008C                     l2295:
  2830                           
  2831                           ;main.c: 452:         }
  2832  008C  3001               	movlw	1
  2833  008D  00B0               	movwf	??_get_time
  2834  008E  0830               	movf	??_get_time,w
  2835  008F  07C6               	addwf	get_time@q,f
  2836  0090                     l2297:
  2837  0090  3003               	movlw	3
  2838  0091  0246               	subwf	get_time@q,w
  2839  0092  1C03               	skipc
  2840  0093  2895               	goto	u1461
  2841  0094  2896               	goto	u1460
  2842  0095                     u1461:
  2843  0095  2864               	goto	l2289
  2844  0096                     u1460:
  2845  0096                     l2299:
  2846                           
  2847                           ;main.c: 454:         if (buf2 != 0) {
  2848  0096  0843               	movf	get_time@buf2+2,w
  2849  0097  0442               	iorwf	get_time@buf2+1,w
  2850  0098  0441               	iorwf	get_time@buf2,w
  2851  0099  1903               	skipnz
  2852  009A  289C               	goto	u1471
  2853  009B  289D               	goto	u1470
  2854  009C                     u1471:
  2855  009C  28E3               	goto	l2321
  2856  009D                     u1470:
  2857  009D                     l2301:
  2858                           
  2859                           ;main.c: 455:             adr_error ++;
  2860  009D  3001               	movlw	1
  2861  009E  00B0               	movwf	??_get_time
  2862  009F  0830               	movf	??_get_time,w
  2863  00A0  07BD               	addwf	get_time@adr_error,f
  2864  00A1                     l2303:
  2865                           
  2866                           ;main.c: 456:             for (unsigned char q = 0; q < 3; q++)
  2867  00A1  01C8               	clrf	get_time@q_822
  2868  00A2                     l2309:
  2869                           
  2870                           ;main.c: 457:                 if (times[q]== 0) {
  2871  00A2  3003               	movlw	3
  2872  00A3  00B0               	movwf	??_get_time
  2873  00A4  0830               	movf	??_get_time,w
  2874  00A5  00A0               	movwf	___bmul@multiplicand
  2875  00A6  0848               	movf	get_time@q_822,w
  2876  00A7  3186  2645  3180   	fcall	___bmul
  2877  00AA  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2878  00AB  0086               	movwf	6
  2879  00AC  0187               	clrf	7
  2880  00AD  3F40               	moviw [0]fsr1
  2881  00AE  0020               	movlb	0	; select bank0
  2882  00AF  00B1               	movwf	??_get_time+1
  2883  00B0  3F41               	moviw [1]fsr1
  2884  00B1  00B2               	movwf	??_get_time+2
  2885  00B2  3F42               	moviw [2]fsr1
  2886  00B3  00B3               	movwf	??_get_time+3
  2887  00B4  0833               	movf	??_get_time+3,w
  2888  00B5  0432               	iorwf	??_get_time+2,w
  2889  00B6  0431               	iorwf	??_get_time+1,w
  2890  00B7  1D03               	skipz
  2891  00B8  28BA               	goto	u1481
  2892  00B9  28BB               	goto	u1480
  2893  00BA                     u1481:
  2894  00BA  28D9               	goto	l2317
  2895  00BB                     u1480:
  2896  00BB                     l2311:
  2897                           
  2898                           ;main.c: 458:                     times[q] = buf;
  2899  00BB  0845               	movf	get_time@buf,w
  2900  00BC  00B0               	movwf	??_get_time
  2901  00BD  01B1               	clrf	??_get_time+1
  2902  00BE  01B2               	clrf	??_get_time+2
  2903  00BF  3003               	movlw	3
  2904  00C0  00B3               	movwf	??_get_time+3
  2905  00C1  0833               	movf	??_get_time+3,w
  2906  00C2  00A0               	movwf	___bmul@multiplicand
  2907  00C3  0848               	movf	get_time@q_822,w
  2908  00C4  3186  2645  3180   	fcall	___bmul
  2909  00C7  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2910  00C8  0086               	movwf	6
  2911  00C9  0187               	clrf	7
  2912  00CA  0020               	movlb	0	; select bank0
  2913  00CB  0830               	movf	??_get_time,w
  2914  00CC  3FC0               	movwi [0]fsr1
  2915  00CD  0831               	movf	??_get_time+1,w
  2916  00CE  3FC1               	movwi [1]fsr1
  2917  00CF  0832               	movf	??_get_time+2,w
  2918  00D0  3FC2               	movwi [2]fsr1
  2919  00D1                     l2313:
  2920                           
  2921                           ;main.c: 459:                     time_count[q] = 1;
  2922  00D1  0848               	movf	get_time@q_822,w
  2923  00D2  3E3E               	addlw	(low (get_time@time_count| 0))& (0+255)
  2924  00D3  0086               	movwf	6
  2925  00D4  0187               	clrf	7
  2926  00D5  0181               	clrf	1
  2927  00D6  0A81               	incf	1,f
  2928  00D7                     l2315:
  2929                           
  2930                           ;main.c: 460:                     buf = 0;
  2931  00D7  01C5               	clrf	get_time@buf
  2932                           
  2933                           ;main.c: 461:                     break;
  2934  00D8  28E3               	goto	l2321
  2935  00D9                     l2317:
  2936  00D9  3001               	movlw	1
  2937  00DA  00B0               	movwf	??_get_time
  2938  00DB  0830               	movf	??_get_time,w
  2939  00DC  07C8               	addwf	get_time@q_822,f
  2940  00DD                     l2319:
  2941  00DD  3003               	movlw	3
  2942  00DE  0248               	subwf	get_time@q_822,w
  2943  00DF  1C03               	skipc
  2944  00E0  28E2               	goto	u1491
  2945  00E1  28E3               	goto	u1490
  2946  00E2                     u1491:
  2947  00E2  28A2               	goto	l2309
  2948  00E3                     u1490:
  2949  00E3                     l2321:
  2950                           
  2951                           ;main.c: 464:     }
  2952  00E3  3004               	movlw	4
  2953  00E4  00B0               	movwf	??_get_time
  2954  00E5  0830               	movf	??_get_time,w
  2955  00E6  07C4               	addwf	get_time@i,f
  2956  00E7                     l2323:
  2957  00E7  085F               	movf	_START_EEPROM_ADR,w
  2958  00E8  3E10               	addlw	16
  2959  00E9  00B0               	movwf	??_get_time
  2960  00EA  3000               	movlw	0
  2961  00EB  1803               	skipnc
  2962  00EC  3001               	movlw	1
  2963  00ED  00B1               	movwf	??_get_time+1
  2964  00EE  0831               	movf	??_get_time+1,w
  2965  00EF  3A80               	xorlw	128
  2966  00F0  3C80               	sublw	128
  2967  00F1  1D03               	skipz
  2968  00F2  28F5               	goto	u1505
  2969  00F3  0830               	movf	??_get_time,w
  2970  00F4  0244               	subwf	get_time@i,w
  2971  00F5                     u1505:
  2972  00F5  1C03               	skipc
  2973  00F6  28F8               	goto	u1501
  2974  00F7  28F9               	goto	u1500
  2975  00F8                     u1501:
  2976  00F8  2857               	goto	l2281
  2977  00F9                     u1500:
  2978  00F9                     l2325:
  2979                           
  2980                           ;main.c: 465:     buf = 0;
  2981  00F9  0020               	movlb	0	; select bank0
  2982  00FA  01C5               	clrf	get_time@buf
  2983                           
  2984                           ;main.c: 466:     for (unsigned char q = 0; q < 3; q++) {
  2985  00FB  01C7               	clrf	get_time@q_823
  2986  00FC                     l2331:
  2987                           
  2988                           ;main.c: 467:         if (time_count[q] > time_count[buf]) buf = q;
  2989  00FC  0845               	movf	get_time@buf,w
  2990  00FD  3E3E               	addlw	(low (get_time@time_count| 0))& (0+255)
  2991  00FE  0086               	movwf	6
  2992  00FF  0187               	clrf	7
  2993  0100  0847               	movf	get_time@q_823,w
  2994  0101  3E3E               	addlw	(low (get_time@time_count| 0))& (0+255)
  2995  0102  0084               	movwf	4
  2996  0103  0185               	clrf	5
  2997  0104  0800               	movf	0,w
  2998  0105  0201               	subwf	1,w
  2999  0106  1803               	skipnc
  3000  0107  2909               	goto	u1511
  3001  0108  290A               	goto	u1510
  3002  0109                     u1511:
  3003  0109  290E               	goto	l2335
  3004  010A                     u1510:
  3005  010A                     l2333:
  3006  010A  0847               	movf	get_time@q_823,w
  3007  010B  00B0               	movwf	??_get_time
  3008  010C  0830               	movf	??_get_time,w
  3009  010D  00C5               	movwf	get_time@buf
  3010  010E                     l2335:
  3011                           
  3012                           ;main.c: 468:     }
  3013  010E  3001               	movlw	1
  3014  010F  00B0               	movwf	??_get_time
  3015  0110  0830               	movf	??_get_time,w
  3016  0111  07C7               	addwf	get_time@q_823,f
  3017  0112                     l2337:
  3018  0112  3003               	movlw	3
  3019  0113  0247               	subwf	get_time@q_823,w
  3020  0114  1C03               	skipc
  3021  0115  2917               	goto	u1521
  3022  0116  2918               	goto	u1520
  3023  0117                     u1521:
  3024  0117  28FC               	goto	l2331
  3025  0118                     u1520:
  3026  0118                     l2339:
  3027                           
  3028                           ;main.c: 469:     time_s = times[buf];
  3029  0118  3003               	movlw	3
  3030  0119  00B0               	movwf	??_get_time
  3031  011A  0830               	movf	??_get_time,w
  3032  011B  00A0               	movwf	___bmul@multiplicand
  3033  011C  0845               	movf	get_time@buf,w
  3034  011D  3186  2645  3180   	fcall	___bmul
  3035  0120  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  3036  0121  0086               	movwf	6
  3037  0122  0187               	clrf	7
  3038  0123  3F40               	moviw [0]fsr1
  3039  0124  0020               	movlb	0	; select bank0
  3040  0125  00D5               	movwf	_time_s
  3041  0126  3F41               	moviw [1]fsr1
  3042  0127  00D6               	movwf	_time_s+1
  3043  0128  3F42               	moviw [2]fsr1
  3044  0129  00D7               	movwf	_time_s+2
  3045  012A                     l2341:
  3046                           
  3047                           ;main.c: 471:     if (adr_error>1) START_EEPROM_ADR += 0x10;
  3048  012A  3002               	movlw	2
  3049  012B  023D               	subwf	get_time@adr_error,w
  3050  012C  1C03               	skipc
  3051  012D  292F               	goto	u1531
  3052  012E  2930               	goto	u1530
  3053  012F                     u1531:
  3054  012F  2934               	goto	l502
  3055  0130                     u1530:
  3056  0130                     l2343:
  3057  0130  3010               	movlw	16
  3058  0131  00B0               	movwf	??_get_time
  3059  0132  0830               	movf	??_get_time,w
  3060  0133  07DF               	addwf	_START_EEPROM_ADR,f
  3061  0134                     l502:
  3062  0134  0008               	return
  3063  0135                     __end_of_get_time:
  3064                           
  3065                           	psect	text7
  3066  0645                     __ptext7:	
  3067 ;; *************** function ___bmul *****************
  3068 ;; Defined at:
  3069 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul8.c"
  3070 ;; Parameters:    Size  Location     Type
  3071 ;;  multiplier      1    wreg     unsigned char 
  3072 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3073 ;; Auto vars:     Size  Location     Type
  3074 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3075 ;;  product         1    2[BANK0 ] unsigned char 
  3076 ;; Return value:  Size  Location     Type
  3077 ;;                  1    wreg      unsigned char 
  3078 ;; Registers used:
  3079 ;;		wreg, status,2, status,0
  3080 ;; Tracked objects:
  3081 ;;		On entry : 0/0
  3082 ;;		On exit  : 0/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMMON   BANK0   BANK1
  3085 ;;      Params:         0       1       0
  3086 ;;      Locals:         0       2       0
  3087 ;;      Temps:          0       1       0
  3088 ;;      Totals:         0       4       0
  3089 ;;Total ram usage:        4 bytes
  3090 ;; Hardware stack levels used: 1
  3091 ;; Hardware stack levels required when called: 7
  3092 ;; This function calls:
  3093 ;;		Nothing
  3094 ;; This function is called by:
  3095 ;;		_get_time
  3096 ;; This function uses a non-reentrant model
  3097 ;;
  3098                           
  3099  0645                     ___bmul:	
  3100                           ;psect for function ___bmul
  3101                           
  3102                           
  3103                           ;incstack = 0
  3104                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3105                           ;___bmul@multiplier stored from wreg
  3106  0645  0020               	movlb	0	; select bank0
  3107  0646  00A3               	movwf	___bmul@multiplier
  3108  0647                     l2073:
  3109  0647  01A2               	clrf	___bmul@product
  3110  0648                     l2075:
  3111  0648  1C23               	btfss	___bmul@multiplier,0
  3112  0649  2E4B               	goto	u1181
  3113  064A  2E4C               	goto	u1180
  3114  064B                     u1181:
  3115  064B  2E50               	goto	l2079
  3116  064C                     u1180:
  3117  064C                     l2077:
  3118  064C  0820               	movf	___bmul@multiplicand,w
  3119  064D  00A1               	movwf	??___bmul
  3120  064E  0821               	movf	??___bmul,w
  3121  064F  07A2               	addwf	___bmul@product,f
  3122  0650                     l2079:
  3123  0650  1003               	clrc
  3124  0651  0DA0               	rlf	___bmul@multiplicand,f
  3125  0652                     l2081:
  3126  0652  1003               	clrc
  3127  0653  0CA3               	rrf	___bmul@multiplier,f
  3128  0654  0823               	movf	___bmul@multiplier,w
  3129  0655  1D03               	btfss	3,2
  3130  0656  2E58               	goto	u1191
  3131  0657  2E59               	goto	u1190
  3132  0658                     u1191:
  3133  0658  2E48               	goto	l2075
  3134  0659                     u1190:
  3135  0659                     l2083:
  3136  0659  0822               	movf	___bmul@product,w
  3137  065A                     l771:
  3138  065A  0008               	return
  3139  065B                     __end_of___bmul:
  3140                           
  3141                           	psect	text8
  3142  0281                     __ptext8:	
  3143 ;; *************** function _EEPROM_ReadShortLong *****************
  3144 ;; Defined at:
  3145 ;;		line 48 in file "eeprom.c"
  3146 ;; Parameters:    Size  Location     Type
  3147 ;;  addr            1    wreg     unsigned char 
  3148 ;; Auto vars:     Size  Location     Type
  3149 ;;  addr            1   15[BANK0 ] unsigned char 
  3150 ;;  dt              3   12[BANK0 ] unsigned um
  3151 ;; Return value:  Size  Location     Type
  3152 ;;                  3    3[BANK0 ] unsigned um
  3153 ;; Registers used:
  3154 ;;		wreg, status,2, status,0, pclath, cstack
  3155 ;; Tracked objects:
  3156 ;;		On entry : 0/0
  3157 ;;		On exit  : 0/0
  3158 ;;		Unchanged: 0/0
  3159 ;; Data sizes:     COMMON   BANK0   BANK1
  3160 ;;      Params:         0       3       0
  3161 ;;      Locals:         0       4       0
  3162 ;;      Temps:          0       6       0
  3163 ;;      Totals:         0      13       0
  3164 ;;Total ram usage:       13 bytes
  3165 ;; Hardware stack levels used: 1
  3166 ;; Hardware stack levels required when called: 8
  3167 ;; This function calls:
  3168 ;;		_EEPROM_ReadByte
  3169 ;; This function is called by:
  3170 ;;		_get_time
  3171 ;; This function uses a non-reentrant model
  3172 ;;
  3173                           
  3174  0281                     _EEPROM_ReadShortLong:	
  3175                           ;psect for function _EEPROM_ReadShortLong
  3176                           
  3177                           
  3178                           ;incstack = 0
  3179                           ; Regs used in _EEPROM_ReadShortLong: [wreg+status,2+status,0+pclath+cstack]
  3180                           ;EEPROM_ReadShortLong@addr stored from wreg
  3181  0281  0020               	movlb	0	; select bank0
  3182  0282  00AF               	movwf	EEPROM_ReadShortLong@addr
  3183  0283                     l2065:
  3184                           
  3185                           ;eeprom.c: 49:     __uint24 dt = EEPROM_ReadByte(addr + 2)*256*256;
  3186  0283  082F               	movf	EEPROM_ReadShortLong@addr,w
  3187  0284  3E02               	addlw	2
  3188  0285  3186  262C  3182   	fcall	_EEPROM_ReadByte
  3189  0288  0020               	movlb	0	; select bank0
  3190  0289  00A6               	movwf	??_EEPROM_ReadShortLong
  3191  028A  01A7               	clrf	??_EEPROM_ReadShortLong+1
  3192  028B  0826               	movf	??_EEPROM_ReadShortLong,w
  3193  028C  00A7               	movwf	??_EEPROM_ReadShortLong+1
  3194  028D  01A6               	clrf	??_EEPROM_ReadShortLong
  3195  028E  0826               	movf	??_EEPROM_ReadShortLong,w
  3196  028F  00A7               	movwf	??_EEPROM_ReadShortLong+1
  3197  0290  01A6               	clrf	??_EEPROM_ReadShortLong
  3198  0291  0826               	movf	??_EEPROM_ReadShortLong,w
  3199  0292  00AC               	movwf	EEPROM_ReadShortLong@dt
  3200  0293  0827               	movf	??_EEPROM_ReadShortLong+1,w
  3201  0294  00AD               	movwf	EEPROM_ReadShortLong@dt+1
  3202  0295  0D89               	rlf	9,f
  3203  0296  3B89               	subwfb	9,f
  3204  0297  0989               	comf	9,f
  3205  0298  00AE               	movwf	EEPROM_ReadShortLong@dt+2
  3206                           
  3207                           ;eeprom.c: 50:     dt += EEPROM_ReadByte(addr + 1)*256;
  3208  0299  082F               	movf	EEPROM_ReadShortLong@addr,w
  3209  029A  3E01               	addlw	1
  3210  029B  3186  262C  3182   	fcall	_EEPROM_ReadByte
  3211  029E  0020               	movlb	0	; select bank0
  3212  029F  00A6               	movwf	??_EEPROM_ReadShortLong
  3213  02A0  01A7               	clrf	??_EEPROM_ReadShortLong+1
  3214  02A1  0826               	movf	??_EEPROM_ReadShortLong,w
  3215  02A2  00A7               	movwf	??_EEPROM_ReadShortLong+1
  3216  02A3  01A6               	clrf	??_EEPROM_ReadShortLong
  3217  02A4  0826               	movf	??_EEPROM_ReadShortLong,w
  3218  02A5  00A9               	movwf	??_EEPROM_ReadShortLong+3
  3219  02A6  0827               	movf	??_EEPROM_ReadShortLong+1,w
  3220  02A7  00AA               	movwf	??_EEPROM_ReadShortLong+4
  3221  02A8  3000               	movlw	0
  3222  02A9  1BAA               	btfsc	??_EEPROM_ReadShortLong+4,7
  3223  02AA  30FF               	movlw	255
  3224  02AB  00AB               	movwf	??_EEPROM_ReadShortLong+5
  3225  02AC  0829               	movf	??_EEPROM_ReadShortLong+3,w
  3226  02AD  07AC               	addwf	EEPROM_ReadShortLong@dt,f
  3227  02AE  082A               	movf	??_EEPROM_ReadShortLong+4,w
  3228  02AF  3DAD               	addwfc	EEPROM_ReadShortLong@dt+1,f
  3229  02B0  082B               	movf	??_EEPROM_ReadShortLong+5,w
  3230  02B1  3DAE               	addwfc	EEPROM_ReadShortLong@dt+2,f
  3231  02B2                     l2067:
  3232                           
  3233                           ;eeprom.c: 51:     dt += EEPROM_ReadByte(addr);
  3234  02B2  082F               	movf	EEPROM_ReadShortLong@addr,w
  3235  02B3  3186  262C  3182   	fcall	_EEPROM_ReadByte
  3236  02B6  0020               	movlb	0	; select bank0
  3237  02B7  00A6               	movwf	??_EEPROM_ReadShortLong
  3238  02B8  01A7               	clrf	??_EEPROM_ReadShortLong+1
  3239  02B9  01A8               	clrf	??_EEPROM_ReadShortLong+2
  3240  02BA  0826               	movf	??_EEPROM_ReadShortLong,w
  3241  02BB  07AC               	addwf	EEPROM_ReadShortLong@dt,f
  3242  02BC  0827               	movf	??_EEPROM_ReadShortLong+1,w
  3243  02BD  3DAD               	addwfc	EEPROM_ReadShortLong@dt+1,f
  3244  02BE  0828               	movf	??_EEPROM_ReadShortLong+2,w
  3245  02BF  3DAE               	addwfc	EEPROM_ReadShortLong@dt+2,f
  3246  02C0                     l2069:
  3247                           
  3248                           ;eeprom.c: 52:     return dt;
  3249  02C0  082C               	movf	EEPROM_ReadShortLong@dt,w
  3250  02C1  00A3               	movwf	?_EEPROM_ReadShortLong
  3251  02C2  082D               	movf	EEPROM_ReadShortLong@dt+1,w
  3252  02C3  00A4               	movwf	?_EEPROM_ReadShortLong+1
  3253  02C4  082E               	movf	EEPROM_ReadShortLong@dt+2,w
  3254  02C5  00A5               	movwf	?_EEPROM_ReadShortLong+2
  3255  02C6                     l577:
  3256  02C6  0008               	return
  3257  02C7                     __end_of_EEPROM_ReadShortLong:
  3258                           
  3259                           	psect	text9
  3260  0135                     __ptext9:	
  3261 ;; *************** function _get_adr *****************
  3262 ;; Defined at:
  3263 ;;		line 404 in file "main.c"
  3264 ;; Parameters:    Size  Location     Type
  3265 ;;		None
  3266 ;; Auto vars:     Size  Location     Type
  3267 ;;  q               1   23[BANK0 ] unsigned char 
  3268 ;;  q               1   21[BANK0 ] unsigned char 
  3269 ;;  i               1   22[BANK0 ] unsigned char 
  3270 ;;  i               1   20[BANK0 ] unsigned char 
  3271 ;;  adr            16    4[BANK0 ] unsigned char [2][8]
  3272 ;;  buf             1   24[BANK0 ] unsigned char 
  3273 ;; Return value:  Size  Location     Type
  3274 ;;                  1    wreg      void 
  3275 ;; Registers used:
  3276 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3277 ;; Tracked objects:
  3278 ;;		On entry : 0/0
  3279 ;;		On exit  : 0/0
  3280 ;;		Unchanged: 0/0
  3281 ;; Data sizes:     COMMON   BANK0   BANK1
  3282 ;;      Params:         0       0       0
  3283 ;;      Locals:         0      21       0
  3284 ;;      Temps:          0       1       0
  3285 ;;      Totals:         0      22       0
  3286 ;;Total ram usage:       22 bytes
  3287 ;; Hardware stack levels used: 1
  3288 ;; Hardware stack levels required when called: 8
  3289 ;; This function calls:
  3290 ;;		_EEPROM_ReadByte
  3291 ;; This function is called by:
  3292 ;;		_get_eeprom
  3293 ;; This function uses a non-reentrant model
  3294 ;;
  3295                           
  3296  0135                     _get_adr:	
  3297                           ;psect for function _get_adr
  3298                           
  3299  0135                     l2195:	
  3300                           ;incstack = 0
  3301                           ; Regs used in _get_adr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3302                           
  3303  0135                     l2197:
  3304                           
  3305                           ;main.c: 406:     char adr[8][2] = {};
  3306  0135  3024               	movlw	low get_adr@adr
  3307  0136  0086               	movwf	6
  3308  0137  3000               	movlw	high get_adr@adr
  3309  0138  0087               	movwf	7
  3310  0139  3010               	movlw	16
  3311  013A  0020               	movlb	0	; select bank0
  3312  013B  00A3               	movwf	??_get_adr
  3313  013C  3000               	movlw	0
  3314  013D                     u1320:
  3315  013D  001E               	movwi fsr1++
  3316  013E  0BA3               	decfsz	??_get_adr,f
  3317  013F  293D               	goto	u1320
  3318  0140                     l2199:
  3319                           
  3320                           ;main.c: 408:     for (unsigned char i = 0; i < 8; i++) {
  3321  0140  01B4               	clrf	get_adr@i
  3322  0141                     l2205:
  3323                           
  3324                           ;main.c: 409:         buf = EEPROM_ReadByte(i);
  3325  0141  0834               	movf	get_adr@i,w
  3326  0142  3186  262C  3181   	fcall	_EEPROM_ReadByte
  3327  0145  0020               	movlb	0	; select bank0
  3328  0146  00A3               	movwf	??_get_adr
  3329  0147  0823               	movf	??_get_adr,w
  3330  0148  00B8               	movwf	get_adr@buf
  3331  0149                     l2207:
  3332                           
  3333                           ;main.c: 410:         if (buf == 0) continue;
  3334  0149  0838               	movf	get_adr@buf,w
  3335  014A  1D03               	btfss	3,2
  3336  014B  294D               	goto	u1331
  3337  014C  294E               	goto	u1330
  3338  014D                     u1331:
  3339  014D  294F               	goto	l2211
  3340  014E                     u1330:
  3341  014E  2997               	goto	l2245
  3342  014F                     l2211:
  3343                           
  3344                           ;main.c: 411:         for (unsigned char q = 0; q < 8; q++) {
  3345  014F  01B5               	clrf	get_adr@q
  3346  0150                     l2217:
  3347                           
  3348                           ;main.c: 412:             if (buf == adr[q][0]) {
  3349  0150  3535               	lslf	get_adr@q,w
  3350  0151  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3351  0152  0086               	movwf	6
  3352  0153  0187               	clrf	7
  3353  0154  0801               	movf	1,w
  3354  0155  0638               	xorwf	get_adr@buf,w
  3355  0156  1D03               	skipz
  3356  0157  2959               	goto	u1341
  3357  0158  295A               	goto	u1340
  3358  0159                     u1341:
  3359  0159  2964               	goto	l2223
  3360  015A                     u1340:
  3361  015A                     l2219:
  3362                           
  3363                           ;main.c: 413:                 (adr[q][1])++;
  3364  015A  3001               	movlw	1
  3365  015B  00A3               	movwf	??_get_adr
  3366  015C  1403               	setc
  3367  015D  0D35               	rlf	get_adr@q,w
  3368  015E  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3369  015F  0086               	movwf	6
  3370  0160  0187               	clrf	7
  3371  0161  0823               	movf	??_get_adr,w
  3372  0162  0781               	addwf	1,f
  3373  0163                     l2221:
  3374                           
  3375                           ;main.c: 414:                 buf = 0;
  3376  0163  01B8               	clrf	get_adr@buf
  3377  0164                     l2223:
  3378                           
  3379                           ;main.c: 416:         }
  3380  0164  3001               	movlw	1
  3381  0165  00A3               	movwf	??_get_adr
  3382  0166  0823               	movf	??_get_adr,w
  3383  0167  07B5               	addwf	get_adr@q,f
  3384  0168                     l2225:
  3385  0168  3008               	movlw	8
  3386  0169  0235               	subwf	get_adr@q,w
  3387  016A  1C03               	skipc
  3388  016B  296D               	goto	u1351
  3389  016C  296E               	goto	u1350
  3390  016D                     u1351:
  3391  016D  2950               	goto	l2217
  3392  016E                     u1350:
  3393  016E                     l2227:
  3394                           
  3395                           ;main.c: 418:         if (buf != 0) {
  3396  016E  0838               	movf	get_adr@buf,w
  3397  016F  1903               	btfsc	3,2
  3398  0170  2972               	goto	u1361
  3399  0171  2973               	goto	u1360
  3400  0172                     u1361:
  3401  0172  2997               	goto	l2245
  3402  0173                     u1360:
  3403  0173                     l2229:
  3404                           
  3405                           ;main.c: 419:             for (unsigned char q = 0; q < 8; q++)
  3406  0173  01B7               	clrf	get_adr@q_810
  3407  0174                     l2235:
  3408                           
  3409                           ;main.c: 420:                 if (adr[q][0] == 0) {
  3410  0174  3537               	lslf	get_adr@q_810,w
  3411  0175  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3412  0176  0086               	movwf	6
  3413  0177  0187               	clrf	7
  3414  0178  0801               	movf	1,w
  3415  0179  1D03               	btfss	3,2
  3416  017A  297C               	goto	u1371
  3417  017B  297D               	goto	u1370
  3418  017C                     u1371:
  3419  017C  298D               	goto	l2241
  3420  017D                     u1370:
  3421  017D                     l2237:
  3422                           
  3423                           ;main.c: 421:                     adr[q][0] = buf;
  3424  017D  0838               	movf	get_adr@buf,w
  3425  017E  00A3               	movwf	??_get_adr
  3426  017F  3537               	lslf	get_adr@q_810,w
  3427  0180  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3428  0181  0086               	movwf	6
  3429  0182  0187               	clrf	7
  3430  0183  0823               	movf	??_get_adr,w
  3431  0184  0081               	movwf	1
  3432                           
  3433                           ;main.c: 422:                     adr[q][1] = 1;
  3434  0185  1403               	setc
  3435  0186  0D37               	rlf	get_adr@q_810,w
  3436  0187  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3437  0188  0086               	movwf	6
  3438  0189  0187               	clrf	7
  3439  018A  0181               	clrf	1
  3440  018B  0A81               	incf	1,f
  3441  018C                     l2239:
  3442                           
  3443                           ;main.c: 424:                     break;
  3444  018C  2997               	goto	l2245
  3445  018D                     l2241:
  3446  018D  3001               	movlw	1
  3447  018E  00A3               	movwf	??_get_adr
  3448  018F  0823               	movf	??_get_adr,w
  3449  0190  07B7               	addwf	get_adr@q_810,f
  3450  0191                     l2243:
  3451  0191  3008               	movlw	8
  3452  0192  0237               	subwf	get_adr@q_810,w
  3453  0193  1C03               	skipc
  3454  0194  2996               	goto	u1381
  3455  0195  2997               	goto	u1380
  3456  0196                     u1381:
  3457  0196  2974               	goto	l2235
  3458  0197                     u1380:
  3459  0197                     l2245:
  3460  0197  3001               	movlw	1
  3461  0198  00A3               	movwf	??_get_adr
  3462  0199  0823               	movf	??_get_adr,w
  3463  019A  07B4               	addwf	get_adr@i,f
  3464  019B                     l2247:
  3465  019B  3008               	movlw	8
  3466  019C  0234               	subwf	get_adr@i,w
  3467  019D  1C03               	skipc
  3468  019E  29A0               	goto	u1391
  3469  019F  29A1               	goto	u1390
  3470  01A0                     u1391:
  3471  01A0  2941               	goto	l2205
  3472  01A1                     u1390:
  3473  01A1                     l2249:
  3474                           
  3475                           ;main.c: 428:     buf = 0;
  3476  01A1  01B8               	clrf	get_adr@buf
  3477                           
  3478                           ;main.c: 429:     for (unsigned char i = 0; i < 8; i++) {
  3479  01A2  01B6               	clrf	get_adr@i_811
  3480  01A3                     l2255:
  3481                           
  3482                           ;main.c: 430:         if (adr[i][1] > adr[buf][1]) buf = i;
  3483  01A3  1403               	setc
  3484  01A4  0D38               	rlf	get_adr@buf,w
  3485  01A5  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3486  01A6  0086               	movwf	6
  3487  01A7  0187               	clrf	7
  3488  01A8  1403               	setc
  3489  01A9  0D36               	rlf	get_adr@i_811,w
  3490  01AA  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3491  01AB  0084               	movwf	4
  3492  01AC  0185               	clrf	5
  3493  01AD  0800               	movf	0,w
  3494  01AE  0201               	subwf	1,w
  3495  01AF  1803               	skipnc
  3496  01B0  29B2               	goto	u1401
  3497  01B1  29B3               	goto	u1400
  3498  01B2                     u1401:
  3499  01B2  29B7               	goto	l2259
  3500  01B3                     u1400:
  3501  01B3                     l2257:
  3502  01B3  0836               	movf	get_adr@i_811,w
  3503  01B4  00A3               	movwf	??_get_adr
  3504  01B5  0823               	movf	??_get_adr,w
  3505  01B6  00B8               	movwf	get_adr@buf
  3506  01B7                     l2259:
  3507                           
  3508                           ;main.c: 431:     }
  3509  01B7  3001               	movlw	1
  3510  01B8  00A3               	movwf	??_get_adr
  3511  01B9  0823               	movf	??_get_adr,w
  3512  01BA  07B6               	addwf	get_adr@i_811,f
  3513  01BB                     l2261:
  3514  01BB  3008               	movlw	8
  3515  01BC  0236               	subwf	get_adr@i_811,w
  3516  01BD  1C03               	skipc
  3517  01BE  29C0               	goto	u1411
  3518  01BF  29C1               	goto	u1410
  3519  01C0                     u1411:
  3520  01C0  29A3               	goto	l2255
  3521  01C1                     u1410:
  3522  01C1                     l2263:
  3523                           
  3524                           ;main.c: 432:     START_EEPROM_ADR = adr[buf][0];
  3525  01C1  3538               	lslf	get_adr@buf,w
  3526  01C2  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3527  01C3  0086               	movwf	6
  3528  01C4  0187               	clrf	7
  3529  01C5  0801               	movf	1,w
  3530  01C6  00A3               	movwf	??_get_adr
  3531  01C7  0823               	movf	??_get_adr,w
  3532  01C8  00DF               	movwf	_START_EEPROM_ADR
  3533  01C9                     l2265:
  3534                           
  3535                           ;main.c: 433:     if (START_EEPROM_ADR == 0 || START_EEPROM_ADR == 0xFF) START_EEPROM_AD
      +                          R = 0x10;
  3536  01C9  085F               	movf	_START_EEPROM_ADR,w
  3537  01CA  1903               	btfsc	3,2
  3538  01CB  29CD               	goto	u1421
  3539  01CC  29CE               	goto	u1420
  3540  01CD                     u1421:
  3541  01CD  29D3               	goto	l2269
  3542  01CE                     u1420:
  3543  01CE                     l2267:
  3544  01CE  0A5F               	incf	_START_EEPROM_ADR,w
  3545  01CF  1D03               	btfss	3,2
  3546  01D0  29D2               	goto	u1431
  3547  01D1  29D3               	goto	u1430
  3548  01D2                     u1431:
  3549  01D2  29D7               	goto	l481
  3550  01D3                     u1430:
  3551  01D3                     l2269:
  3552  01D3  3010               	movlw	16
  3553  01D4  00A3               	movwf	??_get_adr
  3554  01D5  0823               	movf	??_get_adr,w
  3555  01D6  00DF               	movwf	_START_EEPROM_ADR
  3556  01D7                     l481:
  3557  01D7  0008               	return
  3558  01D8                     __end_of_get_adr:
  3559                           
  3560                           	psect	text10
  3561  076A                     __ptext10:	
  3562 ;; *************** function _TMR2_StartTimer *****************
  3563 ;; Defined at:
  3564 ;;		line 87 in file "mcc_generated_files/tmr2.c"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;		None
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;		None
  3569 ;; Return value:  Size  Location     Type
  3570 ;;                  1    wreg      void 
  3571 ;; Registers used:
  3572 ;;		None
  3573 ;; Tracked objects:
  3574 ;;		On entry : 0/0
  3575 ;;		On exit  : 0/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMMON   BANK0   BANK1
  3578 ;;      Params:         0       0       0
  3579 ;;      Locals:         0       0       0
  3580 ;;      Temps:          0       0       0
  3581 ;;      Totals:         0       0       0
  3582 ;;Total ram usage:        0 bytes
  3583 ;; Hardware stack levels used: 1
  3584 ;; Hardware stack levels required when called: 7
  3585 ;; This function calls:
  3586 ;;		Nothing
  3587 ;; This function is called by:
  3588 ;;		_start_setup
  3589 ;; This function uses a non-reentrant model
  3590 ;;
  3591                           
  3592  076A                     _TMR2_StartTimer:	
  3593                           ;psect for function _TMR2_StartTimer
  3594                           
  3595  076A                     l2347:	
  3596                           ;incstack = 0
  3597                           ; Regs used in _TMR2_StartTimer: []
  3598                           
  3599                           
  3600                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
  3601  076A  0020               	movlb	0	; select bank0
  3602  076B  151C               	bsf	28,2	;volatile
  3603  076C                     l142:
  3604  076C  0008               	return
  3605  076D                     __end_of_TMR2_StartTimer:
  3606                           
  3607                           	psect	text11
  3608  065B                     __ptext11:	
  3609 ;; *************** function _SYSTEM_Initialize *****************
  3610 ;; Defined at:
  3611 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3612 ;; Parameters:    Size  Location     Type
  3613 ;;		None
  3614 ;; Auto vars:     Size  Location     Type
  3615 ;;		None
  3616 ;; Return value:  Size  Location     Type
  3617 ;;                  1    wreg      void 
  3618 ;; Registers used:
  3619 ;;		wreg, status,2, status,0, pclath, cstack
  3620 ;; Tracked objects:
  3621 ;;		On entry : 0/0
  3622 ;;		On exit  : 0/0
  3623 ;;		Unchanged: 0/0
  3624 ;; Data sizes:     COMMON   BANK0   BANK1
  3625 ;;      Params:         0       0       0
  3626 ;;      Locals:         0       0       0
  3627 ;;      Temps:          0       0       0
  3628 ;;      Totals:         0       0       0
  3629 ;;Total ram usage:        0 bytes
  3630 ;; Hardware stack levels used: 1
  3631 ;; Hardware stack levels required when called: 9
  3632 ;; This function calls:
  3633 ;;		_ADC_Initialize
  3634 ;;		_FVR_Initialize
  3635 ;;		_OSCILLATOR_Initialize
  3636 ;;		_PIN_MANAGER_Initialize
  3637 ;;		_TMR0_Initialize
  3638 ;;		_TMR2_Initialize
  3639 ;;		_WDT_Initialize
  3640 ;; This function is called by:
  3641 ;;		_start_setup
  3642 ;; This function uses a non-reentrant model
  3643 ;;
  3644                           
  3645  065B                     _SYSTEM_Initialize:	
  3646                           ;psect for function _SYSTEM_Initialize
  3647                           
  3648  065B                     l2345:	
  3649                           ;incstack = 0
  3650                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3651                           
  3652                           
  3653                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  3654  065B  3186  2687  3186   	fcall	_PIN_MANAGER_Initialize
  3655                           
  3656                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  3657  065E  3187  2731  3186   	fcall	_OSCILLATOR_Initialize
  3658                           
  3659                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  3660  0661  3187  2759  3186   	fcall	_WDT_Initialize
  3661                           
  3662                           ;mcc_generated_files/mcc.c: 56:     FVR_Initialize();
  3663  0664  3187  275D  3186   	fcall	_FVR_Initialize
  3664                           
  3665                           ;mcc_generated_files/mcc.c: 57:     ADC_Initialize();
  3666  0667  3187  2722  3186   	fcall	_ADC_Initialize
  3667                           
  3668                           ;mcc_generated_files/mcc.c: 58:     TMR2_Initialize();
  3669  066A  3186  26B1  3186   	fcall	_TMR2_Initialize
  3670                           
  3671                           ;mcc_generated_files/mcc.c: 59:     TMR0_Initialize();
  3672  066D  3186  2671  3186   	fcall	_TMR0_Initialize
  3673  0670                     l25:
  3674  0670  0008               	return
  3675  0671                     __end_of_SYSTEM_Initialize:
  3676                           
  3677                           	psect	text12
  3678  0759                     __ptext12:	
  3679 ;; *************** function _WDT_Initialize *****************
  3680 ;; Defined at:
  3681 ;;		line 72 in file "mcc_generated_files/mcc.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;		None
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;		None
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  1    wreg      void 
  3688 ;; Registers used:
  3689 ;;		wreg
  3690 ;; Tracked objects:
  3691 ;;		On entry : 0/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMMON   BANK0   BANK1
  3695 ;;      Params:         0       0       0
  3696 ;;      Locals:         0       0       0
  3697 ;;      Temps:          0       0       0
  3698 ;;      Totals:         0       0       0
  3699 ;;Total ram usage:        0 bytes
  3700 ;; Hardware stack levels used: 1
  3701 ;; Hardware stack levels required when called: 7
  3702 ;; This function calls:
  3703 ;;		Nothing
  3704 ;; This function is called by:
  3705 ;;		_SYSTEM_Initialize
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709  0759                     _WDT_Initialize:	
  3710                           ;psect for function _WDT_Initialize
  3711                           
  3712  0759                     l2105:	
  3713                           ;incstack = 0
  3714                           ; Regs used in _WDT_Initialize: [wreg]
  3715                           
  3716                           
  3717                           ;mcc_generated_files/mcc.c: 75:     WDTCON = 0x16;
  3718  0759  3016               	movlw	22
  3719  075A  0021               	movlb	1	; select bank1
  3720  075B  0097               	movwf	23	;volatile
  3721  075C                     l31:
  3722  075C  0008               	return
  3723  075D                     __end_of_WDT_Initialize:
  3724                           
  3725                           	psect	text13
  3726  06B1                     __ptext13:	
  3727 ;; *************** function _TMR2_Initialize *****************
  3728 ;; Defined at:
  3729 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  3730 ;; Parameters:    Size  Location     Type
  3731 ;;		None
  3732 ;; Auto vars:     Size  Location     Type
  3733 ;;		None
  3734 ;; Return value:  Size  Location     Type
  3735 ;;                  1    wreg      void 
  3736 ;; Registers used:
  3737 ;;		wreg, status,2, status,0, pclath, cstack
  3738 ;; Tracked objects:
  3739 ;;		On entry : 0/0
  3740 ;;		On exit  : 0/0
  3741 ;;		Unchanged: 0/0
  3742 ;; Data sizes:     COMMON   BANK0   BANK1
  3743 ;;      Params:         0       0       0
  3744 ;;      Locals:         0       0       0
  3745 ;;      Temps:          0       0       0
  3746 ;;      Totals:         0       0       0
  3747 ;;Total ram usage:        0 bytes
  3748 ;; Hardware stack levels used: 1
  3749 ;; Hardware stack levels required when called: 8
  3750 ;; This function calls:
  3751 ;;		_TMR2_SetInterruptHandler
  3752 ;; This function is called by:
  3753 ;;		_SYSTEM_Initialize
  3754 ;; This function uses a non-reentrant model
  3755 ;;
  3756                           
  3757  06B1                     _TMR2_Initialize:	
  3758                           ;psect for function _TMR2_Initialize
  3759                           
  3760  06B1                     l2115:	
  3761                           ;incstack = 0
  3762                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3763                           
  3764                           
  3765                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0xF9;
  3766  06B1  30F9               	movlw	249
  3767  06B2  0020               	movlb	0	; select bank0
  3768  06B3  009B               	movwf	27	;volatile
  3769  06B4                     l2117:
  3770                           
  3771                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  3772  06B4  019A               	clrf	26	;volatile
  3773  06B5                     l2119:
  3774                           
  3775                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  3776  06B5  1091               	bcf	17,1	;volatile
  3777  06B6                     l2121:
  3778                           
  3779                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  3780  06B6  0021               	movlb	1	; select bank1
  3781  06B7  1491               	bsf	17,1	;volatile
  3782  06B8                     l2123:
  3783                           
  3784                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  3785  06B8  306D               	movlw	low _TMR2_DefaultInterruptHandler
  3786  06B9  0020               	movlb	0	; select bank0
  3787  06BA  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  3788  06BB  3007               	movlw	high _TMR2_DefaultInterruptHandler
  3789  06BC  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  3790  06BD  3187  273E  3186   	fcall	_TMR2_SetInterruptHandler
  3791  06C0                     l2125:
  3792                           
  3793                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x4E;
  3794  06C0  304E               	movlw	78
  3795  06C1  0020               	movlb	0	; select bank0
  3796  06C2  009C               	movwf	28	;volatile
  3797  06C3                     l139:
  3798  06C3  0008               	return
  3799  06C4                     __end_of_TMR2_Initialize:
  3800                           
  3801                           	psect	text14
  3802  073E                     __ptext14:	
  3803 ;; *************** function _TMR2_SetInterruptHandler *****************
  3804 ;; Defined at:
  3805 ;;		line 147 in file "mcc_generated_files/tmr2.c"
  3806 ;; Parameters:    Size  Location     Type
  3807 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3808 ;;		 -> sec_tick_work(1), TMR2_DefaultInterruptHandler(1), 
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;		None
  3811 ;; Return value:  Size  Location     Type
  3812 ;;                  1    wreg      void 
  3813 ;; Registers used:
  3814 ;;		wreg
  3815 ;; Tracked objects:
  3816 ;;		On entry : 0/0
  3817 ;;		On exit  : 0/0
  3818 ;;		Unchanged: 0/0
  3819 ;; Data sizes:     COMMON   BANK0   BANK1
  3820 ;;      Params:         0       2       0
  3821 ;;      Locals:         0       0       0
  3822 ;;      Temps:          0       0       0
  3823 ;;      Totals:         0       2       0
  3824 ;;Total ram usage:        2 bytes
  3825 ;; Hardware stack levels used: 1
  3826 ;; Hardware stack levels required when called: 7
  3827 ;; This function calls:
  3828 ;;		Nothing
  3829 ;; This function is called by:
  3830 ;;		_TMR2_Initialize
  3831 ;;		_start_setup
  3832 ;; This function uses a non-reentrant model
  3833 ;;
  3834                           
  3835  073E                     _TMR2_SetInterruptHandler:	
  3836                           ;psect for function _TMR2_SetInterruptHandler
  3837                           
  3838  073E                     l2023:	
  3839                           ;incstack = 0
  3840                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  3841                           
  3842                           
  3843                           ;mcc_generated_files/tmr2.c: 148:     TMR2_InterruptHandler = InterruptHandler;
  3844  073E  0020               	movlb	0	; select bank0
  3845  073F  0821               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  3846  0740  00E3               	movwf	_TMR2_InterruptHandler+1
  3847  0741  0820               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  3848  0742  00E2               	movwf	_TMR2_InterruptHandler
  3849  0743                     l164:
  3850  0743  0008               	return
  3851  0744                     __end_of_TMR2_SetInterruptHandler:
  3852                           
  3853                           	psect	text15
  3854  0671                     __ptext15:	
  3855 ;; *************** function _TMR0_Initialize *****************
  3856 ;; Defined at:
  3857 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  3858 ;; Parameters:    Size  Location     Type
  3859 ;;		None
  3860 ;; Auto vars:     Size  Location     Type
  3861 ;;		None
  3862 ;; Return value:  Size  Location     Type
  3863 ;;                  1    wreg      void 
  3864 ;; Registers used:
  3865 ;;		wreg, status,2, status,0, pclath, cstack
  3866 ;; Tracked objects:
  3867 ;;		On entry : 0/0
  3868 ;;		On exit  : 0/0
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMMON   BANK0   BANK1
  3871 ;;      Params:         0       0       0
  3872 ;;      Locals:         0       0       0
  3873 ;;      Temps:          0       1       0
  3874 ;;      Totals:         0       1       0
  3875 ;;Total ram usage:        1 bytes
  3876 ;; Hardware stack levels used: 1
  3877 ;; Hardware stack levels required when called: 8
  3878 ;; This function calls:
  3879 ;;		_TMR0_SetInterruptHandler
  3880 ;; This function is called by:
  3881 ;;		_SYSTEM_Initialize
  3882 ;; This function uses a non-reentrant model
  3883 ;;
  3884                           
  3885  0671                     _TMR0_Initialize:	
  3886                           ;psect for function _TMR0_Initialize
  3887                           
  3888  0671                     l2127:	
  3889                           ;incstack = 0
  3890                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3891                           
  3892                           
  3893                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD2 
      +                          & 0x3F));
  3894  0671  0021               	movlb	1	; select bank1
  3895  0672  0815               	movf	21,w	;volatile
  3896  0673  39C0               	andlw	192
  3897  0674  3812               	iorlw	18
  3898  0675  0095               	movwf	21	;volatile
  3899  0676                     l2129:
  3900                           
  3901                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x9C;
  3902  0676  309C               	movlw	156
  3903  0677  0020               	movlb	0	; select bank0
  3904  0678  0095               	movwf	21	;volatile
  3905  0679                     l2131:
  3906                           
  3907                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 156;
  3908  0679  309C               	movlw	156
  3909  067A  00A2               	movwf	??_TMR0_Initialize
  3910  067B  0822               	movf	??_TMR0_Initialize,w
  3911  067C  00E4               	movwf	_timer0ReloadVal	;volatile
  3912  067D                     l2133:
  3913                           
  3914                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  3915  067D  110B               	bcf	11,2	;volatile
  3916  067E                     l2135:
  3917                           
  3918                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  3919  067E  168B               	bsf	11,5	;volatile
  3920  067F                     l2137:
  3921                           
  3922                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  3923  067F  306E               	movlw	low _TMR0_DefaultInterruptHandler
  3924  0680  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  3925  0681  3007               	movlw	high _TMR0_DefaultInterruptHandler
  3926  0682  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  3927  0683  3187  2744  3186   	fcall	_TMR0_SetInterruptHandler
  3928  0686                     l184:
  3929  0686  0008               	return
  3930  0687                     __end_of_TMR0_Initialize:
  3931                           
  3932                           	psect	text16
  3933  0744                     __ptext16:	
  3934 ;; *************** function _TMR0_SetInterruptHandler *****************
  3935 ;; Defined at:
  3936 ;;		line 125 in file "mcc_generated_files/tmr0.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3939 ;;		 -> switch_zum(1), TMR0_DefaultInterruptHandler(1), 
  3940 ;; Auto vars:     Size  Location     Type
  3941 ;;		None
  3942 ;; Return value:  Size  Location     Type
  3943 ;;                  1    wreg      void 
  3944 ;; Registers used:
  3945 ;;		wreg
  3946 ;; Tracked objects:
  3947 ;;		On entry : 0/0
  3948 ;;		On exit  : 0/0
  3949 ;;		Unchanged: 0/0
  3950 ;; Data sizes:     COMMON   BANK0   BANK1
  3951 ;;      Params:         0       2       0
  3952 ;;      Locals:         0       0       0
  3953 ;;      Temps:          0       0       0
  3954 ;;      Totals:         0       2       0
  3955 ;;Total ram usage:        2 bytes
  3956 ;; Hardware stack levels used: 1
  3957 ;; Hardware stack levels required when called: 7
  3958 ;; This function calls:
  3959 ;;		Nothing
  3960 ;; This function is called by:
  3961 ;;		_TMR0_Initialize
  3962 ;;		_start_setup
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966  0744                     _TMR0_SetInterruptHandler:	
  3967                           ;psect for function _TMR0_SetInterruptHandler
  3968                           
  3969  0744                     l2025:	
  3970                           ;incstack = 0
  3971                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  3972                           
  3973                           
  3974                           ;mcc_generated_files/tmr0.c: 126:     TMR0_InterruptHandler = InterruptHandler;
  3975  0744  0020               	movlb	0	; select bank0
  3976  0745  0821               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  3977  0746  00E1               	movwf	_TMR0_InterruptHandler+1
  3978  0747  0820               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  3979  0748  00E0               	movwf	_TMR0_InterruptHandler
  3980  0749                     l200:
  3981  0749  0008               	return
  3982  074A                     __end_of_TMR0_SetInterruptHandler:
  3983                           
  3984                           	psect	text17
  3985  0687                     __ptext17:	
  3986 ;; *************** function _PIN_MANAGER_Initialize *****************
  3987 ;; Defined at:
  3988 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  3989 ;; Parameters:    Size  Location     Type
  3990 ;;		None
  3991 ;; Auto vars:     Size  Location     Type
  3992 ;;		None
  3993 ;; Return value:  Size  Location     Type
  3994 ;;                  1    wreg      void 
  3995 ;; Registers used:
  3996 ;;		wreg, status,2
  3997 ;; Tracked objects:
  3998 ;;		On entry : 0/0
  3999 ;;		On exit  : 0/0
  4000 ;;		Unchanged: 0/0
  4001 ;; Data sizes:     COMMON   BANK0   BANK1
  4002 ;;      Params:         0       0       0
  4003 ;;      Locals:         0       0       0
  4004 ;;      Temps:          0       0       0
  4005 ;;      Totals:         0       0       0
  4006 ;;Total ram usage:        0 bytes
  4007 ;; Hardware stack levels used: 1
  4008 ;; Hardware stack levels required when called: 7
  4009 ;; This function calls:
  4010 ;;		Nothing
  4011 ;; This function is called by:
  4012 ;;		_SYSTEM_Initialize
  4013 ;; This function uses a non-reentrant model
  4014 ;;
  4015                           
  4016  0687                     _PIN_MANAGER_Initialize:	
  4017                           ;psect for function _PIN_MANAGER_Initialize
  4018                           
  4019  0687                     l2087:	
  4020                           ;incstack = 0
  4021                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4022                           
  4023                           
  4024                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  4025  0687  0022               	movlb	2	; select bank2
  4026  0688  018C               	clrf	12	;volatile
  4027                           
  4028                           ;mcc_generated_files/pin_manager.c: 61:     LATC = 0x00;
  4029  0689  018E               	clrf	14	;volatile
  4030  068A                     l2089:
  4031                           
  4032                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0x0F;
  4033  068A  300F               	movlw	15
  4034  068B  0021               	movlb	1	; select bank1
  4035  068C  008C               	movwf	12	;volatile
  4036  068D                     l2091:
  4037                           
  4038                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0x0C;
  4039  068D  300C               	movlw	12
  4040  068E  008E               	movwf	14	;volatile
  4041  068F                     l2093:
  4042                           
  4043                           ;mcc_generated_files/pin_manager.c: 72:     ANSELC = 0x0C;
  4044  068F  300C               	movlw	12
  4045  0690  0023               	movlb	3	; select bank3
  4046  0691  008E               	movwf	14	;volatile
  4047  0692                     l2095:
  4048                           
  4049                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x07;
  4050  0692  3007               	movlw	7
  4051  0693  008C               	movwf	12	;volatile
  4052                           
  4053                           ;mcc_generated_files/pin_manager.c: 78:     WPUA = 0x00;
  4054  0694  0024               	movlb	4	; select bank4
  4055  0695  018C               	clrf	12	;volatile
  4056                           
  4057                           ;mcc_generated_files/pin_manager.c: 79:     WPUC = 0x00;
  4058  0696  018E               	clrf	14	;volatile
  4059  0697                     l2097:
  4060                           
  4061                           ;mcc_generated_files/pin_manager.c: 80:     OPTION_REGbits.nWPUEN = 1;
  4062  0697  0021               	movlb	1	; select bank1
  4063  0698  1795               	bsf	21,7	;volatile
  4064                           
  4065                           ;mcc_generated_files/pin_manager.c: 86:     APFCON = 0x00;
  4066  0699  0022               	movlb	2	; select bank2
  4067  069A  019D               	clrf	29	;volatile
  4068  069B                     l92:
  4069  069B  0008               	return
  4070  069C                     __end_of_PIN_MANAGER_Initialize:
  4071                           
  4072                           	psect	text18
  4073  0731                     __ptext18:	
  4074 ;; *************** function _OSCILLATOR_Initialize *****************
  4075 ;; Defined at:
  4076 ;;		line 62 in file "mcc_generated_files/mcc.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;		None
  4079 ;; Auto vars:     Size  Location     Type
  4080 ;;		None
  4081 ;; Return value:  Size  Location     Type
  4082 ;;                  1    wreg      void 
  4083 ;; Registers used:
  4084 ;;		wreg, status,2
  4085 ;; Tracked objects:
  4086 ;;		On entry : 0/0
  4087 ;;		On exit  : 0/0
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMMON   BANK0   BANK1
  4090 ;;      Params:         0       0       0
  4091 ;;      Locals:         0       0       0
  4092 ;;      Temps:          0       0       0
  4093 ;;      Totals:         0       0       0
  4094 ;;Total ram usage:        0 bytes
  4095 ;; Hardware stack levels used: 1
  4096 ;; Hardware stack levels required when called: 7
  4097 ;; This function calls:
  4098 ;;		Nothing
  4099 ;; This function is called by:
  4100 ;;		_SYSTEM_Initialize
  4101 ;; This function uses a non-reentrant model
  4102 ;;
  4103                           
  4104  0731                     _OSCILLATOR_Initialize:	
  4105                           ;psect for function _OSCILLATOR_Initialize
  4106                           
  4107  0731                     l2099:	
  4108                           ;incstack = 0
  4109                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4110                           
  4111                           
  4112                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x78;
  4113  0731  3078               	movlw	120
  4114  0732  0021               	movlb	1	; select bank1
  4115  0733  0099               	movwf	25	;volatile
  4116  0734                     l2101:
  4117                           
  4118                           ;mcc_generated_files/mcc.c: 67:     OSCTUNE = 0x00;
  4119  0734  0198               	clrf	24	;volatile
  4120  0735                     l2103:
  4121                           
  4122                           ;mcc_generated_files/mcc.c: 69:     BORCON = 0x00;
  4123  0735  0022               	movlb	2	; select bank2
  4124  0736  0196               	clrf	22	;volatile
  4125  0737                     l28:
  4126  0737  0008               	return
  4127  0738                     __end_of_OSCILLATOR_Initialize:
  4128                           
  4129                           	psect	text19
  4130  075D                     __ptext19:	
  4131 ;; *************** function _FVR_Initialize *****************
  4132 ;; Defined at:
  4133 ;;		line 58 in file "mcc_generated_files/fvr.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;		None
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;		None
  4138 ;; Return value:  Size  Location     Type
  4139 ;;                  1    wreg      void 
  4140 ;; Registers used:
  4141 ;;		wreg
  4142 ;; Tracked objects:
  4143 ;;		On entry : 0/0
  4144 ;;		On exit  : 0/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMMON   BANK0   BANK1
  4147 ;;      Params:         0       0       0
  4148 ;;      Locals:         0       0       0
  4149 ;;      Temps:          0       0       0
  4150 ;;      Totals:         0       0       0
  4151 ;;Total ram usage:        0 bytes
  4152 ;; Hardware stack levels used: 1
  4153 ;; Hardware stack levels required when called: 7
  4154 ;; This function calls:
  4155 ;;		Nothing
  4156 ;; This function is called by:
  4157 ;;		_SYSTEM_Initialize
  4158 ;; This function uses a non-reentrant model
  4159 ;;
  4160                           
  4161  075D                     _FVR_Initialize:	
  4162                           ;psect for function _FVR_Initialize
  4163                           
  4164  075D                     l2107:	
  4165                           ;incstack = 0
  4166                           ; Regs used in _FVR_Initialize: [wreg]
  4167                           
  4168                           
  4169                           ;mcc_generated_files/fvr.c: 61:     FVRCON = 0x82;
  4170  075D  3082               	movlw	130
  4171  075E  0022               	movlb	2	; select bank2
  4172  075F  0097               	movwf	23	;volatile
  4173  0760                     l210:
  4174  0760  0008               	return
  4175  0761                     __end_of_FVR_Initialize:
  4176                           
  4177                           	psect	text20
  4178  0722                     __ptext20:	
  4179 ;; *************** function _ADC_Initialize *****************
  4180 ;; Defined at:
  4181 ;;		line 67 in file "mcc_generated_files/adc.c"
  4182 ;; Parameters:    Size  Location     Type
  4183 ;;		None
  4184 ;; Auto vars:     Size  Location     Type
  4185 ;;		None
  4186 ;; Return value:  Size  Location     Type
  4187 ;;                  1    wreg      void 
  4188 ;; Registers used:
  4189 ;;		wreg, status,2
  4190 ;; Tracked objects:
  4191 ;;		On entry : 0/0
  4192 ;;		On exit  : 0/0
  4193 ;;		Unchanged: 0/0
  4194 ;; Data sizes:     COMMON   BANK0   BANK1
  4195 ;;      Params:         0       0       0
  4196 ;;      Locals:         0       0       0
  4197 ;;      Temps:          0       0       0
  4198 ;;      Totals:         0       0       0
  4199 ;;Total ram usage:        0 bytes
  4200 ;; Hardware stack levels used: 1
  4201 ;; Hardware stack levels required when called: 7
  4202 ;; This function calls:
  4203 ;;		Nothing
  4204 ;; This function is called by:
  4205 ;;		_SYSTEM_Initialize
  4206 ;; This function uses a non-reentrant model
  4207 ;;
  4208                           
  4209  0722                     _ADC_Initialize:	
  4210                           ;psect for function _ADC_Initialize
  4211                           
  4212  0722                     l2109:	
  4213                           ;incstack = 0
  4214                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4215                           
  4216                           
  4217                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0x40;
  4218  0722  3040               	movlw	64
  4219  0723  0021               	movlb	1	; select bank1
  4220  0724  009E               	movwf	30	;volatile
  4221  0725                     l2111:
  4222                           
  4223                           ;mcc_generated_files/adc.c: 75:     ADRESL = 0x00;
  4224  0725  019B               	clrf	27	;volatile
  4225  0726                     l2113:
  4226                           
  4227                           ;mcc_generated_files/adc.c: 78:     ADRESH = 0x00;
  4228  0726  019C               	clrf	28	;volatile
  4229                           
  4230                           ;mcc_generated_files/adc.c: 81:     ADCON0 = 0x7D;
  4231  0727  307D               	movlw	125
  4232  0728  009D               	movwf	29	;volatile
  4233  0729                     l48:
  4234  0729  0008               	return
  4235  072A                     __end_of_ADC_Initialize:
  4236                           
  4237                           	psect	text21
  4238  02C7                     __ptext21:	
  4239 ;; *************** function _povorot *****************
  4240 ;; Defined at:
  4241 ;;		line 331 in file "main.c"
  4242 ;; Parameters:    Size  Location     Type
  4243 ;;		None
  4244 ;; Auto vars:     Size  Location     Type
  4245 ;;		None
  4246 ;; Return value:  Size  Location     Type
  4247 ;;                  1    wreg      void 
  4248 ;; Registers used:
  4249 ;;		wreg, status,2, status,0, pclath, cstack
  4250 ;; Tracked objects:
  4251 ;;		On entry : 0/0
  4252 ;;		On exit  : 0/0
  4253 ;;		Unchanged: 0/0
  4254 ;; Data sizes:     COMMON   BANK0   BANK1
  4255 ;;      Params:         0       0       0
  4256 ;;      Locals:         0       0       0
  4257 ;;      Temps:          0       0       0
  4258 ;;      Totals:         0       0       0
  4259 ;;Total ram usage:        0 bytes
  4260 ;; Hardware stack levels used: 1
  4261 ;; Hardware stack levels required when called: 8
  4262 ;; This function calls:
  4263 ;;		_go_close
  4264 ;;		_go_open
  4265 ;; This function is called by:
  4266 ;;		_main
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270  02C7                     _povorot:	
  4271                           ;psect for function _povorot
  4272                           
  4273  02C7                     l2527:	
  4274                           ;incstack = 0
  4275                           ; Regs used in _povorot: [wreg+status,2+status,0+pclath+cstack]
  4276                           
  4277                           
  4278                           ;main.c: 332:     if ((time_s > ROTATION_TIME) &&
  4279  02C7  3000               	movlw	0
  4280  02C8  0020               	movlb	0	; select bank0
  4281  02C9  0257               	subwf	_time_s+2,w
  4282  02CA  1D03               	skipz
  4283  02CB  2AD2               	goto	u1775
  4284  02CC  3000               	movlw	0
  4285  02CD  0256               	subwf	_time_s+1,w
  4286  02CE  1D03               	skipz
  4287  02CF  2AD2               	goto	u1775
  4288  02D0  3079               	movlw	121
  4289  02D1  0255               	subwf	_time_s,w
  4290  02D2                     u1775:
  4291  02D2  1C03               	skipc
  4292  02D3  2AD5               	goto	u1771
  4293  02D4  2AD6               	goto	u1770
  4294  02D5                     u1771:
  4295  02D5  2AE5               	goto	l2537
  4296  02D6                     u1770:
  4297  02D6                     l2529:
  4298  02D6  197C               	btfsc	_FLAGS,2
  4299  02D7  2AD9               	goto	u1781
  4300  02D8  2ADA               	goto	u1780
  4301  02D9                     u1781:
  4302  02D9  2AE5               	goto	l2537
  4303  02DA                     u1780:
  4304  02DA                     l2531:
  4305  02DA  187C               	btfsc	_FLAGS,0
  4306  02DB  2ADD               	goto	u1791
  4307  02DC  2ADE               	goto	u1790
  4308  02DD                     u1791:
  4309  02DD  2AE5               	goto	l2537
  4310  02DE                     u1790:
  4311  02DE                     l2533:
  4312  02DE  1CFC               	btfss	_FLAGS,1
  4313  02DF  2AE1               	goto	u1801
  4314  02E0  2AE2               	goto	u1800
  4315  02E1                     u1801:
  4316  02E1  2AE5               	goto	l2537
  4317  02E2                     u1800:
  4318  02E2                     l2535:
  4319                           
  4320                           ;main.c: 336:             ) {;main.c: 337:         go_close();
  4321  02E2  3185  25B8  3182   	fcall	_go_close
  4322  02E5                     l2537:
  4323                           
  4324                           ;main.c: 339:     if ((time_s > (ROTATION_TIME + 10 + 2 * 2)) &&
  4325  02E5  3000               	movlw	0
  4326  02E6  0020               	movlb	0	; select bank0
  4327  02E7  0257               	subwf	_time_s+2,w
  4328  02E8  1D03               	skipz
  4329  02E9  2AF0               	goto	u1815
  4330  02EA  3000               	movlw	0
  4331  02EB  0256               	subwf	_time_s+1,w
  4332  02EC  1D03               	skipz
  4333  02ED  2AF0               	goto	u1815
  4334  02EE  3087               	movlw	135
  4335  02EF  0255               	subwf	_time_s,w
  4336  02F0                     u1815:
  4337  02F0  1C03               	skipc
  4338  02F1  2AF3               	goto	u1811
  4339  02F2  2AF4               	goto	u1810
  4340  02F3                     u1811:
  4341  02F3  2B0A               	goto	l433
  4342  02F4                     u1810:
  4343  02F4                     l2539:
  4344  02F4  1D7C               	btfss	_FLAGS,2
  4345  02F5  2AF7               	goto	u1821
  4346  02F6  2AF8               	goto	u1820
  4347  02F7                     u1821:
  4348  02F7  2B0A               	goto	l433
  4349  02F8                     u1820:
  4350  02F8                     l2541:
  4351  02F8  187C               	btfsc	_FLAGS,0
  4352  02F9  2AFB               	goto	u1831
  4353  02FA  2AFC               	goto	u1830
  4354  02FB                     u1831:
  4355  02FB  2B0A               	goto	l433
  4356  02FC                     u1830:
  4357  02FC                     l2543:
  4358  02FC  1CFC               	btfss	_FLAGS,1
  4359  02FD  2AFF               	goto	u1841
  4360  02FE  2B00               	goto	u1840
  4361  02FF                     u1841:
  4362  02FF  2B0A               	goto	l433
  4363  0300                     u1840:
  4364  0300                     l2545:
  4365                           
  4366                           ;main.c: 343:             ) {;main.c: 344:         go_open();
  4367  0300  3187  270E  3182   	fcall	_go_open
  4368  0303                     l2547:
  4369                           
  4370                           ;main.c: 345:         time_s = 0;
  4371  0303  3000               	movlw	0
  4372  0304  0020               	movlb	0	; select bank0
  4373  0305  00D5               	movwf	_time_s
  4374  0306  3000               	movlw	0
  4375  0307  00D6               	movwf	_time_s+1
  4376  0308  3000               	movlw	0
  4377  0309  00D7               	movwf	_time_s+2
  4378  030A                     l433:
  4379  030A  0008               	return
  4380  030B                     __end_of_povorot:
  4381                           
  4382                           	psect	text22
  4383  01D8                     __ptext22:	
  4384 ;; *************** function _get_voltage *****************
  4385 ;; Defined at:
  4386 ;;		line 390 in file "main.c"
  4387 ;; Parameters:    Size  Location     Type
  4388 ;;		None
  4389 ;; Auto vars:     Size  Location     Type
  4390 ;;  buf             1   21[BANK0 ] unsigned char 
  4391 ;;  q               1   22[BANK0 ] unsigned char 
  4392 ;;  q               1   23[BANK0 ] unsigned char 
  4393 ;;  buf             3   16[BANK0 ] unsigned um
  4394 ;;  res             2   19[BANK0 ] unsigned int 
  4395 ;; Return value:  Size  Location     Type
  4396 ;;                  1    wreg      void 
  4397 ;; Registers used:
  4398 ;;		wreg, status,2, status,0, pclath, cstack
  4399 ;; Tracked objects:
  4400 ;;		On entry : 0/0
  4401 ;;		On exit  : 0/0
  4402 ;;		Unchanged: 0/0
  4403 ;; Data sizes:     COMMON   BANK0   BANK1
  4404 ;;      Params:         0       0       0
  4405 ;;      Locals:         0       8       0
  4406 ;;      Temps:          0       2       0
  4407 ;;      Totals:         0      10       0
  4408 ;;Total ram usage:       10 bytes
  4409 ;; Hardware stack levels used: 1
  4410 ;; Hardware stack levels required when called: 9
  4411 ;; This function calls:
  4412 ;;		_ADC_GetConversion
  4413 ;;		_EEPROM_ReadByte
  4414 ;;		_EEPROM_WriteByte
  4415 ;;		_EEPROM_WriteShortLong
  4416 ;; This function is called by:
  4417 ;;		_main
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421  01D8                     _get_voltage:	
  4422                           ;psect for function _get_voltage
  4423                           
  4424  01D8                     l2591:	
  4425                           ;incstack = 0
  4426                           ; Regs used in _get_voltage: [wreg+status,2+status,0+pclath+cstack]
  4427                           
  4428                           
  4429                           ;main.c: 391:     unsigned res = ADC_GetConversion(channel_FVR);
  4430  01D8  301F               	movlw	31
  4431  01D9  3185  2597  3181   	fcall	_ADC_GetConversion
  4432  01DC  0020               	movlb	0	; select bank0
  4433  01DD  0821               	movf	?_ADC_GetConversion+1,w
  4434  01DE  00B4               	movwf	get_voltage@res+1
  4435  01DF  0820               	movf	?_ADC_GetConversion,w
  4436  01E0  00B3               	movwf	get_voltage@res
  4437  01E1                     l2593:
  4438                           
  4439                           ;main.c: 392:     if (res > 46200) {
  4440  01E1  30B4               	movlw	180
  4441  01E2  0234               	subwf	get_voltage@res+1,w
  4442  01E3  3079               	movlw	121
  4443  01E4  1903               	skipnz
  4444  01E5  0233               	subwf	get_voltage@res,w
  4445  01E6  1C03               	skipc
  4446  01E7  29E9               	goto	u1971
  4447  01E8  29EA               	goto	u1970
  4448  01E9                     u1971:
  4449  01E9  2A39               	goto	l459
  4450  01EA                     u1970:
  4451  01EA                     l2595:
  4452                           
  4453                           ;main.c: 393:         for (char q = 0; q < 0x10; q++) {
  4454  01EA  01B7               	clrf	get_voltage@q
  4455  01EB                     l2601:
  4456                           
  4457                           ;main.c: 394:             char buf = EEPROM_ReadByte(q);
  4458  01EB  0837               	movf	get_voltage@q,w
  4459  01EC  3186  262C  3181   	fcall	_EEPROM_ReadByte
  4460  01EF  0020               	movlb	0	; select bank0
  4461  01F0  00AE               	movwf	??_get_voltage
  4462  01F1  082E               	movf	??_get_voltage,w
  4463  01F2  00B5               	movwf	get_voltage@buf
  4464  01F3                     l2603:
  4465                           
  4466                           ;main.c: 395:             if (buf != START_EEPROM_ADR) EEPROM_WriteByte(q, START_EEPROM_
      +                          ADR);
  4467  01F3  0835               	movf	get_voltage@buf,w
  4468  01F4  065F               	xorwf	_START_EEPROM_ADR,w
  4469  01F5  1903               	skipnz
  4470  01F6  29F8               	goto	u1981
  4471  01F7  29F9               	goto	u1980
  4472  01F8                     u1981:
  4473  01F8  2A01               	goto	l2607
  4474  01F9                     u1980:
  4475  01F9                     l2605:
  4476  01F9  085F               	movf	_START_EEPROM_ADR,w
  4477  01FA  00AE               	movwf	??_get_voltage
  4478  01FB  082E               	movf	??_get_voltage,w
  4479  01FC  00A0               	movwf	EEPROM_WriteByte@dt
  4480  01FD  0837               	movf	get_voltage@q,w
  4481  01FE  3185  2520  3181   	fcall	_EEPROM_WriteByte
  4482  0201                     l2607:
  4483                           
  4484                           ;main.c: 396:         }
  4485  0201  3001               	movlw	1
  4486  0202  0020               	movlb	0	; select bank0
  4487  0203  00AE               	movwf	??_get_voltage
  4488  0204  082E               	movf	??_get_voltage,w
  4489  0205  07B7               	addwf	get_voltage@q,f
  4490  0206                     l2609:
  4491  0206  3010               	movlw	16
  4492  0207  0237               	subwf	get_voltage@q,w
  4493  0208  1C03               	skipc
  4494  0209  2A0B               	goto	u1991
  4495  020A  2A0C               	goto	u1990
  4496  020B                     u1991:
  4497  020B  29EB               	goto	l2601
  4498  020C                     u1990:
  4499  020C                     l2611:
  4500                           
  4501                           ;main.c: 397:         __uint24 buf = time_s;
  4502  020C  0855               	movf	_time_s,w
  4503  020D  00B0               	movwf	get_voltage@buf_800
  4504  020E  0856               	movf	_time_s+1,w
  4505  020F  00B1               	movwf	get_voltage@buf_800+1
  4506  0210  0857               	movf	_time_s+2,w
  4507  0211  00B2               	movwf	get_voltage@buf_800+2
  4508                           
  4509                           ;main.c: 398:         for (char q = START_EEPROM_ADR; q < START_EEPROM_ADR + 12; q += 4)
      +                           {
  4510  0212  085F               	movf	_START_EEPROM_ADR,w
  4511  0213  00AE               	movwf	??_get_voltage
  4512  0214  082E               	movf	??_get_voltage,w
  4513  0215  00B6               	movwf	get_voltage@q_801
  4514  0216  2A27               	goto	l2617
  4515  0217                     l2613:
  4516                           
  4517                           ;main.c: 399:             EEPROM_WriteShortLong(q, buf);
  4518  0217  0020               	movlb	0	; select bank0
  4519  0218  0830               	movf	get_voltage@buf_800,w
  4520  0219  00A5               	movwf	EEPROM_WriteShortLong@ucData
  4521  021A  0831               	movf	get_voltage@buf_800+1,w
  4522  021B  00A6               	movwf	EEPROM_WriteShortLong@ucData+1
  4523  021C  0832               	movf	get_voltage@buf_800+2,w
  4524  021D  00A7               	movwf	EEPROM_WriteShortLong@ucData+2
  4525  021E  0836               	movf	get_voltage@q_801,w
  4526  021F  3183  2391  3181   	fcall	_EEPROM_WriteShortLong
  4527  0222                     l2615:
  4528                           
  4529                           ;main.c: 400:         }
  4530  0222  3004               	movlw	4
  4531  0223  0020               	movlb	0	; select bank0
  4532  0224  00AE               	movwf	??_get_voltage
  4533  0225  082E               	movf	??_get_voltage,w
  4534  0226  07B6               	addwf	get_voltage@q_801,f
  4535  0227                     l2617:
  4536  0227  085F               	movf	_START_EEPROM_ADR,w
  4537  0228  3E0C               	addlw	12
  4538  0229  00AE               	movwf	??_get_voltage
  4539  022A  3000               	movlw	0
  4540  022B  1803               	skipnc
  4541  022C  3001               	movlw	1
  4542  022D  00AF               	movwf	??_get_voltage+1
  4543  022E  082F               	movf	??_get_voltage+1,w
  4544  022F  3A80               	xorlw	128
  4545  0230  3C80               	sublw	128
  4546  0231  1D03               	skipz
  4547  0232  2A35               	goto	u2005
  4548  0233  082E               	movf	??_get_voltage,w
  4549  0234  0236               	subwf	get_voltage@q_801,w
  4550  0235                     u2005:
  4551  0235  1C03               	skipc
  4552  0236  2A38               	goto	u2001
  4553  0237  2A39               	goto	u2000
  4554  0238                     u2001:
  4555  0238  2A17               	goto	l2613
  4556  0239                     u2000:
  4557  0239                     l459:
  4558  0239  0008               	return
  4559  023A                     __end_of_get_voltage:
  4560                           
  4561                           	psect	text23
  4562  0391                     __ptext23:	
  4563 ;; *************** function _EEPROM_WriteShortLong *****************
  4564 ;; Defined at:
  4565 ;;		line 40 in file "eeprom.c"
  4566 ;; Parameters:    Size  Location     Type
  4567 ;;  addr            1    wreg     unsigned char 
  4568 ;;  ucData          3    5[BANK0 ] unsigned um
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;  addr            1   13[BANK0 ] unsigned char 
  4571 ;;  dt              1   12[BANK0 ] unsigned char 
  4572 ;; Return value:  Size  Location     Type
  4573 ;;                  1    wreg      void 
  4574 ;; Registers used:
  4575 ;;		wreg, status,2, status,0, pclath, cstack
  4576 ;; Tracked objects:
  4577 ;;		On entry : 0/0
  4578 ;;		On exit  : 0/0
  4579 ;;		Unchanged: 0/0
  4580 ;; Data sizes:     COMMON   BANK0   BANK1
  4581 ;;      Params:         0       3       0
  4582 ;;      Locals:         0       2       0
  4583 ;;      Temps:          0       4       0
  4584 ;;      Totals:         0       9       0
  4585 ;;Total ram usage:        9 bytes
  4586 ;; Hardware stack levels used: 1
  4587 ;; Hardware stack levels required when called: 8
  4588 ;; This function calls:
  4589 ;;		_EEPROM_WriteByte
  4590 ;; This function is called by:
  4591 ;;		_get_voltage
  4592 ;; This function uses a non-reentrant model
  4593 ;;
  4594                           
  4595  0391                     _EEPROM_WriteShortLong:	
  4596                           ;psect for function _EEPROM_WriteShortLong
  4597                           
  4598                           
  4599                           ;incstack = 0
  4600                           ; Regs used in _EEPROM_WriteShortLong: [wreg+status,2+status,0+pclath+cstack]
  4601                           ;EEPROM_WriteShortLong@addr stored from wreg
  4602  0391  0020               	movlb	0	; select bank0
  4603  0392  00AD               	movwf	EEPROM_WriteShortLong@addr
  4604  0393                     l2449:
  4605                           
  4606                           ;eeprom.c: 41:     EEPROM_WriteByte(addr, (unsigned char) ucData);
  4607  0393  0825               	movf	EEPROM_WriteShortLong@ucData,w
  4608  0394  00A8               	movwf	??_EEPROM_WriteShortLong
  4609  0395  0828               	movf	??_EEPROM_WriteShortLong,w
  4610  0396  00A0               	movwf	EEPROM_WriteByte@dt
  4611  0397  082D               	movf	EEPROM_WriteShortLong@addr,w
  4612  0398  3185  2520  3183   	fcall	_EEPROM_WriteByte
  4613  039B                     l2451:
  4614                           
  4615                           ;eeprom.c: 42:      char dt = ucData >> 8;
  4616  039B  0020               	movlb	0	; select bank0
  4617  039C  0825               	movf	EEPROM_WriteShortLong@ucData,w
  4618  039D  00A8               	movwf	??_EEPROM_WriteShortLong
  4619  039E  0826               	movf	EEPROM_WriteShortLong@ucData+1,w
  4620  039F  00A9               	movwf	??_EEPROM_WriteShortLong+1
  4621  03A0  0827               	movf	EEPROM_WriteShortLong@ucData+2,w
  4622  03A1  00AA               	movwf	??_EEPROM_WriteShortLong+2
  4623  03A2  3008               	movlw	8
  4624  03A3                     u1655:
  4625  03A3  36AA               	lsrf	??_EEPROM_WriteShortLong+2,f
  4626  03A4  0CA9               	rrf	??_EEPROM_WriteShortLong+1,f
  4627  03A5  0CA8               	rrf	??_EEPROM_WriteShortLong,f
  4628  03A6                     u1650:
  4629  03A6  0B89               	decfsz	9,f
  4630  03A7  2BA3               	goto	u1655
  4631  03A8  0828               	movf	??_EEPROM_WriteShortLong,w
  4632  03A9  00AB               	movwf	??_EEPROM_WriteShortLong+3
  4633  03AA  082B               	movf	??_EEPROM_WriteShortLong+3,w
  4634  03AB  00AC               	movwf	EEPROM_WriteShortLong@dt
  4635  03AC                     l2453:
  4636                           
  4637                           ;eeprom.c: 43:     EEPROM_WriteByte(addr + 1, dt);
  4638  03AC  082C               	movf	EEPROM_WriteShortLong@dt,w
  4639  03AD  00A8               	movwf	??_EEPROM_WriteShortLong
  4640  03AE  0828               	movf	??_EEPROM_WriteShortLong,w
  4641  03AF  00A0               	movwf	EEPROM_WriteByte@dt
  4642  03B0  082D               	movf	EEPROM_WriteShortLong@addr,w
  4643  03B1  3E01               	addlw	1
  4644  03B2  3185  2520  3183   	fcall	_EEPROM_WriteByte
  4645                           
  4646                           ;eeprom.c: 44:     dt = ucData >> 16;
  4647  03B5  0020               	movlb	0	; select bank0
  4648  03B6  0825               	movf	EEPROM_WriteShortLong@ucData,w
  4649  03B7  00A8               	movwf	??_EEPROM_WriteShortLong
  4650  03B8  0826               	movf	EEPROM_WriteShortLong@ucData+1,w
  4651  03B9  00A9               	movwf	??_EEPROM_WriteShortLong+1
  4652  03BA  0827               	movf	EEPROM_WriteShortLong@ucData+2,w
  4653  03BB  00AA               	movwf	??_EEPROM_WriteShortLong+2
  4654  03BC  3010               	movlw	16
  4655  03BD                     u1665:
  4656  03BD  36AA               	lsrf	??_EEPROM_WriteShortLong+2,f
  4657  03BE  0CA9               	rrf	??_EEPROM_WriteShortLong+1,f
  4658  03BF  0CA8               	rrf	??_EEPROM_WriteShortLong,f
  4659  03C0                     u1660:
  4660  03C0  0B89               	decfsz	9,f
  4661  03C1  2BBD               	goto	u1665
  4662  03C2  0828               	movf	??_EEPROM_WriteShortLong,w
  4663  03C3  00AB               	movwf	??_EEPROM_WriteShortLong+3
  4664  03C4  082B               	movf	??_EEPROM_WriteShortLong+3,w
  4665  03C5  00AC               	movwf	EEPROM_WriteShortLong@dt
  4666  03C6                     l2455:
  4667                           
  4668                           ;eeprom.c: 45:     EEPROM_WriteByte(addr + 2, dt);
  4669  03C6  082C               	movf	EEPROM_WriteShortLong@dt,w
  4670  03C7  00A8               	movwf	??_EEPROM_WriteShortLong
  4671  03C8  0828               	movf	??_EEPROM_WriteShortLong,w
  4672  03C9  00A0               	movwf	EEPROM_WriteByte@dt
  4673  03CA  082D               	movf	EEPROM_WriteShortLong@addr,w
  4674  03CB  3E02               	addlw	2
  4675  03CC  3185  2520  3183   	fcall	_EEPROM_WriteByte
  4676  03CF                     l574:
  4677  03CF  0008               	return
  4678  03D0                     __end_of_EEPROM_WriteShortLong:
  4679                           
  4680                           	psect	text24
  4681  0520                     __ptext24:	
  4682 ;; *************** function _EEPROM_WriteByte *****************
  4683 ;; Defined at:
  4684 ;;		line 6 in file "eeprom.c"
  4685 ;; Parameters:    Size  Location     Type
  4686 ;;  addr            1    wreg     unsigned char 
  4687 ;;  dt              1    0[BANK0 ] unsigned char 
  4688 ;; Auto vars:     Size  Location     Type
  4689 ;;  addr            1    3[BANK0 ] unsigned char 
  4690 ;;  status          1    4[BANK0 ] unsigned char 
  4691 ;; Return value:  Size  Location     Type
  4692 ;;                  1    wreg      void 
  4693 ;; Registers used:
  4694 ;;		wreg, status,2
  4695 ;; Tracked objects:
  4696 ;;		On entry : 0/0
  4697 ;;		On exit  : 0/0
  4698 ;;		Unchanged: 0/0
  4699 ;; Data sizes:     COMMON   BANK0   BANK1
  4700 ;;      Params:         0       1       0
  4701 ;;      Locals:         0       2       0
  4702 ;;      Temps:          0       2       0
  4703 ;;      Totals:         0       5       0
  4704 ;;Total ram usage:        5 bytes
  4705 ;; Hardware stack levels used: 1
  4706 ;; Hardware stack levels required when called: 7
  4707 ;; This function calls:
  4708 ;;		Nothing
  4709 ;; This function is called by:
  4710 ;;		_get_voltage
  4711 ;;		_EEPROM_WriteShortLong
  4712 ;;		_EEPROM_WriteWord
  4713 ;;		_EEPROM_WriteString
  4714 ;; This function uses a non-reentrant model
  4715 ;;
  4716                           
  4717  0520                     _EEPROM_WriteByte:	
  4718                           ;psect for function _EEPROM_WriteByte
  4719                           
  4720                           
  4721                           ;incstack = 0
  4722                           ; Regs used in _EEPROM_WriteByte: [wreg+status,2]
  4723                           ;EEPROM_WriteByte@addr stored from wreg
  4724  0520  0020               	movlb	0	; select bank0
  4725  0521  00A3               	movwf	EEPROM_WriteByte@addr
  4726  0522                     l2173:
  4727  0522                     l556:	
  4728                           ;eeprom.c: 7:     unsigned char status;;eeprom.c: 8:     while (WR);
  4729                           
  4730  0522  0023               	movlb	3	; select bank3
  4731  0523  1895               	btfsc	21,1	;volsfr
  4732  0524  2D26               	goto	u1291
  4733  0525  2D27               	goto	u1290
  4734  0526                     u1291:
  4735  0526  2D22               	goto	l556
  4736  0527                     u1290:
  4737  0527                     l2175:
  4738                           
  4739                           ;eeprom.c: 9:     status = GIE;
  4740  0527  3000               	movlw	0
  4741  0528  1B8B               	btfsc	11,7	;volatile
  4742  0529  3001               	movlw	1
  4743  052A  0020               	movlb	0	; select bank0
  4744  052B  00A4               	movwf	EEPROM_WriteByte@status
  4745  052C                     l2177:
  4746                           
  4747                           ;eeprom.c: 10:     GIE = 0;
  4748  052C  138B               	bcf	11,7	;volatile
  4749  052D                     l2179:
  4750                           
  4751                           ;eeprom.c: 11:     EEADR = addr;
  4752  052D  0823               	movf	EEPROM_WriteByte@addr,w
  4753  052E  00A1               	movwf	??_EEPROM_WriteByte
  4754  052F  01A2               	clrf	??_EEPROM_WriteByte+1
  4755  0530  0821               	movf	??_EEPROM_WriteByte,w
  4756  0531  0023               	movlb	3	; select bank3
  4757  0532  0091               	movwf	17	;volatile
  4758  0533  0020               	movlb	0	; select bank0
  4759  0534  0822               	movf	??_EEPROM_WriteByte+1,w
  4760  0535  0023               	movlb	3	; select bank3
  4761  0536  0092               	movwf	18	;volatile
  4762  0537                     l2181:
  4763                           
  4764                           ;eeprom.c: 12:     EEDATA = dt;
  4765  0537  0020               	movlb	0	; select bank0
  4766  0538  0820               	movf	EEPROM_WriteByte@dt,w
  4767  0539  0023               	movlb	3	; select bank3
  4768  053A  0093               	movwf	19	;volatile
  4769  053B                     l2183:
  4770                           
  4771                           ;eeprom.c: 13:     WREN = 1;
  4772  053B  1515               	bsf	21,2	;volsfr
  4773  053C                     l2185:
  4774                           
  4775                           ;eeprom.c: 14:     EECON2 = 0x55;
  4776  053C  3055               	movlw	85
  4777  053D  0096               	movwf	22	;volsfr
  4778  053E                     l2187:
  4779                           
  4780                           ;eeprom.c: 15:     EECON2 = 0xAA;
  4781  053E  30AA               	movlw	170
  4782  053F  0096               	movwf	22	;volsfr
  4783  0540                     l2189:
  4784                           
  4785                           ;eeprom.c: 16:     WR = 1;
  4786  0540  1495               	bsf	21,1	;volsfr
  4787  0541                     l2191:
  4788                           
  4789                           ;eeprom.c: 17:     GIE = status;
  4790  0541  0020               	movlb	0	; select bank0
  4791  0542  1824               	btfsc	EEPROM_WriteByte@status,0
  4792  0543  2D45               	goto	u1301
  4793  0544  2D47               	goto	u1300
  4794  0545                     u1301:
  4795  0545  178B               	bsf	11,7	;volatile
  4796  0546  2D48               	goto	u1314
  4797  0547                     u1300:
  4798  0547  138B               	bcf	11,7	;volatile
  4799  0548                     u1314:
  4800  0548                     l2193:
  4801                           
  4802                           ;eeprom.c: 18:     WREN = 0;
  4803  0548  0023               	movlb	3	; select bank3
  4804  0549  1115               	bcf	21,2	;volsfr
  4805  054A                     l559:
  4806  054A  0008               	return
  4807  054B                     __end_of_EEPROM_WriteByte:
  4808                           
  4809                           	psect	text25
  4810  062C                     __ptext25:	
  4811 ;; *************** function _EEPROM_ReadByte *****************
  4812 ;; Defined at:
  4813 ;;		line 21 in file "eeprom.c"
  4814 ;; Parameters:    Size  Location     Type
  4815 ;;  addr            1    wreg     unsigned char 
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;  addr            1    2[BANK0 ] unsigned char 
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  1    wreg      unsigned char 
  4820 ;; Registers used:
  4821 ;;		wreg
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMMON   BANK0   BANK1
  4827 ;;      Params:         0       0       0
  4828 ;;      Locals:         0       1       0
  4829 ;;      Temps:          0       2       0
  4830 ;;      Totals:         0       3       0
  4831 ;;Total ram usage:        3 bytes
  4832 ;; Hardware stack levels used: 1
  4833 ;; Hardware stack levels required when called: 7
  4834 ;; This function calls:
  4835 ;;		Nothing
  4836 ;; This function is called by:
  4837 ;;		_get_voltage
  4838 ;;		_get_adr
  4839 ;;		_EEPROM_ReadShortLong
  4840 ;;		_EEPROM_ReadWord
  4841 ;;		_EEPROM_ReadString
  4842 ;; This function uses a non-reentrant model
  4843 ;;
  4844                           
  4845  062C                     _EEPROM_ReadByte:	
  4846                           ;psect for function _EEPROM_ReadByte
  4847                           
  4848                           
  4849                           ;incstack = 0
  4850                           ; Regs used in _EEPROM_ReadByte: [wreg]
  4851                           ;EEPROM_ReadByte@addr stored from wreg
  4852  062C  0020               	movlb	0	; select bank0
  4853  062D  00A2               	movwf	EEPROM_ReadByte@addr
  4854  062E                     l2001:
  4855  062E                     l562:	
  4856                           ;eeprom.c: 22:     while (RD || WR);
  4857                           
  4858  062E  0023               	movlb	3	; select bank3
  4859  062F  1815               	btfsc	21,0	;volsfr
  4860  0630  2E32               	goto	u1071
  4861  0631  2E33               	goto	u1070
  4862  0632                     u1071:
  4863  0632  2E2E               	goto	l562
  4864  0633                     u1070:
  4865  0633                     l2003:
  4866  0633  1895               	btfsc	21,1	;volsfr
  4867  0634  2E36               	goto	u1081
  4868  0635  2E37               	goto	u1080
  4869  0636                     u1081:
  4870  0636  2E2E               	goto	l562
  4871  0637                     u1080:
  4872  0637                     l2005:
  4873                           
  4874                           ;eeprom.c: 23:     EEADR = addr;
  4875  0637  0020               	movlb	0	; select bank0
  4876  0638  0822               	movf	EEPROM_ReadByte@addr,w
  4877  0639  00A0               	movwf	??_EEPROM_ReadByte
  4878  063A  01A1               	clrf	??_EEPROM_ReadByte+1
  4879  063B  0820               	movf	??_EEPROM_ReadByte,w
  4880  063C  0023               	movlb	3	; select bank3
  4881  063D  0091               	movwf	17	;volatile
  4882  063E  0020               	movlb	0	; select bank0
  4883  063F  0821               	movf	??_EEPROM_ReadByte+1,w
  4884  0640  0023               	movlb	3	; select bank3
  4885  0641  0092               	movwf	18	;volatile
  4886  0642                     l2007:
  4887                           
  4888                           ;eeprom.c: 24:     RD = 1;
  4889  0642  1415               	bsf	21,0	;volsfr
  4890                           
  4891                           ;eeprom.c: 25:     return EEDATA;
  4892  0643  0813               	movf	19,w	;volatile
  4893  0644                     l565:
  4894  0644  0008               	return
  4895  0645                     __end_of_EEPROM_ReadByte:
  4896                           
  4897                           	psect	text26
  4898  044C                     __ptext26:	
  4899 ;; *************** function _get_jump *****************
  4900 ;; Defined at:
  4901 ;;		line 219 in file "main.c"
  4902 ;; Parameters:    Size  Location     Type
  4903 ;;		None
  4904 ;; Auto vars:     Size  Location     Type
  4905 ;;  res             2    5[BANK0 ] unsigned int 
  4906 ;; Return value:  Size  Location     Type
  4907 ;;                  1    wreg      void 
  4908 ;; Registers used:
  4909 ;;		wreg, status,2, status,0, pclath, cstack
  4910 ;; Tracked objects:
  4911 ;;		On entry : 0/0
  4912 ;;		On exit  : 0/0
  4913 ;;		Unchanged: 0/0
  4914 ;; Data sizes:     COMMON   BANK0   BANK1
  4915 ;;      Params:         0       0       0
  4916 ;;      Locals:         0       2       0
  4917 ;;      Temps:          0       1       0
  4918 ;;      Totals:         0       3       0
  4919 ;;Total ram usage:        3 bytes
  4920 ;; Hardware stack levels used: 1
  4921 ;; Hardware stack levels required when called: 8
  4922 ;; This function calls:
  4923 ;;		_ADC_GetConversion
  4924 ;; This function is called by:
  4925 ;;		_main
  4926 ;; This function uses a non-reentrant model
  4927 ;;
  4928                           
  4929  044C                     _get_jump:	
  4930                           ;psect for function _get_jump
  4931                           
  4932  044C                     l377:	
  4933                           ;incstack = 0
  4934                           ; Regs used in _get_jump: [wreg+status,2+status,0+pclath+cstack]
  4935                           ;main.c: 221:     static signed char jump_counter;;main.c: 222:     do { ANSELAbits.ANSA
      +                          1 = 1; } while(0);
  4936                           
  4937  044C  0023               	movlb	3	; select bank3
  4938  044D  148C               	bsf	12,1	;volatile
  4939  044E                     l2503:
  4940                           
  4941                           ;main.c: 223:     unsigned res = ADC_GetConversion(PIN_JUMP_STATE);
  4942  044E  3001               	movlw	1
  4943  044F  3185  2597  3184   	fcall	_ADC_GetConversion
  4944  0452  0020               	movlb	0	; select bank0
  4945  0453  0821               	movf	?_ADC_GetConversion+1,w
  4946  0454  00A6               	movwf	get_jump@res+1
  4947  0455  0820               	movf	?_ADC_GetConversion,w
  4948  0456  00A5               	movwf	get_jump@res
  4949  0457                     l2505:
  4950  0457  0023               	movlb	3	; select bank3
  4951  0458  108C               	bcf	12,1	;volatile
  4952  0459                     l2507:
  4953                           
  4954                           ;main.c: 227:     if (res < 2000) jump_counter--;
  4955  0459  3007               	movlw	7
  4956  045A  0020               	movlb	0	; select bank0
  4957  045B  0226               	subwf	get_jump@res+1,w
  4958  045C  30D0               	movlw	208
  4959  045D  1903               	skipnz
  4960  045E  0225               	subwf	get_jump@res,w
  4961  045F  1803               	skipnc
  4962  0460  2C62               	goto	u1741
  4963  0461  2C63               	goto	u1740
  4964  0462                     u1741:
  4965  0462  2C68               	goto	l2511
  4966  0463                     u1740:
  4967  0463                     l2509:
  4968  0463  30FF               	movlw	255
  4969  0464  00A4               	movwf	??_get_jump
  4970  0465  0824               	movf	??_get_jump,w
  4971  0466  07DB               	addwf	get_jump@jump_counter,f
  4972  0467  2C6C               	goto	l2513
  4973  0468                     l2511:
  4974  0468  3001               	movlw	1
  4975  0469  00A4               	movwf	??_get_jump
  4976  046A  0824               	movf	??_get_jump,w
  4977  046B  07DB               	addwf	get_jump@jump_counter,f
  4978  046C                     l2513:
  4979                           
  4980                           ;main.c: 239:     if (jump_counter > 10) {
  4981  046C  085B               	movf	get_jump@jump_counter,w
  4982  046D  3A80               	xorlw	128
  4983  046E  3E75               	addlw	-139
  4984  046F  1C03               	skipc
  4985  0470  2C72               	goto	u1751
  4986  0471  2C73               	goto	u1750
  4987  0472                     u1751:
  4988  0472  2C79               	goto	l2519
  4989  0473                     u1750:
  4990  0473                     l2515:
  4991                           
  4992                           ;main.c: 240:         jump_counter = 10;
  4993  0473  300A               	movlw	10
  4994  0474  00A4               	movwf	??_get_jump
  4995  0475  0824               	movf	??_get_jump,w
  4996  0476  00DB               	movwf	get_jump@jump_counter
  4997  0477                     l2517:
  4998                           
  4999                           ;main.c: 241:         FLAGS.bits._JUMP_CONNECTED = 0;
  5000  0477  127C               	bcf	_FLAGS,4
  5001                           
  5002                           ;main.c: 242:     } else if (jump_counter<-10) {
  5003  0478  2C85               	goto	l386
  5004  0479                     l2519:
  5005  0479  085B               	movf	get_jump@jump_counter,w
  5006  047A  3A80               	xorlw	128
  5007  047B  3E8A               	addlw	138
  5008  047C  1803               	skipnc
  5009  047D  2C7F               	goto	u1761
  5010  047E  2C80               	goto	u1760
  5011  047F                     u1761:
  5012  047F  2C85               	goto	l386
  5013  0480                     u1760:
  5014  0480                     l2521:
  5015                           
  5016                           ;main.c: 243:         jump_counter = -10;
  5017  0480  30F6               	movlw	246
  5018  0481  00A4               	movwf	??_get_jump
  5019  0482  0824               	movf	??_get_jump,w
  5020  0483  00DB               	movwf	get_jump@jump_counter
  5021  0484                     l2523:
  5022                           
  5023                           ;main.c: 244:         FLAGS.bits._JUMP_CONNECTED = 1;
  5024  0484  167C               	bsf	_FLAGS,4
  5025  0485                     l386:
  5026  0485  0008               	return
  5027  0486                     __end_of_get_jump:
  5028                           
  5029                           	psect	text27
  5030  03D0                     __ptext27:	
  5031 ;; *************** function _get_fun *****************
  5032 ;; Defined at:
  5033 ;;		line 145 in file "main.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;		None
  5036 ;; Auto vars:     Size  Location     Type
  5037 ;;  res             2    5[BANK0 ] unsigned int 
  5038 ;; Return value:  Size  Location     Type
  5039 ;;                  1    wreg      void 
  5040 ;; Registers used:
  5041 ;;		wreg, status,2, status,0, pclath, cstack
  5042 ;; Tracked objects:
  5043 ;;		On entry : 0/0
  5044 ;;		On exit  : 0/0
  5045 ;;		Unchanged: 0/0
  5046 ;; Data sizes:     COMMON   BANK0   BANK1
  5047 ;;      Params:         0       0       0
  5048 ;;      Locals:         0       2       0
  5049 ;;      Temps:          0       1       0
  5050 ;;      Totals:         0       3       0
  5051 ;;Total ram usage:        3 bytes
  5052 ;; Hardware stack levels used: 1
  5053 ;; Hardware stack levels required when called: 8
  5054 ;; This function calls:
  5055 ;;		_ADC_GetConversion
  5056 ;; This function is called by:
  5057 ;;		_main
  5058 ;; This function uses a non-reentrant model
  5059 ;;
  5060                           
  5061  03D0                     _get_fun:	
  5062                           ;psect for function _get_fun
  5063                           
  5064  03D0                     l339:	
  5065                           ;incstack = 0
  5066                           ; Regs used in _get_fun: [wreg+status,2+status,0+pclath+cstack]
  5067                           ;main.c: 147:     static signed char fun_counter;;main.c: 148:     do { LATCbits.LATC1 =
      +                           1; } while(0);
  5068                           
  5069  03D0  0022               	movlb	2	; select bank2
  5070  03D1  148E               	bsf	14,1	;volatile
  5071  03D2                     l341:	
  5072                           ;main.c: 149:     do { ANSELCbits.ANSC2 = 1; } while(0);
  5073                           
  5074  03D2  0023               	movlb	3	; select bank3
  5075  03D3  150E               	bsf	14,2	;volatile
  5076  03D4                     l2477:
  5077                           
  5078                           ;main.c: 150:     unsigned res = ADC_GetConversion(PIN_FUN_STATE);
  5079  03D4  3006               	movlw	6
  5080  03D5  3185  2597  3183   	fcall	_ADC_GetConversion
  5081  03D8  0020               	movlb	0	; select bank0
  5082  03D9  0821               	movf	?_ADC_GetConversion+1,w
  5083  03DA  00A6               	movwf	get_fun@res+1
  5084  03DB  0820               	movf	?_ADC_GetConversion,w
  5085  03DC  00A5               	movwf	get_fun@res
  5086  03DD                     l2479:
  5087  03DD  0023               	movlb	3	; select bank3
  5088  03DE  110E               	bcf	14,2	;volatile
  5089  03DF                     l2481:
  5090  03DF  0022               	movlb	2	; select bank2
  5091  03E0  108E               	bcf	14,1	;volatile
  5092  03E1                     l2483:
  5093                           
  5094                           ;main.c: 153:     if (res < 2000) fun_counter--;
  5095  03E1  3007               	movlw	7
  5096  03E2  0020               	movlb	0	; select bank0
  5097  03E3  0226               	subwf	get_fun@res+1,w
  5098  03E4  30D0               	movlw	208
  5099  03E5  1903               	skipnz
  5100  03E6  0225               	subwf	get_fun@res,w
  5101  03E7  1803               	skipnc
  5102  03E8  2BEA               	goto	u1711
  5103  03E9  2BEB               	goto	u1710
  5104  03EA                     u1711:
  5105  03EA  2BF0               	goto	l2487
  5106  03EB                     u1710:
  5107  03EB                     l2485:
  5108  03EB  30FF               	movlw	255
  5109  03EC  00A4               	movwf	??_get_fun
  5110  03ED  0824               	movf	??_get_fun,w
  5111  03EE  07DD               	addwf	get_fun@fun_counter,f
  5112  03EF  2BF4               	goto	l2489
  5113  03F0                     l2487:
  5114  03F0  3001               	movlw	1
  5115  03F1  00A4               	movwf	??_get_fun
  5116  03F2  0824               	movf	??_get_fun,w
  5117  03F3  07DD               	addwf	get_fun@fun_counter,f
  5118  03F4                     l2489:
  5119                           
  5120                           ;main.c: 166:        if (fun_counter > 10) {
  5121  03F4  085D               	movf	get_fun@fun_counter,w
  5122  03F5  3A80               	xorlw	128
  5123  03F6  3E75               	addlw	-139
  5124  03F7  1C03               	skipc
  5125  03F8  2BFA               	goto	u1721
  5126  03F9  2BFB               	goto	u1720
  5127  03FA                     u1721:
  5128  03FA  2C01               	goto	l2495
  5129  03FB                     u1720:
  5130  03FB                     l2491:
  5131                           
  5132                           ;main.c: 167:         fun_counter = 10;
  5133  03FB  300A               	movlw	10
  5134  03FC  00A4               	movwf	??_get_fun
  5135  03FD  0824               	movf	??_get_fun,w
  5136  03FE  00DD               	movwf	get_fun@fun_counter
  5137  03FF                     l2493:
  5138                           
  5139                           ;main.c: 168:         FLAGS.bits._FUN_CONNECTED = 0;
  5140  03FF  11FC               	bcf	_FLAGS,3
  5141                           
  5142                           ;main.c: 169:     } else if (fun_counter<-10) {
  5143  0400  2C0D               	goto	l352
  5144  0401                     l2495:
  5145  0401  085D               	movf	get_fun@fun_counter,w
  5146  0402  3A80               	xorlw	128
  5147  0403  3E8A               	addlw	138
  5148  0404  1803               	skipnc
  5149  0405  2C07               	goto	u1731
  5150  0406  2C08               	goto	u1730
  5151  0407                     u1731:
  5152  0407  2C0D               	goto	l352
  5153  0408                     u1730:
  5154  0408                     l2497:
  5155                           
  5156                           ;main.c: 170:         fun_counter = -10;
  5157  0408  30F6               	movlw	246
  5158  0409  00A4               	movwf	??_get_fun
  5159  040A  0824               	movf	??_get_fun,w
  5160  040B  00DD               	movwf	get_fun@fun_counter
  5161  040C                     l2499:
  5162                           
  5163                           ;main.c: 171:         FLAGS.bits._FUN_CONNECTED = 1;
  5164  040C  15FC               	bsf	_FLAGS,3
  5165  040D                     l352:
  5166  040D  0008               	return
  5167  040E                     __end_of_get_fun:
  5168                           
  5169                           	psect	text28
  5170  0597                     __ptext28:	
  5171 ;; *************** function _ADC_GetConversion *****************
  5172 ;; Defined at:
  5173 ;;		line 116 in file "mcc_generated_files/adc.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;  channel         1    wreg     enum E2178
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;  channel         1    3[BANK0 ] enum E2178
  5178 ;; Return value:  Size  Location     Type
  5179 ;;                  2    0[BANK0 ] unsigned short 
  5180 ;; Registers used:
  5181 ;;		wreg, status,2, status,0
  5182 ;; Tracked objects:
  5183 ;;		On entry : 0/0
  5184 ;;		On exit  : 0/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMMON   BANK0   BANK1
  5187 ;;      Params:         0       2       0
  5188 ;;      Locals:         0       1       0
  5189 ;;      Temps:          0       1       0
  5190 ;;      Totals:         0       4       0
  5191 ;;Total ram usage:        4 bytes
  5192 ;; Hardware stack levels used: 1
  5193 ;; Hardware stack levels required when called: 7
  5194 ;; This function calls:
  5195 ;;		Nothing
  5196 ;; This function is called by:
  5197 ;;		_get_fun
  5198 ;;		_get_fun_full
  5199 ;;		_get_jump
  5200 ;;		_get_jump_full
  5201 ;;		_get_voltage
  5202 ;; This function uses a non-reentrant model
  5203 ;;
  5204                           
  5205  0597                     _ADC_GetConversion:	
  5206                           ;psect for function _ADC_GetConversion
  5207                           
  5208                           
  5209                           ;incstack = 0
  5210                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  5211                           ;ADC_GetConversion@channel stored from wreg
  5212  0597  0020               	movlb	0	; select bank0
  5213  0598  00A3               	movwf	ADC_GetConversion@channel
  5214  0599                     l2139:
  5215                           
  5216                           ;mcc_generated_files/adc.c: 116: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 117: {;mcc_generated_files/adc.c: 119:     ADCON0bits.CHS = ch
      +                          annel;
  5217  0599  0823               	movf	ADC_GetConversion@channel,w
  5218  059A  00A2               	movwf	??_ADC_GetConversion
  5219  059B  0DA2               	rlf	??_ADC_GetConversion,f
  5220  059C  0DA2               	rlf	??_ADC_GetConversion,f
  5221  059D  0021               	movlb	1	; select bank1
  5222  059E  081D               	movf	29,w	;volatile
  5223  059F  0020               	movlb	0	; select bank0
  5224  05A0  0622               	xorwf	??_ADC_GetConversion,w
  5225  05A1  3983               	andlw	-125
  5226  05A2  0622               	xorwf	??_ADC_GetConversion,w
  5227  05A3  0021               	movlb	1	; select bank1
  5228  05A4  009D               	movwf	29	;volatile
  5229  05A5                     l2141:
  5230                           
  5231                           ;mcc_generated_files/adc.c: 122:     ADCON0bits.ADON = 1;
  5232  05A5  141D               	bsf	29,0	;volatile
  5233  05A6                     l2143:
  5234                           
  5235                           ;mcc_generated_files/adc.c: 125:     _delay((unsigned long)((5)*(16000000/4000000.0)));
  5236  05A6  3006               	movlw	6
  5237  05A7                     u2117:
  5238  05A7  0B89               	decfsz	9,f
  5239  05A8  2DA7               	goto	u2117
  5240  05A9  3200               	nop2
  5241  05AA                     l2145:
  5242                           
  5243                           ;mcc_generated_files/adc.c: 128:     ADCON0bits.GO_nDONE = 1;
  5244  05AA  0021               	movlb	1	; select bank1
  5245  05AB  149D               	bsf	29,1	;volatile
  5246  05AC                     l66:	
  5247                           ;mcc_generated_files/adc.c: 132:     {;mcc_generated_files/adc.c: 133:     }
  5248                           
  5249                           
  5250                           ;mcc_generated_files/adc.c: 131:     while (ADCON0bits.GO_nDONE)
  5251  05AC  189D               	btfsc	29,1	;volatile
  5252  05AD  2DAF               	goto	u1201
  5253  05AE  2DB0               	goto	u1200
  5254  05AF                     u1201:
  5255  05AF  2DAC               	goto	l66
  5256  05B0                     u1200:
  5257  05B0                     l2147:
  5258                           
  5259                           ;mcc_generated_files/adc.c: 136:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  5260  05B0  081C               	movf	28,w	;volatile
  5261  05B1  0020               	movlb	0	; select bank0
  5262  05B2  00A1               	movwf	?_ADC_GetConversion+1
  5263  05B3  0021               	movlb	1	; select bank1
  5264  05B4  081B               	movf	27,w	;volatile
  5265  05B5  0020               	movlb	0	; select bank0
  5266  05B6  00A0               	movwf	?_ADC_GetConversion
  5267  05B7                     l69:
  5268  05B7  0008               	return
  5269  05B8                     __end_of_ADC_GetConversion:
  5270                           
  5271                           	psect	text29
  5272  034E                     __ptext29:	
  5273 ;; *************** function _fun_work *****************
  5274 ;; Defined at:
  5275 ;;		line 350 in file "main.c"
  5276 ;; Parameters:    Size  Location     Type
  5277 ;;		None
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;		None
  5280 ;; Return value:  Size  Location     Type
  5281 ;;                  1    wreg      void 
  5282 ;; Registers used:
  5283 ;;		wreg, status,2, status,0, pclath, cstack
  5284 ;; Tracked objects:
  5285 ;;		On entry : 0/0
  5286 ;;		On exit  : 0/0
  5287 ;;		Unchanged: 0/0
  5288 ;; Data sizes:     COMMON   BANK0   BANK1
  5289 ;;      Params:         0       0       0
  5290 ;;      Locals:         0       0       0
  5291 ;;      Temps:          0       1       0
  5292 ;;      Totals:         0       1       0
  5293 ;;Total ram usage:        1 bytes
  5294 ;; Hardware stack levels used: 1
  5295 ;; Hardware stack levels required when called: 9
  5296 ;; This function calls:
  5297 ;;		_beep
  5298 ;;		_go_close
  5299 ;;		_go_close_alt
  5300 ;;		_go_open
  5301 ;;		_go_open_alt
  5302 ;; This function is called by:
  5303 ;;		_main
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307  034E                     _fun_work:	
  5308                           ;psect for function _fun_work
  5309                           
  5310  034E                     l2549:	
  5311                           ;incstack = 0
  5312                           ; Regs used in _fun_work: [wreg+status,2+status,0+pclath+cstack]
  5313                           
  5314                           
  5315                           ;main.c: 351:     {;main.c: 352:         if (FLAGS.bits._FUN_CONNECTED &&
  5316  034E  1DFC               	btfss	_FLAGS,3
  5317  034F  2B51               	goto	u1851
  5318  0350  2B52               	goto	u1850
  5319  0351                     u1851:
  5320  0351  2B70               	goto	l2565
  5321  0352                     u1850:
  5322  0352                     l2551:
  5323  0352  187C               	btfsc	_FLAGS,0
  5324  0353  2B55               	goto	u1861
  5325  0354  2B56               	goto	u1860
  5326  0355                     u1861:
  5327  0355  2B70               	goto	l2565
  5328  0356                     u1860:
  5329  0356                     l2553:
  5330  0356  1D7C               	btfss	_FLAGS,2
  5331  0357  2B59               	goto	u1871
  5332  0358  2B5A               	goto	u1870
  5333  0359                     u1871:
  5334  0359  2B70               	goto	l2565
  5335  035A                     u1870:
  5336  035A                     l2555:
  5337  035A  1AFC               	btfsc	_FLAGS,5
  5338  035B  2B5D               	goto	u1881
  5339  035C  2B5E               	goto	u1880
  5340  035D                     u1881:
  5341  035D  2B70               	goto	l2565
  5342  035E                     u1880:
  5343  035E                     l2557:
  5344                           
  5345                           ;main.c: 355:                 !FLAGS.bits.RELE_POW_WAIT) {;main.c: 356:             if (
      +                          FLAGS.bits.NORMAL_WORK_MODE) go_open();
  5346  035E  1CFC               	btfss	_FLAGS,1
  5347  035F  2B61               	goto	u1891
  5348  0360  2B62               	goto	u1890
  5349  0361                     u1891:
  5350  0361  2B66               	goto	l2561
  5351  0362                     u1890:
  5352  0362                     l2559:
  5353  0362  3187  270E  3183   	fcall	_go_open
  5354  0365  2B69               	goto	l2563
  5355  0366                     l2561:
  5356  0366  3187  274A  3183   	fcall	_go_open_alt
  5357  0369                     l2563:
  5358                           
  5359                           ;main.c: 359:             beep( 40, 1);
  5360  0369  0020               	movlb	0	; select bank0
  5361  036A  01A0               	clrf	beep@count
  5362  036B  0AA0               	incf	beep@count,f
  5363  036C  3028               	movlw	40
  5364  036D  3184  24F0  3183   	fcall	_beep
  5365  0370                     l2565:
  5366                           
  5367                           ;main.c: 361:         if (!FLAGS.bits._FUN_CONNECTED &&
  5368  0370  19FC               	btfsc	_FLAGS,3
  5369  0371  2B73               	goto	u1901
  5370  0372  2B74               	goto	u1900
  5371  0373                     u1901:
  5372  0373  2B90               	goto	l442
  5373  0374                     u1900:
  5374  0374                     l2567:
  5375  0374  197C               	btfsc	_FLAGS,2
  5376  0375  2B77               	goto	u1911
  5377  0376  2B78               	goto	u1910
  5378  0377                     u1911:
  5379  0377  2B90               	goto	l442
  5380  0378                     u1910:
  5381  0378                     l2569:
  5382  0378  1AFC               	btfsc	_FLAGS,5
  5383  0379  2B7B               	goto	u1921
  5384  037A  2B7C               	goto	u1920
  5385  037B                     u1921:
  5386  037B  2B90               	goto	l442
  5387  037C                     u1920:
  5388  037C                     l2571:
  5389                           
  5390                           ;main.c: 363:                 !FLAGS.bits.RELE_POW_WAIT) {;main.c: 364:             if (
      +                          FLAGS.bits.NORMAL_WORK_MODE) go_close();
  5391  037C  1CFC               	btfss	_FLAGS,1
  5392  037D  2B7F               	goto	u1931
  5393  037E  2B80               	goto	u1930
  5394  037F                     u1931:
  5395  037F  2B84               	goto	l2575
  5396  0380                     u1930:
  5397  0380                     l2573:
  5398  0380  3185  25B8  3183   	fcall	_go_close
  5399  0383  2B87               	goto	l2577
  5400  0384                     l2575:
  5401  0384  3187  274F  3183   	fcall	_go_close_alt
  5402  0387                     l2577:
  5403                           
  5404                           ;main.c: 367:             beep( 40, 2);
  5405  0387  3002               	movlw	2
  5406  0388  0020               	movlb	0	; select bank0
  5407  0389  00A6               	movwf	??_fun_work
  5408  038A  0826               	movf	??_fun_work,w
  5409  038B  00A0               	movwf	beep@count
  5410  038C  3028               	movlw	40
  5411  038D  3184  24F0  3183   	fcall	_beep
  5412  0390                     l442:
  5413  0390  0008               	return
  5414  0391                     __end_of_fun_work:
  5415                           
  5416                           	psect	text30
  5417  074A                     __ptext30:	
  5418 ;; *************** function _go_open_alt *****************
  5419 ;; Defined at:
  5420 ;;		line 114 in file "main.c"
  5421 ;; Parameters:    Size  Location     Type
  5422 ;;		None
  5423 ;; Auto vars:     Size  Location     Type
  5424 ;;		None
  5425 ;; Return value:  Size  Location     Type
  5426 ;;                  1    wreg      void 
  5427 ;; Registers used:
  5428 ;;		None
  5429 ;; Tracked objects:
  5430 ;;		On entry : 0/0
  5431 ;;		On exit  : 0/0
  5432 ;;		Unchanged: 0/0
  5433 ;; Data sizes:     COMMON   BANK0   BANK1
  5434 ;;      Params:         0       0       0
  5435 ;;      Locals:         0       0       0
  5436 ;;      Temps:          0       0       0
  5437 ;;      Totals:         0       0       0
  5438 ;;Total ram usage:        0 bytes
  5439 ;; Hardware stack levels used: 1
  5440 ;; Hardware stack levels required when called: 7
  5441 ;; This function calls:
  5442 ;;		Nothing
  5443 ;; This function is called by:
  5444 ;;		_fun_work
  5445 ;; This function uses a non-reentrant model
  5446 ;;
  5447                           
  5448  074A                     _go_open_alt:	
  5449                           ;psect for function _go_open_alt
  5450                           
  5451  074A                     l2391:	
  5452                           ;incstack = 0
  5453                           ; Regs used in _go_open_alt: []
  5454                           
  5455                           
  5456                           ;main.c: 115:     FLAGS.bits.CLOSED = 0;
  5457  074A  117C               	bcf	_FLAGS,2
  5458  074B                     l306:	
  5459                           ;main.c: 116:     do { LATCbits.LATC4 = 0; } while(0);
  5460                           
  5461  074B  0022               	movlb	2	; select bank2
  5462  074C  120E               	bcf	14,4	;volatile
  5463  074D                     l308:	
  5464                           ;main.c: 117:     do { LATCbits.LATC5 = 0; } while(0);
  5465                           
  5466  074D  128E               	bcf	14,5	;volatile
  5467  074E                     l310:
  5468  074E  0008               	return
  5469  074F                     __end_of_go_open_alt:
  5470                           
  5471                           	psect	text31
  5472  070E                     __ptext31:	
  5473 ;; *************** function _go_open *****************
  5474 ;; Defined at:
  5475 ;;		line 100 in file "main.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;		None
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;		None
  5480 ;; Return value:  Size  Location     Type
  5481 ;;                  1    wreg      void 
  5482 ;; Registers used:
  5483 ;;		wreg
  5484 ;; Tracked objects:
  5485 ;;		On entry : 0/0
  5486 ;;		On exit  : 0/0
  5487 ;;		Unchanged: 0/0
  5488 ;; Data sizes:     COMMON   BANK0   BANK1
  5489 ;;      Params:         0       0       0
  5490 ;;      Locals:         0       0       0
  5491 ;;      Temps:          0       1       0
  5492 ;;      Totals:         0       1       0
  5493 ;;Total ram usage:        1 bytes
  5494 ;; Hardware stack levels used: 1
  5495 ;; Hardware stack levels required when called: 7
  5496 ;; This function calls:
  5497 ;;		Nothing
  5498 ;; This function is called by:
  5499 ;;		_povorot
  5500 ;;		_fun_work
  5501 ;; This function uses a non-reentrant model
  5502 ;;
  5503                           
  5504  070E                     _go_open:	
  5505                           ;psect for function _go_open
  5506                           
  5507  070E                     l292:	
  5508                           ;incstack = 0
  5509                           ; Regs used in _go_open: [wreg]
  5510                           ;main.c: 101:     do { LATCbits.LATC4 = 0; } while(0);
  5511                           
  5512  070E  0022               	movlb	2	; select bank2
  5513  070F  120E               	bcf	14,4	;volatile
  5514  0710                     l294:	
  5515                           ;main.c: 102:     do { LATCbits.LATC5 = 1; } while(0);
  5516                           
  5517  0710  168E               	bsf	14,5	;volatile
  5518  0711                     l2383:
  5519                           
  5520                           ;main.c: 103:     time_pow_s = 10;
  5521  0711  300A               	movlw	10
  5522  0712  0020               	movlb	0	; select bank0
  5523  0713  00A0               	movwf	??_go_open
  5524  0714  0820               	movf	??_go_open,w
  5525  0715  00DE               	movwf	_time_pow_s
  5526  0716                     l2385:
  5527                           
  5528                           ;main.c: 104:     FLAGS.bits.RELE_POW_WAIT = 1;
  5529  0716  16FC               	bsf	_FLAGS,5
  5530  0717                     l296:
  5531  0717  0008               	return
  5532  0718                     __end_of_go_open:
  5533                           
  5534                           	psect	text32
  5535  074F                     __ptext32:	
  5536 ;; *************** function _go_close_alt *****************
  5537 ;; Defined at:
  5538 ;;		line 108 in file "main.c"
  5539 ;; Parameters:    Size  Location     Type
  5540 ;;		None
  5541 ;; Auto vars:     Size  Location     Type
  5542 ;;		None
  5543 ;; Return value:  Size  Location     Type
  5544 ;;                  1    wreg      void 
  5545 ;; Registers used:
  5546 ;;		None
  5547 ;; Tracked objects:
  5548 ;;		On entry : 0/0
  5549 ;;		On exit  : 0/0
  5550 ;;		Unchanged: 0/0
  5551 ;; Data sizes:     COMMON   BANK0   BANK1
  5552 ;;      Params:         0       0       0
  5553 ;;      Locals:         0       0       0
  5554 ;;      Temps:          0       0       0
  5555 ;;      Totals:         0       0       0
  5556 ;;Total ram usage:        0 bytes
  5557 ;; Hardware stack levels used: 1
  5558 ;; Hardware stack levels required when called: 7
  5559 ;; This function calls:
  5560 ;;		Nothing
  5561 ;; This function is called by:
  5562 ;;		_fun_work
  5563 ;; This function uses a non-reentrant model
  5564 ;;
  5565                           
  5566  074F                     _go_close_alt:	
  5567                           ;psect for function _go_close_alt
  5568                           
  5569  074F                     l2389:	
  5570                           ;incstack = 0
  5571                           ; Regs used in _go_close_alt: []
  5572                           
  5573                           
  5574                           ;main.c: 109:     FLAGS.bits.CLOSED = 1;
  5575  074F  157C               	bsf	_FLAGS,2
  5576  0750                     l299:	
  5577                           ;main.c: 110:     do { LATCbits.LATC4 = 0; } while(0);
  5578                           
  5579  0750  0022               	movlb	2	; select bank2
  5580  0751  120E               	bcf	14,4	;volatile
  5581  0752                     l301:	
  5582                           ;main.c: 111:     do { LATCbits.LATC5 = 1; } while(0);
  5583                           
  5584  0752  168E               	bsf	14,5	;volatile
  5585  0753                     l303:
  5586  0753  0008               	return
  5587  0754                     __end_of_go_close_alt:
  5588                           
  5589                           	psect	text33
  5590  05B8                     __ptext33:	
  5591 ;; *************** function _go_close *****************
  5592 ;; Defined at:
  5593 ;;		line 89 in file "main.c"
  5594 ;; Parameters:    Size  Location     Type
  5595 ;;		None
  5596 ;; Auto vars:     Size  Location     Type
  5597 ;;		None
  5598 ;; Return value:  Size  Location     Type
  5599 ;;                  1    wreg      void 
  5600 ;; Registers used:
  5601 ;;		wreg
  5602 ;; Tracked objects:
  5603 ;;		On entry : 0/0
  5604 ;;		On exit  : 0/0
  5605 ;;		Unchanged: 0/0
  5606 ;; Data sizes:     COMMON   BANK0   BANK1
  5607 ;;      Params:         0       0       0
  5608 ;;      Locals:         0       0       0
  5609 ;;      Temps:          0       2       0
  5610 ;;      Totals:         0       2       0
  5611 ;;Total ram usage:        2 bytes
  5612 ;; Hardware stack levels used: 1
  5613 ;; Hardware stack levels required when called: 7
  5614 ;; This function calls:
  5615 ;;		Nothing
  5616 ;; This function is called by:
  5617 ;;		_povorot
  5618 ;;		_fun_work
  5619 ;; This function uses a non-reentrant model
  5620 ;;
  5621                           
  5622  05B8                     _go_close:	
  5623                           ;psect for function _go_close
  5624                           
  5625  05B8                     l2371:	
  5626                           ;incstack = 0
  5627                           ; Regs used in _go_close: [wreg]
  5628                           
  5629                           
  5630                           ;main.c: 90:     time_s = 0;
  5631  05B8  3000               	movlw	0
  5632  05B9  0020               	movlb	0	; select bank0
  5633  05BA  00D5               	movwf	_time_s
  5634  05BB  3000               	movlw	0
  5635  05BC  00D6               	movwf	_time_s+1
  5636  05BD  3000               	movlw	0
  5637  05BE  00D7               	movwf	_time_s+2
  5638  05BF                     l2373:
  5639  05BF  0022               	movlb	2	; select bank2
  5640  05C0  160E               	bsf	14,4	;volatile
  5641  05C1                     l286:
  5642                           
  5643                           ;main.c: 92:     _delay((unsigned long)((2 * 1000)*(16000000/4000.0)));
  5644  05C1  3029               	movlw	41
  5645  05C2  0020               	movlb	0	; select bank0
  5646  05C3  00A1               	movwf	??_go_close+1
  5647  05C4  3096               	movlw	150
  5648  05C5  00A0               	movwf	??_go_close
  5649  05C6  307F               	movlw	127
  5650  05C7                     u2127:
  5651  05C7  0B89               	decfsz	9,f
  5652  05C8  2DC7               	goto	u2127
  5653  05C9  0BA0               	decfsz	??_go_close,f
  5654  05CA  2DC7               	goto	u2127
  5655  05CB  0BA1               	decfsz	??_go_close+1,f
  5656  05CC  2DC7               	goto	u2127
  5657  05CD                     l2375:
  5658  05CD  0022               	movlb	2	; select bank2
  5659  05CE  168E               	bsf	14,5	;volatile
  5660  05CF                     l288:
  5661                           
  5662                           ;main.c: 94:     time_pow_s = 10;
  5663  05CF  300A               	movlw	10
  5664  05D0  0020               	movlb	0	; select bank0
  5665  05D1  00A0               	movwf	??_go_close
  5666  05D2  0820               	movf	??_go_close,w
  5667  05D3  00DE               	movwf	_time_pow_s
  5668  05D4                     l2377:
  5669                           
  5670                           ;main.c: 95:     FLAGS.bits.RELE_POW_WAIT = 1;
  5671  05D4  16FC               	bsf	_FLAGS,5
  5672  05D5                     l2379:
  5673                           
  5674                           ;main.c: 96:     FLAGS.bits.RELE_CON_WAIT = 1;
  5675  05D5  177C               	bsf	_FLAGS,6
  5676  05D6                     l289:
  5677  05D6  0008               	return
  5678  05D7                     __end_of_go_close:
  5679                           
  5680                           	psect	text34
  5681  04F0                     __ptext34:	
  5682 ;; *************** function _beep *****************
  5683 ;; Defined at:
  5684 ;;		line 79 in file "main.c"
  5685 ;; Parameters:    Size  Location     Type
  5686 ;;  time            1    wreg     unsigned char 
  5687 ;;  count           1    0[BANK0 ] unsigned char 
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;  time            1    3[BANK0 ] unsigned char 
  5690 ;;  i               1    5[BANK0 ] unsigned char 
  5691 ;;  j               1    4[BANK0 ] unsigned char 
  5692 ;; Return value:  Size  Location     Type
  5693 ;;                  1    wreg      void 
  5694 ;; Registers used:
  5695 ;;		wreg, status,2, status,0, pclath, cstack
  5696 ;; Tracked objects:
  5697 ;;		On entry : 0/0
  5698 ;;		On exit  : 0/0
  5699 ;;		Unchanged: 0/0
  5700 ;; Data sizes:     COMMON   BANK0   BANK1
  5701 ;;      Params:         0       1       0
  5702 ;;      Locals:         0       3       0
  5703 ;;      Temps:          0       2       0
  5704 ;;      Totals:         0       6       0
  5705 ;;Total ram usage:        6 bytes
  5706 ;; Hardware stack levels used: 1
  5707 ;; Hardware stack levels required when called: 8
  5708 ;; This function calls:
  5709 ;;		_switch_zum
  5710 ;; This function is called by:
  5711 ;;		_fun_work
  5712 ;;		_switch_wm
  5713 ;; This function uses a non-reentrant model
  5714 ;;
  5715                           
  5716  04F0                     _beep:	
  5717                           ;psect for function _beep
  5718                           
  5719                           
  5720                           ;incstack = 0
  5721                           ; Regs used in _beep: [wreg+status,2+status,0+pclath+cstack]
  5722                           ;beep@time stored from wreg
  5723  04F0  0020               	movlb	0	; select bank0
  5724  04F1  00A3               	movwf	beep@time
  5725  04F2                     l2353:
  5726                           
  5727                           ;main.c: 80:     for (char j = 0; j < count; j++) {
  5728  04F2  01A4               	clrf	beep@j
  5729  04F3  2D19               	goto	l2369
  5730  04F4                     l2355:
  5731                           
  5732                           ;main.c: 81:         for (char i = 0; i < time; i++) {
  5733  04F4  01A5               	clrf	beep@i
  5734  04F5  2D02               	goto	l2363
  5735  04F6                     l2357:
  5736                           
  5737                           ;main.c: 82:             switch_zum();
  5738  04F6  3186  26C4  3184   	fcall	_switch_zum
  5739  04F9                     l2359:
  5740                           
  5741                           ;main.c: 83:             _delay((unsigned long)((300)*(16000000/4000000.0)));
  5742  04F9  30F0               	movlw	240
  5743  04FA                     u2137:
  5744  04FA  3200               	nop2
  5745  04FB  0B89               	decfsz	9,f
  5746  04FC  2CFA               	goto	u2137
  5747  04FD                     l2361:
  5748                           
  5749                           ;main.c: 84:         }
  5750  04FD  3001               	movlw	1
  5751  04FE  0020               	movlb	0	; select bank0
  5752  04FF  00A1               	movwf	??_beep
  5753  0500  0821               	movf	??_beep,w
  5754  0501  07A5               	addwf	beep@i,f
  5755  0502                     l2363:
  5756  0502  0823               	movf	beep@time,w
  5757  0503  0225               	subwf	beep@i,w
  5758  0504  1C03               	skipc
  5759  0505  2D07               	goto	u1551
  5760  0506  2D08               	goto	u1550
  5761  0507                     u1551:
  5762  0507  2CF6               	goto	l2357
  5763  0508                     u1550:
  5764  0508                     l2365:
  5765                           
  5766                           ;main.c: 85:         _delay((unsigned long)((100)*(16000000/4000.0)));
  5767  0508  3003               	movlw	3
  5768  0509  0020               	movlb	0	; select bank0
  5769  050A  00A2               	movwf	??_beep+1
  5770  050B  3008               	movlw	8
  5771  050C  00A1               	movwf	??_beep
  5772  050D  3077               	movlw	119
  5773  050E                     u2147:
  5774  050E  0B89               	decfsz	9,f
  5775  050F  2D0E               	goto	u2147
  5776  0510  0BA1               	decfsz	??_beep,f
  5777  0511  2D0E               	goto	u2147
  5778  0512  0BA2               	decfsz	??_beep+1,f
  5779  0513  2D0E               	goto	u2147
  5780  0514                     l2367:
  5781                           
  5782                           ;main.c: 86:     }
  5783  0514  3001               	movlw	1
  5784  0515  0020               	movlb	0	; select bank0
  5785  0516  00A1               	movwf	??_beep
  5786  0517  0821               	movf	??_beep,w
  5787  0518  07A4               	addwf	beep@j,f
  5788  0519                     l2369:
  5789  0519  0820               	movf	beep@count,w
  5790  051A  0224               	subwf	beep@j,w
  5791  051B  1C03               	skipc
  5792  051C  2D1E               	goto	u1561
  5793  051D  2D1F               	goto	u1560
  5794  051E                     u1561:
  5795  051E  2CF4               	goto	l2355
  5796  051F                     u1560:
  5797  051F                     l282:
  5798  051F  0008               	return
  5799  0520                     __end_of_beep:
  5800                           
  5801                           	psect	text35
  5802  06C4                     __ptext35:	
  5803 ;; *************** function _switch_zum *****************
  5804 ;; Defined at:
  5805 ;;		line 71 in file "main.c"
  5806 ;; Parameters:    Size  Location     Type
  5807 ;;		None
  5808 ;; Auto vars:     Size  Location     Type
  5809 ;;		None
  5810 ;; Return value:  Size  Location     Type
  5811 ;;                  1    wreg      void 
  5812 ;; Registers used:
  5813 ;;		status,0
  5814 ;; Tracked objects:
  5815 ;;		On entry : 0/0
  5816 ;;		On exit  : 0/0
  5817 ;;		Unchanged: 0/0
  5818 ;; Data sizes:     COMMON   BANK0   BANK1
  5819 ;;      Params:         0       0       0
  5820 ;;      Locals:         0       0       0
  5821 ;;      Temps:          0       0       0
  5822 ;;      Totals:         0       0       0
  5823 ;;Total ram usage:        0 bytes
  5824 ;; Hardware stack levels used: 1
  5825 ;; Hardware stack levels required when called: 7
  5826 ;; This function calls:
  5827 ;;		Nothing
  5828 ;; This function is called by:
  5829 ;;		_beep
  5830 ;;		_start_setup
  5831 ;;		_TMR0_ISR
  5832 ;; This function uses a non-reentrant model
  5833 ;;
  5834                           
  5835  06C4                     _switch_zum:	
  5836                           ;psect for function _switch_zum
  5837                           
  5838                           
  5839                           ;Skip over the trampoline to the duplicate function for level 1
  5840  06C4  1C7E               	btfss	int$flags,0
  5841  06C5  2EC7               	goto	_switch_zum$intlevel0
  5842  06C6  2F01               	ljmp	i1_switch_zum
  5843  06C7                     _switch_zum$intlevel0:
  5844  06C7                     l268:	
  5845                           ;incstack = 0
  5846                           ; Regs used in _switch_zum: [status,0]
  5847                           ;main.c: 72:     do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  5848                           
  5849  06C7                     l2151:
  5850  06C7  1003               	clrc
  5851  06C8  0022               	movlb	2	; select bank2
  5852  06C9  1E8C               	btfss	12,5	;volatile
  5853  06CA  1403               	setc
  5854  06CB  1803               	btfsc	3,0
  5855  06CC  2ECE               	goto	u1211
  5856  06CD  2ED1               	goto	u1210
  5857  06CE                     u1211:
  5858  06CE  0022               	movlb	2	; select bank2
  5859  06CF  168C               	bsf	12,5	;volatile
  5860  06D0  2ED3               	goto	u1224
  5861  06D1                     u1210:
  5862  06D1  0022               	movlb	2	; select bank2
  5863  06D2  128C               	bcf	12,5	;volatile
  5864  06D3                     u1224:
  5865  06D3                     l270:
  5866  06D3  0008               	return
  5867  06D4                     __end_of_switch_zum:
  5868                           
  5869                           	psect	intentry
  5870  0004                     __pintentry:	
  5871 ;; *************** function _INTERRUPT_InterruptManager *****************
  5872 ;; Defined at:
  5873 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5874 ;; Parameters:    Size  Location     Type
  5875 ;;		None
  5876 ;; Auto vars:     Size  Location     Type
  5877 ;;		None
  5878 ;; Return value:  Size  Location     Type
  5879 ;;                  1    wreg      void 
  5880 ;; Registers used:
  5881 ;;		wreg, status,2, status,0, pclath, cstack
  5882 ;; Tracked objects:
  5883 ;;		On entry : 0/0
  5884 ;;		On exit  : 0/0
  5885 ;;		Unchanged: 0/0
  5886 ;; Data sizes:     COMMON   BANK0   BANK1
  5887 ;;      Params:         0       0       0
  5888 ;;      Locals:         0       0       0
  5889 ;;      Temps:          0       0       0
  5890 ;;      Totals:         0       0       0
  5891 ;;Total ram usage:        0 bytes
  5892 ;; Hardware stack levels used: 1
  5893 ;; Hardware stack levels required when called: 6
  5894 ;; This function calls:
  5895 ;;		_TMR0_ISR
  5896 ;;		_TMR2_ISR
  5897 ;; This function is called by:
  5898 ;;		Interrupt level 1
  5899 ;; This function uses a non-reentrant model
  5900 ;;
  5901                           
  5902  0004                     _INTERRUPT_InterruptManager:
  5903                           
  5904                           ;incstack = 0
  5905  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  5906                           
  5907                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  5908  0005  3180               	pagesel	$
  5909  0006                     i1l2679:
  5910                           
  5911                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  5912  0006  1E8B               	btfss	11,5	;volatile
  5913  0007  2809               	goto	u201_21
  5914  0008  280A               	goto	u201_20
  5915  0009                     u201_21:
  5916  0009  2812               	goto	i1l110
  5917  000A                     u201_20:
  5918  000A                     i1l2681:
  5919  000A  1D0B               	btfss	11,2	;volatile
  5920  000B  280D               	goto	u202_21
  5921  000C  280E               	goto	u202_20
  5922  000D                     u202_21:
  5923  000D  2812               	goto	i1l110
  5924  000E                     u202_20:
  5925  000E                     i1l2683:
  5926                           
  5927                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
  5928  000E  3186  26E4  3180   	fcall	_TMR0_ISR
  5929                           
  5930                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  5931  0011  2824               	goto	i1l116
  5932  0012                     i1l110:	
  5933                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
  5934                           
  5935  0012  1F0B               	btfss	11,6	;volatile
  5936  0013  2815               	goto	u203_21
  5937  0014  2816               	goto	u203_20
  5938  0015                     u203_21:
  5939  0015  2824               	goto	i1l116
  5940  0016                     u203_20:
  5941  0016                     i1l2685:
  5942                           
  5943                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  5944  0016  0021               	movlb	1	; select bank1
  5945  0017  1C91               	btfss	17,1	;volatile
  5946  0018  281A               	goto	u204_21
  5947  0019  281B               	goto	u204_20
  5948  001A                     u204_21:
  5949  001A  2824               	goto	i1l115
  5950  001B                     u204_20:
  5951  001B                     i1l2687:
  5952  001B  0020               	movlb	0	; select bank0
  5953  001C  1C91               	btfss	17,1	;volatile
  5954  001D  281F               	goto	u205_21
  5955  001E  2820               	goto	u205_20
  5956  001F                     u205_21:
  5957  001F  2824               	goto	i1l115
  5958  0020                     u205_20:
  5959  0020                     i1l2689:
  5960                           
  5961                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR2_ISR();
  5962  0020  3186  269C  3180   	fcall	_TMR2_ISR
  5963                           
  5964                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  5965  0023  2824               	goto	i1l116
  5966  0024                     i1l115:	
  5967                           ;mcc_generated_files/interrupt_manager.c: 71:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 73:     }
  5968                           
  5969  0024                     i1l116:
  5970  0024  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5971  0025  0009               	retfie
  5972  0026                     __end_of_INTERRUPT_InterruptManager:
  5973                           
  5974                           	psect	text37
  5975  069C                     __ptext37:	
  5976 ;; *************** function _TMR2_ISR *****************
  5977 ;; Defined at:
  5978 ;;		line 119 in file "mcc_generated_files/tmr2.c"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;		None
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;		None
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  1    wreg      void 
  5985 ;; Registers used:
  5986 ;;		wreg, status,2, status,0, pclath, cstack
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMMON   BANK0   BANK1
  5992 ;;      Params:         0       0       0
  5993 ;;      Locals:         0       0       0
  5994 ;;      Temps:          0       0       0
  5995 ;;      Totals:         0       0       0
  5996 ;;Total ram usage:        0 bytes
  5997 ;; Hardware stack levels used: 1
  5998 ;; Hardware stack levels required when called: 5
  5999 ;; This function calls:
  6000 ;;		_TMR2_CallBack
  6001 ;; This function is called by:
  6002 ;;		_INTERRUPT_InterruptManager
  6003 ;; This function uses a non-reentrant model
  6004 ;;
  6005                           
  6006  069C                     _TMR2_ISR:	
  6007                           ;psect for function _TMR2_ISR
  6008                           
  6009  069C                     i1l2469:	
  6010                           ;incstack = 0
  6011                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
  6012                           
  6013                           
  6014                           ;mcc_generated_files/tmr2.c: 121:     static volatile unsigned int CountCallBack = 0;;mc
      +                          c_generated_files/tmr2.c: 124:     PIR1bits.TMR2IF = 0;
  6015  069C  0020               	movlb	0	; select bank0
  6016  069D  1091               	bcf	17,1	;volatile
  6017  069E                     i1l2471:
  6018                           
  6019                           ;mcc_generated_files/tmr2.c: 127:     if (++CountCallBack >= 100)
  6020  069E  3001               	movlw	1
  6021  069F  07F8               	addwf	TMR2_ISR@CountCallBack,f	;volatile
  6022  06A0  3000               	movlw	0
  6023  06A1  3DF9               	addwfc	TMR2_ISR@CountCallBack+1,f	;volatile
  6024  06A2  3000               	movlw	0
  6025  06A3  0279               	subwf	TMR2_ISR@CountCallBack+1,w	;volatile
  6026  06A4  3064               	movlw	100
  6027  06A5  1903               	skipnz
  6028  06A6  0278               	subwf	TMR2_ISR@CountCallBack,w	;volatile
  6029  06A7  1C03               	skipc
  6030  06A8  2EAA               	goto	u170_21
  6031  06A9  2EAB               	goto	u170_20
  6032  06AA                     u170_21:
  6033  06AA  2EB0               	goto	i1l157
  6034  06AB                     u170_20:
  6035  06AB                     i1l2473:
  6036                           
  6037                           ;mcc_generated_files/tmr2.c: 128:     {;mcc_generated_files/tmr2.c: 130:         TMR2_Ca
      +                          llBack();
  6038  06AB  3186  26F4  3186   	fcall	_TMR2_CallBack
  6039  06AE                     i1l2475:
  6040                           
  6041                           ;mcc_generated_files/tmr2.c: 133:         CountCallBack = 0;
  6042  06AE  01F8               	clrf	TMR2_ISR@CountCallBack	;volatile
  6043  06AF  01F9               	clrf	TMR2_ISR@CountCallBack+1	;volatile
  6044  06B0                     i1l157:
  6045  06B0  0008               	return
  6046  06B1                     __end_of_TMR2_ISR:
  6047                           
  6048                           	psect	text38
  6049  06F4                     __ptext38:	
  6050 ;; *************** function _TMR2_CallBack *****************
  6051 ;; Defined at:
  6052 ;;		line 137 in file "mcc_generated_files/tmr2.c"
  6053 ;; Parameters:    Size  Location     Type
  6054 ;;		None
  6055 ;; Auto vars:     Size  Location     Type
  6056 ;;		None
  6057 ;; Return value:  Size  Location     Type
  6058 ;;                  1    wreg      void 
  6059 ;; Registers used:
  6060 ;;		wreg, status,2, status,0, pclath, cstack
  6061 ;; Tracked objects:
  6062 ;;		On entry : 0/0
  6063 ;;		On exit  : 0/0
  6064 ;;		Unchanged: 0/0
  6065 ;; Data sizes:     COMMON   BANK0   BANK1
  6066 ;;      Params:         0       0       0
  6067 ;;      Locals:         0       0       0
  6068 ;;      Temps:          0       0       0
  6069 ;;      Totals:         0       0       0
  6070 ;;Total ram usage:        0 bytes
  6071 ;; Hardware stack levels used: 1
  6072 ;; Hardware stack levels required when called: 4
  6073 ;; This function calls:
  6074 ;;		Absolute function
  6075 ;;		_TMR2_DefaultInterruptHandler
  6076 ;;		_sec_tick_work
  6077 ;; This function is called by:
  6078 ;;		_TMR2_ISR
  6079 ;; This function uses a non-reentrant model
  6080 ;;
  6081                           
  6082  06F4                     _TMR2_CallBack:	
  6083                           ;psect for function _TMR2_CallBack
  6084                           
  6085  06F4                     i1l2349:	
  6086                           ;incstack = 0
  6087                           ; Regs used in _TMR2_CallBack: [wreg+status,2+status,0+pclath+cstack]
  6088                           
  6089                           
  6090                           ;mcc_generated_files/tmr2.c: 141:     if(TMR2_InterruptHandler)
  6091  06F4  0020               	movlb	0	; select bank0
  6092  06F5  0862               	movf	_TMR2_InterruptHandler,w
  6093  06F6  0463               	iorwf	_TMR2_InterruptHandler+1,w
  6094  06F7  1903               	btfsc	3,2
  6095  06F8  2EFA               	goto	u154_21
  6096  06F9  2EFB               	goto	u154_20
  6097  06FA                     u154_21:
  6098  06FA  2F00               	goto	i1l161
  6099  06FB                     u154_20:
  6100  06FB                     i1l2351:
  6101                           
  6102                           ;mcc_generated_files/tmr2.c: 142:     {;mcc_generated_files/tmr2.c: 143:         TMR2_In
      +                          terruptHandler();
  6103  06FB  0863               	movf	_TMR2_InterruptHandler+1,w
  6104  06FC  008A               	movwf	10
  6105  06FD  0862               	movf	_TMR2_InterruptHandler,w
  6106  06FE  000A               	callw
  6107  06FF  3186               	pagesel	$
  6108  0700                     i1l161:
  6109  0700  0008               	return
  6110  0701                     __end_of_TMR2_CallBack:
  6111                           
  6112                           	psect	text39
  6113  076D                     __ptext39:	
  6114 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  6115 ;; Defined at:
  6116 ;;		line 151 in file "mcc_generated_files/tmr2.c"
  6117 ;; Parameters:    Size  Location     Type
  6118 ;;		None
  6119 ;; Auto vars:     Size  Location     Type
  6120 ;;		None
  6121 ;; Return value:  Size  Location     Type
  6122 ;;                  1    wreg      void 
  6123 ;; Registers used:
  6124 ;;		None
  6125 ;; Tracked objects:
  6126 ;;		On entry : 0/0
  6127 ;;		On exit  : 0/0
  6128 ;;		Unchanged: 0/0
  6129 ;; Data sizes:     COMMON   BANK0   BANK1
  6130 ;;      Params:         0       0       0
  6131 ;;      Locals:         0       0       0
  6132 ;;      Temps:          0       0       0
  6133 ;;      Totals:         0       0       0
  6134 ;;Total ram usage:        0 bytes
  6135 ;; Hardware stack levels used: 1
  6136 ;; This function calls:
  6137 ;;		Nothing
  6138 ;; This function is called by:
  6139 ;;		_TMR2_Initialize
  6140 ;;		_TMR2_CallBack
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143                           
  6144  076D                     _TMR2_DefaultInterruptHandler:	
  6145                           ;psect for function _TMR2_DefaultInterruptHandler
  6146                           
  6147  076D                     i1l167:	
  6148                           ;incstack = 0
  6149                           ; Regs used in _TMR2_DefaultInterruptHandler: []
  6150                           
  6151  076D  0008               	return
  6152  076E                     __end_of_TMR2_DefaultInterruptHandler:
  6153                           
  6154                           	psect	text40
  6155  040E                     __ptext40:	
  6156 ;; *************** function _sec_tick_work *****************
  6157 ;; Defined at:
  6158 ;;		line 310 in file "main.c"
  6159 ;; Parameters:    Size  Location     Type
  6160 ;;		None
  6161 ;; Auto vars:     Size  Location     Type
  6162 ;;		None
  6163 ;; Return value:  Size  Location     Type
  6164 ;;                  1    wreg      void 
  6165 ;; Registers used:
  6166 ;;		wreg, status,2, status,0, pclath, cstack
  6167 ;; Tracked objects:
  6168 ;;		On entry : 0/0
  6169 ;;		On exit  : 0/0
  6170 ;;		Unchanged: 0/0
  6171 ;; Data sizes:     COMMON   BANK0   BANK1
  6172 ;;      Params:         0       0       0
  6173 ;;      Locals:         0       0       0
  6174 ;;      Temps:          1       0       0
  6175 ;;      Totals:         1       0       0
  6176 ;;Total ram usage:        1 bytes
  6177 ;; Hardware stack levels used: 1
  6178 ;; Hardware stack levels required when called: 3
  6179 ;; This function calls:
  6180 ;;		_get_measure
  6181 ;;		_rele_tick
  6182 ;;		_toggle_tone
  6183 ;; This function is called by:
  6184 ;;		_start_setup
  6185 ;;		_TMR2_CallBack
  6186 ;; This function uses a non-reentrant model
  6187 ;;
  6188                           
  6189  040E                     _sec_tick_work:	
  6190                           ;psect for function _sec_tick_work
  6191                           
  6192  040E                     i1l2153:	
  6193                           ;incstack = 0
  6194                           ; Regs used in _sec_tick_work: [wreg+status,2+status,0+pclath+cstack]
  6195                           
  6196                           
  6197                           ;main.c: 314:     time_s++;
  6198  040E  3001               	movlw	1
  6199  040F  0020               	movlb	0	; select bank0
  6200  0410  07D5               	addwf	_time_s,f
  6201  0411  3000               	movlw	0
  6202  0412  1803               	skipnc
  6203  0413  3001               	movlw	1
  6204  0414  07D6               	addwf	_time_s+1,f
  6205  0415  3000               	movlw	0
  6206  0416  1803               	skipnc
  6207  0417  3001               	movlw	1
  6208  0418  07D7               	addwf	_time_s+2,f
  6209  0419                     i1l2155:
  6210                           
  6211                           ;main.c: 315:     rele_tick();
  6212  0419  3185  254B  3184   	fcall	_rele_tick
  6213  041C  0064               	clrwdt	;# 
  6214  041D                     i1l2157:
  6215                           
  6216                           ;main.c: 317:     if (FLAGS.bits.ALARM) {
  6217  041D  1C7C               	btfss	_FLAGS,0
  6218  041E  2C20               	goto	u123_21
  6219  041F  2C21               	goto	u123_20
  6220  0420                     u123_21:
  6221  0420  2C31               	goto	i1l2163
  6222  0421                     u123_20:
  6223  0421                     i1l2159:
  6224  0421  1003               	clrc
  6225  0422  0022               	movlb	2	; select bank2
  6226  0423  1E0C               	btfss	12,4	;volatile
  6227  0424  1403               	setc
  6228  0425  1803               	btfsc	3,0
  6229  0426  2C28               	goto	u124_21
  6230  0427  2C2B               	goto	u124_20
  6231  0428                     u124_21:
  6232  0428  0022               	movlb	2	; select bank2
  6233  0429  160C               	bsf	12,4	;volatile
  6234  042A  2C2D               	goto	u125_24
  6235  042B                     u124_20:
  6236  042B  0022               	movlb	2	; select bank2
  6237  042C  120C               	bcf	12,4	;volatile
  6238  042D                     u125_24:
  6239  042D                     i1l2161:
  6240                           
  6241                           ;main.c: 319:         toggle_tone();
  6242  042D  3187  2718  3184   	fcall	_toggle_tone
  6243                           
  6244                           ;main.c: 320:     } else {
  6245  0430  2C4B               	goto	i1l428
  6246  0431                     i1l2163:
  6247                           
  6248                           ;main.c: 321:         get_measure();
  6249  0431  3184  24BE  3184   	fcall	_get_measure
  6250  0434                     i1l2165:
  6251                           
  6252                           ;main.c: 322:         static char iled;;main.c: 323:         iled++;
  6253  0434  3001               	movlw	1
  6254  0435  00F7               	movwf	??_sec_tick_work
  6255  0436  0877               	movf	??_sec_tick_work,w
  6256  0437  07FA               	addwf	sec_tick_work@iled,f
  6257  0438                     i1l2167:
  6258                           
  6259                           ;main.c: 324:         if (iled > 2) {
  6260  0438  3003               	movlw	3
  6261  0439  027A               	subwf	sec_tick_work@iled,w
  6262  043A  1C03               	skipc
  6263  043B  2C3D               	goto	u126_21
  6264  043C  2C3E               	goto	u126_20
  6265  043D                     u126_21:
  6266  043D  2C4B               	goto	i1l428
  6267  043E                     u126_20:
  6268  043E                     i1l2169:
  6269  043E  1003               	clrc
  6270  043F  0022               	movlb	2	; select bank2
  6271  0440  1E0C               	btfss	12,4	;volatile
  6272  0441  1403               	setc
  6273  0442  1803               	btfsc	3,0
  6274  0443  2C45               	goto	u127_21
  6275  0444  2C48               	goto	u127_20
  6276  0445                     u127_21:
  6277  0445  0022               	movlb	2	; select bank2
  6278  0446  160C               	bsf	12,4	;volatile
  6279  0447  2C4A               	goto	u128_24
  6280  0448                     u127_20:
  6281  0448  0022               	movlb	2	; select bank2
  6282  0449  120C               	bcf	12,4	;volatile
  6283  044A                     u128_24:
  6284  044A                     i1l2171:
  6285                           
  6286                           ;main.c: 326:             iled = 0;
  6287  044A  01FA               	clrf	sec_tick_work@iled
  6288  044B                     i1l428:
  6289  044B  0008               	return
  6290  044C                     __end_of_sec_tick_work:
  6291                           
  6292                           	psect	text41
  6293  0718                     __ptext41:	
  6294 ;; *************** function _toggle_tone *****************
  6295 ;; Defined at:
  6296 ;;		line 75 in file "main.c"
  6297 ;; Parameters:    Size  Location     Type
  6298 ;;		None
  6299 ;; Auto vars:     Size  Location     Type
  6300 ;;		None
  6301 ;; Return value:  Size  Location     Type
  6302 ;;                  1    wreg      void 
  6303 ;; Registers used:
  6304 ;;		status,0
  6305 ;; Tracked objects:
  6306 ;;		On entry : 0/0
  6307 ;;		On exit  : 0/0
  6308 ;;		Unchanged: 0/0
  6309 ;; Data sizes:     COMMON   BANK0   BANK1
  6310 ;;      Params:         0       0       0
  6311 ;;      Locals:         0       0       0
  6312 ;;      Temps:          0       0       0
  6313 ;;      Totals:         0       0       0
  6314 ;;Total ram usage:        0 bytes
  6315 ;; Hardware stack levels used: 1
  6316 ;; This function calls:
  6317 ;;		Nothing
  6318 ;; This function is called by:
  6319 ;;		_sec_tick_work
  6320 ;; This function uses a non-reentrant model
  6321 ;;
  6322                           
  6323  0718                     _toggle_tone:	
  6324                           ;psect for function _toggle_tone
  6325                           
  6326  0718                     i1l2027:	
  6327                           ;incstack = 0
  6328                           ; Regs used in _toggle_tone: [status,0]
  6329                           
  6330                           
  6331                           ;main.c: 76:     INTCONbits.TMR0IE = ~INTCONbits.TMR0IE;
  6332  0718  1003               	clrc
  6333  0719  1E8B               	btfss	11,5	;volatile
  6334  071A  1403               	setc
  6335  071B  1803               	btfsc	3,0
  6336  071C  2F1E               	goto	u110_21
  6337  071D  2F20               	goto	u110_20
  6338  071E                     u110_21:
  6339  071E  168B               	bsf	11,5	;volatile
  6340  071F  2F21               	goto	u111_24
  6341  0720                     u110_20:
  6342  0720  128B               	bcf	11,5	;volatile
  6343  0721                     u111_24:
  6344  0721                     i1l273:
  6345  0721  0008               	return
  6346  0722                     __end_of_toggle_tone:
  6347                           
  6348                           	psect	text42
  6349  054B                     __ptext42:	
  6350 ;; *************** function _rele_tick *****************
  6351 ;; Defined at:
  6352 ;;		line 289 in file "main.c"
  6353 ;; Parameters:    Size  Location     Type
  6354 ;;		None
  6355 ;; Auto vars:     Size  Location     Type
  6356 ;;		None
  6357 ;; Return value:  Size  Location     Type
  6358 ;;                  1    wreg      void 
  6359 ;; Registers used:
  6360 ;;		wreg, status,2, status,0
  6361 ;; Tracked objects:
  6362 ;;		On entry : 0/0
  6363 ;;		On exit  : 0/0
  6364 ;;		Unchanged: 0/0
  6365 ;; Data sizes:     COMMON   BANK0   BANK1
  6366 ;;      Params:         0       0       0
  6367 ;;      Locals:         0       0       0
  6368 ;;      Temps:          2       0       0
  6369 ;;      Totals:         2       0       0
  6370 ;;Total ram usage:        2 bytes
  6371 ;; Hardware stack levels used: 1
  6372 ;; This function calls:
  6373 ;;		Nothing
  6374 ;; This function is called by:
  6375 ;;		_sec_tick_work
  6376 ;; This function uses a non-reentrant model
  6377 ;;
  6378                           
  6379  054B                     _rele_tick:	
  6380                           ;psect for function _rele_tick
  6381                           
  6382  054B                     i1l2049:	
  6383                           ;incstack = 0
  6384                           ; Regs used in _rele_tick: [wreg+status,2+status,0]
  6385                           
  6386                           
  6387                           ;main.c: 290:     if (FLAGS.bits.RELE_POW_WAIT) {
  6388  054B  1EFC               	btfss	_FLAGS,5
  6389  054C  2D4E               	goto	u115_21
  6390  054D  2D4F               	goto	u115_20
  6391  054E                     u115_21:
  6392  054E  2D74               	goto	i1l416
  6393  054F                     u115_20:
  6394  054F                     i1l2051:
  6395                           
  6396                           ;main.c: 291:         if (time_pow_s > 0) {
  6397  054F  0020               	movlb	0	; select bank0
  6398  0550  085E               	movf	_time_pow_s,w
  6399  0551  1903               	btfsc	3,2
  6400  0552  2D54               	goto	u116_21
  6401  0553  2D55               	goto	u116_20
  6402  0554                     u116_21:
  6403  0554  2D58               	goto	i1l406
  6404  0555                     u116_20:
  6405  0555                     i1l2053:
  6406                           
  6407                           ;main.c: 292:             time_pow_s--;
  6408  0555  3001               	movlw	1
  6409  0556  02DE               	subwf	_time_pow_s,f
  6410                           
  6411                           ;main.c: 293:         } else {
  6412  0557  2D74               	goto	i1l416
  6413  0558                     i1l406:
  6414                           
  6415                           ;main.c: 294:             if (FLAGS.bits.RELE_CON_WAIT) {
  6416  0558  1F7C               	btfss	_FLAGS,6
  6417  0559  2D5B               	goto	u117_21
  6418  055A  2D5C               	goto	u117_20
  6419  055B                     u117_21:
  6420  055B  2D70               	goto	i1l414
  6421  055C                     u117_20:
  6422  055C                     i1l409:	
  6423                           ;main.c: 295:                 do { LATCbits.LATC5 = 0; } while(0);
  6424                           
  6425  055C  0022               	movlb	2	; select bank2
  6426  055D  128E               	bcf	14,5	;volatile
  6427  055E                     i1l2055:
  6428                           
  6429                           ;main.c: 296:                 _delay((unsigned long)((2 * 1000)*(16000000/4000.0)));
  6430  055E  3029               	movlw	41
  6431  055F  00F1               	movwf	??_rele_tick+1
  6432  0560  3096               	movlw	150
  6433  0561  00F0               	movwf	??_rele_tick
  6434  0562  307F               	movlw	127
  6435  0563                     u215_27:
  6436  0563  0B89               	decfsz	9,f
  6437  0564  2D63               	goto	u215_27
  6438  0565  0BF0               	decfsz	??_rele_tick,f
  6439  0566  2D63               	goto	u215_27
  6440  0567  0BF1               	decfsz	??_rele_tick+1,f
  6441  0568  2D63               	goto	u215_27
  6442  0569  0000               	nop
  6443  056A                     i1l2057:
  6444  056A  0022               	movlb	2	; select bank2
  6445  056B  120E               	bcf	14,4	;volatile
  6446  056C                     i1l2059:
  6447                           
  6448                           ;main.c: 298:                 FLAGS.bits.CLOSED = 1;
  6449  056C  157C               	bsf	_FLAGS,2
  6450  056D                     i1l2061:
  6451                           
  6452                           ;main.c: 299:                 FLAGS.bits.RELE_CON_WAIT = 0;
  6453  056D  137C               	bcf	_FLAGS,6
  6454  056E                     i1l2063:
  6455                           
  6456                           ;main.c: 300:                 FLAGS.bits.RELE_POW_WAIT = 0;
  6457  056E  12FC               	bcf	_FLAGS,5
  6458                           
  6459                           ;main.c: 301:             } else {
  6460  056F  2D74               	goto	i1l416
  6461  0570                     i1l414:	
  6462                           ;main.c: 302:                 do { LATCbits.LATC5 = 0; } while(0);
  6463                           
  6464  0570  0022               	movlb	2	; select bank2
  6465  0571  128E               	bcf	14,5	;volatile
  6466  0572                     i1l415:
  6467                           
  6468                           ;main.c: 303:                 FLAGS.bits.CLOSED = 0;
  6469  0572  117C               	bcf	_FLAGS,2
  6470                           
  6471                           ;main.c: 304:                 FLAGS.bits.RELE_POW_WAIT = 0;
  6472  0573  12FC               	bcf	_FLAGS,5
  6473  0574                     i1l416:
  6474  0574  0008               	return
  6475  0575                     __end_of_rele_tick:
  6476                           
  6477                           	psect	text43
  6478  04BE                     __ptext43:	
  6479 ;; *************** function _get_measure *****************
  6480 ;; Defined at:
  6481 ;;		line 132 in file "main.c"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;		None
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;  res             2    5[COMMON] unsigned int 
  6486 ;; Return value:  Size  Location     Type
  6487 ;;                  1    wreg      void 
  6488 ;; Registers used:
  6489 ;;		wreg, status,2, status,0, pclath, cstack
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMMON   BANK0   BANK1
  6495 ;;      Params:         0       0       0
  6496 ;;      Locals:         2       0       0
  6497 ;;      Temps:          1       0       0
  6498 ;;      Totals:         3       0       0
  6499 ;;Total ram usage:        3 bytes
  6500 ;; Hardware stack levels used: 1
  6501 ;; Hardware stack levels required when called: 2
  6502 ;; This function calls:
  6503 ;;		_start_alarm
  6504 ;;		i1_ADC_GetConversion
  6505 ;; This function is called by:
  6506 ;;		_sec_tick_work
  6507 ;; This function uses a non-reentrant model
  6508 ;;
  6509                           
  6510  04BE                     _get_measure:	
  6511                           ;psect for function _get_measure
  6512                           
  6513  04BE                     i1l322:	
  6514                           ;incstack = 0
  6515                           ; Regs used in _get_measure: [wreg+status,2+status,0+pclath+cstack]
  6516                           ;main.c: 133:     static unsigned char measures;;main.c: 134:     do { LATCbits.LATC1 = 
      +                          1; } while(0);
  6517                           
  6518  04BE  0022               	movlb	2	; select bank2
  6519  04BF  148E               	bsf	14,1	;volatile
  6520  04C0                     i1l324:	
  6521                           ;main.c: 135:     do { ANSELCbits.ANSC3 = 1; } while(0);
  6522                           
  6523  04C0  0023               	movlb	3	; select bank3
  6524  04C1  158E               	bsf	14,3	;volatile
  6525  04C2                     i1l2029:
  6526                           
  6527                           ;main.c: 136:     unsigned res = ADC_GetConversion(PIN_WSP_STATE);
  6528  04C2  3007               	movlw	7
  6529  04C3  3186  2611  3184   	fcall	i1_ADC_GetConversion
  6530  04C6  0871               	movf	?i1_ADC_GetConversion+1,w
  6531  04C7  00F6               	movwf	get_measure@res+1
  6532  04C8  0870               	movf	?i1_ADC_GetConversion,w
  6533  04C9  00F5               	movwf	get_measure@res
  6534  04CA                     i1l2031:
  6535  04CA  0023               	movlb	3	; select bank3
  6536  04CB  118E               	bcf	14,3	;volatile
  6537  04CC                     i1l2033:
  6538  04CC  0022               	movlb	2	; select bank2
  6539  04CD  108E               	bcf	14,1	;volatile
  6540  04CE                     i1l2035:
  6541                           
  6542                           ;main.c: 139:     if (res < BAD_WSP_VOLTAGE) measures++;
  6543  04CE  304E               	movlw	78
  6544  04CF  0276               	subwf	get_measure@res+1,w
  6545  04D0  3020               	movlw	32
  6546  04D1  1903               	skipnz
  6547  04D2  0275               	subwf	get_measure@res,w
  6548  04D3  1803               	skipnc
  6549  04D4  2CD6               	goto	u112_21
  6550  04D5  2CD7               	goto	u112_20
  6551  04D6                     u112_21:
  6552  04D6  2CDC               	goto	i1l2039
  6553  04D7                     u112_20:
  6554  04D7                     i1l2037:
  6555  04D7  3001               	movlw	1
  6556  04D8  00F4               	movwf	??_get_measure
  6557  04D9  0874               	movf	??_get_measure,w
  6558  04DA  07FB               	addwf	get_measure@measures,f
  6559  04DB  2CE6               	goto	i1l2043
  6560  04DC                     i1l2039:
  6561  04DC  309C               	movlw	156
  6562  04DD  0276               	subwf	get_measure@res+1,w
  6563  04DE  3041               	movlw	65
  6564  04DF  1903               	skipnz
  6565  04E0  0275               	subwf	get_measure@res,w
  6566  04E1  1C03               	skipc
  6567  04E2  2CE4               	goto	u113_21
  6568  04E3  2CE5               	goto	u113_20
  6569  04E4                     u113_21:
  6570  04E4  2CE6               	goto	i1l2043
  6571  04E5                     u113_20:
  6572  04E5                     i1l2041:
  6573  04E5  01FB               	clrf	get_measure@measures
  6574  04E6                     i1l2043:
  6575                           
  6576                           ;main.c: 141:     if (measures > 2) start_alarm();
  6577  04E6  3003               	movlw	3
  6578  04E7  027B               	subwf	get_measure@measures,w
  6579  04E8  1C03               	skipc
  6580  04E9  2CEB               	goto	u114_21
  6581  04EA  2CEC               	goto	u114_20
  6582  04EB                     u114_21:
  6583  04EB  2CEF               	goto	i1l334
  6584  04EC                     u114_20:
  6585  04EC                     i1l2045:
  6586  04EC  3186  26D4  3184   	fcall	_start_alarm
  6587  04EF                     i1l334:
  6588  04EF  0008               	return
  6589  04F0                     __end_of_get_measure:
  6590                           
  6591                           	psect	text44
  6592  0611                     __ptext44:	
  6593 ;; *************** function i1_ADC_GetConversion *****************
  6594 ;; Defined at:
  6595 ;;		line 116 in file "mcc_generated_files/adc.c"
  6596 ;; Parameters:    Size  Location     Type
  6597 ;;  channel         1    wreg     enum E2178
  6598 ;; Auto vars:     Size  Location     Type
  6599 ;;  channel         1    3[COMMON] enum E2178
  6600 ;; Return value:  Size  Location     Type
  6601 ;;                  2    0[COMMON] unsigned short 
  6602 ;; Registers used:
  6603 ;;		wreg, status,2, status,0
  6604 ;; Tracked objects:
  6605 ;;		On entry : 0/0
  6606 ;;		On exit  : 0/0
  6607 ;;		Unchanged: 0/0
  6608 ;; Data sizes:     COMMON   BANK0   BANK1
  6609 ;;      Params:         2       0       0
  6610 ;;      Locals:         1       0       0
  6611 ;;      Temps:          1       0       0
  6612 ;;      Totals:         4       0       0
  6613 ;;Total ram usage:        4 bytes
  6614 ;; Hardware stack levels used: 1
  6615 ;; This function calls:
  6616 ;;		Nothing
  6617 ;; This function is called by:
  6618 ;;		_get_measure
  6619 ;; This function uses a non-reentrant model
  6620 ;;
  6621                           
  6622  0611                     i1_ADC_GetConversion:	
  6623                           ;psect for function i1_ADC_GetConversion
  6624                           
  6625                           
  6626                           ;incstack = 0
  6627                           ; Regs used in i1_ADC_GetConversion: [wreg+status,2+status,0]
  6628                           ;i1ADC_GetConversion@channel stored from wreg
  6629  0611  00F3               	movwf	i1ADC_GetConversion@channel
  6630  0612                     i1l2011:
  6631                           
  6632                           ;mcc_generated_files/adc.c: 116: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 117: {;mcc_generated_files/adc.c: 119:     ADCON0bits.CHS = ch
      +                          annel;
  6633  0612  0873               	movf	i1ADC_GetConversion@channel,w
  6634  0613  00F2               	movwf	??i1_ADC_GetConversion
  6635  0614  0DF2               	rlf	??i1_ADC_GetConversion,f
  6636  0615  0DF2               	rlf	??i1_ADC_GetConversion,f
  6637  0616  0021               	movlb	1	; select bank1
  6638  0617  081D               	movf	29,w	;volatile
  6639  0618  0672               	xorwf	??i1_ADC_GetConversion,w
  6640  0619  3983               	andlw	-125
  6641  061A  0672               	xorwf	??i1_ADC_GetConversion,w
  6642  061B  009D               	movwf	29	;volatile
  6643  061C                     i1l2013:
  6644                           
  6645                           ;mcc_generated_files/adc.c: 122:     ADCON0bits.ADON = 1;
  6646  061C  141D               	bsf	29,0	;volatile
  6647  061D                     i1l2015:
  6648                           
  6649                           ;mcc_generated_files/adc.c: 125:     _delay((unsigned long)((5)*(16000000/4000000.0)));
  6650  061D  3006               	movlw	6
  6651  061E                     u216_27:
  6652  061E  0B89               	decfsz	9,f
  6653  061F  2E1E               	goto	u216_27
  6654  0620  3200               	nop2
  6655  0621                     i1l2017:
  6656                           
  6657                           ;mcc_generated_files/adc.c: 128:     ADCON0bits.GO_nDONE = 1;
  6658  0621  0021               	movlb	1	; select bank1
  6659  0622  149D               	bsf	29,1	;volatile
  6660  0623                     i1l66:	
  6661                           ;mcc_generated_files/adc.c: 132:     {;mcc_generated_files/adc.c: 133:     }
  6662                           
  6663                           
  6664                           ;mcc_generated_files/adc.c: 131:     while (ADCON0bits.GO_nDONE)
  6665  0623  189D               	btfsc	29,1	;volatile
  6666  0624  2E26               	goto	u109_21
  6667  0625  2E27               	goto	u109_20
  6668  0626                     u109_21:
  6669  0626  2E23               	goto	i1l66
  6670  0627                     u109_20:
  6671  0627                     i1l2019:
  6672                           
  6673                           ;mcc_generated_files/adc.c: 136:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  6674  0627  081C               	movf	28,w	;volatile
  6675  0628  00F1               	movwf	?i1_ADC_GetConversion+1
  6676  0629  081B               	movf	27,w	;volatile
  6677  062A  00F0               	movwf	?i1_ADC_GetConversion
  6678  062B                     i1l69:
  6679  062B  0008               	return
  6680  062C                     __end_ofi1_ADC_GetConversion:
  6681                           
  6682                           	psect	text45
  6683  06D4                     __ptext45:	
  6684 ;; *************** function _start_alarm *****************
  6685 ;; Defined at:
  6686 ;;		line 121 in file "main.c"
  6687 ;; Parameters:    Size  Location     Type
  6688 ;;		None
  6689 ;; Auto vars:     Size  Location     Type
  6690 ;;		None
  6691 ;; Return value:  Size  Location     Type
  6692 ;;                  1    wreg      void 
  6693 ;; Registers used:
  6694 ;;		wreg, status,2, status,0, pclath, cstack
  6695 ;; Tracked objects:
  6696 ;;		On entry : 0/0
  6697 ;;		On exit  : 0/0
  6698 ;;		Unchanged: 0/0
  6699 ;; Data sizes:     COMMON   BANK0   BANK1
  6700 ;;      Params:         0       0       0
  6701 ;;      Locals:         0       0       0
  6702 ;;      Temps:          0       0       0
  6703 ;;      Totals:         0       0       0
  6704 ;;Total ram usage:        0 bytes
  6705 ;; Hardware stack levels used: 1
  6706 ;; Hardware stack levels required when called: 1
  6707 ;; This function calls:
  6708 ;;		i1_go_close
  6709 ;;		i1_go_close_alt
  6710 ;; This function is called by:
  6711 ;;		_get_measure
  6712 ;; This function uses a non-reentrant model
  6713 ;;
  6714                           
  6715  06D4                     _start_alarm:	
  6716                           ;psect for function _start_alarm
  6717                           
  6718  06D4                     i1l1995:	
  6719                           ;incstack = 0
  6720                           ; Regs used in _start_alarm: [wreg+status,2+status,0+pclath+cstack]
  6721                           
  6722                           
  6723                           ;main.c: 122:     FLAGS.bits.ALARM = 1;
  6724  06D4  147C               	bsf	_FLAGS,0
  6725  06D5                     i1l313:	
  6726                           ;main.c: 123:     do { LATCbits.LATC0 = 1; } while(0);
  6727                           
  6728  06D5  0022               	movlb	2	; select bank2
  6729  06D6  140E               	bsf	14,0	;volatile
  6730  06D7                     i1l314:
  6731                           
  6732                           ;main.c: 124:     INTCONbits.TMR0IE = 1;
  6733  06D7  168B               	bsf	11,5	;volatile
  6734                           
  6735                           ;main.c: 125:     if (FLAGS.bits.NORMAL_WORK_MODE) {
  6736  06D8  1CFC               	btfss	_FLAGS,1
  6737  06D9  2EDB               	goto	u106_21
  6738  06DA  2EDC               	goto	u106_20
  6739  06DB                     u106_21:
  6740  06DB  2EE0               	goto	i1l1999
  6741  06DC                     u106_20:
  6742  06DC                     i1l1997:
  6743                           
  6744                           ;main.c: 126:         go_close();
  6745  06DC  3185  25D7  3186   	fcall	i1_go_close
  6746                           
  6747                           ;main.c: 127:     } else {
  6748  06DF  2EE3               	goto	i1l317
  6749  06E0                     i1l1999:
  6750                           
  6751                           ;main.c: 128:         go_close_alt();
  6752  06E0  3187  2754  3186   	fcall	i1_go_close_alt
  6753  06E3                     i1l317:
  6754  06E3  0008               	return
  6755  06E4                     __end_of_start_alarm:
  6756                           
  6757                           	psect	text46
  6758  0754                     __ptext46:	
  6759 ;; *************** function i1_go_close_alt *****************
  6760 ;; Defined at:
  6761 ;;		line 108 in file "main.c"
  6762 ;; Parameters:    Size  Location     Type
  6763 ;;		None
  6764 ;; Auto vars:     Size  Location     Type
  6765 ;;		None
  6766 ;; Return value:  Size  Location     Type
  6767 ;;                  1    wreg      void 
  6768 ;; Registers used:
  6769 ;;		None
  6770 ;; Tracked objects:
  6771 ;;		On entry : 0/0
  6772 ;;		On exit  : 0/0
  6773 ;;		Unchanged: 0/0
  6774 ;; Data sizes:     COMMON   BANK0   BANK1
  6775 ;;      Params:         0       0       0
  6776 ;;      Locals:         0       0       0
  6777 ;;      Temps:          0       0       0
  6778 ;;      Totals:         0       0       0
  6779 ;;Total ram usage:        0 bytes
  6780 ;; Hardware stack levels used: 1
  6781 ;; This function calls:
  6782 ;;		Nothing
  6783 ;; This function is called by:
  6784 ;;		_start_alarm
  6785 ;; This function uses a non-reentrant model
  6786 ;;
  6787                           
  6788  0754                     i1_go_close_alt:	
  6789                           ;psect for function i1_go_close_alt
  6790                           
  6791  0754                     i1l1993:	
  6792                           ;incstack = 0
  6793                           ; Regs used in i1_go_close_alt: []
  6794                           
  6795                           
  6796                           ;main.c: 109:     FLAGS.bits.CLOSED = 1;
  6797  0754  157C               	bsf	_FLAGS,2
  6798  0755                     i1l299:	
  6799                           ;main.c: 110:     do { LATCbits.LATC4 = 0; } while(0);
  6800                           
  6801  0755  0022               	movlb	2	; select bank2
  6802  0756  120E               	bcf	14,4	;volatile
  6803  0757                     i1l301:	
  6804                           ;main.c: 111:     do { LATCbits.LATC5 = 1; } while(0);
  6805                           
  6806  0757  168E               	bsf	14,5	;volatile
  6807  0758                     i1l303:
  6808  0758  0008               	return
  6809  0759                     __end_ofi1_go_close_alt:
  6810                           
  6811                           	psect	text47
  6812  05D7                     __ptext47:	
  6813 ;; *************** function i1_go_close *****************
  6814 ;; Defined at:
  6815 ;;		line 89 in file "main.c"
  6816 ;; Parameters:    Size  Location     Type
  6817 ;;		None
  6818 ;; Auto vars:     Size  Location     Type
  6819 ;;		None
  6820 ;; Return value:  Size  Location     Type
  6821 ;;                  1    wreg      void 
  6822 ;; Registers used:
  6823 ;;		wreg
  6824 ;; Tracked objects:
  6825 ;;		On entry : 0/0
  6826 ;;		On exit  : 0/0
  6827 ;;		Unchanged: 0/0
  6828 ;; Data sizes:     COMMON   BANK0   BANK1
  6829 ;;      Params:         0       0       0
  6830 ;;      Locals:         0       0       0
  6831 ;;      Temps:          2       0       0
  6832 ;;      Totals:         2       0       0
  6833 ;;Total ram usage:        2 bytes
  6834 ;; Hardware stack levels used: 1
  6835 ;; This function calls:
  6836 ;;		Nothing
  6837 ;; This function is called by:
  6838 ;;		_start_alarm
  6839 ;; This function uses a non-reentrant model
  6840 ;;
  6841                           
  6842  05D7                     i1_go_close:	
  6843                           ;psect for function i1_go_close
  6844                           
  6845  05D7                     i1l1981:	
  6846                           ;incstack = 0
  6847                           ; Regs used in i1_go_close: [wreg]
  6848                           
  6849                           
  6850                           ;main.c: 90:     time_s = 0;
  6851  05D7  3000               	movlw	0
  6852  05D8  0020               	movlb	0	; select bank0
  6853  05D9  00D5               	movwf	_time_s
  6854  05DA  3000               	movlw	0
  6855  05DB  00D6               	movwf	_time_s+1
  6856  05DC  3000               	movlw	0
  6857  05DD  00D7               	movwf	_time_s+2
  6858  05DE                     i1l1983:
  6859  05DE  0022               	movlb	2	; select bank2
  6860  05DF  160E               	bsf	14,4	;volatile
  6861  05E0                     i1l286:
  6862                           
  6863                           ;main.c: 92:     _delay((unsigned long)((2 * 1000)*(16000000/4000.0)));
  6864  05E0  3029               	movlw	41
  6865  05E1  00F1               	movwf	??i1_go_close+1
  6866  05E2  3096               	movlw	150
  6867  05E3  00F0               	movwf	??i1_go_close
  6868  05E4  307F               	movlw	127
  6869  05E5                     u217_27:
  6870  05E5  0B89               	decfsz	9,f
  6871  05E6  2DE5               	goto	u217_27
  6872  05E7  0BF0               	decfsz	??i1_go_close,f
  6873  05E8  2DE5               	goto	u217_27
  6874  05E9  0BF1               	decfsz	??i1_go_close+1,f
  6875  05EA  2DE5               	goto	u217_27
  6876  05EB  0000               	nop
  6877  05EC                     i1l1985:
  6878  05EC  0022               	movlb	2	; select bank2
  6879  05ED  168E               	bsf	14,5	;volatile
  6880  05EE                     i1l288:
  6881                           
  6882                           ;main.c: 94:     time_pow_s = 10;
  6883  05EE  300A               	movlw	10
  6884  05EF  00F0               	movwf	??i1_go_close
  6885  05F0  0870               	movf	??i1_go_close,w
  6886  05F1  0020               	movlb	0	; select bank0
  6887  05F2  00DE               	movwf	_time_pow_s
  6888  05F3                     i1l1987:
  6889                           
  6890                           ;main.c: 95:     FLAGS.bits.RELE_POW_WAIT = 1;
  6891  05F3  16FC               	bsf	_FLAGS,5
  6892  05F4                     i1l1989:
  6893                           
  6894                           ;main.c: 96:     FLAGS.bits.RELE_CON_WAIT = 1;
  6895  05F4  177C               	bsf	_FLAGS,6
  6896  05F5                     i1l289:
  6897  05F5  0008               	return
  6898  05F6                     __end_ofi1_go_close:
  6899                           
  6900                           	psect	text48
  6901  06E4                     __ptext48:	
  6902 ;; *************** function _TMR0_ISR *****************
  6903 ;; Defined at:
  6904 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  6905 ;; Parameters:    Size  Location     Type
  6906 ;;		None
  6907 ;; Auto vars:     Size  Location     Type
  6908 ;;		None
  6909 ;; Return value:  Size  Location     Type
  6910 ;;                  1    wreg      void 
  6911 ;; Registers used:
  6912 ;;		wreg, status,2, status,0, pclath, cstack
  6913 ;; Tracked objects:
  6914 ;;		On entry : 0/0
  6915 ;;		On exit  : 0/0
  6916 ;;		Unchanged: 0/0
  6917 ;; Data sizes:     COMMON   BANK0   BANK1
  6918 ;;      Params:         0       0       0
  6919 ;;      Locals:         0       0       0
  6920 ;;      Temps:          0       0       0
  6921 ;;      Totals:         0       0       0
  6922 ;;Total ram usage:        0 bytes
  6923 ;; Hardware stack levels used: 1
  6924 ;; Hardware stack levels required when called: 1
  6925 ;; This function calls:
  6926 ;;		Absolute function
  6927 ;;		_TMR0_DefaultInterruptHandler
  6928 ;;		i1_switch_zum
  6929 ;; This function is called by:
  6930 ;;		_INTERRUPT_InterruptManager
  6931 ;; This function uses a non-reentrant model
  6932 ;;
  6933                           
  6934  06E4                     _TMR0_ISR:	
  6935                           ;psect for function _TMR0_ISR
  6936                           
  6937  06E4                     i1l2461:	
  6938                           ;incstack = 0
  6939                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  6940                           
  6941                           
  6942                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
  6943  06E4  110B               	bcf	11,2	;volatile
  6944  06E5                     i1l2463:
  6945                           
  6946                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
  6947  06E5  0020               	movlb	0	; select bank0
  6948  06E6  0864               	movf	_timer0ReloadVal,w	;volatile
  6949  06E7  0095               	movwf	21	;volatile
  6950  06E8                     i1l2465:
  6951                           
  6952                           ;mcc_generated_files/tmr0.c: 116:     if(TMR0_InterruptHandler)
  6953  06E8  0860               	movf	_TMR0_InterruptHandler,w
  6954  06E9  0461               	iorwf	_TMR0_InterruptHandler+1,w
  6955  06EA  1903               	btfsc	3,2
  6956  06EB  2EED               	goto	u169_21
  6957  06EC  2EEE               	goto	u169_20
  6958  06ED                     u169_21:
  6959  06ED  2EF3               	goto	i1l197
  6960  06EE                     u169_20:
  6961  06EE                     i1l2467:
  6962                           
  6963                           ;mcc_generated_files/tmr0.c: 117:     {;mcc_generated_files/tmr0.c: 118:         TMR0_In
      +                          terruptHandler();
  6964  06EE  0861               	movf	_TMR0_InterruptHandler+1,w
  6965  06EF  008A               	movwf	10
  6966  06F0  0860               	movf	_TMR0_InterruptHandler,w
  6967  06F1  000A               	callw
  6968  06F2  3186               	pagesel	$
  6969  06F3                     i1l197:
  6970  06F3  0008               	return
  6971  06F4                     __end_of_TMR0_ISR:
  6972                           
  6973                           	psect	text49
  6974  076E                     __ptext49:	
  6975 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  6976 ;; Defined at:
  6977 ;;		line 129 in file "mcc_generated_files/tmr0.c"
  6978 ;; Parameters:    Size  Location     Type
  6979 ;;		None
  6980 ;; Auto vars:     Size  Location     Type
  6981 ;;		None
  6982 ;; Return value:  Size  Location     Type
  6983 ;;                  1    wreg      void 
  6984 ;; Registers used:
  6985 ;;		None
  6986 ;; Tracked objects:
  6987 ;;		On entry : 0/0
  6988 ;;		On exit  : 0/0
  6989 ;;		Unchanged: 0/0
  6990 ;; Data sizes:     COMMON   BANK0   BANK1
  6991 ;;      Params:         0       0       0
  6992 ;;      Locals:         0       0       0
  6993 ;;      Temps:          0       0       0
  6994 ;;      Totals:         0       0       0
  6995 ;;Total ram usage:        0 bytes
  6996 ;; Hardware stack levels used: 1
  6997 ;; This function calls:
  6998 ;;		Nothing
  6999 ;; This function is called by:
  7000 ;;		_TMR0_Initialize
  7001 ;;		_TMR0_ISR
  7002 ;; This function uses a non-reentrant model
  7003 ;;
  7004                           
  7005  076E                     _TMR0_DefaultInterruptHandler:	
  7006                           ;psect for function _TMR0_DefaultInterruptHandler
  7007                           
  7008  076E                     i1l203:	
  7009                           ;incstack = 0
  7010                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  7011                           
  7012  076E  0008               	return
  7013  076F                     __end_of_TMR0_DefaultInterruptHandler:
  7014                           
  7015                           	psect	text50
  7016  0701                     __ptext50:	
  7017 ;; *************** function i1_switch_zum *****************
  7018 ;; Defined at:
  7019 ;;		line 71 in file "main.c"
  7020 ;; Parameters:    Size  Location     Type
  7021 ;;		None
  7022 ;; Auto vars:     Size  Location     Type
  7023 ;;		None
  7024 ;; Return value:  Size  Location     Type
  7025 ;;                  1    wreg      void 
  7026 ;; Registers used:
  7027 ;;		status,0
  7028 ;; Tracked objects:
  7029 ;;		On entry : 0/0
  7030 ;;		On exit  : 0/0
  7031 ;;		Unchanged: 0/0
  7032 ;; Data sizes:     COMMON   BANK0   BANK1
  7033 ;;      Params:         0       0       0
  7034 ;;      Locals:         0       0       0
  7035 ;;      Temps:          0       0       0
  7036 ;;      Totals:         0       0       0
  7037 ;;Total ram usage:        0 bytes
  7038 ;; Hardware stack levels used: 1
  7039 ;; This function calls:
  7040 ;;		Nothing
  7041 ;; This function is called by:
  7042 ;;		_TMR0_ISR
  7043 ;; This function uses a non-reentrant model
  7044 ;;
  7045                           
  7046  0701                     i1_switch_zum:	
  7047                           ;psect for function i1_switch_zum
  7048                           
  7049  0701                     i1l268:	
  7050                           ;incstack = 0
  7051                           ; Regs used in i1_switch_zum: [status,0]
  7052                           ;main.c: 72:     do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  7053                           
  7054  0701                     i1l2459:
  7055  0701  1003               	clrc
  7056  0702  0022               	movlb	2	; select bank2
  7057  0703  1E8C               	btfss	12,5	;volatile
  7058  0704  1403               	setc
  7059  0705  1803               	btfsc	3,0
  7060  0706  2F08               	goto	u167_21
  7061  0707  2F0B               	goto	u167_20
  7062  0708                     u167_21:
  7063  0708  0022               	movlb	2	; select bank2
  7064  0709  168C               	bsf	12,5	;volatile
  7065  070A  2F0D               	goto	u168_24
  7066  070B                     u167_20:
  7067  070B  0022               	movlb	2	; select bank2
  7068  070C  128C               	bcf	12,5	;volatile
  7069  070D                     u168_24:
  7070  070D                     i1l270:
  7071  070D  0008               	return
  7072  070E                     __end_ofi1_switch_zum:
  7073  007E                     btemp	set	126	;btemp
  7074  007E                     int$flags	set	126
  7075  007E                     wtemp0	set	126
  7076                           
  7077                           	psect	idloc
  7078                           
  7079                           ;Config register IDLOC0 @ 0x8000
  7080                           ;	unspecified, using default values
  7081  8000                     	org	32768
  7082  8000  3FFF               	dw	16383
  7083                           
  7084                           ;Config register IDLOC1 @ 0x8001
  7085                           ;	unspecified, using default values
  7086  8001                     	org	32769
  7087  8001  3FFF               	dw	16383
  7088                           
  7089                           ;Config register IDLOC2 @ 0x8002
  7090                           ;	unspecified, using default values
  7091  8002                     	org	32770
  7092  8002  3FFF               	dw	16383
  7093                           
  7094                           ;Config register IDLOC3 @ 0x8003
  7095                           ;	unspecified, using default values
  7096  8003                     	org	32771
  7097  8003  3FFF               	dw	16383
  7098                           
  7099                           	psect	config
  7100                           
  7101                           ;Config register CONFIG1 @ 0x8007
  7102                           ;	Oscillator Selection
  7103                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  7104                           ;	Watchdog Timer Enable
  7105                           ;	WDTE = ON, WDT enabled
  7106                           ;	Power-up Timer Enable
  7107                           ;	PWRTE = OFF, PWRT disabled
  7108                           ;	MCLR Pin Function Select
  7109                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  7110                           ;	Flash Program Memory Code Protection
  7111                           ;	CP = OFF, Program memory code protection is disabled
  7112                           ;	Data Memory Code Protection
  7113                           ;	CPD = OFF, Data memory code protection is disabled
  7114                           ;	Brown-out Reset Enable
  7115                           ;	BOREN = ON, Brown-out Reset enabled
  7116                           ;	Clock Out Enable
  7117                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  7118                           ;	Internal/External Switchover
  7119                           ;	IESO = ON, Internal/External Switchover mode is enabled
  7120                           ;	Fail-Safe Clock Monitor Enable
  7121                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  7122  8007                     	org	32775
  7123  8007  3FFC               	dw	16380
  7124                           
  7125                           ;Config register CONFIG2 @ 0x8008
  7126                           ;	Flash Memory Self-Write Protection
  7127                           ;	WRT = OFF, Write protection off
  7128                           ;	PLL Enable
  7129                           ;	PLLEN = OFF, 4x PLL disabled
  7130                           ;	Stack Overflow/Underflow Reset Enable
  7131                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  7132                           ;	Brown-out Reset Voltage Selection
  7133                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  7134                           ;	Low-Voltage Programming Enable
  7135                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  7136  8008                     	org	32776
  7137  8008  1EFF               	dw	7935

Data Sizes:
    Strings     0
    Constant    9
    Data        0
    BSS         44
    Persistent  37
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80     41      69
    BANK1            32      0      16

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> switch_zum(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> i1_switch_zum(), switch_zum(), TMR0_DefaultInterruptHandler(), Absolute function(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> sec_tick_work(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> sec_tick_work(), Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR2_CallBack->_sec_tick_work
    _sec_tick_work->_get_measure
    _get_measure->i1_ADC_GetConversion
    _start_alarm->i1_go_close

Critical Paths under _main in BANK0

    _switch_wm->_beep
    _get_jump_full->_ADC_GetConversion
    _get_fun_full->_ADC_GetConversion
    _get_eeprom->_get_time
    _get_time->_EEPROM_ReadShortLong
    _EEPROM_ReadShortLong->_EEPROM_ReadByte
    _get_adr->_EEPROM_ReadByte
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _povorot->_go_close
    _get_voltage->_EEPROM_WriteShortLong
    _EEPROM_WriteShortLong->_EEPROM_WriteByte
    _get_jump->_ADC_GetConversion
    _get_fun->_ADC_GetConversion
    _fun_work->_beep

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5104
                           _fun_work
                            _get_fun
                           _get_jump
                        _get_voltage
                            _povorot
                        _start_setup
                          _switch_wm
 ---------------------------------------------------------------------------------
 (1) _switch_wm                                            1     1      0     396
                                              6 BANK0      1     1      0
                               _beep
 ---------------------------------------------------------------------------------
 (1) _start_setup                                          0     0      0    2521
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
                         _get_eeprom
                       _get_fun_full
                      _get_jump_full
 ---------------------------------------------------------------------------------
 (2) _get_jump_full                                        4     4      0      70
                                              4 BANK0      4     4      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (2) _get_fun_full                                         4     4      0      70
                                              4 BANK0      4     4      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (2) _get_eeprom                                           0     0      0    1685
                            _get_adr
                           _get_time
 ---------------------------------------------------------------------------------
 (3) _get_time                                            25    25      0     977
                                             16 BANK0     25    25      0
               _EEPROM_ReadShortLong
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     196
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _EEPROM_ReadShortLong                                13    10      3     113
                                              3 BANK0     13    10      3
                    _EEPROM_ReadByte
 ---------------------------------------------------------------------------------
 (3) _get_adr                                             22    22      0     708
                                              3 BANK0     22    22      0
                    _EEPROM_ReadByte
 ---------------------------------------------------------------------------------
 (2) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     348
                     _ADC_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      1     1      0     174
                                              2 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR0_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _povorot                                              0     0      0       0
                           _go_close
                            _go_open
 ---------------------------------------------------------------------------------
 (1) _get_voltage                                         10    10      0    1701
                                             14 BANK0     10    10      0
                  _ADC_GetConversion
                    _EEPROM_ReadByte
                   _EEPROM_WriteByte
              _EEPROM_WriteShortLong
 ---------------------------------------------------------------------------------
 (2) _EEPROM_WriteShortLong                                9     6      3     853
                                              5 BANK0      9     6      3
                   _EEPROM_WriteByte
 ---------------------------------------------------------------------------------
 (3) _EEPROM_WriteByte                                     5     4      1     599
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (5) _EEPROM_ReadByte                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _get_jump                                             3     3      0      45
                                              4 BANK0      3     3      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (1) _get_fun                                              3     3      0      45
                                              4 BANK0      3     3      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversion                                    4     2      2      22
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _fun_work                                             1     1      0     396
                                              6 BANK0      1     1      0
                               _beep
                           _go_close
                       _go_close_alt
                            _go_open
                        _go_open_alt
 ---------------------------------------------------------------------------------
 (2) _go_open_alt                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _go_open                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _go_close_alt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _go_close                                             2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _beep                                                 6     5      1     396
                                              0 BANK0      6     5      1
                         _switch_zum
 ---------------------------------------------------------------------------------
 (3) _switch_zum                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           0     0      0      67
                           _TMR0_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR2_ISR                                             0     0      0      67
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (8) _TMR2_CallBack                                        0     0      0      67
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
                      _sec_tick_work *
 ---------------------------------------------------------------------------------
 (9) _sec_tick_work                                        1     1      0      67
                                              7 COMMON     1     1      0
                        _get_measure
                          _rele_tick
                        _toggle_tone
 ---------------------------------------------------------------------------------
 (10) _toggle_tone                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _rele_tick                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _get_measure                                         3     3      0      67
                                              4 COMMON     3     3      0
                        _start_alarm
                i1_ADC_GetConversion
 ---------------------------------------------------------------------------------
 (11) i1_ADC_GetConversion                                 4     2      2      22
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (11) _start_alarm                                         0     0      0       0
                         i1_go_close
                     i1_go_close_alt
 ---------------------------------------------------------------------------------
 (12) i1_go_close_alt                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_go_close                                          2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                       i1_switch_zum *
 ---------------------------------------------------------------------------------
 (8) i1_switch_zum                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fun_work
     _beep
       _switch_zum
     _go_close
     _go_close_alt
     _go_open
     _go_open_alt
   _get_fun
     _ADC_GetConversion
   _get_jump
     _ADC_GetConversion
   _get_voltage
     _ADC_GetConversion
     _EEPROM_ReadByte
     _EEPROM_WriteByte
     _EEPROM_WriteShortLong
       _EEPROM_WriteByte
   _povorot
     _go_close
     _go_open
   _start_setup
     _SYSTEM_Initialize
       _ADC_Initialize
       _FVR_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
       _TMR2_Initialize
         _TMR2_SetInterruptHandler
       _WDT_Initialize
     _TMR0_SetInterruptHandler
     _TMR2_SetInterruptHandler
     _TMR2_StartTimer
     _get_eeprom
       _get_adr
         _EEPROM_ReadByte
       _get_time
         _EEPROM_ReadShortLong
           _EEPROM_ReadByte
         ___bmul
     _get_fun_full
       _ADC_GetConversion
     _get_jump_full
       _ADC_GetConversion
   _switch_wm
     _beep

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
     i1_switch_zum *
   _TMR2_ISR
     _TMR2_CallBack
       Absolute function(Fake) *
       _TMR2_DefaultInterruptHandler *
       _sec_tick_work *
         _get_measure
           _start_alarm
             i1_go_close
             i1_go_close_alt
           i1_ADC_GetConversion
         _rele_tick
         _toggle_tone

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      62       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     29      45       6       86.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0      10       8       50.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      62       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Thu May 05 10:28:21 2022

        __end_of_TMR2_SetInterruptHandler 0744                          get_fun_full@flag 0027  
                      get_fun@fun_counter 005D                            ___bmul@product 0022  
                   __end_of_sec_tick_work 044C                                        l31 075C  
                                      l25 0670                                        l28 0737  
                                      l48 0729                                        l66 05AC  
                                      l92 069B                                        l69 05B7  
                                      _RD 0CA8                                        _WR 0CA9  
                           ?_go_close_alt 0070                              ?_get_voltage 0070  
                          ?_get_jump_full 0070                    __end_of_FVR_Initialize 0761  
                         _timer0ReloadVal 0064                                       l200 0749  
                                     l210 0760                                       l301 0752  
                                     l310 074E                                       l142 076C  
                                     l303 0753                                       l400 034B  
                                     l306 074B                                       l402 034D  
                                     l139 06C3                                       l308 074D  
                                     l164 0743                                       l341 03D2  
                                     l270 06D3                                       l502 0134  
                                     l352 040D                                       l184 0686  
                                     l433 030A                                       l505 0730  
                                     l282 051F                                       l442 0390  
                                     l370 027E                                       l530 04BD  
                                     l339 03D0                                       l268 06C7  
                                     l292 070E                                       l372 0280  
                                     l357 023A                                       l445 0588  
                                     l286 05C1                                       l294 0710  
                                     l359 023C                                       l391 030B  
                                     l288 05CF                                       l296 0717  
                                     l368 027C                                       l289 05D6  
                                     l377 044C                                       l481 01D7  
                                     l449 0596                                       l386 0485  
                                     l562 062E                                       l299 0750  
                                     l459 0239                                       l556 0522  
                                     l565 0644                                       l574 03CF  
                                     l559 054A                                       l577 02C6  
                                     l771 065A                                       _GIE 005F  
                             _start_alarm 06D4                                       _PR2 001B  
                             _start_setup 0486                              ?_go_open_alt 0070  
                         _TMR2_Initialize 06B1                                       wreg 0009  
                              i1_go_close 05D7                               get_jump@res 0025  
                                    l2001 062E                                      l2003 0633  
                                    l2005 0637                                      l2101 0734  
                                    l2007 0642                                      l2111 0725  
                                    l2103 0735                                      l2023 073E  
                                    l2113 0726                                      l2025 0744  
                                    l2121 06B6                                      l2105 0759  
                                    l2107 075D                                      l2131 0679  
                                    l2123 06B8                                      l2115 06B1  
                                    l2211 014F                                      l2141 05A5  
                                    l2109 0722                                      l2133 067D  
                                    l2125 06C0                                      l2117 06B4  
                                    l2221 0163                                      l2205 0141  
                                    l2301 009D                                      l2151 06C7  
                                    l2143 05A6                                      l2135 067E  
                                    l2127 0671                                      l2119 06B5  
                                    l2223 0164                                      l2207 0149  
                                    l2311 00BB                                      l2303 00A1  
                                    l2145 05AA                                      l2137 067F  
                                    l2129 0676                                      l2241 018D  
                                    l2225 0168                                      l2217 0150  
                                    l2065 0283                                      l2081 0652  
                                    l2073 0647                                      l2313 00D1  
                                    l2321 00E3                                      l2401 0257  
                                    l2147 05B0                                      l2139 0599  
                                    l2091 068D                                      l2243 0191  
                                    l2235 0174                                      l2227 016E  
                                    l2219 015A                                      l2067 02B2  
                                    l2083 0659                                      l2075 0648  
                                    l2331 00FC                                      l2315 00D7  
                                    l2323 00E7                                      l2411 026A  
                                    l2403 025B                                      l2181 0537  
                                    l2173 0522                                      l2093 068F  
                                    l2261 01BB                                      l2237 017D  
                                    l2229 0173                                      l2245 0197  
                                    l2069 02C0                                      l2077 064C  
                                    l2341 012A                                      l2333 010A  
                                    l2325 00F9                                      l2317 00D9  
                                    l2309 00A2                                      l2413 0271  
                                    l2405 0262                                      l2421 030D  
                                    l2511 0468                                      l2503 044E  
                                    l2191 0541                                      l2183 053B  
                                    l2175 0527                                      l2095 0692  
                                    l2087 0687                                      l2263 01C1  
                                    l2255 01A3                                      l2247 019B  
                                    l2239 018C                                      l2079 0650  
                                    l2343 0130                                      l2335 010E  
                                    l2319 00DD                                      l2271 003F  
                                    l2415 0275                                      l2407 0266  
                                    l2431 032A                                      l2423 030F  
                                    l2361 04FD                                      l2353 04F2  
                                    l2521 0480                                      l2513 046C  
                                    l2505 0457                                      l2193 0548  
                                    l2185 053C                                      l2177 052C  
                                    l2601 01EB                                      l2097 0697  
                                    l2089 068A                                      l2345 065B  
                                    l2265 01C9                                      l2257 01B3  
                                    l2249 01A1                                      l2337 0112  
                                    l2281 0057                                      l2273 0042  
                                    l2409 0267                                      l2441 0340  
                                    l2433 0331                                      l2425 0318  
                                    l2363 0502                                      l2355 04F4  
                                    l2371 05B8                                      l2523 0484  
                                    l2515 0473                                      l2507 0459  
                                    l2187 053E                                      l2179 052D  
                                    l2451 039B                                      l2611 020C  
                                    l2603 01F3                                      l2531 02DA  
                                    l2099 0731                                      l2347 076A  
                                    l2267 01CE                                      l2259 01B7  
                                    l2195 0135                                      l2339 0118  
                                    l2291 007E                                      l2283 0063  
                                    l2275 0042                                      l2419 0277  
                                    l2443 0344                                      l2435 0335  
                                    l2427 0321                                      l2365 0508  
                                    l2357 04F6                                      l2373 05BF  
                                    l2517 0477                                      l2509 0463  
                                    l2189 0540                                      l2453 03AC  
                                    l2613 0217                                      l2605 01F9  
                                    l2541 02F8                                      l2533 02DE  
                                    l2269 01D3                                      l2197 0135  
                                    l2293 0086                                      l2277 004C  
                                    l2437 0336                                      l2429 0326  
                                    l2621 0489                                      l2367 0514  
                                    l2359 04F9                                      l2375 05CD  
                                    l2383 0711                                      l2391 074A  
                                    l2551 0352                                      l2519 0479  
                                    l2455 03C6                                      l2615 0222  
                                    l2607 0201                                      l2543 02FC  
                                    l2535 02E2                                      l2527 02C7  
                                    l2199 0140                                      l2295 008C  
                                    l2279 0052                                      l2447 0346  
                                    l2439 0339                                      l2631 049E  
                                    l2623 048A                                      l2369 0519  
                                    l2377 05D4                                      l2385 0716  
                                    l2561 0366                                      l2553 0356  
                                    l2481 03DF                                      l2449 0393  
                                    l2617 0227                                      l2609 0206  
                                    l2545 0300                                      l2529 02D6  
                                    l2537 02E5                                      l2297 0090  
                                    l2289 0064                                      l2457 072A  
                                    l2393 023E                                      l2641 04A7  
                                    l2633 04A1                                      l2625 048B  
                                    l2379 05D5                                      l2571 037C  
                                    l2563 0369                                      l2555 035A  
                                    l2491 03FB                                      l2483 03E1  
                                    l2547 0303                                      l2539 02F4  
                                    l2299 0096                                      l2395 0240  
                                    l2651 04AF                                      l2643 04A9  
                                    l2635 04A3                                      l2627 048E  
                                    l2619 0486                                      l2389 074F  
                                    l2573 0380                                      l2557 035E  
                                    l2565 0370                                      l2549 034E  
                                    l2493 03FF                                      l2485 03EB  
                                    l2477 03D4                                      l2397 0249  
                                    l2661 04B8                                      l2653 04B1  
                                    l2645 04AB                                      l2637 04A4  
                                    l2629 0496                                      l2581 0579  
                                    l2575 0384                                      l2567 0374  
                                    l2559 0362                                      l2495 0401  
                                    l2487 03F0                                      l2479 03DD  
                                    l2591 01D8                                      l2399 0252  
                                    l2663 04BB                                      l2655 04B2  
                                    l2647 04AD                                      l2639 04A5  
                                    l2583 057D                                      l2577 0387  
                                    l2569 0378                                      l2497 0408  
                                    l2489 03F4                                      l2593 01E1  
                                    l2657 04B3                                      l2649 04AE  
                                    l2585 057E                                      l2499 040C  
                                    l2595 01EA                                      l2659 04B5  
                                    l2587 058C                                      l2579 0575  
                                    l2589 058D                                      l2693 05F6  
                                    l2695 05F9                                      l2697 05FC  
                                    l2699 0600                               get_time@buf 0045  
                                    u1200 05B0                                      u2000 0239  
                                    u1201 05AF                                      u2001 0238  
                                    u1210 06D1                                      u1211 06CE  
                                    u1300 0547                                      u1301 0545  
                                    u2005 0235                                      u1070 0633  
                                    u1071 0632                                      u1224 06D3  
                                    u1080 0637                                      u1400 01B3  
                                    u1320 013D                                      u1081 0636  
                                    u1401 01B2                                      u1314 0548  
                                    u1410 01C1                                      u1330 014E  
                                    u1411 01C0                                      u1331 014D  
                                    u1420 01CE                                      u1340 015A  
                                    u1180 064C                                      u1500 00F9  
                                    u2060 0600                                      u2117 05A7  
                                    u1421 01CD                                      u1341 0159  
                                    u1181 064B                                      u1501 00F8  
                                    u2061 05FF                                      _LATA 010C  
                                    u1430 01D3                                      u1350 016E  
                                    u1190 0659                                      u1510 010A  
                                    u2127 05C7                                      u1431 01D2  
                                    u1351 016D                                      u1191 0658  
                                    u1511 0109                                      _LATC 010E  
                                    u1360 0173                                      u1520 0118  
                                    u1440 0049                                      u1600 027C  
                                    u2137 04FA                                      u1361 0172  
                                    u1521 0117                                      u1505 00F5  
                                    u1601 027B                                      u1290 0527  
                                    u1370 017D                                      u1530 0130  
                                    u1450 007E                                      u1610 0321  
                                    u2147 050E                                      u1291 0526  
                                    u1371 017C                                      u1531 012F  
                                    u1451 007D                                      u1611 0320  
                                    u1380 0197                                      u1460 0096  
                                    u1620 0331                                      u1381 0196  
                                    u1461 0095                                      u1621 0330  
                                    u1550 0508                                      u1710 03EB  
                                    u1390 01A1                                      u1470 009D  
                                    u1630 0340                                      u1551 0507  
                                    u1711 03EA                                      u1391 01A0  
                                    u1471 009C                                      u1455 007A  
                                    u1631 033F                                      u1560 051F  
                                    u1720 03FB                                      u1800 02E2  
                                    u1480 00BB                                      u1640 034B  
                                    u1561 051E                                      u1721 03FA  
                                    u1801 02E1                                      u1481 00BA  
                                    u1641 034A                                      u1730 0408  
                                    u1650 03A6                                      u1810 02F4  
                                    u1490 00E3                                      u1570 0252  
                                    u1731 0407                                      u1811 02F3  
                                    u1491 00E2                                      u1571 0251  
                                    u1900 0374                                      u1740 0463  
                                    u1660 03C0                                      u1820 02F8  
                                    u1580 0262                                      u1901 0373  
                                    u1741 0462                                      u1821 02F7  
                                    u1581 0261                                      u1910 0378  
                                    u1750 0473                                      u1830 02FC  
                                    u1590 0271                                      u1911 0377  
                                    u1751 0472                                      u1655 03A3  
                                    u1831 02FB                                      u1815 02F0  
                                    u1591 0270                                      u1920 037C  
                                    u1760 0480                                      u1840 0300  
                                    u1921 037B                                      u1761 047F  
                                    u1665 03BD                                      u1841 02FF  
                                    u1930 0380                                      u1850 0352  
                                    u1770 02D6                                      u1931 037F  
                                    u1851 0351                                      u1771 02D5  
                                    u1860 0356                                      u1780 02DA  
                                    u1940 0579                                      u1861 0355  
                                    u1781 02D9                                      u1941 0578  
                                    u1870 035A                                      u1790 02DE  
                                    u1950 057D                                      u1871 0359  
                                    u1791 02DD                                      u1775 02D2  
                                    u1951 057C                                      u1880 035E  
                                    u1960 058C                                      u1881 035D  
                                    u1961 058B                                      u1890 0362  
                                    u1970 01EA                                      u1891 0361  
                                    u1971 01E9                                      u1980 01F9  
                                    u1981 01F8                                      u1990 020C  
                                    u1991 020B                                      i1l66 0623  
                                    i1l69 062B                                      _TMR0 0015  
                                    _TMR2 001A                                      _WREN 0CAA  
                                    _WPUA 020C                                      _WPUC 020E  
                                    _beep 04F0                                      _main 05F6  
                                    fsr0h 0005                                      fsr1h 0007  
                                    indf0 0000                                      fsr0l 0004  
                                    indf1 0001                                      fsr1l 0006  
                    EEPROM_WriteByte@addr 0023                                      btemp 007E  
                          ??_get_fun_full 0024                                      start 0026  
                       ___bmul@multiplier 0023                      __end_ofi1_switch_zum 070E  
                 get_fun_full@fun_counter 005C                            ??_go_close_alt 0020  
                 __end_of_TMR0_Initialize 0687            ??_TMR0_DefaultInterruptHandler 0070  
                         ?_FVR_Initialize 0070             __end_of_OSCILLATOR_Initialize 0738  
                                   ?_beep 0020                                     ?_main 0070  
                            get_time@buf2 0041                                     _EEADR 0191  
                                   _FLAGS 007C                                     _T2CON 001C  
                                   i1l110 0012                                     i1l203 076E  
                                   i1l115 0024                                     i1l116 0024  
                                   i1l301 0757                                     i1l303 0758  
                                   i1l313 06D5                                     i1l161 0700  
                                   i1l314 06D7                                     i1l322 04BE  
                                   i1l324 04C0                                     i1l317 06E3  
                                   i1l157 06B0                                     i1l270 070D  
                                   i1l334 04EF                                     i1l414 0570  
                                   i1l406 0558                                     i1l415 0572  
                                   i1l167 076D                                     i1l416 0574  
                                   i1l409 055C                                     i1l273 0721  
                                   i1l268 0701                                     i1l428 044B  
                                   i1l197 06F3                                     i1l286 05E0  
                                   i1l288 05EE                                     i1l289 05F5  
                                   i1l299 0755                                     _TRISA 008C  
                                   _TRISC 008E                 ?_TMR0_SetInterruptHandler 0020  
                         __end_of_get_adr 01D8                          __end_of_TMR0_ISR 06F4  
                         __end_of_get_fun 040E                          __end_of_TMR2_ISR 06B1  
                         __end_of_go_open 0718                                     beep@i 0025  
                                   beep@j 0024                            _WDT_Initialize 0759  
                                   pclath 000A                           __end_of_povorot 030B  
                                   status 0003                                     wtemp0 007E  
                         _TMR2_StartTimer 076A                              get_voltage@q 0037  
                         __initialization 0027                              __end_of_beep 0520  
                            __end_of_main 0611                           ??_get_jump_full 0024  
                 __end_of_TMR2_Initialize 06C4               ?_INTERRUPT_InterruptManager 0070  
                                  ??_beep 0021                             get_time@F2661 0052  
                _TMR2_SetInterruptHandler 073E                                    ??_main 0049  
                           get_time@F2659 0049                    __end_of_WDT_Initialize 075D  
                             ?i1_go_close 0070                       i1_ADC_GetConversion 0611  
                           get_time@q_822 0048                             get_time@q_823 0047  
                                  _ADCON0 009D                                    _ADCON1 009E  
                                  _ADRESH 009C                                    _ADRESL 009B  
                                  _EEDATA 0193                                    _EECON2 0196  
                                  _APFCON 011D                                    _ANSELA 018C  
                                  _ANSELC 018E                                    _BORCON 0116  
                           get_time@times 0034                                    u110_20 0720  
                                  u110_21 071E                                    i1l2011 0612  
                                  i1l2013 061C                                    i1l2015 061D  
                                  i1l2031 04CA                                    i1l2017 0621  
                                  i1l2041 04E5                                    i1l2033 04CC  
                                  i1l2019 0627                                    i1l2043 04E6  
                                  i1l2035 04CE                                    i1l2051 054F  
                                  i1l2027 0718                                    u111_24 0721  
                                  i1l2045 04EC                                    i1l2037 04D7  
                                  i1l2029 04C2                                    i1l2061 056D  
                                  i1l2053 0555                                    i1l2039 04DC  
                                  i1l2063 056E                                    i1l2055 055E  
                                  u112_20 04D7                                    u112_21 04D6  
                                  i1l2057 056A                                    i1l2049 054B  
                                  i1l2161 042D                                    i1l2153 040E  
                                  i1l2059 056C                                    i1l2171 044A  
                                  i1l2163 0431                                    i1l2155 0419  
                                  i1l2165 0434                                    i1l2157 041D  
                                  i1l2167 0438                                    i1l2159 0421  
                                  i1l2351 06FB                                    u113_20 04E5  
                                  u201_20 000A                                    u113_21 04E4  
                                  i1l2169 043E                                    u201_21 0009  
                                  i1l2461 06E4                                    i1l2349 06F4  
                                  i1l2463 06E5                                    i1l2471 069E  
                                  u106_20 06DC                                    u114_20 04EC  
                                  u202_20 000E                                    i1l2465 06E8  
                                  u106_21 06DB                                    u114_21 04EB  
                                  i1l2473 06AB                                    u202_21 000D  
                                  i1l2459 0701                                    i1l2467 06EE  
                                  i1l2475 06AE                                    i1l2469 069C  
                                  u115_20 054F                                    u123_20 0421  
                                  u203_20 0016                                    u115_21 054E  
                                  u123_21 0420                                    u203_21 0015  
                                  i1l2681 000A                                    i1l2683 000E  
                                  i1l1981 05D7                                    i1l2685 0016  
                                  i1l1983 05DE                                    i1l2687 001B  
                                  i1l2679 0006                                    u116_20 0555  
                                  u124_20 042B                                    u204_20 001B  
                                  i1l1985 05EC                                    i1l1993 0754  
                                  u116_21 0554                                    u124_21 0428  
                                  i1l2689 0020                                    u204_21 001A  
                                  i1l1987 05F3                                    i1l1995 06D4  
                                  i1l1989 05F4                                    i1l1997 06DC  
                                  i1l1999 06E0                                    u109_20 0627  
                                  u117_20 055C                                    u205_20 0020  
                                  u109_21 0626                                    u117_21 055B  
                                  u205_21 001F                                    u125_24 042D  
                                  u126_20 043E                                    u126_21 043D  
                                  u127_20 0448                                    u127_21 0445  
                                  u215_27 0563                                    u128_24 044A  
                                  u216_27 061E                                    u217_27 05E5  
                                  u154_20 06FB                                    u170_20 06AB  
                                  u154_21 06FA                                    u170_21 06AA  
                                  _FVRCON 0117                                    u167_20 070B  
                                  u167_21 0708                                    u168_24 070D  
                                  u169_20 06EE                                    u169_21 06ED  
                        _GOOD_WSP_VOLTAGE 0764                                    _OSCCON 0099  
                                  _WDTCON 0097             __end_of_EEPROM_WriteShortLong 03D0  
                    ?i1_ADC_GetConversion 0070                          __end_of_get_jump 0486  
                        __end_of_get_time 0135                          __end_of_go_close 05D7  
                                  ___bmul 0645                      _switch_zum$intlevel0 06C7  
                        ?_TMR0_Initialize 0070                         ??_EEPROM_ReadByte 0020  
                        __end_of_fun_work 0391                                    _time_s 0055  
                __end_of_EEPROM_WriteByte 054B                                 ??_get_adr 0023  
                               ??_get_fun 0024                                 ??_go_open 0020  
                    __end_of_get_fun_full 0281                           ?_WDT_Initialize 0070  
                          get_measure@res 0075                    EEPROM_WriteByte@status 0024  
                ADC_GetConversion@channel 0023                                 ??_povorot 0022  
                 __end_of_TMR2_StartTimer 076D  TMR0_SetInterruptHandler@InterruptHandler 0020  
TMR2_SetInterruptHandler@InterruptHandler 0020                      __end_of_go_close_alt 0754  
                       _SYSTEM_Initialize 065B                   __end_of__initialization 003C  
                   __end_of_TMR2_CallBack 0701                        ?_SYSTEM_Initialize 0070  
                            ?_toggle_tone 0070                     ??i1_ADC_GetConversion 0072  
                     ___bmul@multiplicand 0020                  EEPROM_ReadShortLong@addr 002F  
                          __pcstackCOMMON 0070                 get_jump_full@jump_counter 005A  
                     ??_SYSTEM_Initialize 0023                                 ?_TMR0_ISR 0070  
                               ?_TMR2_ISR 0070                     __end_of_ROTATION_TIME 0764  
                        ?_TMR2_Initialize 0070                i1ADC_GetConversion@channel 0073  
                            ?_start_alarm 0070                            _OPTION_REGbits 0095  
                            ?_start_setup 0070                              i1_switch_zum 0701  
               __end_of_SYSTEM_Initialize 0671                                __pbssBANK0 0049  
                              __pbssBANK1 00A0                          ??_FVR_Initialize 0020  
                              __pmaintext 05F6                                   ?___bmul 0020  
        __end_of_TMR0_SetInterruptHandler 074A                                ??_TMR0_ISR 0070  
                              ??_TMR2_ISR 0078                                __pintentry 0004  
                        get_jump_full@res 0025                                _get_eeprom 072A  
                                 _OSCTUNE 0098                          ?_TMR2_StartTimer 0070  
                               ?_get_jump 0070                                 ?_get_time 0070  
                               ?_go_close 0070                                 ?_fun_work 0070  
                    _ADC_InterruptHandler 0058                ??_TMR2_SetInterruptHandler 0022  
                __end_of_GOOD_WSP_VOLTAGE 0767                                   __ptext1 0575  
                                 __ptext2 0486                       get_measure@measures 007B  
                                 __ptext3 030B                                   __ptext4 023A  
                                 __ptext5 072A                                   __ptext6 003F  
                                 __ptext7 0645                                   __ptext8 0281  
                                 __ptext9 0135                                   _get_adr 0135  
                                 _get_fun 03D0                                   _go_open 070E  
                   _OSCILLATOR_Initialize 0731                                 _T2CONbits 001C  
                ??_PIN_MANAGER_Initialize 0020                              ??i1_go_close 0070  
                                 _povorot 02C7                                   clrloop0 0739  
                              ??_get_jump 0024                                ??_get_time 0030  
                              ??_go_close 0020                         __end_of_rele_tick 0575  
                    end_of_initialization 003C                                ??_fun_work 0026  
                         _EEPROM_ReadByte 062C                              _get_fun_full 023A  
                      __end_ofi1_go_close 05F6                     __end_of_get_jump_full 034E  
                           _sec_tick_work 040E                                _time_pow_s 005E  
                            _go_close_alt 074F                          ??_WDT_Initialize 0020  
                _TMR0_SetInterruptHandler 0744                         ?_EEPROM_WriteByte 0020  
                       __end_of_switch_wm 0597                            get_voltage@buf 0035  
                          get_voltage@res 0033                               ?_get_eeprom 0070  
                      ??_EEPROM_WriteByte 0021                                get_adr@adr 0024  
                              get_adr@buf 0038                                 _TRISAbits 008C  
                               _TRISCbits 008E                           get_fun_full@res 0025  
                              get_fun@res 0025                        EEPROM_WriteByte@dt 0020  
            __end_of_EEPROM_ReadShortLong 02C7                             ??_get_measure 0074  
                   _EEPROM_WriteShortLong 0391                                _switch_zum 06C4  
    __end_of_TMR2_DefaultInterruptHandler 076E              _TMR2_DefaultInterruptHandler 076D  
                          __end_of___bmul 065B                            ?_sec_tick_work 0070  
                           ??_get_voltage 002E                            _ADC_Initialize 0722  
                  ?_OSCILLATOR_Initialize 0070                            i1_go_close_alt 0754  
                           ??_go_open_alt 0020                       start_initialization 0027  
                 __end_of_EEPROM_ReadByte 0645               __end_ofi1_ADC_GetConversion 062C  
                                ??___bmul 0021                    __end_of_ADC_Initialize 072A  
                     __end_of_get_measure 04F0                    __end_ofi1_go_close_alt 0759  
           ?_TMR2_DefaultInterruptHandler 0070                               __pbssCOMMON 0078  
                     __end_of_get_voltage 023A                                 ___latbits 0000  
                           __pcstackBANK0 0020                       __end_of_go_open_alt 074F  
                        _START_EEPROM_ADR 005F                     _TMR0_InterruptHandler 0060  
                               __pnvBANK0 0060                    ?_EEPROM_WriteShortLong 0025  
                  _PIN_MANAGER_Initialize 0687                           ??_sec_tick_work 0077  
                             ?_switch_zum 0070                           ?_ADC_Initialize 0070  
                               beep@count 0020                           ?i1_go_close_alt 0070  
            ??_INTERRUPT_InterruptManager 0078               EEPROM_WriteShortLong@ucData 0025  
                                ?_get_adr 0070                                  ?_get_fun 0070  
                                ?_go_open 0070                      _EEPROM_ReadShortLong 0281  
                       sec_tick_work@iled 007A                                  ?_povorot 0070  
                      get_time@time_count 003E                          ?_EEPROM_ReadByte 0070  
                       ??_TMR0_Initialize 0022                         get_jump_full@flag 0027  
                                _LATAbits 010C                                  _LATCbits 010E  
                               _rele_tick 054B                                 clear_ram0 0738  
                           _TMR2_CallBack 06F4                                  _PIE1bits 0091  
                             _get_measure 04BE                ??_TMR0_SetInterruptHandler 0022  
                                _PIR1bits 0011                                  _TMR0_ISR 06E4  
                                _TMR2_ISR 069C                             _ROTATION_TIME 0761  
                             _get_voltage 01D8                                _ADCON0bits 009D  
                   ?_EEPROM_ReadShortLong 0023                                  _WPUAbits 020C  
                                _WPUCbits 020E                                 get_time@i 0044  
                               get_time@q 0046                              ??_get_eeprom 0049  
          ??_TMR2_DefaultInterruptHandler 0070                               _go_open_alt 074A  
               ?_TMR2_SetInterruptHandler 0020                         get_time@adr_error 003D  
                               _switch_wm 0575                         ??_TMR2_Initialize 0022  
                          ?_TMR2_CallBack 0070                                ?_rele_tick 0070  
                           ??_toggle_tone 0070                         _ADC_GetConversion 0597  
                      __end_of_get_eeprom 0731                   ??_OSCILLATOR_Initialize 0020  
                      ?_ADC_GetConversion 0020                    EEPROM_ReadShortLong@dt 002C  
                           ??_start_alarm 0072                                _ANSELAbits 018C  
                              _ANSELCbits 018E                       ??_ADC_GetConversion 0022  
                           ??_start_setup 0049                   EEPROM_WriteShortLong@dt 002C  
                              ?_switch_wm 0070                        get_voltage@buf_800 0030  
                                __ptext10 076A                                  __ptext11 065B  
                                __ptext20 0722                                  __ptext12 0759  
                                __ptext21 02C7                                  __ptext13 06B1  
                                __ptext30 074A                                  __ptext22 01D8  
                                __ptext14 073E                                  __ptext31 070E  
                                __ptext23 0391                                  __ptext15 0671  
                                __ptext40 040E                                  __ptext32 074F  
                                __ptext24 0520                                  __ptext16 0744  
                                __ptext41 0718                                  __ptext33 05B8  
                                __ptext25 062C                                  __ptext17 0687  
                                __ptext50 0701                                  __ptext42 054B  
                                __ptext34 04F0                                  __ptext26 044C  
                                __ptext18 0731                                  __ptext43 04BE  
                                __ptext35 06C4                                  __ptext27 03D0  
                                __ptext19 075D                                  __ptext44 0611  
                                __ptext28 0597                                  __ptext45 06D4  
                                __ptext37 069C                                  __ptext29 034E  
                                __ptext46 0754                                  __ptext38 06F4  
                                __ptext47 05D7                                  __ptext39 076D  
                                __ptext48 06E4                                  __ptext49 076E  
                           ?i1_switch_zum 0070                                  beep@time 0023  
                                _get_jump 044C                                  _get_time 003F  
                                _go_close 05B8                           _BAD_WSP_VOLTAGE 0767  
                                _fun_work 034E      __end_of_TMR0_DefaultInterruptHandler 076F  
            _TMR0_DefaultInterruptHandler 076E                 __end_of_ADC_GetConversion 05B8  
                                int$flags 007E                                  get_adr@i 0034  
                                get_adr@q 0035                         ??_TMR2_StartTimer 0020  
                     __end_of_toggle_tone 0722        __end_of_INTERRUPT_InterruptManager 0026  
              _INTERRUPT_InterruptManager 0004                    ??_EEPROM_ReadShortLong 0026  
                    get_jump@jump_counter 005B                                _INTCONbits 000B  
                              _FVRCONbits 0117                            ??i1_switch_zum 0070  
                     __end_of_start_alarm 06E4                       __end_of_start_setup 04BE  
                                intlevel1 0000                           ??_TMR2_CallBack 0078  
                 ??_EEPROM_WriteShortLong 0028                 EEPROM_WriteShortLong@addr 002D  
                 ?_PIN_MANAGER_Initialize 0070                               ??_rele_tick 0070  
                     EEPROM_ReadByte@addr 0022                          ??_ADC_Initialize 0020  
           ?_TMR0_DefaultInterruptHandler 0070                          ??i1_go_close_alt 0070  
                            ??_switch_zum 0020                             _get_jump_full 030B  
                           __pstringtext1 0761                             __pstringtext2 0764  
                           __pstringtext3 0767                            _FVR_Initialize 075D  
                              _OPTION_REG 0095                          get_voltage@q_801 0036  
                   TMR2_ISR@CountCallBack 0078                           _TMR0_Initialize 0671  
                 __end_of_BAD_WSP_VOLTAGE 076A                               ??_switch_wm 0026  
                            get_adr@F2639 00A0                        __end_of_switch_zum 06D4  
          __end_of_PIN_MANAGER_Initialize 069C                          _EEPROM_WriteByte 0520  
                            get_adr@i_811 0036                              get_adr@q_810 0037  
                   _TMR2_InterruptHandler 0062                               _toggle_tone 0718  
                           ?_get_fun_full 0070                              ?_get_measure 0070  
