

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Thu May 05 09:38:06 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F1823
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	intentry,global,class=CODE,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,delta=2
    60                           	psect	text45,local,class=CODE,merge=1,delta=2
    61                           	psect	text46,local,class=CODE,merge=1,delta=2
    62                           	psect	text47,local,class=CODE,merge=1,delta=2
    63                           	psect	text48,local,class=CODE,merge=1,delta=2
    64                           	psect	text49,local,class=CODE,merge=1,delta=2
    65                           	psect	text50,local,class=CODE,merge=1,delta=2
    66                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    67                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    68                           	dabs	1,0x7E,2
    69  0000                     
    70                           ; Version 2.40
    71                           ; Generated 17/11/2021 GMT
    72                           ; 
    73                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution. Publication is not required when
    87                           ;        this file is used in an embedded application.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC16F1823 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     	;# 
   106  0001                     	;# 
   107  0002                     	;# 
   108  0003                     	;# 
   109  0004                     	;# 
   110  0005                     	;# 
   111  0006                     	;# 
   112  0007                     	;# 
   113  0008                     	;# 
   114  0009                     	;# 
   115  000A                     	;# 
   116  000B                     	;# 
   117  000C                     	;# 
   118  000E                     	;# 
   119  0011                     	;# 
   120  0012                     	;# 
   121  0015                     	;# 
   122  0016                     	;# 
   123  0016                     	;# 
   124  0017                     	;# 
   125  0018                     	;# 
   126  0019                     	;# 
   127  001A                     	;# 
   128  001B                     	;# 
   129  001C                     	;# 
   130  001E                     	;# 
   131  001F                     	;# 
   132  008C                     	;# 
   133  008E                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0095                     	;# 
   137  0096                     	;# 
   138  0097                     	;# 
   139  0098                     	;# 
   140  0099                     	;# 
   141  009A                     	;# 
   142  009B                     	;# 
   143  009B                     	;# 
   144  009C                     	;# 
   145  009D                     	;# 
   146  009E                     	;# 
   147  010C                     	;# 
   148  010E                     	;# 
   149  0111                     	;# 
   150  0112                     	;# 
   151  0113                     	;# 
   152  0114                     	;# 
   153  0115                     	;# 
   154  0116                     	;# 
   155  0117                     	;# 
   156  0118                     	;# 
   157  0119                     	;# 
   158  011A                     	;# 
   159  011B                     	;# 
   160  011D                     	;# 
   161  011D                     	;# 
   162  018C                     	;# 
   163  018E                     	;# 
   164  0191                     	;# 
   165  0191                     	;# 
   166  0192                     	;# 
   167  0193                     	;# 
   168  0193                     	;# 
   169  0193                     	;# 
   170  0194                     	;# 
   171  0195                     	;# 
   172  0196                     	;# 
   173  0199                     	;# 
   174  019A                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019D                     	;# 
   182  019E                     	;# 
   183  019F                     	;# 
   184  020C                     	;# 
   185  020E                     	;# 
   186  0211                     	;# 
   187  0211                     	;# 
   188  0212                     	;# 
   189  0212                     	;# 
   190  0213                     	;# 
   191  0213                     	;# 
   192  0214                     	;# 
   193  0214                     	;# 
   194  0215                     	;# 
   195  0215                     	;# 
   196  0215                     	;# 
   197  0216                     	;# 
   198  0216                     	;# 
   199  0217                     	;# 
   200  0217                     	;# 
   201  0291                     	;# 
   202  0291                     	;# 
   203  0292                     	;# 
   204  0293                     	;# 
   205  0294                     	;# 
   206  0295                     	;# 
   207  0295                     	;# 
   208  0296                     	;# 
   209  0391                     	;# 
   210  0392                     	;# 
   211  0393                     	;# 
   212  039A                     	;# 
   213  039C                     	;# 
   214  039D                     	;# 
   215  039E                     	;# 
   216  039F                     	;# 
   217  0FE4                     	;# 
   218  0FE5                     	;# 
   219  0FE6                     	;# 
   220  0FE7                     	;# 
   221  0FE8                     	;# 
   222  0FE9                     	;# 
   223  0FEA                     	;# 
   224  0FEB                     	;# 
   225  0FED                     	;# 
   226  0FEE                     	;# 
   227  0FEF                     	;# 
   228  0000                     	;# 
   229  0001                     	;# 
   230  0002                     	;# 
   231  0003                     	;# 
   232  0004                     	;# 
   233  0005                     	;# 
   234  0006                     	;# 
   235  0007                     	;# 
   236  0008                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000E                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0015                     	;# 
   245  0016                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001C                     	;# 
   253  001E                     	;# 
   254  001F                     	;# 
   255  008C                     	;# 
   256  008E                     	;# 
   257  0091                     	;# 
   258  0092                     	;# 
   259  0095                     	;# 
   260  0096                     	;# 
   261  0097                     	;# 
   262  0098                     	;# 
   263  0099                     	;# 
   264  009A                     	;# 
   265  009B                     	;# 
   266  009B                     	;# 
   267  009C                     	;# 
   268  009D                     	;# 
   269  009E                     	;# 
   270  010C                     	;# 
   271  010E                     	;# 
   272  0111                     	;# 
   273  0112                     	;# 
   274  0113                     	;# 
   275  0114                     	;# 
   276  0115                     	;# 
   277  0116                     	;# 
   278  0117                     	;# 
   279  0118                     	;# 
   280  0119                     	;# 
   281  011A                     	;# 
   282  011B                     	;# 
   283  011D                     	;# 
   284  011D                     	;# 
   285  018C                     	;# 
   286  018E                     	;# 
   287  0191                     	;# 
   288  0191                     	;# 
   289  0192                     	;# 
   290  0193                     	;# 
   291  0193                     	;# 
   292  0193                     	;# 
   293  0194                     	;# 
   294  0195                     	;# 
   295  0196                     	;# 
   296  0199                     	;# 
   297  019A                     	;# 
   298  019B                     	;# 
   299  019B                     	;# 
   300  019B                     	;# 
   301  019B                     	;# 
   302  019C                     	;# 
   303  019C                     	;# 
   304  019D                     	;# 
   305  019E                     	;# 
   306  019F                     	;# 
   307  020C                     	;# 
   308  020E                     	;# 
   309  0211                     	;# 
   310  0211                     	;# 
   311  0212                     	;# 
   312  0212                     	;# 
   313  0213                     	;# 
   314  0213                     	;# 
   315  0214                     	;# 
   316  0214                     	;# 
   317  0215                     	;# 
   318  0215                     	;# 
   319  0215                     	;# 
   320  0216                     	;# 
   321  0216                     	;# 
   322  0217                     	;# 
   323  0217                     	;# 
   324  0291                     	;# 
   325  0291                     	;# 
   326  0292                     	;# 
   327  0293                     	;# 
   328  0294                     	;# 
   329  0295                     	;# 
   330  0295                     	;# 
   331  0296                     	;# 
   332  0391                     	;# 
   333  0392                     	;# 
   334  0393                     	;# 
   335  039A                     	;# 
   336  039C                     	;# 
   337  039D                     	;# 
   338  039E                     	;# 
   339  039F                     	;# 
   340  0FE4                     	;# 
   341  0FE5                     	;# 
   342  0FE6                     	;# 
   343  0FE7                     	;# 
   344  0FE8                     	;# 
   345  0FE9                     	;# 
   346  0FEA                     	;# 
   347  0FEB                     	;# 
   348  0FED                     	;# 
   349  0FEE                     	;# 
   350  0FEF                     	;# 
   351  0000                     	;# 
   352  0001                     	;# 
   353  0002                     	;# 
   354  0003                     	;# 
   355  0004                     	;# 
   356  0005                     	;# 
   357  0006                     	;# 
   358  0007                     	;# 
   359  0008                     	;# 
   360  0009                     	;# 
   361  000A                     	;# 
   362  000B                     	;# 
   363  000C                     	;# 
   364  000E                     	;# 
   365  0011                     	;# 
   366  0012                     	;# 
   367  0015                     	;# 
   368  0016                     	;# 
   369  0016                     	;# 
   370  0017                     	;# 
   371  0018                     	;# 
   372  0019                     	;# 
   373  001A                     	;# 
   374  001B                     	;# 
   375  001C                     	;# 
   376  001E                     	;# 
   377  001F                     	;# 
   378  008C                     	;# 
   379  008E                     	;# 
   380  0091                     	;# 
   381  0092                     	;# 
   382  0095                     	;# 
   383  0096                     	;# 
   384  0097                     	;# 
   385  0098                     	;# 
   386  0099                     	;# 
   387  009A                     	;# 
   388  009B                     	;# 
   389  009B                     	;# 
   390  009C                     	;# 
   391  009D                     	;# 
   392  009E                     	;# 
   393  010C                     	;# 
   394  010E                     	;# 
   395  0111                     	;# 
   396  0112                     	;# 
   397  0113                     	;# 
   398  0114                     	;# 
   399  0115                     	;# 
   400  0116                     	;# 
   401  0117                     	;# 
   402  0118                     	;# 
   403  0119                     	;# 
   404  011A                     	;# 
   405  011B                     	;# 
   406  011D                     	;# 
   407  011D                     	;# 
   408  018C                     	;# 
   409  018E                     	;# 
   410  0191                     	;# 
   411  0191                     	;# 
   412  0192                     	;# 
   413  0193                     	;# 
   414  0193                     	;# 
   415  0193                     	;# 
   416  0194                     	;# 
   417  0195                     	;# 
   418  0196                     	;# 
   419  0199                     	;# 
   420  019A                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019C                     	;# 
   426  019C                     	;# 
   427  019D                     	;# 
   428  019E                     	;# 
   429  019F                     	;# 
   430  020C                     	;# 
   431  020E                     	;# 
   432  0211                     	;# 
   433  0211                     	;# 
   434  0212                     	;# 
   435  0212                     	;# 
   436  0213                     	;# 
   437  0213                     	;# 
   438  0214                     	;# 
   439  0214                     	;# 
   440  0215                     	;# 
   441  0215                     	;# 
   442  0215                     	;# 
   443  0216                     	;# 
   444  0216                     	;# 
   445  0217                     	;# 
   446  0217                     	;# 
   447  0291                     	;# 
   448  0291                     	;# 
   449  0292                     	;# 
   450  0293                     	;# 
   451  0294                     	;# 
   452  0295                     	;# 
   453  0295                     	;# 
   454  0296                     	;# 
   455  0391                     	;# 
   456  0392                     	;# 
   457  0393                     	;# 
   458  039A                     	;# 
   459  039C                     	;# 
   460  039D                     	;# 
   461  039E                     	;# 
   462  039F                     	;# 
   463  0FE4                     	;# 
   464  0FE5                     	;# 
   465  0FE6                     	;# 
   466  0FE7                     	;# 
   467  0FE8                     	;# 
   468  0FE9                     	;# 
   469  0FEA                     	;# 
   470  0FEB                     	;# 
   471  0FED                     	;# 
   472  0FEE                     	;# 
   473  0FEF                     	;# 
   474  0000                     	;# 
   475  0001                     	;# 
   476  0002                     	;# 
   477  0003                     	;# 
   478  0004                     	;# 
   479  0005                     	;# 
   480  0006                     	;# 
   481  0007                     	;# 
   482  0008                     	;# 
   483  0009                     	;# 
   484  000A                     	;# 
   485  000B                     	;# 
   486  000C                     	;# 
   487  000E                     	;# 
   488  0011                     	;# 
   489  0012                     	;# 
   490  0015                     	;# 
   491  0016                     	;# 
   492  0016                     	;# 
   493  0017                     	;# 
   494  0018                     	;# 
   495  0019                     	;# 
   496  001A                     	;# 
   497  001B                     	;# 
   498  001C                     	;# 
   499  001E                     	;# 
   500  001F                     	;# 
   501  008C                     	;# 
   502  008E                     	;# 
   503  0091                     	;# 
   504  0092                     	;# 
   505  0095                     	;# 
   506  0096                     	;# 
   507  0097                     	;# 
   508  0098                     	;# 
   509  0099                     	;# 
   510  009A                     	;# 
   511  009B                     	;# 
   512  009B                     	;# 
   513  009C                     	;# 
   514  009D                     	;# 
   515  009E                     	;# 
   516  010C                     	;# 
   517  010E                     	;# 
   518  0111                     	;# 
   519  0112                     	;# 
   520  0113                     	;# 
   521  0114                     	;# 
   522  0115                     	;# 
   523  0116                     	;# 
   524  0117                     	;# 
   525  0118                     	;# 
   526  0119                     	;# 
   527  011A                     	;# 
   528  011B                     	;# 
   529  011D                     	;# 
   530  011D                     	;# 
   531  018C                     	;# 
   532  018E                     	;# 
   533  0191                     	;# 
   534  0191                     	;# 
   535  0192                     	;# 
   536  0193                     	;# 
   537  0193                     	;# 
   538  0193                     	;# 
   539  0194                     	;# 
   540  0195                     	;# 
   541  0196                     	;# 
   542  0199                     	;# 
   543  019A                     	;# 
   544  019B                     	;# 
   545  019B                     	;# 
   546  019B                     	;# 
   547  019B                     	;# 
   548  019C                     	;# 
   549  019C                     	;# 
   550  019D                     	;# 
   551  019E                     	;# 
   552  019F                     	;# 
   553  020C                     	;# 
   554  020E                     	;# 
   555  0211                     	;# 
   556  0211                     	;# 
   557  0212                     	;# 
   558  0212                     	;# 
   559  0213                     	;# 
   560  0213                     	;# 
   561  0214                     	;# 
   562  0214                     	;# 
   563  0215                     	;# 
   564  0215                     	;# 
   565  0215                     	;# 
   566  0216                     	;# 
   567  0216                     	;# 
   568  0217                     	;# 
   569  0217                     	;# 
   570  0291                     	;# 
   571  0291                     	;# 
   572  0292                     	;# 
   573  0293                     	;# 
   574  0294                     	;# 
   575  0295                     	;# 
   576  0295                     	;# 
   577  0296                     	;# 
   578  0391                     	;# 
   579  0392                     	;# 
   580  0393                     	;# 
   581  039A                     	;# 
   582  039C                     	;# 
   583  039D                     	;# 
   584  039E                     	;# 
   585  039F                     	;# 
   586  0FE4                     	;# 
   587  0FE5                     	;# 
   588  0FE6                     	;# 
   589  0FE7                     	;# 
   590  0FE8                     	;# 
   591  0FE9                     	;# 
   592  0FEA                     	;# 
   593  0FEB                     	;# 
   594  0FED                     	;# 
   595  0FEE                     	;# 
   596  0FEF                     	;# 
   597  0000                     	;# 
   598  0001                     	;# 
   599  0002                     	;# 
   600  0003                     	;# 
   601  0004                     	;# 
   602  0005                     	;# 
   603  0006                     	;# 
   604  0007                     	;# 
   605  0008                     	;# 
   606  0009                     	;# 
   607  000A                     	;# 
   608  000B                     	;# 
   609  000C                     	;# 
   610  000E                     	;# 
   611  0011                     	;# 
   612  0012                     	;# 
   613  0015                     	;# 
   614  0016                     	;# 
   615  0016                     	;# 
   616  0017                     	;# 
   617  0018                     	;# 
   618  0019                     	;# 
   619  001A                     	;# 
   620  001B                     	;# 
   621  001C                     	;# 
   622  001E                     	;# 
   623  001F                     	;# 
   624  008C                     	;# 
   625  008E                     	;# 
   626  0091                     	;# 
   627  0092                     	;# 
   628  0095                     	;# 
   629  0096                     	;# 
   630  0097                     	;# 
   631  0098                     	;# 
   632  0099                     	;# 
   633  009A                     	;# 
   634  009B                     	;# 
   635  009B                     	;# 
   636  009C                     	;# 
   637  009D                     	;# 
   638  009E                     	;# 
   639  010C                     	;# 
   640  010E                     	;# 
   641  0111                     	;# 
   642  0112                     	;# 
   643  0113                     	;# 
   644  0114                     	;# 
   645  0115                     	;# 
   646  0116                     	;# 
   647  0117                     	;# 
   648  0118                     	;# 
   649  0119                     	;# 
   650  011A                     	;# 
   651  011B                     	;# 
   652  011D                     	;# 
   653  011D                     	;# 
   654  018C                     	;# 
   655  018E                     	;# 
   656  0191                     	;# 
   657  0191                     	;# 
   658  0192                     	;# 
   659  0193                     	;# 
   660  0193                     	;# 
   661  0193                     	;# 
   662  0194                     	;# 
   663  0195                     	;# 
   664  0196                     	;# 
   665  0199                     	;# 
   666  019A                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019B                     	;# 
   671  019C                     	;# 
   672  019C                     	;# 
   673  019D                     	;# 
   674  019E                     	;# 
   675  019F                     	;# 
   676  020C                     	;# 
   677  020E                     	;# 
   678  0211                     	;# 
   679  0211                     	;# 
   680  0212                     	;# 
   681  0212                     	;# 
   682  0213                     	;# 
   683  0213                     	;# 
   684  0214                     	;# 
   685  0214                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0215                     	;# 
   689  0216                     	;# 
   690  0216                     	;# 
   691  0217                     	;# 
   692  0217                     	;# 
   693  0291                     	;# 
   694  0291                     	;# 
   695  0292                     	;# 
   696  0293                     	;# 
   697  0294                     	;# 
   698  0295                     	;# 
   699  0295                     	;# 
   700  0296                     	;# 
   701  0391                     	;# 
   702  0392                     	;# 
   703  0393                     	;# 
   704  039A                     	;# 
   705  039C                     	;# 
   706  039D                     	;# 
   707  039E                     	;# 
   708  039F                     	;# 
   709  0FE4                     	;# 
   710  0FE5                     	;# 
   711  0FE6                     	;# 
   712  0FE7                     	;# 
   713  0FE8                     	;# 
   714  0FE9                     	;# 
   715  0FEA                     	;# 
   716  0FEB                     	;# 
   717  0FED                     	;# 
   718  0FEE                     	;# 
   719  0FEF                     	;# 
   720  0000                     	;# 
   721  0001                     	;# 
   722  0002                     	;# 
   723  0003                     	;# 
   724  0004                     	;# 
   725  0005                     	;# 
   726  0006                     	;# 
   727  0007                     	;# 
   728  0008                     	;# 
   729  0009                     	;# 
   730  000A                     	;# 
   731  000B                     	;# 
   732  000C                     	;# 
   733  000E                     	;# 
   734  0011                     	;# 
   735  0012                     	;# 
   736  0015                     	;# 
   737  0016                     	;# 
   738  0016                     	;# 
   739  0017                     	;# 
   740  0018                     	;# 
   741  0019                     	;# 
   742  001A                     	;# 
   743  001B                     	;# 
   744  001C                     	;# 
   745  001E                     	;# 
   746  001F                     	;# 
   747  008C                     	;# 
   748  008E                     	;# 
   749  0091                     	;# 
   750  0092                     	;# 
   751  0095                     	;# 
   752  0096                     	;# 
   753  0097                     	;# 
   754  0098                     	;# 
   755  0099                     	;# 
   756  009A                     	;# 
   757  009B                     	;# 
   758  009B                     	;# 
   759  009C                     	;# 
   760  009D                     	;# 
   761  009E                     	;# 
   762  010C                     	;# 
   763  010E                     	;# 
   764  0111                     	;# 
   765  0112                     	;# 
   766  0113                     	;# 
   767  0114                     	;# 
   768  0115                     	;# 
   769  0116                     	;# 
   770  0117                     	;# 
   771  0118                     	;# 
   772  0119                     	;# 
   773  011A                     	;# 
   774  011B                     	;# 
   775  011D                     	;# 
   776  011D                     	;# 
   777  018C                     	;# 
   778  018E                     	;# 
   779  0191                     	;# 
   780  0191                     	;# 
   781  0192                     	;# 
   782  0193                     	;# 
   783  0193                     	;# 
   784  0193                     	;# 
   785  0194                     	;# 
   786  0195                     	;# 
   787  0196                     	;# 
   788  0199                     	;# 
   789  019A                     	;# 
   790  019B                     	;# 
   791  019B                     	;# 
   792  019B                     	;# 
   793  019B                     	;# 
   794  019C                     	;# 
   795  019C                     	;# 
   796  019D                     	;# 
   797  019E                     	;# 
   798  019F                     	;# 
   799  020C                     	;# 
   800  020E                     	;# 
   801  0211                     	;# 
   802  0211                     	;# 
   803  0212                     	;# 
   804  0212                     	;# 
   805  0213                     	;# 
   806  0213                     	;# 
   807  0214                     	;# 
   808  0214                     	;# 
   809  0215                     	;# 
   810  0215                     	;# 
   811  0215                     	;# 
   812  0216                     	;# 
   813  0216                     	;# 
   814  0217                     	;# 
   815  0217                     	;# 
   816  0291                     	;# 
   817  0291                     	;# 
   818  0292                     	;# 
   819  0293                     	;# 
   820  0294                     	;# 
   821  0295                     	;# 
   822  0295                     	;# 
   823  0296                     	;# 
   824  0391                     	;# 
   825  0392                     	;# 
   826  0393                     	;# 
   827  039A                     	;# 
   828  039C                     	;# 
   829  039D                     	;# 
   830  039E                     	;# 
   831  039F                     	;# 
   832  0FE4                     	;# 
   833  0FE5                     	;# 
   834  0FE6                     	;# 
   835  0FE7                     	;# 
   836  0FE8                     	;# 
   837  0FE9                     	;# 
   838  0FEA                     	;# 
   839  0FEB                     	;# 
   840  0FED                     	;# 
   841  0FEE                     	;# 
   842  0FEF                     	;# 
   843  0000                     	;# 
   844  0001                     	;# 
   845  0002                     	;# 
   846  0003                     	;# 
   847  0004                     	;# 
   848  0005                     	;# 
   849  0006                     	;# 
   850  0007                     	;# 
   851  0008                     	;# 
   852  0009                     	;# 
   853  000A                     	;# 
   854  000B                     	;# 
   855  000C                     	;# 
   856  000E                     	;# 
   857  0011                     	;# 
   858  0012                     	;# 
   859  0015                     	;# 
   860  0016                     	;# 
   861  0016                     	;# 
   862  0017                     	;# 
   863  0018                     	;# 
   864  0019                     	;# 
   865  001A                     	;# 
   866  001B                     	;# 
   867  001C                     	;# 
   868  001E                     	;# 
   869  001F                     	;# 
   870  008C                     	;# 
   871  008E                     	;# 
   872  0091                     	;# 
   873  0092                     	;# 
   874  0095                     	;# 
   875  0096                     	;# 
   876  0097                     	;# 
   877  0098                     	;# 
   878  0099                     	;# 
   879  009A                     	;# 
   880  009B                     	;# 
   881  009B                     	;# 
   882  009C                     	;# 
   883  009D                     	;# 
   884  009E                     	;# 
   885  010C                     	;# 
   886  010E                     	;# 
   887  0111                     	;# 
   888  0112                     	;# 
   889  0113                     	;# 
   890  0114                     	;# 
   891  0115                     	;# 
   892  0116                     	;# 
   893  0117                     	;# 
   894  0118                     	;# 
   895  0119                     	;# 
   896  011A                     	;# 
   897  011B                     	;# 
   898  011D                     	;# 
   899  011D                     	;# 
   900  018C                     	;# 
   901  018E                     	;# 
   902  0191                     	;# 
   903  0191                     	;# 
   904  0192                     	;# 
   905  0193                     	;# 
   906  0193                     	;# 
   907  0193                     	;# 
   908  0194                     	;# 
   909  0195                     	;# 
   910  0196                     	;# 
   911  0199                     	;# 
   912  019A                     	;# 
   913  019B                     	;# 
   914  019B                     	;# 
   915  019B                     	;# 
   916  019B                     	;# 
   917  019C                     	;# 
   918  019C                     	;# 
   919  019D                     	;# 
   920  019E                     	;# 
   921  019F                     	;# 
   922  020C                     	;# 
   923  020E                     	;# 
   924  0211                     	;# 
   925  0211                     	;# 
   926  0212                     	;# 
   927  0212                     	;# 
   928  0213                     	;# 
   929  0213                     	;# 
   930  0214                     	;# 
   931  0214                     	;# 
   932  0215                     	;# 
   933  0215                     	;# 
   934  0215                     	;# 
   935  0216                     	;# 
   936  0216                     	;# 
   937  0217                     	;# 
   938  0217                     	;# 
   939  0291                     	;# 
   940  0291                     	;# 
   941  0292                     	;# 
   942  0293                     	;# 
   943  0294                     	;# 
   944  0295                     	;# 
   945  0295                     	;# 
   946  0296                     	;# 
   947  0391                     	;# 
   948  0392                     	;# 
   949  0393                     	;# 
   950  039A                     	;# 
   951  039C                     	;# 
   952  039D                     	;# 
   953  039E                     	;# 
   954  039F                     	;# 
   955  0FE4                     	;# 
   956  0FE5                     	;# 
   957  0FE6                     	;# 
   958  0FE7                     	;# 
   959  0FE8                     	;# 
   960  0FE9                     	;# 
   961  0FEA                     	;# 
   962  0FEB                     	;# 
   963  0FED                     	;# 
   964  0FEE                     	;# 
   965  0FEF                     	;# 
   966  0000                     	;# 
   967  0001                     	;# 
   968  0002                     	;# 
   969  0003                     	;# 
   970  0004                     	;# 
   971  0005                     	;# 
   972  0006                     	;# 
   973  0007                     	;# 
   974  0008                     	;# 
   975  0009                     	;# 
   976  000A                     	;# 
   977  000B                     	;# 
   978  000C                     	;# 
   979  000E                     	;# 
   980  0011                     	;# 
   981  0012                     	;# 
   982  0015                     	;# 
   983  0016                     	;# 
   984  0016                     	;# 
   985  0017                     	;# 
   986  0018                     	;# 
   987  0019                     	;# 
   988  001A                     	;# 
   989  001B                     	;# 
   990  001C                     	;# 
   991  001E                     	;# 
   992  001F                     	;# 
   993  008C                     	;# 
   994  008E                     	;# 
   995  0091                     	;# 
   996  0092                     	;# 
   997  0095                     	;# 
   998  0096                     	;# 
   999  0097                     	;# 
  1000  0098                     	;# 
  1001  0099                     	;# 
  1002  009A                     	;# 
  1003  009B                     	;# 
  1004  009B                     	;# 
  1005  009C                     	;# 
  1006  009D                     	;# 
  1007  009E                     	;# 
  1008  010C                     	;# 
  1009  010E                     	;# 
  1010  0111                     	;# 
  1011  0112                     	;# 
  1012  0113                     	;# 
  1013  0114                     	;# 
  1014  0115                     	;# 
  1015  0116                     	;# 
  1016  0117                     	;# 
  1017  0118                     	;# 
  1018  0119                     	;# 
  1019  011A                     	;# 
  1020  011B                     	;# 
  1021  011D                     	;# 
  1022  011D                     	;# 
  1023  018C                     	;# 
  1024  018E                     	;# 
  1025  0191                     	;# 
  1026  0191                     	;# 
  1027  0192                     	;# 
  1028  0193                     	;# 
  1029  0193                     	;# 
  1030  0193                     	;# 
  1031  0194                     	;# 
  1032  0195                     	;# 
  1033  0196                     	;# 
  1034  0199                     	;# 
  1035  019A                     	;# 
  1036  019B                     	;# 
  1037  019B                     	;# 
  1038  019B                     	;# 
  1039  019B                     	;# 
  1040  019C                     	;# 
  1041  019C                     	;# 
  1042  019D                     	;# 
  1043  019E                     	;# 
  1044  019F                     	;# 
  1045  020C                     	;# 
  1046  020E                     	;# 
  1047  0211                     	;# 
  1048  0211                     	;# 
  1049  0212                     	;# 
  1050  0212                     	;# 
  1051  0213                     	;# 
  1052  0213                     	;# 
  1053  0214                     	;# 
  1054  0214                     	;# 
  1055  0215                     	;# 
  1056  0215                     	;# 
  1057  0215                     	;# 
  1058  0216                     	;# 
  1059  0216                     	;# 
  1060  0217                     	;# 
  1061  0217                     	;# 
  1062  0291                     	;# 
  1063  0291                     	;# 
  1064  0292                     	;# 
  1065  0293                     	;# 
  1066  0294                     	;# 
  1067  0295                     	;# 
  1068  0295                     	;# 
  1069  0296                     	;# 
  1070  0391                     	;# 
  1071  0392                     	;# 
  1072  0393                     	;# 
  1073  039A                     	;# 
  1074  039C                     	;# 
  1075  039D                     	;# 
  1076  039E                     	;# 
  1077  039F                     	;# 
  1078  0FE4                     	;# 
  1079  0FE5                     	;# 
  1080  0FE6                     	;# 
  1081  0FE7                     	;# 
  1082  0FE8                     	;# 
  1083  0FE9                     	;# 
  1084  0FEA                     	;# 
  1085  0FEB                     	;# 
  1086  0FED                     	;# 
  1087  0FEE                     	;# 
  1088  0FEF                     	;# 
  1089  0000                     	;# 
  1090  0001                     	;# 
  1091  0002                     	;# 
  1092  0003                     	;# 
  1093  0004                     	;# 
  1094  0005                     	;# 
  1095  0006                     	;# 
  1096  0007                     	;# 
  1097  0008                     	;# 
  1098  0009                     	;# 
  1099  000A                     	;# 
  1100  000B                     	;# 
  1101  000C                     	;# 
  1102  000E                     	;# 
  1103  0011                     	;# 
  1104  0012                     	;# 
  1105  0015                     	;# 
  1106  0016                     	;# 
  1107  0016                     	;# 
  1108  0017                     	;# 
  1109  0018                     	;# 
  1110  0019                     	;# 
  1111  001A                     	;# 
  1112  001B                     	;# 
  1113  001C                     	;# 
  1114  001E                     	;# 
  1115  001F                     	;# 
  1116  008C                     	;# 
  1117  008E                     	;# 
  1118  0091                     	;# 
  1119  0092                     	;# 
  1120  0095                     	;# 
  1121  0096                     	;# 
  1122  0097                     	;# 
  1123  0098                     	;# 
  1124  0099                     	;# 
  1125  009A                     	;# 
  1126  009B                     	;# 
  1127  009B                     	;# 
  1128  009C                     	;# 
  1129  009D                     	;# 
  1130  009E                     	;# 
  1131  010C                     	;# 
  1132  010E                     	;# 
  1133  0111                     	;# 
  1134  0112                     	;# 
  1135  0113                     	;# 
  1136  0114                     	;# 
  1137  0115                     	;# 
  1138  0116                     	;# 
  1139  0117                     	;# 
  1140  0118                     	;# 
  1141  0119                     	;# 
  1142  011A                     	;# 
  1143  011B                     	;# 
  1144  011D                     	;# 
  1145  011D                     	;# 
  1146  018C                     	;# 
  1147  018E                     	;# 
  1148  0191                     	;# 
  1149  0191                     	;# 
  1150  0192                     	;# 
  1151  0193                     	;# 
  1152  0193                     	;# 
  1153  0193                     	;# 
  1154  0194                     	;# 
  1155  0195                     	;# 
  1156  0196                     	;# 
  1157  0199                     	;# 
  1158  019A                     	;# 
  1159  019B                     	;# 
  1160  019B                     	;# 
  1161  019B                     	;# 
  1162  019B                     	;# 
  1163  019C                     	;# 
  1164  019C                     	;# 
  1165  019D                     	;# 
  1166  019E                     	;# 
  1167  019F                     	;# 
  1168  020C                     	;# 
  1169  020E                     	;# 
  1170  0211                     	;# 
  1171  0211                     	;# 
  1172  0212                     	;# 
  1173  0212                     	;# 
  1174  0213                     	;# 
  1175  0213                     	;# 
  1176  0214                     	;# 
  1177  0214                     	;# 
  1178  0215                     	;# 
  1179  0215                     	;# 
  1180  0215                     	;# 
  1181  0216                     	;# 
  1182  0216                     	;# 
  1183  0217                     	;# 
  1184  0217                     	;# 
  1185  0291                     	;# 
  1186  0291                     	;# 
  1187  0292                     	;# 
  1188  0293                     	;# 
  1189  0294                     	;# 
  1190  0295                     	;# 
  1191  0295                     	;# 
  1192  0296                     	;# 
  1193  0391                     	;# 
  1194  0392                     	;# 
  1195  0393                     	;# 
  1196  039A                     	;# 
  1197  039C                     	;# 
  1198  039D                     	;# 
  1199  039E                     	;# 
  1200  039F                     	;# 
  1201  0FE4                     	;# 
  1202  0FE5                     	;# 
  1203  0FE6                     	;# 
  1204  0FE7                     	;# 
  1205  0FE8                     	;# 
  1206  0FE9                     	;# 
  1207  0FEA                     	;# 
  1208  0FEB                     	;# 
  1209  0FED                     	;# 
  1210  0FEE                     	;# 
  1211  0FEF                     	;# 
  1212  0000                     	;# 
  1213  0001                     	;# 
  1214  0002                     	;# 
  1215  0003                     	;# 
  1216  0004                     	;# 
  1217  0005                     	;# 
  1218  0006                     	;# 
  1219  0007                     	;# 
  1220  0008                     	;# 
  1221  0009                     	;# 
  1222  000A                     	;# 
  1223  000B                     	;# 
  1224  000C                     	;# 
  1225  000E                     	;# 
  1226  0011                     	;# 
  1227  0012                     	;# 
  1228  0015                     	;# 
  1229  0016                     	;# 
  1230  0016                     	;# 
  1231  0017                     	;# 
  1232  0018                     	;# 
  1233  0019                     	;# 
  1234  001A                     	;# 
  1235  001B                     	;# 
  1236  001C                     	;# 
  1237  001E                     	;# 
  1238  001F                     	;# 
  1239  008C                     	;# 
  1240  008E                     	;# 
  1241  0091                     	;# 
  1242  0092                     	;# 
  1243  0095                     	;# 
  1244  0096                     	;# 
  1245  0097                     	;# 
  1246  0098                     	;# 
  1247  0099                     	;# 
  1248  009A                     	;# 
  1249  009B                     	;# 
  1250  009B                     	;# 
  1251  009C                     	;# 
  1252  009D                     	;# 
  1253  009E                     	;# 
  1254  010C                     	;# 
  1255  010E                     	;# 
  1256  0111                     	;# 
  1257  0112                     	;# 
  1258  0113                     	;# 
  1259  0114                     	;# 
  1260  0115                     	;# 
  1261  0116                     	;# 
  1262  0117                     	;# 
  1263  0118                     	;# 
  1264  0119                     	;# 
  1265  011A                     	;# 
  1266  011B                     	;# 
  1267  011D                     	;# 
  1268  011D                     	;# 
  1269  018C                     	;# 
  1270  018E                     	;# 
  1271  0191                     	;# 
  1272  0191                     	;# 
  1273  0192                     	;# 
  1274  0193                     	;# 
  1275  0193                     	;# 
  1276  0193                     	;# 
  1277  0194                     	;# 
  1278  0195                     	;# 
  1279  0196                     	;# 
  1280  0199                     	;# 
  1281  019A                     	;# 
  1282  019B                     	;# 
  1283  019B                     	;# 
  1284  019B                     	;# 
  1285  019B                     	;# 
  1286  019C                     	;# 
  1287  019C                     	;# 
  1288  019D                     	;# 
  1289  019E                     	;# 
  1290  019F                     	;# 
  1291  020C                     	;# 
  1292  020E                     	;# 
  1293  0211                     	;# 
  1294  0211                     	;# 
  1295  0212                     	;# 
  1296  0212                     	;# 
  1297  0213                     	;# 
  1298  0213                     	;# 
  1299  0214                     	;# 
  1300  0214                     	;# 
  1301  0215                     	;# 
  1302  0215                     	;# 
  1303  0215                     	;# 
  1304  0216                     	;# 
  1305  0216                     	;# 
  1306  0217                     	;# 
  1307  0217                     	;# 
  1308  0291                     	;# 
  1309  0291                     	;# 
  1310  0292                     	;# 
  1311  0293                     	;# 
  1312  0294                     	;# 
  1313  0295                     	;# 
  1314  0295                     	;# 
  1315  0296                     	;# 
  1316  0391                     	;# 
  1317  0392                     	;# 
  1318  0393                     	;# 
  1319  039A                     	;# 
  1320  039C                     	;# 
  1321  039D                     	;# 
  1322  039E                     	;# 
  1323  039F                     	;# 
  1324  0FE4                     	;# 
  1325  0FE5                     	;# 
  1326  0FE6                     	;# 
  1327  0FE7                     	;# 
  1328  0FE8                     	;# 
  1329  0FE9                     	;# 
  1330  0FEA                     	;# 
  1331  0FEB                     	;# 
  1332  0FED                     	;# 
  1333  0FEE                     	;# 
  1334  0FEF                     	;# 
  1335                           
  1336                           	psect	stringtext1
  1337  0772                     __pstringtext1:
  1338  0772                     _ROTATION_TIME:
  1339  0772  3478               	retlw	120
  1340  0773  3400               	retlw	0
  1341  0774  3400               	retlw	0
  1342  0775                     __end_of_ROTATION_TIME:
  1343                           
  1344                           	psect	stringtext2
  1345  0775                     __pstringtext2:
  1346  0775                     _GOOD_WSP_VOLTAGE:
  1347  0775  3440               	retlw	64
  1348  0776  349C               	retlw	156
  1349  0777  3400               	retlw	0
  1350  0778                     __end_of_GOOD_WSP_VOLTAGE:
  1351                           
  1352                           	psect	stringtext3
  1353  0778                     __pstringtext3:
  1354  0778                     _BAD_WSP_VOLTAGE:
  1355  0778  3420               	retlw	32
  1356  0779  344E               	retlw	78
  1357  077A  3400               	retlw	0
  1358  077B                     __end_of_BAD_WSP_VOLTAGE:
  1359                           
  1360                           	psect	nvBANK0
  1361  0060                     __pnvBANK0:
  1362  0060                     _TMR0_InterruptHandler:
  1363  0060                     	ds	2
  1364  0062                     _TMR2_InterruptHandler:
  1365  0062                     	ds	2
  1366  0064                     _timer0ReloadVal:
  1367  0064                     	ds	1
  1368  0015                     _TMR0	set	21
  1369  001C                     _T2CONbits	set	28
  1370  001C                     _T2CON	set	28
  1371  001A                     _TMR2	set	26
  1372  001B                     _PR2	set	27
  1373  0011                     _PIR1bits	set	17
  1374  000B                     _INTCONbits	set	11
  1375  005F                     _GIE	set	95
  1376  008E                     _TRISCbits	set	142
  1377  008C                     _TRISAbits	set	140
  1378  0095                     _OPTION_REG	set	149
  1379  0091                     _PIE1bits	set	145
  1380  0095                     _OPTION_REGbits	set	149
  1381  008E                     _TRISC	set	142
  1382  008C                     _TRISA	set	140
  1383  009D                     _ADCON0bits	set	157
  1384  009D                     _ADCON0	set	157
  1385  009C                     _ADRESH	set	156
  1386  009B                     _ADRESL	set	155
  1387  009E                     _ADCON1	set	158
  1388  0097                     _WDTCON	set	151
  1389  0098                     _OSCTUNE	set	152
  1390  0099                     _OSCCON	set	153
  1391  010E                     _LATCbits	set	270
  1392  010C                     _LATAbits	set	268
  1393  0117                     _FVRCONbits	set	279
  1394  0117                     _FVRCON	set	279
  1395  011D                     _APFCON	set	285
  1396  010E                     _LATC	set	270
  1397  010C                     _LATA	set	268
  1398  0116                     _BORCON	set	278
  1399  0191                     _EEADR	set	401
  1400  0196                     _EECON2	set	406
  1401  0193                     _EEDATA	set	403
  1402  018C                     _ANSELAbits	set	396
  1403  018E                     _ANSELCbits	set	398
  1404  018C                     _ANSELA	set	396
  1405  018E                     _ANSELC	set	398
  1406  0CA8                     _RD	set	3240
  1407  0CAA                     _WREN	set	3242
  1408  0CA9                     _WR	set	3241
  1409  020E                     _WPUCbits	set	526
  1410  020C                     _WPUAbits	set	524
  1411  020E                     _WPUC	set	526
  1412  020C                     _WPUA	set	524
  1413                           
  1414                           	psect	cinit
  1415  0027                     start_initialization:	
  1416                           ; #config settings
  1417                           
  1418  0027                     __initialization:
  1419                           
  1420                           ; Clear objects allocated to COMMON
  1421  0027  01F8               	clrf	__pbssCOMMON& (0+127)
  1422  0028  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  1423  0029  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  1424  002A  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  1425  002B  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  1426                           
  1427                           ; Clear objects allocated to BANK0
  1428  002C  3049               	movlw	low __pbssBANK0
  1429  002D  0084               	movwf	4
  1430  002E  3000               	movlw	high __pbssBANK0
  1431  002F  0085               	movwf	5
  1432  0030  3017               	movlw	23
  1433  0031  3187  2749  3180   	fcall	clear_ram0
  1434                           
  1435                           ; Clear objects allocated to BANK1
  1436  0034  30A0               	movlw	low __pbssBANK1
  1437  0035  0084               	movwf	4
  1438  0036  3000               	movlw	high __pbssBANK1
  1439  0037  0085               	movwf	5
  1440  0038  3010               	movlw	16
  1441  0039  3187  2749  3180   	fcall	clear_ram0
  1442  003C                     end_of_initialization:	
  1443                           ;End of C runtime variable initialization code
  1444                           
  1445  003C                     __end_of__initialization:
  1446  003C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1447  003D  0020               	movlb	0
  1448  003E  2E07               	ljmp	_main	;jump to C main() function
  1449                           
  1450                           	psect	bssCOMMON
  1451  0078                     __pbssCOMMON:
  1452  0078                     TMR2_ISR@CountCallBack:
  1453  0078                     	ds	2
  1454  007A                     sec_tick_work@iled:
  1455  007A                     	ds	1
  1456  007B                     get_measure@measures:
  1457  007B                     	ds	1
  1458  007C                     _FLAGS:
  1459  007C                     	ds	1
  1460                           
  1461                           	psect	bssBANK0
  1462  0049                     __pbssBANK0:
  1463  0049                     get_time@F2659:
  1464  0049                     	ds	9
  1465  0052                     get_time@F2661:
  1466  0052                     	ds	3
  1467  0055                     _time_s:
  1468  0055                     	ds	3
  1469  0058                     _ADC_InterruptHandler:
  1470  0058                     	ds	2
  1471  005A                     get_jump_full@jump_counter:
  1472  005A                     	ds	1
  1473  005B                     get_jump@jump_counter:
  1474  005B                     	ds	1
  1475  005C                     get_fun_full@fun_counter:
  1476  005C                     	ds	1
  1477  005D                     get_fun@fun_counter:
  1478  005D                     	ds	1
  1479  005E                     _time_pow_s:
  1480  005E                     	ds	1
  1481  005F                     _START_EEPROM_ADR:
  1482  005F                     	ds	1
  1483                           
  1484                           	psect	bssBANK1
  1485  00A0                     __pbssBANK1:
  1486  00A0                     get_adr@F2639:
  1487  00A0                     	ds	16
  1488                           
  1489                           	psect	clrtext
  1490  0749                     clear_ram0:	
  1491                           ;	Called with FSR0 containing the base address, and
  1492                           ;	WREG with the size to clear
  1493                           
  1494  0749  0064               	clrwdt	;clear the watchdog before getting into this loop
  1495  074A                     clrloop0:
  1496  074A  0180               	clrf	0	;clear RAM location pointed to by FSR
  1497  074B  3101               	addfsr 0,1
  1498  074C  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1499  074D  2F4A               	goto	clrloop0	;have we reached the end yet?
  1500  074E  3400               	retlw	0	;all done for this memory range, return
  1501                           
  1502                           	psect	cstackCOMMON
  1503  0070                     __pcstackCOMMON:
  1504  0070                     ?_PIN_MANAGER_Initialize:
  1505  0070                     ?_OSCILLATOR_Initialize:	
  1506                           ; 1 bytes @ 0x0
  1507                           
  1508  0070                     ?_WDT_Initialize:	
  1509                           ; 1 bytes @ 0x0
  1510                           
  1511  0070                     ?_FVR_Initialize:	
  1512                           ; 1 bytes @ 0x0
  1513                           
  1514  0070                     ?_ADC_Initialize:	
  1515                           ; 1 bytes @ 0x0
  1516                           
  1517  0070                     ?_TMR2_Initialize:	
  1518                           ; 1 bytes @ 0x0
  1519                           
  1520  0070                     ?_TMR0_Initialize:	
  1521                           ; 1 bytes @ 0x0
  1522                           
  1523  0070                     ?_TMR0_ISR:	
  1524                           ; 1 bytes @ 0x0
  1525                           
  1526  0070                     ??_TMR0_ISR:	
  1527                           ; 1 bytes @ 0x0
  1528                           
  1529  0070                     ?_TMR2_ISR:	
  1530                           ; 1 bytes @ 0x0
  1531                           
  1532  0070                     ?_TMR2_DefaultInterruptHandler:	
  1533                           ; 1 bytes @ 0x0
  1534                           
  1535  0070                     ??_TMR2_DefaultInterruptHandler:	
  1536                           ; 1 bytes @ 0x0
  1537                           
  1538  0070                     ?_TMR2_CallBack:	
  1539                           ; 1 bytes @ 0x0
  1540                           
  1541  0070                     ?_TMR0_DefaultInterruptHandler:	
  1542                           ; 1 bytes @ 0x0
  1543                           
  1544  0070                     ??_TMR0_DefaultInterruptHandler:	
  1545                           ; 1 bytes @ 0x0
  1546                           
  1547  0070                     ?_EEPROM_ReadByte:	
  1548                           ; 1 bytes @ 0x0
  1549                           
  1550  0070                     ?_SYSTEM_Initialize:	
  1551                           ; 1 bytes @ 0x0
  1552                           
  1553  0070                     ?_INTERRUPT_InterruptManager:	
  1554                           ; 1 bytes @ 0x0
  1555                           
  1556  0070                     ?_TMR2_StartTimer:	
  1557                           ; 1 bytes @ 0x0
  1558                           
  1559  0070                     ?_switch_zum:	
  1560                           ; 1 bytes @ 0x0
  1561                           
  1562  0070                     ?_toggle_tone:	
  1563                           ; 1 bytes @ 0x0
  1564                           
  1565  0070                     ??_toggle_tone:	
  1566                           ; 1 bytes @ 0x0
  1567                           
  1568  0070                     ?_go_close:	
  1569                           ; 1 bytes @ 0x0
  1570                           
  1571  0070                     ?_go_open:	
  1572                           ; 1 bytes @ 0x0
  1573                           
  1574  0070                     ?_go_close_alt:	
  1575                           ; 1 bytes @ 0x0
  1576                           
  1577  0070                     ?_go_open_alt:	
  1578                           ; 1 bytes @ 0x0
  1579                           
  1580  0070                     ?_start_alarm:	
  1581                           ; 1 bytes @ 0x0
  1582                           
  1583  0070                     ?_get_measure:	
  1584                           ; 1 bytes @ 0x0
  1585                           
  1586  0070                     ?_get_fun:	
  1587                           ; 1 bytes @ 0x0
  1588                           
  1589  0070                     ?_get_fun_full:	
  1590                           ; 1 bytes @ 0x0
  1591                           
  1592  0070                     ?_get_jump:	
  1593                           ; 1 bytes @ 0x0
  1594                           
  1595  0070                     ?_get_jump_full:	
  1596                           ; 1 bytes @ 0x0
  1597                           
  1598  0070                     ?_rele_tick:	
  1599                           ; 1 bytes @ 0x0
  1600                           
  1601  0070                     ??_rele_tick:	
  1602                           ; 1 bytes @ 0x0
  1603                           
  1604  0070                     ?_sec_tick_work:	
  1605                           ; 1 bytes @ 0x0
  1606                           
  1607  0070                     ?_povorot:	
  1608                           ; 1 bytes @ 0x0
  1609                           
  1610  0070                     ?_fun_work:	
  1611                           ; 1 bytes @ 0x0
  1612                           
  1613  0070                     ?_switch_wm:	
  1614                           ; 1 bytes @ 0x0
  1615                           
  1616  0070                     ?_get_voltage:	
  1617                           ; 1 bytes @ 0x0
  1618                           
  1619  0070                     ?_get_adr:	
  1620                           ; 1 bytes @ 0x0
  1621                           
  1622  0070                     ?_get_time:	
  1623                           ; 1 bytes @ 0x0
  1624                           
  1625  0070                     ?_get_eeprom:	
  1626                           ; 1 bytes @ 0x0
  1627                           
  1628  0070                     ?_start_setup:	
  1629                           ; 1 bytes @ 0x0
  1630                           
  1631  0070                     ?_main:	
  1632                           ; 1 bytes @ 0x0
  1633                           
  1634  0070                     ?i1_switch_zum:	
  1635                           ; 1 bytes @ 0x0
  1636                           
  1637  0070                     ??i1_switch_zum:	
  1638                           ; 1 bytes @ 0x0
  1639                           
  1640  0070                     ?i1_go_close:	
  1641                           ; 1 bytes @ 0x0
  1642                           
  1643  0070                     ??i1_go_close:	
  1644                           ; 1 bytes @ 0x0
  1645                           
  1646  0070                     ?i1_go_close_alt:	
  1647                           ; 1 bytes @ 0x0
  1648                           
  1649  0070                     ??i1_go_close_alt:	
  1650                           ; 1 bytes @ 0x0
  1651                           
  1652  0070                     ?i1_ADC_GetConversion:	
  1653                           ; 1 bytes @ 0x0
  1654                           
  1655                           
  1656                           ; 2 bytes @ 0x0
  1657  0070                     	ds	2
  1658  0072                     ??_start_alarm:
  1659  0072                     ??i1_ADC_GetConversion:	
  1660                           ; 1 bytes @ 0x2
  1661                           
  1662                           
  1663                           ; 1 bytes @ 0x2
  1664  0072                     	ds	1
  1665  0073                     i1ADC_GetConversion@channel:
  1666                           
  1667                           ; 1 bytes @ 0x3
  1668  0073                     	ds	1
  1669  0074                     ??_get_measure:
  1670                           
  1671                           ; 1 bytes @ 0x4
  1672  0074                     	ds	1
  1673  0075                     get_measure@res:
  1674                           
  1675                           ; 2 bytes @ 0x5
  1676  0075                     	ds	2
  1677  0077                     ??_sec_tick_work:
  1678                           
  1679                           ; 1 bytes @ 0x7
  1680  0077                     	ds	1
  1681  0078                     ??_TMR2_ISR:
  1682  0078                     ??_TMR2_CallBack:	
  1683                           ; 1 bytes @ 0x8
  1684                           
  1685  0078                     ??_INTERRUPT_InterruptManager:	
  1686                           ; 1 bytes @ 0x8
  1687                           
  1688                           
  1689                           	psect	cstackBANK0
  1690  0020                     __pcstackBANK0:	
  1691                           ; 1 bytes @ 0x8
  1692                           
  1693  0020                     ??_PIN_MANAGER_Initialize:
  1694  0020                     ??_OSCILLATOR_Initialize:	
  1695                           ; 1 bytes @ 0x0
  1696                           
  1697  0020                     ??_WDT_Initialize:	
  1698                           ; 1 bytes @ 0x0
  1699                           
  1700  0020                     ??_FVR_Initialize:	
  1701                           ; 1 bytes @ 0x0
  1702                           
  1703  0020                     ??_ADC_Initialize:	
  1704                           ; 1 bytes @ 0x0
  1705                           
  1706  0020                     ?_TMR2_SetInterruptHandler:	
  1707                           ; 1 bytes @ 0x0
  1708                           
  1709  0020                     ?_TMR0_SetInterruptHandler:	
  1710                           ; 1 bytes @ 0x0
  1711                           
  1712  0020                     ??_EEPROM_ReadByte:	
  1713                           ; 1 bytes @ 0x0
  1714                           
  1715  0020                     ?_EEPROM_WriteByte:	
  1716                           ; 1 bytes @ 0x0
  1717                           
  1718  0020                     ??_TMR2_StartTimer:	
  1719                           ; 1 bytes @ 0x0
  1720                           
  1721  0020                     ??_switch_zum:	
  1722                           ; 1 bytes @ 0x0
  1723                           
  1724  0020                     ?_beep:	
  1725                           ; 1 bytes @ 0x0
  1726                           
  1727  0020                     ??_go_close:	
  1728                           ; 1 bytes @ 0x0
  1729                           
  1730  0020                     ??_go_open:	
  1731                           ; 1 bytes @ 0x0
  1732                           
  1733  0020                     ??_go_close_alt:	
  1734                           ; 1 bytes @ 0x0
  1735                           
  1736  0020                     ??_go_open_alt:	
  1737                           ; 1 bytes @ 0x0
  1738                           
  1739  0020                     ?___bmul:	
  1740                           ; 1 bytes @ 0x0
  1741                           
  1742  0020                     ?_ADC_GetConversion:	
  1743                           ; 1 bytes @ 0x0
  1744                           
  1745  0020                     beep@count:	
  1746                           ; 2 bytes @ 0x0
  1747                           
  1748  0020                     EEPROM_WriteByte@dt:	
  1749                           ; 1 bytes @ 0x0
  1750                           
  1751  0020                     ___bmul@multiplicand:	
  1752                           ; 1 bytes @ 0x0
  1753                           
  1754  0020                     TMR2_SetInterruptHandler@InterruptHandler:	
  1755                           ; 1 bytes @ 0x0
  1756                           
  1757  0020                     TMR0_SetInterruptHandler@InterruptHandler:	
  1758                           ; 2 bytes @ 0x0
  1759                           
  1760                           
  1761                           ; 2 bytes @ 0x0
  1762  0020                     	ds	1
  1763  0021                     ??_EEPROM_WriteByte:
  1764  0021                     ??_beep:	
  1765                           ; 1 bytes @ 0x1
  1766                           
  1767  0021                     ??___bmul:	
  1768                           ; 1 bytes @ 0x1
  1769                           
  1770                           
  1771                           ; 1 bytes @ 0x1
  1772  0021                     	ds	1
  1773  0022                     ??_TMR2_Initialize:
  1774  0022                     ??_TMR0_Initialize:	
  1775                           ; 1 bytes @ 0x2
  1776                           
  1777  0022                     ??_TMR2_SetInterruptHandler:	
  1778                           ; 1 bytes @ 0x2
  1779                           
  1780  0022                     ??_TMR0_SetInterruptHandler:	
  1781                           ; 1 bytes @ 0x2
  1782                           
  1783  0022                     ??_ADC_GetConversion:	
  1784                           ; 1 bytes @ 0x2
  1785                           
  1786  0022                     ??_povorot:	
  1787                           ; 1 bytes @ 0x2
  1788                           
  1789  0022                     EEPROM_ReadByte@addr:	
  1790                           ; 1 bytes @ 0x2
  1791                           
  1792  0022                     ___bmul@product:	
  1793                           ; 1 bytes @ 0x2
  1794                           
  1795                           
  1796                           ; 1 bytes @ 0x2
  1797  0022                     	ds	1
  1798  0023                     ??_SYSTEM_Initialize:
  1799  0023                     ??_get_adr:	
  1800                           ; 1 bytes @ 0x3
  1801                           
  1802  0023                     ?_EEPROM_ReadShortLong:	
  1803                           ; 1 bytes @ 0x3
  1804                           
  1805  0023                     ADC_GetConversion@channel:	
  1806                           ; 3 bytes @ 0x3
  1807                           
  1808  0023                     beep@time:	
  1809                           ; 1 bytes @ 0x3
  1810                           
  1811  0023                     EEPROM_WriteByte@addr:	
  1812                           ; 1 bytes @ 0x3
  1813                           
  1814  0023                     ___bmul@multiplier:	
  1815                           ; 1 bytes @ 0x3
  1816                           
  1817                           
  1818                           ; 1 bytes @ 0x3
  1819  0023                     	ds	1
  1820  0024                     ??_get_fun:
  1821  0024                     ??_get_fun_full:	
  1822                           ; 1 bytes @ 0x4
  1823                           
  1824  0024                     ??_get_jump:	
  1825                           ; 1 bytes @ 0x4
  1826                           
  1827  0024                     ??_get_jump_full:	
  1828                           ; 1 bytes @ 0x4
  1829                           
  1830  0024                     beep@j:	
  1831                           ; 1 bytes @ 0x4
  1832                           
  1833  0024                     EEPROM_WriteByte@status:	
  1834                           ; 1 bytes @ 0x4
  1835                           
  1836  0024                     get_adr@adr:	
  1837                           ; 1 bytes @ 0x4
  1838                           
  1839                           
  1840                           ; 16 bytes @ 0x4
  1841  0024                     	ds	1
  1842  0025                     ?_EEPROM_WriteShortLong:
  1843  0025                     beep@i:	
  1844                           ; 1 bytes @ 0x5
  1845                           
  1846  0025                     get_fun@res:	
  1847                           ; 1 bytes @ 0x5
  1848                           
  1849  0025                     get_fun_full@res:	
  1850                           ; 2 bytes @ 0x5
  1851                           
  1852  0025                     get_jump@res:	
  1853                           ; 2 bytes @ 0x5
  1854                           
  1855  0025                     get_jump_full@res:	
  1856                           ; 2 bytes @ 0x5
  1857                           
  1858  0025                     EEPROM_WriteShortLong@ucData:	
  1859                           ; 2 bytes @ 0x5
  1860                           
  1861                           
  1862                           ; 3 bytes @ 0x5
  1863  0025                     	ds	1
  1864  0026                     ??_EEPROM_ReadShortLong:
  1865  0026                     ??_fun_work:	
  1866                           ; 1 bytes @ 0x6
  1867                           
  1868  0026                     ??_switch_wm:	
  1869                           ; 1 bytes @ 0x6
  1870                           
  1871                           
  1872                           ; 1 bytes @ 0x6
  1873  0026                     	ds	1
  1874  0027                     get_fun_full@flag:
  1875  0027                     get_jump_full@flag:	
  1876                           ; 1 bytes @ 0x7
  1877                           
  1878                           
  1879                           ; 1 bytes @ 0x7
  1880  0027                     	ds	1
  1881  0028                     ??_EEPROM_WriteShortLong:
  1882                           
  1883                           ; 1 bytes @ 0x8
  1884  0028                     	ds	4
  1885  002C                     EEPROM_WriteShortLong@dt:
  1886  002C                     EEPROM_ReadShortLong@dt:	
  1887                           ; 1 bytes @ 0xC
  1888                           
  1889                           
  1890                           ; 3 bytes @ 0xC
  1891  002C                     	ds	1
  1892  002D                     EEPROM_WriteShortLong@addr:
  1893                           
  1894                           ; 1 bytes @ 0xD
  1895  002D                     	ds	1
  1896  002E                     ??_get_voltage:
  1897                           
  1898                           ; 1 bytes @ 0xE
  1899  002E                     	ds	1
  1900  002F                     EEPROM_ReadShortLong@addr:
  1901                           
  1902                           ; 1 bytes @ 0xF
  1903  002F                     	ds	1
  1904  0030                     ??_get_time:
  1905  0030                     get_voltage@buf_800:	
  1906                           ; 1 bytes @ 0x10
  1907                           
  1908                           
  1909                           ; 3 bytes @ 0x10
  1910  0030                     	ds	3
  1911  0033                     get_voltage@res:
  1912                           
  1913                           ; 2 bytes @ 0x13
  1914  0033                     	ds	1
  1915  0034                     get_adr@i:
  1916  0034                     get_time@times:	
  1917                           ; 1 bytes @ 0x14
  1918                           
  1919                           
  1920                           ; 9 bytes @ 0x14
  1921  0034                     	ds	1
  1922  0035                     get_voltage@buf:
  1923  0035                     get_adr@q:	
  1924                           ; 1 bytes @ 0x15
  1925                           
  1926                           
  1927                           ; 1 bytes @ 0x15
  1928  0035                     	ds	1
  1929  0036                     get_voltage@q_801:
  1930  0036                     get_adr@i_811:	
  1931                           ; 1 bytes @ 0x16
  1932                           
  1933                           
  1934                           ; 1 bytes @ 0x16
  1935  0036                     	ds	1
  1936  0037                     get_voltage@q:
  1937  0037                     get_adr@q_810:	
  1938                           ; 1 bytes @ 0x17
  1939                           
  1940                           
  1941                           ; 1 bytes @ 0x17
  1942  0037                     	ds	1
  1943  0038                     get_adr@buf:
  1944                           
  1945                           ; 1 bytes @ 0x18
  1946  0038                     	ds	5
  1947  003D                     get_time@adr_error:
  1948                           
  1949                           ; 1 bytes @ 0x1D
  1950  003D                     	ds	1
  1951  003E                     get_time@time_count:
  1952                           
  1953                           ; 3 bytes @ 0x1E
  1954  003E                     	ds	3
  1955  0041                     get_time@buf2:
  1956                           
  1957                           ; 3 bytes @ 0x21
  1958  0041                     	ds	3
  1959  0044                     get_time@i:
  1960                           
  1961                           ; 1 bytes @ 0x24
  1962  0044                     	ds	1
  1963  0045                     get_time@buf:
  1964                           
  1965                           ; 1 bytes @ 0x25
  1966  0045                     	ds	1
  1967  0046                     get_time@q:
  1968                           
  1969                           ; 1 bytes @ 0x26
  1970  0046                     	ds	1
  1971  0047                     get_time@q_823:
  1972                           
  1973                           ; 1 bytes @ 0x27
  1974  0047                     	ds	1
  1975  0048                     get_time@q_822:
  1976                           
  1977                           ; 1 bytes @ 0x28
  1978  0048                     	ds	1
  1979  0049                     ??_get_eeprom:
  1980  0049                     ??_start_setup:	
  1981                           ; 1 bytes @ 0x29
  1982                           
  1983  0049                     ??_main:	
  1984                           ; 1 bytes @ 0x29
  1985                           
  1986                           
  1987                           	psect	maintext
  1988  0607                     __pmaintext:	
  1989                           ; 1 bytes @ 0x29
  1990 ;;
  1991 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1992 ;;
  1993 ;; *************** function _main *****************
  1994 ;; Defined at:
  1995 ;;		line 513 in file "main.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;		None
  1998 ;; Auto vars:     Size  Location     Type
  1999 ;;		None
  2000 ;; Return value:  Size  Location     Type
  2001 ;;                  1    wreg      void 
  2002 ;; Registers used:
  2003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2004 ;; Tracked objects:
  2005 ;;		On entry : B1F/0
  2006 ;;		On exit  : 0/0
  2007 ;;		Unchanged: 0/0
  2008 ;; Data sizes:     COMMON   BANK0   BANK1
  2009 ;;      Params:         0       0       0
  2010 ;;      Locals:         0       0       0
  2011 ;;      Temps:          0       0       0
  2012 ;;      Totals:         0       0       0
  2013 ;;Total ram usage:        0 bytes
  2014 ;; Hardware stack levels required when called: 12
  2015 ;; This function calls:
  2016 ;;		_fun_work
  2017 ;;		_get_fun
  2018 ;;		_get_jump
  2019 ;;		_get_voltage
  2020 ;;		_povorot
  2021 ;;		_start_setup
  2022 ;;		_switch_wm
  2023 ;; This function is called by:
  2024 ;;		Startup code after reset
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028  0607                     _main:	
  2029                           ;psect for function _main
  2030                           
  2031  0607                     l2699:	
  2032                           ;incstack = 0
  2033                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2034                           
  2035                           
  2036                           ;main.c: 515:     start_setup();
  2037  0607  3184  2489  3186   	fcall	_start_setup
  2038  060A                     l2701:
  2039                           
  2040                           ;main.c: 518:         get_voltage();
  2041  060A  3181  21D8  3186   	fcall	_get_voltage
  2042  060D                     l2703:
  2043                           
  2044                           ;main.c: 519:         if (!FLAGS.bits.ALARM) {
  2045  060D  187C               	btfsc	_FLAGS,0
  2046  060E  2E10               	goto	u2101
  2047  060F  2E11               	goto	u2100
  2048  0610                     u2101:
  2049  0610  2E0A               	goto	l2701
  2050  0611                     u2100:
  2051  0611                     l2705:
  2052                           
  2053                           ;main.c: 520:             get_fun();
  2054  0611  3184  2411  3186   	fcall	_get_fun
  2055                           
  2056                           ;main.c: 521:             fun_work();
  2057  0614  3183  234E  3186   	fcall	_fun_work
  2058                           
  2059                           ;main.c: 522:             get_jump();
  2060  0617  3184  244F  3186   	fcall	_get_jump
  2061                           
  2062                           ;main.c: 523:             switch_wm();
  2063  061A  3184  24F3  3186   	fcall	_switch_wm
  2064                           
  2065                           ;main.c: 524:             povorot();
  2066  061D  3182  22C7  3186   	fcall	_povorot
  2067  0620  2E0A               	goto	l2701
  2068  0621  2826               	ljmp	start
  2069  0622                     __end_of_main:
  2070                           
  2071                           	psect	text1
  2072  04F3                     __ptext1:	
  2073 ;; *************** function _switch_wm *****************
  2074 ;; Defined at:
  2075 ;;		line 372 in file "main.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;		None
  2078 ;; Auto vars:     Size  Location     Type
  2079 ;;		None
  2080 ;; Return value:  Size  Location     Type
  2081 ;;                  1    wreg      void 
  2082 ;; Registers used:
  2083 ;;		wreg, status,2, status,0, pclath, cstack
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMMON   BANK0   BANK1
  2089 ;;      Params:         0       0       0
  2090 ;;      Locals:         0       0       0
  2091 ;;      Temps:          0       1       0
  2092 ;;      Totals:         0       1       0
  2093 ;;Total ram usage:        1 bytes
  2094 ;; Hardware stack levels used: 1
  2095 ;; Hardware stack levels required when called: 9
  2096 ;; This function calls:
  2097 ;;		_beep
  2098 ;;		_go_close
  2099 ;;		_go_close_alt
  2100 ;; This function is called by:
  2101 ;;		_main
  2102 ;; This function uses a non-reentrant model
  2103 ;;
  2104                           
  2105  04F3                     _switch_wm:	
  2106                           ;psect for function _switch_wm
  2107                           
  2108  04F3                     l2583:	
  2109                           ;incstack = 0
  2110                           ; Regs used in _switch_wm: [wreg+status,2+status,0+pclath+cstack]
  2111                           
  2112                           
  2113                           ;main.c: 373:     if (!FLAGS.bits._JUMP_CONNECTED) {
  2114  04F3  1A7C               	btfsc	_FLAGS,4
  2115  04F4  2CF6               	goto	u1961
  2116  04F5  2CF7               	goto	u1960
  2117  04F6                     u1961:
  2118  04F6  2D0D               	goto	l445
  2119  04F7                     u1960:
  2120  04F7                     l2585:
  2121                           
  2122                           ;main.c: 374:         if (FLAGS.bits.NORMAL_WORK_MODE) {
  2123  04F7  1CFC               	btfss	_FLAGS,1
  2124  04F8  2CFA               	goto	u1971
  2125  04F9  2CFB               	goto	u1970
  2126  04FA                     u1971:
  2127  04FA  2D22               	goto	l451
  2128  04FB                     u1970:
  2129  04FB                     l2587:
  2130                           
  2131                           ;main.c: 375:             FLAGS.bits.NORMAL_WORK_MODE = 0;
  2132  04FB  10FC               	bcf	_FLAGS,1
  2133                           
  2134                           ;main.c: 376:             if (FLAGS.bits.CLOSED) go_close_alt();
  2135  04FC  1D7C               	btfss	_FLAGS,2
  2136  04FD  2CFF               	goto	u1981
  2137  04FE  2D00               	goto	u1980
  2138  04FF                     u1981:
  2139  04FF  2D03               	goto	l2591
  2140  0500                     u1980:
  2141  0500                     l2589:
  2142  0500  3187  2760  3184   	fcall	_go_close_alt
  2143  0503                     l2591:
  2144                           
  2145                           ;main.c: 378:             beep( 40, 7);
  2146  0503  3007               	movlw	7
  2147  0504  0020               	movlb	0	; select bank0
  2148  0505  00A6               	movwf	??_switch_wm
  2149  0506  0826               	movf	??_switch_wm,w
  2150  0507  00A0               	movwf	beep@count
  2151  0508  3028               	movlw	40
  2152  0509  3185  2523  3184   	fcall	_beep
  2153  050C  2D22               	goto	l451
  2154  050D                     l445:
  2155                           
  2156                           ;main.c: 381:         if (!FLAGS.bits.NORMAL_WORK_MODE) {
  2157  050D  18FC               	btfsc	_FLAGS,1
  2158  050E  2D10               	goto	u1991
  2159  050F  2D11               	goto	u1990
  2160  0510                     u1991:
  2161  0510  2D22               	goto	l451
  2162  0511                     u1990:
  2163  0511                     l2593:
  2164                           
  2165                           ;main.c: 382:             FLAGS.bits.NORMAL_WORK_MODE = 1;
  2166  0511  14FC               	bsf	_FLAGS,1
  2167                           
  2168                           ;main.c: 383:             if (FLAGS.bits.CLOSED) go_close();
  2169  0512  1D7C               	btfss	_FLAGS,2
  2170  0513  2D15               	goto	u2001
  2171  0514  2D16               	goto	u2000
  2172  0515                     u2001:
  2173  0515  2D19               	goto	l450
  2174  0516                     u2000:
  2175  0516                     l2595:
  2176  0516  3185  25C9  3184   	fcall	_go_close
  2177  0519                     l450:
  2178                           
  2179                           ;main.c: 385:             beep(40, 4);
  2180  0519  3004               	movlw	4
  2181  051A  0020               	movlb	0	; select bank0
  2182  051B  00A6               	movwf	??_switch_wm
  2183  051C  0826               	movf	??_switch_wm,w
  2184  051D  00A0               	movwf	beep@count
  2185  051E  3028               	movlw	40
  2186  051F  3185  2523  3184   	fcall	_beep
  2187  0522                     l451:
  2188  0522  0008               	return
  2189  0523                     __end_of_switch_wm:
  2190                           
  2191                           	psect	text2
  2192  0489                     __ptext2:	
  2193 ;; *************** function _start_setup *****************
  2194 ;; Defined at:
  2195 ;;		line 479 in file "main.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;		None
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;		None
  2200 ;; Return value:  Size  Location     Type
  2201 ;;                  1    wreg      void 
  2202 ;; Registers used:
  2203 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2204 ;; Tracked objects:
  2205 ;;		On entry : 0/0
  2206 ;;		On exit  : 0/0
  2207 ;;		Unchanged: 0/0
  2208 ;; Data sizes:     COMMON   BANK0   BANK1
  2209 ;;      Params:         0       0       0
  2210 ;;      Locals:         0       0       0
  2211 ;;      Temps:          0       0       0
  2212 ;;      Totals:         0       0       0
  2213 ;;Total ram usage:        0 bytes
  2214 ;; Hardware stack levels used: 1
  2215 ;; Hardware stack levels required when called: 11
  2216 ;; This function calls:
  2217 ;;		_SYSTEM_Initialize
  2218 ;;		_TMR0_SetInterruptHandler
  2219 ;;		_TMR2_SetInterruptHandler
  2220 ;;		_TMR2_StartTimer
  2221 ;;		_get_eeprom
  2222 ;;		_get_fun_full
  2223 ;;		_get_jump_full
  2224 ;; This function is called by:
  2225 ;;		_main
  2226 ;; This function uses a non-reentrant model
  2227 ;;
  2228                           
  2229  0489                     _start_setup:	
  2230                           ;psect for function _start_setup
  2231                           
  2232  0489                     l2625:	
  2233                           ;incstack = 0
  2234                           ; Regs used in _start_setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2235                           
  2236                           
  2237                           ;main.c: 481:     SYSTEM_Initialize();
  2238  0489  3186  266C  3184   	fcall	_SYSTEM_Initialize
  2239  048C                     l2627:
  2240                           
  2241                           ;main.c: 482:     (INTCONbits.GIE = 1);
  2242  048C  178B               	bsf	11,7	;volatile
  2243  048D                     l2629:
  2244                           
  2245                           ;main.c: 483:     (INTCONbits.PEIE = 1);
  2246  048D  170B               	bsf	11,6	;volatile
  2247  048E                     l2631:
  2248                           
  2249                           ;main.c: 485:     get_eeprom();
  2250  048E  3187  273B  3184   	fcall	_get_eeprom
  2251  0491                     l2633:
  2252                           
  2253                           ;main.c: 486:     TMR0_SetInterruptHandler(switch_zum);
  2254  0491  30D5               	movlw	low _switch_zum
  2255  0492  0020               	movlb	0	; select bank0
  2256  0493  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2257  0494  3006               	movlw	high _switch_zum
  2258  0495  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2259  0496  3187  2755  3184   	fcall	_TMR0_SetInterruptHandler
  2260  0499                     l2635:
  2261                           
  2262                           ;main.c: 487:     TMR2_SetInterruptHandler(sec_tick_work);
  2263  0499  3091               	movlw	low _sec_tick_work
  2264  049A  0020               	movlb	0	; select bank0
  2265  049B  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  2266  049C  3003               	movlw	high _sec_tick_work
  2267  049D  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  2268  049E  3187  274F  3184   	fcall	_TMR2_SetInterruptHandler
  2269  04A1                     l2637:
  2270                           
  2271                           ;main.c: 488:     TMR2_StartTimer();
  2272  04A1  3187  277B  3184   	fcall	_TMR2_StartTimer
  2273  04A4                     l2639:
  2274  04A4  0023               	movlb	3	; select bank3
  2275  04A5  118E               	bcf	14,3	;volatile
  2276  04A6                     l2641:
  2277  04A6  108C               	bcf	12,1	;volatile
  2278  04A7                     l2643:
  2279  04A7  110E               	bcf	14,2	;volatile
  2280  04A8                     l2645:
  2281  04A8  0024               	movlb	4	; select bank4
  2282  04A9  108C               	bcf	12,1	;volatile
  2283  04AA                     l2647:
  2284  04AA  0021               	movlb	1	; select bank1
  2285  04AB  148C               	bsf	12,1	;volatile
  2286  04AC                     l2649:
  2287  04AC  0024               	movlb	4	; select bank4
  2288  04AD  110E               	bcf	14,2	;volatile
  2289  04AE                     l2651:
  2290  04AE  0021               	movlb	1	; select bank1
  2291  04AF  150E               	bsf	14,2	;volatile
  2292  04B0                     l2653:
  2293                           
  2294                           ;main.c: 500:     INTCONbits.TMR0IE = 0;
  2295  04B0  128B               	bcf	11,5	;volatile
  2296  04B1                     l2655:
  2297                           
  2298                           ;main.c: 501:     FLAGS.value = 0;
  2299  04B1  01FC               	clrf	_FLAGS
  2300  04B2                     l2657:
  2301  04B2  0022               	movlb	2	; select bank2
  2302  04B3  128E               	bcf	14,5	;volatile
  2303  04B4                     l2659:
  2304  04B4  120E               	bcf	14,4	;volatile
  2305  04B5                     l2661:
  2306  04B5  100E               	bcf	14,0	;volatile
  2307  04B6                     l2663:
  2308  04B6  0021               	movlb	1	; select bank1
  2309  04B7  100E               	bcf	14,0	;volatile
  2310  04B8                     l2665:
  2311                           
  2312                           ;main.c: 508:     get_fun_full();
  2313  04B8  3182  223A  3184   	fcall	_get_fun_full
  2314  04BB                     l2667:
  2315                           
  2316                           ;main.c: 509:     get_jump_full();
  2317  04BB  3183  230B  3184   	fcall	_get_jump_full
  2318  04BE                     l2669:
  2319                           
  2320                           ;main.c: 510:     time_pow_s = 0;
  2321  04BE  0020               	movlb	0	; select bank0
  2322  04BF  01DE               	clrf	_time_pow_s
  2323  04C0                     l532:
  2324  04C0  0008               	return
  2325  04C1                     __end_of_start_setup:
  2326                           
  2327                           	psect	text3
  2328  030B                     __ptext3:	
  2329 ;; *************** function _get_jump_full *****************
  2330 ;; Defined at:
  2331 ;;		line 251 in file "main.c"
  2332 ;; Parameters:    Size  Location     Type
  2333 ;;		None
  2334 ;; Auto vars:     Size  Location     Type
  2335 ;;  res             2    5[BANK0 ] unsigned int 
  2336 ;;  flag            1    7[BANK0 ] unsigned char 
  2337 ;; Return value:  Size  Location     Type
  2338 ;;                  1    wreg      void 
  2339 ;; Registers used:
  2340 ;;		wreg, status,2, status,0, pclath, cstack
  2341 ;; Tracked objects:
  2342 ;;		On entry : 0/0
  2343 ;;		On exit  : 0/0
  2344 ;;		Unchanged: 0/0
  2345 ;; Data sizes:     COMMON   BANK0   BANK1
  2346 ;;      Params:         0       0       0
  2347 ;;      Locals:         0       3       0
  2348 ;;      Temps:          0       1       0
  2349 ;;      Totals:         0       4       0
  2350 ;;Total ram usage:        4 bytes
  2351 ;; Hardware stack levels used: 1
  2352 ;; Hardware stack levels required when called: 8
  2353 ;; This function calls:
  2354 ;;		_ADC_GetConversion
  2355 ;; This function is called by:
  2356 ;;		_start_setup
  2357 ;; This function uses a non-reentrant model
  2358 ;;
  2359                           
  2360  030B                     _get_jump_full:	
  2361                           ;psect for function _get_jump_full
  2362                           
  2363  030B                     l391:	
  2364                           ;incstack = 0
  2365                           ; Regs used in _get_jump_full: [wreg+status,2+status,0+pclath+cstack]
  2366                           ;main.c: 253:     static signed char jump_counter;;main.c: 254:     do { ANSELAbits.ANSA
      +                          1 = 1; } while(0);
  2367                           
  2368  030B  0023               	movlb	3	; select bank3
  2369  030C  148C               	bsf	12,1	;volatile
  2370  030D                     l2427:
  2371                           
  2372                           ;main.c: 255:     char flag = 0;
  2373  030D  0020               	movlb	0	; select bank0
  2374  030E  01A7               	clrf	get_jump_full@flag
  2375  030F                     l2429:
  2376                           
  2377                           ;main.c: 257:         unsigned res = ADC_GetConversion(PIN_JUMP_STATE);
  2378  030F  3001               	movlw	1
  2379  0310  3185  25A8  3183   	fcall	_ADC_GetConversion
  2380  0313  0020               	movlb	0	; select bank0
  2381  0314  0821               	movf	?_ADC_GetConversion+1,w
  2382  0315  00A6               	movwf	get_jump_full@res+1
  2383  0316  0820               	movf	?_ADC_GetConversion,w
  2384  0317  00A5               	movwf	get_jump_full@res
  2385  0318                     l2431:
  2386                           
  2387                           ;main.c: 258:         if (res < 2000) jump_counter--;
  2388  0318  3007               	movlw	7
  2389  0319  0226               	subwf	get_jump_full@res+1,w
  2390  031A  30D0               	movlw	208
  2391  031B  1903               	skipnz
  2392  031C  0225               	subwf	get_jump_full@res,w
  2393  031D  1803               	skipnc
  2394  031E  2B20               	goto	u1651
  2395  031F  2B21               	goto	u1650
  2396  0320                     u1651:
  2397  0320  2B26               	goto	l2435
  2398  0321                     u1650:
  2399  0321                     l2433:
  2400  0321  30FF               	movlw	255
  2401  0322  00A4               	movwf	??_get_jump_full
  2402  0323  0824               	movf	??_get_jump_full,w
  2403  0324  07DA               	addwf	get_jump_full@jump_counter,f
  2404  0325  2B2A               	goto	l2437
  2405  0326                     l2435:
  2406  0326  3001               	movlw	1
  2407  0327  00A4               	movwf	??_get_jump_full
  2408  0328  0824               	movf	??_get_jump_full,w
  2409  0329  07DA               	addwf	get_jump_full@jump_counter,f
  2410  032A                     l2437:
  2411                           
  2412                           ;main.c: 273:         if (jump_counter > 10) {
  2413  032A  085A               	movf	get_jump_full@jump_counter,w
  2414  032B  3A80               	xorlw	128
  2415  032C  3E75               	addlw	-139
  2416  032D  1C03               	skipc
  2417  032E  2B30               	goto	u1661
  2418  032F  2B31               	goto	u1660
  2419  0330                     u1661:
  2420  0330  2B39               	goto	l2445
  2421  0331                     u1660:
  2422  0331                     l2439:
  2423                           
  2424                           ;main.c: 274:             jump_counter = 10;
  2425  0331  300A               	movlw	10
  2426  0332  00A4               	movwf	??_get_jump_full
  2427  0333  0824               	movf	??_get_jump_full,w
  2428  0334  00DA               	movwf	get_jump_full@jump_counter
  2429  0335                     l2441:
  2430                           
  2431                           ;main.c: 275:             FLAGS.bits._JUMP_CONNECTED = 0;
  2432  0335  127C               	bcf	_FLAGS,4
  2433  0336                     l2443:
  2434                           
  2435                           ;main.c: 276:             flag = 1;
  2436  0336  01A7               	clrf	get_jump_full@flag
  2437  0337  0AA7               	incf	get_jump_full@flag,f
  2438                           
  2439                           ;main.c: 277:         } else if (jump_counter<-10) {
  2440  0338  2B46               	goto	l2453
  2441  0339                     l2445:
  2442  0339  085A               	movf	get_jump_full@jump_counter,w
  2443  033A  3A80               	xorlw	128
  2444  033B  3E8A               	addlw	138
  2445  033C  1803               	skipnc
  2446  033D  2B3F               	goto	u1671
  2447  033E  2B40               	goto	u1670
  2448  033F                     u1671:
  2449  033F  2B46               	goto	l2453
  2450  0340                     u1670:
  2451  0340                     l2447:
  2452                           
  2453                           ;main.c: 278:             jump_counter = -10;
  2454  0340  30F6               	movlw	246
  2455  0341  00A4               	movwf	??_get_jump_full
  2456  0342  0824               	movf	??_get_jump_full,w
  2457  0343  00DA               	movwf	get_jump_full@jump_counter
  2458  0344                     l2449:
  2459                           
  2460                           ;main.c: 279:             FLAGS.bits._JUMP_CONNECTED = 1;
  2461  0344  167C               	bsf	_FLAGS,4
  2462  0345  2B36               	goto	l2443
  2463  0346                     l2453:
  2464                           
  2465                           ;main.c: 285:     } while (flag == 0);
  2466  0346  0827               	movf	get_jump_full@flag,w
  2467  0347  1903               	btfsc	3,2
  2468  0348  2B4A               	goto	u1681
  2469  0349  2B4B               	goto	u1680
  2470  034A                     u1681:
  2471  034A  2B0F               	goto	l2429
  2472  034B                     u1680:
  2473  034B                     l400:	
  2474                           ;main.c: 286:     do { ANSELAbits.ANSA1 = 0; } while(0);
  2475                           
  2476  034B  0023               	movlb	3	; select bank3
  2477  034C  108C               	bcf	12,1	;volatile
  2478  034D                     l402:
  2479  034D  0008               	return
  2480  034E                     __end_of_get_jump_full:
  2481                           
  2482                           	psect	text4
  2483  023A                     __ptext4:	
  2484 ;; *************** function _get_fun_full *****************
  2485 ;; Defined at:
  2486 ;;		line 177 in file "main.c"
  2487 ;; Parameters:    Size  Location     Type
  2488 ;;		None
  2489 ;; Auto vars:     Size  Location     Type
  2490 ;;  res             2    5[BANK0 ] unsigned int 
  2491 ;;  flag            1    7[BANK0 ] unsigned char 
  2492 ;; Return value:  Size  Location     Type
  2493 ;;                  1    wreg      void 
  2494 ;; Registers used:
  2495 ;;		wreg, status,2, status,0, pclath, cstack
  2496 ;; Tracked objects:
  2497 ;;		On entry : 0/0
  2498 ;;		On exit  : 0/0
  2499 ;;		Unchanged: 0/0
  2500 ;; Data sizes:     COMMON   BANK0   BANK1
  2501 ;;      Params:         0       0       0
  2502 ;;      Locals:         0       3       0
  2503 ;;      Temps:          0       1       0
  2504 ;;      Totals:         0       4       0
  2505 ;;Total ram usage:        4 bytes
  2506 ;; Hardware stack levels used: 1
  2507 ;; Hardware stack levels required when called: 8
  2508 ;; This function calls:
  2509 ;;		_ADC_GetConversion
  2510 ;; This function is called by:
  2511 ;;		_start_setup
  2512 ;; This function uses a non-reentrant model
  2513 ;;
  2514                           
  2515  023A                     _get_fun_full:	
  2516                           ;psect for function _get_fun_full
  2517                           
  2518  023A                     l357:	
  2519                           ;incstack = 0
  2520                           ; Regs used in _get_fun_full: [wreg+status,2+status,0+pclath+cstack]
  2521                           ;main.c: 179:     static signed char fun_counter;;main.c: 180:     do { LATCbits.LATC1 =
      +                           1; } while(0);
  2522                           
  2523  023A  0022               	movlb	2	; select bank2
  2524  023B  148E               	bsf	14,1	;volatile
  2525  023C                     l359:	
  2526                           ;main.c: 181:     do { ANSELCbits.ANSC2 = 1; } while(0);
  2527                           
  2528  023C  0023               	movlb	3	; select bank3
  2529  023D  150E               	bsf	14,2	;volatile
  2530  023E                     l2399:
  2531                           
  2532                           ;main.c: 182:     char flag = 0;
  2533  023E  0020               	movlb	0	; select bank0
  2534  023F  01A7               	clrf	get_fun_full@flag
  2535  0240                     l2401:
  2536                           
  2537                           ;main.c: 184:         unsigned res = ADC_GetConversion(PIN_FUN_STATE);
  2538  0240  3006               	movlw	6
  2539  0241  3185  25A8  3182   	fcall	_ADC_GetConversion
  2540  0244  0020               	movlb	0	; select bank0
  2541  0245  0821               	movf	?_ADC_GetConversion+1,w
  2542  0246  00A6               	movwf	get_fun_full@res+1
  2543  0247  0820               	movf	?_ADC_GetConversion,w
  2544  0248  00A5               	movwf	get_fun_full@res
  2545  0249                     l2403:
  2546                           
  2547                           ;main.c: 185:         if (res < 2000) fun_counter--;
  2548  0249  3007               	movlw	7
  2549  024A  0226               	subwf	get_fun_full@res+1,w
  2550  024B  30D0               	movlw	208
  2551  024C  1903               	skipnz
  2552  024D  0225               	subwf	get_fun_full@res,w
  2553  024E  1803               	skipnc
  2554  024F  2A51               	goto	u1611
  2555  0250  2A52               	goto	u1610
  2556  0251                     u1611:
  2557  0251  2A57               	goto	l2407
  2558  0252                     u1610:
  2559  0252                     l2405:
  2560  0252  30FF               	movlw	255
  2561  0253  00A4               	movwf	??_get_fun_full
  2562  0254  0824               	movf	??_get_fun_full,w
  2563  0255  07DC               	addwf	get_fun_full@fun_counter,f
  2564  0256  2A5B               	goto	l2409
  2565  0257                     l2407:
  2566  0257  3001               	movlw	1
  2567  0258  00A4               	movwf	??_get_fun_full
  2568  0259  0824               	movf	??_get_fun_full,w
  2569  025A  07DC               	addwf	get_fun_full@fun_counter,f
  2570  025B                     l2409:
  2571                           
  2572                           ;main.c: 201:           if (fun_counter > 10) {
  2573  025B  085C               	movf	get_fun_full@fun_counter,w
  2574  025C  3A80               	xorlw	128
  2575  025D  3E75               	addlw	-139
  2576  025E  1C03               	skipc
  2577  025F  2A61               	goto	u1621
  2578  0260  2A62               	goto	u1620
  2579  0261                     u1621:
  2580  0261  2A6A               	goto	l2417
  2581  0262                     u1620:
  2582  0262                     l2411:
  2583                           
  2584                           ;main.c: 202:             fun_counter = 10;
  2585  0262  300A               	movlw	10
  2586  0263  00A4               	movwf	??_get_fun_full
  2587  0264  0824               	movf	??_get_fun_full,w
  2588  0265  00DC               	movwf	get_fun_full@fun_counter
  2589  0266                     l2413:
  2590                           
  2591                           ;main.c: 203:             FLAGS.bits._FUN_CONNECTED = 0;
  2592  0266  11FC               	bcf	_FLAGS,3
  2593  0267                     l2415:
  2594                           
  2595                           ;main.c: 204:             flag = 1;
  2596  0267  01A7               	clrf	get_fun_full@flag
  2597  0268  0AA7               	incf	get_fun_full@flag,f
  2598                           
  2599                           ;main.c: 205:         } else if (fun_counter<-10) {
  2600  0269  2A77               	goto	l2425
  2601  026A                     l2417:
  2602  026A  085C               	movf	get_fun_full@fun_counter,w
  2603  026B  3A80               	xorlw	128
  2604  026C  3E8A               	addlw	138
  2605  026D  1803               	skipnc
  2606  026E  2A70               	goto	u1631
  2607  026F  2A71               	goto	u1630
  2608  0270                     u1631:
  2609  0270  2A77               	goto	l2425
  2610  0271                     u1630:
  2611  0271                     l2419:
  2612                           
  2613                           ;main.c: 206:             fun_counter = 10;
  2614  0271  300A               	movlw	10
  2615  0272  00A4               	movwf	??_get_fun_full
  2616  0273  0824               	movf	??_get_fun_full,w
  2617  0274  00DC               	movwf	get_fun_full@fun_counter
  2618  0275                     l2421:
  2619                           
  2620                           ;main.c: 207:             FLAGS.bits._FUN_CONNECTED = 1;
  2621  0275  15FC               	bsf	_FLAGS,3
  2622  0276  2A67               	goto	l2415
  2623  0277                     l2425:
  2624                           
  2625                           ;main.c: 212:     } while (flag == 0);
  2626  0277  0827               	movf	get_fun_full@flag,w
  2627  0278  1903               	btfsc	3,2
  2628  0279  2A7B               	goto	u1641
  2629  027A  2A7C               	goto	u1640
  2630  027B                     u1641:
  2631  027B  2A40               	goto	l2401
  2632  027C                     u1640:
  2633  027C                     l368:	
  2634                           ;main.c: 214:     do { ANSELCbits.ANSC2 = 0; } while(0);
  2635                           
  2636  027C  0023               	movlb	3	; select bank3
  2637  027D  110E               	bcf	14,2	;volatile
  2638  027E                     l370:	
  2639                           ;main.c: 215:     do { LATCbits.LATC1 = 0; } while(0);
  2640                           
  2641  027E  0022               	movlb	2	; select bank2
  2642  027F  108E               	bcf	14,1	;volatile
  2643  0280                     l372:
  2644  0280  0008               	return
  2645  0281                     __end_of_get_fun_full:
  2646                           
  2647                           	psect	text5
  2648  073B                     __ptext5:	
  2649 ;; *************** function _get_eeprom *****************
  2650 ;; Defined at:
  2651 ;;		line 474 in file "main.c"
  2652 ;; Parameters:    Size  Location     Type
  2653 ;;		None
  2654 ;; Auto vars:     Size  Location     Type
  2655 ;;		None
  2656 ;; Return value:  Size  Location     Type
  2657 ;;                  1    wreg      void 
  2658 ;; Registers used:
  2659 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2660 ;; Tracked objects:
  2661 ;;		On entry : 0/0
  2662 ;;		On exit  : 0/0
  2663 ;;		Unchanged: 0/0
  2664 ;; Data sizes:     COMMON   BANK0   BANK1
  2665 ;;      Params:         0       0       0
  2666 ;;      Locals:         0       0       0
  2667 ;;      Temps:          0       0       0
  2668 ;;      Totals:         0       0       0
  2669 ;;Total ram usage:        0 bytes
  2670 ;; Hardware stack levels used: 1
  2671 ;; Hardware stack levels required when called: 10
  2672 ;; This function calls:
  2673 ;;		_get_adr
  2674 ;;		_get_time
  2675 ;; This function is called by:
  2676 ;;		_start_setup
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680  073B                     _get_eeprom:	
  2681                           ;psect for function _get_eeprom
  2682                           
  2683  073B                     l2463:	
  2684                           ;incstack = 0
  2685                           ; Regs used in _get_eeprom: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2686                           
  2687                           
  2688                           ;main.c: 475:     get_adr();
  2689  073B  3181  2135  3187   	fcall	_get_adr
  2690                           
  2691                           ;main.c: 476:     get_time();
  2692  073E  3180  203F  3187   	fcall	_get_time
  2693  0741                     l507:
  2694  0741  0008               	return
  2695  0742                     __end_of_get_eeprom:
  2696                           
  2697                           	psect	text6
  2698  003F                     __ptext6:	
  2699 ;; *************** function _get_time *****************
  2700 ;; Defined at:
  2701 ;;		line 437 in file "main.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;		None
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;  q               1   40[BANK0 ] unsigned char 
  2706 ;;  q               1   38[BANK0 ] unsigned char 
  2707 ;;  q               1   39[BANK0 ] unsigned char 
  2708 ;;  i               1   36[BANK0 ] unsigned char 
  2709 ;;  times           9   20[BANK0 ] unsigned um[3]
  2710 ;;  time_count      3   30[BANK0 ] unsigned char [3]
  2711 ;;  buf2            3   33[BANK0 ] unsigned um
  2712 ;;  buf             1   37[BANK0 ] unsigned char 
  2713 ;;  adr_error       1   29[BANK0 ] unsigned char 
  2714 ;; Return value:  Size  Location     Type
  2715 ;;                  1    wreg      void 
  2716 ;; Registers used:
  2717 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2718 ;; Tracked objects:
  2719 ;;		On entry : 0/0
  2720 ;;		On exit  : 0/0
  2721 ;;		Unchanged: 0/0
  2722 ;; Data sizes:     COMMON   BANK0   BANK1
  2723 ;;      Params:         0       0       0
  2724 ;;      Locals:         0      21       0
  2725 ;;      Temps:          0       4       0
  2726 ;;      Totals:         0      25       0
  2727 ;;Total ram usage:       25 bytes
  2728 ;; Hardware stack levels used: 1
  2729 ;; Hardware stack levels required when called: 9
  2730 ;; This function calls:
  2731 ;;		_EEPROM_ReadShortLong
  2732 ;;		___bmul
  2733 ;; This function is called by:
  2734 ;;		_get_eeprom
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738  003F                     _get_time:	
  2739                           ;psect for function _get_time
  2740                           
  2741  003F                     l2277:	
  2742                           ;incstack = 0
  2743                           ; Regs used in _get_time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2744                           
  2745                           
  2746                           ;main.c: 439:     char adr_error = 0;
  2747  003F  0020               	movlb	0	; select bank0
  2748  0040  01BD               	clrf	get_time@adr_error
  2749                           
  2750                           ;main.c: 440:     char buf=0;
  2751  0041  01C5               	clrf	get_time@buf
  2752  0042                     l2279:
  2753  0042                     l2281:
  2754                           
  2755                           ;main.c: 442:     __uint24 times[3] = {};
  2756  0042  3034               	movlw	low get_time@times
  2757  0043  0086               	movwf	6
  2758  0044  3000               	movlw	high get_time@times
  2759  0045  0087               	movwf	7
  2760  0046  3009               	movlw	9
  2761  0047  00B0               	movwf	??_get_time
  2762  0048  3000               	movlw	0
  2763  0049                     u1480:
  2764  0049  001E               	movwi fsr1++
  2765  004A  0BB0               	decfsz	??_get_time,f
  2766  004B  2849               	goto	u1480
  2767  004C                     l2283:
  2768                           
  2769                           ;main.c: 443:     char time_count[3]={};
  2770  004C  3000               	movlw	0
  2771  004D  00BE               	movwf	get_time@time_count
  2772  004E  3000               	movlw	0
  2773  004F  00BF               	movwf	get_time@time_count+1
  2774  0050  3000               	movlw	0
  2775  0051  00C0               	movwf	get_time@time_count+2
  2776  0052                     l2285:
  2777                           
  2778                           ;main.c: 444:     for (unsigned char i = START_EEPROM_ADR; i < START_EEPROM_ADR + 0x10; 
      +                          i += 4) {
  2779  0052  085F               	movf	_START_EEPROM_ADR,w
  2780  0053  00B0               	movwf	??_get_time
  2781  0054  0830               	movf	??_get_time,w
  2782  0055  00C4               	movwf	get_time@i
  2783  0056  28E7               	goto	l2329
  2784  0057                     l2287:
  2785                           
  2786                           ;main.c: 445:         buf2 = EEPROM_ReadShortLong(i);
  2787  0057  0020               	movlb	0	; select bank0
  2788  0058  0844               	movf	get_time@i,w
  2789  0059  3182  2281  3180   	fcall	_EEPROM_ReadShortLong
  2790  005C  0020               	movlb	0	; select bank0
  2791  005D  0823               	movf	?_EEPROM_ReadShortLong,w
  2792  005E  00C1               	movwf	get_time@buf2
  2793  005F  0824               	movf	?_EEPROM_ReadShortLong+1,w
  2794  0060  00C2               	movwf	get_time@buf2+1
  2795  0061  0825               	movf	?_EEPROM_ReadShortLong+2,w
  2796  0062  00C3               	movwf	get_time@buf2+2
  2797  0063                     l2289:
  2798                           
  2799                           ;main.c: 447:         for (char q = 0; q < 3; q++) {
  2800  0063  01C6               	clrf	get_time@q
  2801  0064                     l2295:
  2802                           
  2803                           ;main.c: 448:             if (buf2 == times[q]) {
  2804  0064  3003               	movlw	3
  2805  0065  00B0               	movwf	??_get_time
  2806  0066  0830               	movf	??_get_time,w
  2807  0067  00A0               	movwf	___bmul@multiplicand
  2808  0068  0846               	movf	get_time@q,w
  2809  0069  3186  2656  3180   	fcall	___bmul
  2810  006C  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2811  006D  0086               	movwf	6
  2812  006E  0187               	clrf	7
  2813  006F  3F40               	moviw [0]fsr1
  2814  0070  0020               	movlb	0	; select bank0
  2815  0071  0641               	xorwf	get_time@buf2,w
  2816  0072  1D03               	skipz
  2817  0073  287A               	goto	u1495
  2818  0074  3F41               	moviw [1]fsr1
  2819  0075  0642               	xorwf	get_time@buf2+1,w
  2820  0076  1D03               	skipz
  2821  0077  287A               	goto	u1495
  2822  0078  3F42               	moviw [2]fsr1
  2823  0079  0643               	xorwf	get_time@buf2+2,w
  2824  007A                     u1495:
  2825  007A  1D03               	skipz
  2826  007B  287D               	goto	u1491
  2827  007C  287E               	goto	u1490
  2828  007D                     u1491:
  2829  007D  288C               	goto	l2301
  2830  007E                     u1490:
  2831  007E                     l2297:
  2832                           
  2833                           ;main.c: 449:                 time_count[q]++;
  2834  007E  3001               	movlw	1
  2835  007F  00B0               	movwf	??_get_time
  2836  0080  0846               	movf	get_time@q,w
  2837  0081  3E3E               	addlw	(low (get_time@time_count| 0))& (0+255)
  2838  0082  0086               	movwf	6
  2839  0083  0187               	clrf	7
  2840  0084  0830               	movf	??_get_time,w
  2841  0085  0781               	addwf	1,f
  2842  0086                     l2299:
  2843                           
  2844                           ;main.c: 450:                 buf2 = 0;
  2845  0086  3000               	movlw	0
  2846  0087  00C1               	movwf	get_time@buf2
  2847  0088  3000               	movlw	0
  2848  0089  00C2               	movwf	get_time@buf2+1
  2849  008A  3000               	movlw	0
  2850  008B  00C3               	movwf	get_time@buf2+2
  2851  008C                     l2301:
  2852                           
  2853                           ;main.c: 452:         }
  2854  008C  3001               	movlw	1
  2855  008D  00B0               	movwf	??_get_time
  2856  008E  0830               	movf	??_get_time,w
  2857  008F  07C6               	addwf	get_time@q,f
  2858  0090                     l2303:
  2859  0090  3003               	movlw	3
  2860  0091  0246               	subwf	get_time@q,w
  2861  0092  1C03               	skipc
  2862  0093  2895               	goto	u1501
  2863  0094  2896               	goto	u1500
  2864  0095                     u1501:
  2865  0095  2864               	goto	l2295
  2866  0096                     u1500:
  2867  0096                     l2305:
  2868                           
  2869                           ;main.c: 454:         if (buf2 != 0) {
  2870  0096  0843               	movf	get_time@buf2+2,w
  2871  0097  0442               	iorwf	get_time@buf2+1,w
  2872  0098  0441               	iorwf	get_time@buf2,w
  2873  0099  1903               	skipnz
  2874  009A  289C               	goto	u1511
  2875  009B  289D               	goto	u1510
  2876  009C                     u1511:
  2877  009C  28E3               	goto	l2327
  2878  009D                     u1510:
  2879  009D                     l2307:
  2880                           
  2881                           ;main.c: 455:             adr_error ++;
  2882  009D  3001               	movlw	1
  2883  009E  00B0               	movwf	??_get_time
  2884  009F  0830               	movf	??_get_time,w
  2885  00A0  07BD               	addwf	get_time@adr_error,f
  2886  00A1                     l2309:
  2887                           
  2888                           ;main.c: 456:             for (unsigned char q = 0; q < 3; q++)
  2889  00A1  01C8               	clrf	get_time@q_822
  2890  00A2                     l2315:
  2891                           
  2892                           ;main.c: 457:                 if (times[q]== 0) {
  2893  00A2  3003               	movlw	3
  2894  00A3  00B0               	movwf	??_get_time
  2895  00A4  0830               	movf	??_get_time,w
  2896  00A5  00A0               	movwf	___bmul@multiplicand
  2897  00A6  0848               	movf	get_time@q_822,w
  2898  00A7  3186  2656  3180   	fcall	___bmul
  2899  00AA  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2900  00AB  0086               	movwf	6
  2901  00AC  0187               	clrf	7
  2902  00AD  3F40               	moviw [0]fsr1
  2903  00AE  0020               	movlb	0	; select bank0
  2904  00AF  00B1               	movwf	??_get_time+1
  2905  00B0  3F41               	moviw [1]fsr1
  2906  00B1  00B2               	movwf	??_get_time+2
  2907  00B2  3F42               	moviw [2]fsr1
  2908  00B3  00B3               	movwf	??_get_time+3
  2909  00B4  0833               	movf	??_get_time+3,w
  2910  00B5  0432               	iorwf	??_get_time+2,w
  2911  00B6  0431               	iorwf	??_get_time+1,w
  2912  00B7  1D03               	skipz
  2913  00B8  28BA               	goto	u1521
  2914  00B9  28BB               	goto	u1520
  2915  00BA                     u1521:
  2916  00BA  28D9               	goto	l2323
  2917  00BB                     u1520:
  2918  00BB                     l2317:
  2919                           
  2920                           ;main.c: 458:                     times[q] = buf;
  2921  00BB  0845               	movf	get_time@buf,w
  2922  00BC  00B0               	movwf	??_get_time
  2923  00BD  01B1               	clrf	??_get_time+1
  2924  00BE  01B2               	clrf	??_get_time+2
  2925  00BF  3003               	movlw	3
  2926  00C0  00B3               	movwf	??_get_time+3
  2927  00C1  0833               	movf	??_get_time+3,w
  2928  00C2  00A0               	movwf	___bmul@multiplicand
  2929  00C3  0848               	movf	get_time@q_822,w
  2930  00C4  3186  2656  3180   	fcall	___bmul
  2931  00C7  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2932  00C8  0086               	movwf	6
  2933  00C9  0187               	clrf	7
  2934  00CA  0020               	movlb	0	; select bank0
  2935  00CB  0830               	movf	??_get_time,w
  2936  00CC  3FC0               	movwi [0]fsr1
  2937  00CD  0831               	movf	??_get_time+1,w
  2938  00CE  3FC1               	movwi [1]fsr1
  2939  00CF  0832               	movf	??_get_time+2,w
  2940  00D0  3FC2               	movwi [2]fsr1
  2941  00D1                     l2319:
  2942                           
  2943                           ;main.c: 459:                     time_count[q] = 1;
  2944  00D1  0848               	movf	get_time@q_822,w
  2945  00D2  3E3E               	addlw	(low (get_time@time_count| 0))& (0+255)
  2946  00D3  0086               	movwf	6
  2947  00D4  0187               	clrf	7
  2948  00D5  0181               	clrf	1
  2949  00D6  0A81               	incf	1,f
  2950  00D7                     l2321:
  2951                           
  2952                           ;main.c: 460:                     buf = 0;
  2953  00D7  01C5               	clrf	get_time@buf
  2954                           
  2955                           ;main.c: 461:                     break;
  2956  00D8  28E3               	goto	l2327
  2957  00D9                     l2323:
  2958  00D9  3001               	movlw	1
  2959  00DA  00B0               	movwf	??_get_time
  2960  00DB  0830               	movf	??_get_time,w
  2961  00DC  07C8               	addwf	get_time@q_822,f
  2962  00DD                     l2325:
  2963  00DD  3003               	movlw	3
  2964  00DE  0248               	subwf	get_time@q_822,w
  2965  00DF  1C03               	skipc
  2966  00E0  28E2               	goto	u1531
  2967  00E1  28E3               	goto	u1530
  2968  00E2                     u1531:
  2969  00E2  28A2               	goto	l2315
  2970  00E3                     u1530:
  2971  00E3                     l2327:
  2972                           
  2973                           ;main.c: 464:     }
  2974  00E3  3004               	movlw	4
  2975  00E4  00B0               	movwf	??_get_time
  2976  00E5  0830               	movf	??_get_time,w
  2977  00E6  07C4               	addwf	get_time@i,f
  2978  00E7                     l2329:
  2979  00E7  085F               	movf	_START_EEPROM_ADR,w
  2980  00E8  3E10               	addlw	16
  2981  00E9  00B0               	movwf	??_get_time
  2982  00EA  3000               	movlw	0
  2983  00EB  1803               	skipnc
  2984  00EC  3001               	movlw	1
  2985  00ED  00B1               	movwf	??_get_time+1
  2986  00EE  0831               	movf	??_get_time+1,w
  2987  00EF  3A80               	xorlw	128
  2988  00F0  3C80               	sublw	128
  2989  00F1  1D03               	skipz
  2990  00F2  28F5               	goto	u1545
  2991  00F3  0830               	movf	??_get_time,w
  2992  00F4  0244               	subwf	get_time@i,w
  2993  00F5                     u1545:
  2994  00F5  1C03               	skipc
  2995  00F6  28F8               	goto	u1541
  2996  00F7  28F9               	goto	u1540
  2997  00F8                     u1541:
  2998  00F8  2857               	goto	l2287
  2999  00F9                     u1540:
  3000  00F9                     l2331:
  3001                           
  3002                           ;main.c: 465:     buf = 0;
  3003  00F9  0020               	movlb	0	; select bank0
  3004  00FA  01C5               	clrf	get_time@buf
  3005                           
  3006                           ;main.c: 466:     for (unsigned char q = 0; q < 3; q++) {
  3007  00FB  01C7               	clrf	get_time@q_823
  3008  00FC                     l2337:
  3009                           
  3010                           ;main.c: 467:         if (time_count[q] > time_count[buf]) buf = q;
  3011  00FC  0845               	movf	get_time@buf,w
  3012  00FD  3E3E               	addlw	(low (get_time@time_count| 0))& (0+255)
  3013  00FE  0086               	movwf	6
  3014  00FF  0187               	clrf	7
  3015  0100  0847               	movf	get_time@q_823,w
  3016  0101  3E3E               	addlw	(low (get_time@time_count| 0))& (0+255)
  3017  0102  0084               	movwf	4
  3018  0103  0185               	clrf	5
  3019  0104  0800               	movf	0,w
  3020  0105  0201               	subwf	1,w
  3021  0106  1803               	skipnc
  3022  0107  2909               	goto	u1551
  3023  0108  290A               	goto	u1550
  3024  0109                     u1551:
  3025  0109  290E               	goto	l2341
  3026  010A                     u1550:
  3027  010A                     l2339:
  3028  010A  0847               	movf	get_time@q_823,w
  3029  010B  00B0               	movwf	??_get_time
  3030  010C  0830               	movf	??_get_time,w
  3031  010D  00C5               	movwf	get_time@buf
  3032  010E                     l2341:
  3033                           
  3034                           ;main.c: 468:     }
  3035  010E  3001               	movlw	1
  3036  010F  00B0               	movwf	??_get_time
  3037  0110  0830               	movf	??_get_time,w
  3038  0111  07C7               	addwf	get_time@q_823,f
  3039  0112                     l2343:
  3040  0112  3003               	movlw	3
  3041  0113  0247               	subwf	get_time@q_823,w
  3042  0114  1C03               	skipc
  3043  0115  2917               	goto	u1561
  3044  0116  2918               	goto	u1560
  3045  0117                     u1561:
  3046  0117  28FC               	goto	l2337
  3047  0118                     u1560:
  3048  0118                     l2345:
  3049                           
  3050                           ;main.c: 469:     time_s = times[buf];
  3051  0118  3003               	movlw	3
  3052  0119  00B0               	movwf	??_get_time
  3053  011A  0830               	movf	??_get_time,w
  3054  011B  00A0               	movwf	___bmul@multiplicand
  3055  011C  0845               	movf	get_time@buf,w
  3056  011D  3186  2656  3180   	fcall	___bmul
  3057  0120  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  3058  0121  0086               	movwf	6
  3059  0122  0187               	clrf	7
  3060  0123  3F40               	moviw [0]fsr1
  3061  0124  0020               	movlb	0	; select bank0
  3062  0125  00D5               	movwf	_time_s
  3063  0126  3F41               	moviw [1]fsr1
  3064  0127  00D6               	movwf	_time_s+1
  3065  0128  3F42               	moviw [2]fsr1
  3066  0129  00D7               	movwf	_time_s+2
  3067  012A                     l2347:
  3068                           
  3069                           ;main.c: 471:     if (adr_error>1) START_EEPROM_ADR += 0x10;
  3070  012A  3002               	movlw	2
  3071  012B  023D               	subwf	get_time@adr_error,w
  3072  012C  1C03               	skipc
  3073  012D  292F               	goto	u1571
  3074  012E  2930               	goto	u1570
  3075  012F                     u1571:
  3076  012F  2934               	goto	l504
  3077  0130                     u1570:
  3078  0130                     l2349:
  3079  0130  3010               	movlw	16
  3080  0131  00B0               	movwf	??_get_time
  3081  0132  0830               	movf	??_get_time,w
  3082  0133  07DF               	addwf	_START_EEPROM_ADR,f
  3083  0134                     l504:
  3084  0134  0008               	return
  3085  0135                     __end_of_get_time:
  3086                           
  3087                           	psect	text7
  3088  0656                     __ptext7:	
  3089 ;; *************** function ___bmul *****************
  3090 ;; Defined at:
  3091 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul8.c"
  3092 ;; Parameters:    Size  Location     Type
  3093 ;;  multiplier      1    wreg     unsigned char 
  3094 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3095 ;; Auto vars:     Size  Location     Type
  3096 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3097 ;;  product         1    2[BANK0 ] unsigned char 
  3098 ;; Return value:  Size  Location     Type
  3099 ;;                  1    wreg      unsigned char 
  3100 ;; Registers used:
  3101 ;;		wreg, status,2, status,0
  3102 ;; Tracked objects:
  3103 ;;		On entry : 0/0
  3104 ;;		On exit  : 0/0
  3105 ;;		Unchanged: 0/0
  3106 ;; Data sizes:     COMMON   BANK0   BANK1
  3107 ;;      Params:         0       1       0
  3108 ;;      Locals:         0       2       0
  3109 ;;      Temps:          0       1       0
  3110 ;;      Totals:         0       4       0
  3111 ;;Total ram usage:        4 bytes
  3112 ;; Hardware stack levels used: 1
  3113 ;; Hardware stack levels required when called: 7
  3114 ;; This function calls:
  3115 ;;		Nothing
  3116 ;; This function is called by:
  3117 ;;		_get_time
  3118 ;; This function uses a non-reentrant model
  3119 ;;
  3120                           
  3121  0656                     ___bmul:	
  3122                           ;psect for function ___bmul
  3123                           
  3124                           
  3125                           ;incstack = 0
  3126                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3127                           ;___bmul@multiplier stored from wreg
  3128  0656  0020               	movlb	0	; select bank0
  3129  0657  00A3               	movwf	___bmul@multiplier
  3130  0658                     l2077:
  3131  0658  01A2               	clrf	___bmul@product
  3132  0659                     l2079:
  3133  0659  1C23               	btfss	___bmul@multiplier,0
  3134  065A  2E5C               	goto	u1201
  3135  065B  2E5D               	goto	u1200
  3136  065C                     u1201:
  3137  065C  2E61               	goto	l2083
  3138  065D                     u1200:
  3139  065D                     l2081:
  3140  065D  0820               	movf	___bmul@multiplicand,w
  3141  065E  00A1               	movwf	??___bmul
  3142  065F  0821               	movf	??___bmul,w
  3143  0660  07A2               	addwf	___bmul@product,f
  3144  0661                     l2083:
  3145  0661  1003               	clrc
  3146  0662  0DA0               	rlf	___bmul@multiplicand,f
  3147  0663                     l2085:
  3148  0663  1003               	clrc
  3149  0664  0CA3               	rrf	___bmul@multiplier,f
  3150  0665  0823               	movf	___bmul@multiplier,w
  3151  0666  1D03               	btfss	3,2
  3152  0667  2E69               	goto	u1211
  3153  0668  2E6A               	goto	u1210
  3154  0669                     u1211:
  3155  0669  2E59               	goto	l2079
  3156  066A                     u1210:
  3157  066A                     l2087:
  3158  066A  0822               	movf	___bmul@product,w
  3159  066B                     l773:
  3160  066B  0008               	return
  3161  066C                     __end_of___bmul:
  3162                           
  3163                           	psect	text8
  3164  0281                     __ptext8:	
  3165 ;; *************** function _EEPROM_ReadShortLong *****************
  3166 ;; Defined at:
  3167 ;;		line 48 in file "eeprom.c"
  3168 ;; Parameters:    Size  Location     Type
  3169 ;;  addr            1    wreg     unsigned char 
  3170 ;; Auto vars:     Size  Location     Type
  3171 ;;  addr            1   15[BANK0 ] unsigned char 
  3172 ;;  dt              3   12[BANK0 ] unsigned um
  3173 ;; Return value:  Size  Location     Type
  3174 ;;                  3    3[BANK0 ] unsigned um
  3175 ;; Registers used:
  3176 ;;		wreg, status,2, status,0, pclath, cstack
  3177 ;; Tracked objects:
  3178 ;;		On entry : 0/0
  3179 ;;		On exit  : 0/0
  3180 ;;		Unchanged: 0/0
  3181 ;; Data sizes:     COMMON   BANK0   BANK1
  3182 ;;      Params:         0       3       0
  3183 ;;      Locals:         0       4       0
  3184 ;;      Temps:          0       6       0
  3185 ;;      Totals:         0      13       0
  3186 ;;Total ram usage:       13 bytes
  3187 ;; Hardware stack levels used: 1
  3188 ;; Hardware stack levels required when called: 8
  3189 ;; This function calls:
  3190 ;;		_EEPROM_ReadByte
  3191 ;; This function is called by:
  3192 ;;		_get_time
  3193 ;; This function uses a non-reentrant model
  3194 ;;
  3195                           
  3196  0281                     _EEPROM_ReadShortLong:	
  3197                           ;psect for function _EEPROM_ReadShortLong
  3198                           
  3199                           
  3200                           ;incstack = 0
  3201                           ; Regs used in _EEPROM_ReadShortLong: [wreg+status,2+status,0+pclath+cstack]
  3202                           ;EEPROM_ReadShortLong@addr stored from wreg
  3203  0281  0020               	movlb	0	; select bank0
  3204  0282  00AF               	movwf	EEPROM_ReadShortLong@addr
  3205  0283                     l2069:
  3206                           
  3207                           ;eeprom.c: 49:     __uint24 dt = EEPROM_ReadByte(addr + 2)*256*256;
  3208  0283  082F               	movf	EEPROM_ReadShortLong@addr,w
  3209  0284  3E02               	addlw	2
  3210  0285  3186  263D  3182   	fcall	_EEPROM_ReadByte
  3211  0288  0020               	movlb	0	; select bank0
  3212  0289  00A6               	movwf	??_EEPROM_ReadShortLong
  3213  028A  01A7               	clrf	??_EEPROM_ReadShortLong+1
  3214  028B  0826               	movf	??_EEPROM_ReadShortLong,w
  3215  028C  00A7               	movwf	??_EEPROM_ReadShortLong+1
  3216  028D  01A6               	clrf	??_EEPROM_ReadShortLong
  3217  028E  0826               	movf	??_EEPROM_ReadShortLong,w
  3218  028F  00A7               	movwf	??_EEPROM_ReadShortLong+1
  3219  0290  01A6               	clrf	??_EEPROM_ReadShortLong
  3220  0291  0826               	movf	??_EEPROM_ReadShortLong,w
  3221  0292  00AC               	movwf	EEPROM_ReadShortLong@dt
  3222  0293  0827               	movf	??_EEPROM_ReadShortLong+1,w
  3223  0294  00AD               	movwf	EEPROM_ReadShortLong@dt+1
  3224  0295  0D89               	rlf	9,f
  3225  0296  3B89               	subwfb	9,f
  3226  0297  0989               	comf	9,f
  3227  0298  00AE               	movwf	EEPROM_ReadShortLong@dt+2
  3228                           
  3229                           ;eeprom.c: 50:     dt += EEPROM_ReadByte(addr + 1)*256;
  3230  0299  082F               	movf	EEPROM_ReadShortLong@addr,w
  3231  029A  3E01               	addlw	1
  3232  029B  3186  263D  3182   	fcall	_EEPROM_ReadByte
  3233  029E  0020               	movlb	0	; select bank0
  3234  029F  00A6               	movwf	??_EEPROM_ReadShortLong
  3235  02A0  01A7               	clrf	??_EEPROM_ReadShortLong+1
  3236  02A1  0826               	movf	??_EEPROM_ReadShortLong,w
  3237  02A2  00A7               	movwf	??_EEPROM_ReadShortLong+1
  3238  02A3  01A6               	clrf	??_EEPROM_ReadShortLong
  3239  02A4  0826               	movf	??_EEPROM_ReadShortLong,w
  3240  02A5  00A9               	movwf	??_EEPROM_ReadShortLong+3
  3241  02A6  0827               	movf	??_EEPROM_ReadShortLong+1,w
  3242  02A7  00AA               	movwf	??_EEPROM_ReadShortLong+4
  3243  02A8  3000               	movlw	0
  3244  02A9  1BAA               	btfsc	??_EEPROM_ReadShortLong+4,7
  3245  02AA  30FF               	movlw	255
  3246  02AB  00AB               	movwf	??_EEPROM_ReadShortLong+5
  3247  02AC  0829               	movf	??_EEPROM_ReadShortLong+3,w
  3248  02AD  07AC               	addwf	EEPROM_ReadShortLong@dt,f
  3249  02AE  082A               	movf	??_EEPROM_ReadShortLong+4,w
  3250  02AF  3DAD               	addwfc	EEPROM_ReadShortLong@dt+1,f
  3251  02B0  082B               	movf	??_EEPROM_ReadShortLong+5,w
  3252  02B1  3DAE               	addwfc	EEPROM_ReadShortLong@dt+2,f
  3253  02B2                     l2071:
  3254                           
  3255                           ;eeprom.c: 51:     dt += EEPROM_ReadByte(addr);
  3256  02B2  082F               	movf	EEPROM_ReadShortLong@addr,w
  3257  02B3  3186  263D  3182   	fcall	_EEPROM_ReadByte
  3258  02B6  0020               	movlb	0	; select bank0
  3259  02B7  00A6               	movwf	??_EEPROM_ReadShortLong
  3260  02B8  01A7               	clrf	??_EEPROM_ReadShortLong+1
  3261  02B9  01A8               	clrf	??_EEPROM_ReadShortLong+2
  3262  02BA  0826               	movf	??_EEPROM_ReadShortLong,w
  3263  02BB  07AC               	addwf	EEPROM_ReadShortLong@dt,f
  3264  02BC  0827               	movf	??_EEPROM_ReadShortLong+1,w
  3265  02BD  3DAD               	addwfc	EEPROM_ReadShortLong@dt+1,f
  3266  02BE  0828               	movf	??_EEPROM_ReadShortLong+2,w
  3267  02BF  3DAE               	addwfc	EEPROM_ReadShortLong@dt+2,f
  3268  02C0                     l2073:
  3269                           
  3270                           ;eeprom.c: 52:     return dt;
  3271  02C0  082C               	movf	EEPROM_ReadShortLong@dt,w
  3272  02C1  00A3               	movwf	?_EEPROM_ReadShortLong
  3273  02C2  082D               	movf	EEPROM_ReadShortLong@dt+1,w
  3274  02C3  00A4               	movwf	?_EEPROM_ReadShortLong+1
  3275  02C4  082E               	movf	EEPROM_ReadShortLong@dt+2,w
  3276  02C5  00A5               	movwf	?_EEPROM_ReadShortLong+2
  3277  02C6                     l579:
  3278  02C6  0008               	return
  3279  02C7                     __end_of_EEPROM_ReadShortLong:
  3280                           
  3281                           	psect	text9
  3282  0135                     __ptext9:	
  3283 ;; *************** function _get_adr *****************
  3284 ;; Defined at:
  3285 ;;		line 404 in file "main.c"
  3286 ;; Parameters:    Size  Location     Type
  3287 ;;		None
  3288 ;; Auto vars:     Size  Location     Type
  3289 ;;  q               1   23[BANK0 ] unsigned char 
  3290 ;;  q               1   21[BANK0 ] unsigned char 
  3291 ;;  i               1   22[BANK0 ] unsigned char 
  3292 ;;  i               1   20[BANK0 ] unsigned char 
  3293 ;;  adr            16    4[BANK0 ] unsigned char [2][8]
  3294 ;;  buf             1   24[BANK0 ] unsigned char 
  3295 ;; Return value:  Size  Location     Type
  3296 ;;                  1    wreg      void 
  3297 ;; Registers used:
  3298 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3299 ;; Tracked objects:
  3300 ;;		On entry : 0/0
  3301 ;;		On exit  : 0/0
  3302 ;;		Unchanged: 0/0
  3303 ;; Data sizes:     COMMON   BANK0   BANK1
  3304 ;;      Params:         0       0       0
  3305 ;;      Locals:         0      21       0
  3306 ;;      Temps:          0       1       0
  3307 ;;      Totals:         0      22       0
  3308 ;;Total ram usage:       22 bytes
  3309 ;; Hardware stack levels used: 1
  3310 ;; Hardware stack levels required when called: 8
  3311 ;; This function calls:
  3312 ;;		_EEPROM_ReadByte
  3313 ;; This function is called by:
  3314 ;;		_get_eeprom
  3315 ;; This function uses a non-reentrant model
  3316 ;;
  3317                           
  3318  0135                     _get_adr:	
  3319                           ;psect for function _get_adr
  3320                           
  3321  0135                     l2201:	
  3322                           ;incstack = 0
  3323                           ; Regs used in _get_adr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3324                           
  3325  0135                     l2203:
  3326                           
  3327                           ;main.c: 406:     char adr[8][2] = {};
  3328  0135  3024               	movlw	low get_adr@adr
  3329  0136  0086               	movwf	6
  3330  0137  3000               	movlw	high get_adr@adr
  3331  0138  0087               	movwf	7
  3332  0139  3010               	movlw	16
  3333  013A  0020               	movlb	0	; select bank0
  3334  013B  00A3               	movwf	??_get_adr
  3335  013C  3000               	movlw	0
  3336  013D                     u1360:
  3337  013D  001E               	movwi fsr1++
  3338  013E  0BA3               	decfsz	??_get_adr,f
  3339  013F  293D               	goto	u1360
  3340  0140                     l2205:
  3341                           
  3342                           ;main.c: 408:     for (unsigned char i = 0; i < 8; i++) {
  3343  0140  01B4               	clrf	get_adr@i
  3344  0141                     l2211:
  3345                           
  3346                           ;main.c: 409:         buf = EEPROM_ReadByte(i);
  3347  0141  0834               	movf	get_adr@i,w
  3348  0142  3186  263D  3181   	fcall	_EEPROM_ReadByte
  3349  0145  0020               	movlb	0	; select bank0
  3350  0146  00A3               	movwf	??_get_adr
  3351  0147  0823               	movf	??_get_adr,w
  3352  0148  00B8               	movwf	get_adr@buf
  3353  0149                     l2213:
  3354                           
  3355                           ;main.c: 410:         if (buf == 0) continue;
  3356  0149  0838               	movf	get_adr@buf,w
  3357  014A  1D03               	btfss	3,2
  3358  014B  294D               	goto	u1371
  3359  014C  294E               	goto	u1370
  3360  014D                     u1371:
  3361  014D  294F               	goto	l2217
  3362  014E                     u1370:
  3363  014E  2997               	goto	l2251
  3364  014F                     l2217:
  3365                           
  3366                           ;main.c: 411:         for (unsigned char q = 0; q < 8; q++) {
  3367  014F  01B5               	clrf	get_adr@q
  3368  0150                     l2223:
  3369                           
  3370                           ;main.c: 412:             if (buf == adr[q][0]) {
  3371  0150  3535               	lslf	get_adr@q,w
  3372  0151  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3373  0152  0086               	movwf	6
  3374  0153  0187               	clrf	7
  3375  0154  0801               	movf	1,w
  3376  0155  0638               	xorwf	get_adr@buf,w
  3377  0156  1D03               	skipz
  3378  0157  2959               	goto	u1381
  3379  0158  295A               	goto	u1380
  3380  0159                     u1381:
  3381  0159  2964               	goto	l2229
  3382  015A                     u1380:
  3383  015A                     l2225:
  3384                           
  3385                           ;main.c: 413:                 (adr[q][1])++;
  3386  015A  3001               	movlw	1
  3387  015B  00A3               	movwf	??_get_adr
  3388  015C  1403               	setc
  3389  015D  0D35               	rlf	get_adr@q,w
  3390  015E  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3391  015F  0086               	movwf	6
  3392  0160  0187               	clrf	7
  3393  0161  0823               	movf	??_get_adr,w
  3394  0162  0781               	addwf	1,f
  3395  0163                     l2227:
  3396                           
  3397                           ;main.c: 414:                 buf = 0;
  3398  0163  01B8               	clrf	get_adr@buf
  3399  0164                     l2229:
  3400                           
  3401                           ;main.c: 416:         }
  3402  0164  3001               	movlw	1
  3403  0165  00A3               	movwf	??_get_adr
  3404  0166  0823               	movf	??_get_adr,w
  3405  0167  07B5               	addwf	get_adr@q,f
  3406  0168                     l2231:
  3407  0168  3008               	movlw	8
  3408  0169  0235               	subwf	get_adr@q,w
  3409  016A  1C03               	skipc
  3410  016B  296D               	goto	u1391
  3411  016C  296E               	goto	u1390
  3412  016D                     u1391:
  3413  016D  2950               	goto	l2223
  3414  016E                     u1390:
  3415  016E                     l2233:
  3416                           
  3417                           ;main.c: 418:         if (buf != 0) {
  3418  016E  0838               	movf	get_adr@buf,w
  3419  016F  1903               	btfsc	3,2
  3420  0170  2972               	goto	u1401
  3421  0171  2973               	goto	u1400
  3422  0172                     u1401:
  3423  0172  2997               	goto	l2251
  3424  0173                     u1400:
  3425  0173                     l2235:
  3426                           
  3427                           ;main.c: 419:             for (unsigned char q = 0; q < 8; q++)
  3428  0173  01B7               	clrf	get_adr@q_810
  3429  0174                     l2241:
  3430                           
  3431                           ;main.c: 420:                 if (adr[q][0] == 0) {
  3432  0174  3537               	lslf	get_adr@q_810,w
  3433  0175  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3434  0176  0086               	movwf	6
  3435  0177  0187               	clrf	7
  3436  0178  0801               	movf	1,w
  3437  0179  1D03               	btfss	3,2
  3438  017A  297C               	goto	u1411
  3439  017B  297D               	goto	u1410
  3440  017C                     u1411:
  3441  017C  298D               	goto	l2247
  3442  017D                     u1410:
  3443  017D                     l2243:
  3444                           
  3445                           ;main.c: 421:                     adr[q][0] = buf;
  3446  017D  0838               	movf	get_adr@buf,w
  3447  017E  00A3               	movwf	??_get_adr
  3448  017F  3537               	lslf	get_adr@q_810,w
  3449  0180  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3450  0181  0086               	movwf	6
  3451  0182  0187               	clrf	7
  3452  0183  0823               	movf	??_get_adr,w
  3453  0184  0081               	movwf	1
  3454                           
  3455                           ;main.c: 422:                     adr[q][1] = 1;
  3456  0185  1403               	setc
  3457  0186  0D37               	rlf	get_adr@q_810,w
  3458  0187  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3459  0188  0086               	movwf	6
  3460  0189  0187               	clrf	7
  3461  018A  0181               	clrf	1
  3462  018B  0A81               	incf	1,f
  3463  018C                     l2245:
  3464                           
  3465                           ;main.c: 424:                     break;
  3466  018C  2997               	goto	l2251
  3467  018D                     l2247:
  3468  018D  3001               	movlw	1
  3469  018E  00A3               	movwf	??_get_adr
  3470  018F  0823               	movf	??_get_adr,w
  3471  0190  07B7               	addwf	get_adr@q_810,f
  3472  0191                     l2249:
  3473  0191  3008               	movlw	8
  3474  0192  0237               	subwf	get_adr@q_810,w
  3475  0193  1C03               	skipc
  3476  0194  2996               	goto	u1421
  3477  0195  2997               	goto	u1420
  3478  0196                     u1421:
  3479  0196  2974               	goto	l2241
  3480  0197                     u1420:
  3481  0197                     l2251:
  3482  0197  3001               	movlw	1
  3483  0198  00A3               	movwf	??_get_adr
  3484  0199  0823               	movf	??_get_adr,w
  3485  019A  07B4               	addwf	get_adr@i,f
  3486  019B                     l2253:
  3487  019B  3008               	movlw	8
  3488  019C  0234               	subwf	get_adr@i,w
  3489  019D  1C03               	skipc
  3490  019E  29A0               	goto	u1431
  3491  019F  29A1               	goto	u1430
  3492  01A0                     u1431:
  3493  01A0  2941               	goto	l2211
  3494  01A1                     u1430:
  3495  01A1                     l2255:
  3496                           
  3497                           ;main.c: 428:     buf = 0;
  3498  01A1  01B8               	clrf	get_adr@buf
  3499                           
  3500                           ;main.c: 429:     for (unsigned char i = 0; i < 8; i++) {
  3501  01A2  01B6               	clrf	get_adr@i_811
  3502  01A3                     l2261:
  3503                           
  3504                           ;main.c: 430:         if (adr[i][1] > adr[buf][1]) buf = i;
  3505  01A3  1403               	setc
  3506  01A4  0D38               	rlf	get_adr@buf,w
  3507  01A5  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3508  01A6  0086               	movwf	6
  3509  01A7  0187               	clrf	7
  3510  01A8  1403               	setc
  3511  01A9  0D36               	rlf	get_adr@i_811,w
  3512  01AA  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3513  01AB  0084               	movwf	4
  3514  01AC  0185               	clrf	5
  3515  01AD  0800               	movf	0,w
  3516  01AE  0201               	subwf	1,w
  3517  01AF  1803               	skipnc
  3518  01B0  29B2               	goto	u1441
  3519  01B1  29B3               	goto	u1440
  3520  01B2                     u1441:
  3521  01B2  29B7               	goto	l2265
  3522  01B3                     u1440:
  3523  01B3                     l2263:
  3524  01B3  0836               	movf	get_adr@i_811,w
  3525  01B4  00A3               	movwf	??_get_adr
  3526  01B5  0823               	movf	??_get_adr,w
  3527  01B6  00B8               	movwf	get_adr@buf
  3528  01B7                     l2265:
  3529                           
  3530                           ;main.c: 431:     }
  3531  01B7  3001               	movlw	1
  3532  01B8  00A3               	movwf	??_get_adr
  3533  01B9  0823               	movf	??_get_adr,w
  3534  01BA  07B6               	addwf	get_adr@i_811,f
  3535  01BB                     l2267:
  3536  01BB  3008               	movlw	8
  3537  01BC  0236               	subwf	get_adr@i_811,w
  3538  01BD  1C03               	skipc
  3539  01BE  29C0               	goto	u1451
  3540  01BF  29C1               	goto	u1450
  3541  01C0                     u1451:
  3542  01C0  29A3               	goto	l2261
  3543  01C1                     u1450:
  3544  01C1                     l2269:
  3545                           
  3546                           ;main.c: 432:     START_EEPROM_ADR = adr[buf][0];
  3547  01C1  3538               	lslf	get_adr@buf,w
  3548  01C2  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3549  01C3  0086               	movwf	6
  3550  01C4  0187               	clrf	7
  3551  01C5  0801               	movf	1,w
  3552  01C6  00A3               	movwf	??_get_adr
  3553  01C7  0823               	movf	??_get_adr,w
  3554  01C8  00DF               	movwf	_START_EEPROM_ADR
  3555  01C9                     l2271:
  3556                           
  3557                           ;main.c: 433:     if (START_EEPROM_ADR == 0 || START_EEPROM_ADR == 0xFF) START_EEPROM_AD
      +                          R = 0x10;
  3558  01C9  085F               	movf	_START_EEPROM_ADR,w
  3559  01CA  1903               	btfsc	3,2
  3560  01CB  29CD               	goto	u1461
  3561  01CC  29CE               	goto	u1460
  3562  01CD                     u1461:
  3563  01CD  29D3               	goto	l2275
  3564  01CE                     u1460:
  3565  01CE                     l2273:
  3566  01CE  0A5F               	incf	_START_EEPROM_ADR,w
  3567  01CF  1D03               	btfss	3,2
  3568  01D0  29D2               	goto	u1471
  3569  01D1  29D3               	goto	u1470
  3570  01D2                     u1471:
  3571  01D2  29D7               	goto	l483
  3572  01D3                     u1470:
  3573  01D3                     l2275:
  3574  01D3  3010               	movlw	16
  3575  01D4  00A3               	movwf	??_get_adr
  3576  01D5  0823               	movf	??_get_adr,w
  3577  01D6  00DF               	movwf	_START_EEPROM_ADR
  3578  01D7                     l483:
  3579  01D7  0008               	return
  3580  01D8                     __end_of_get_adr:
  3581                           
  3582                           	psect	text10
  3583  077B                     __ptext10:	
  3584 ;; *************** function _TMR2_StartTimer *****************
  3585 ;; Defined at:
  3586 ;;		line 87 in file "mcc_generated_files/tmr2.c"
  3587 ;; Parameters:    Size  Location     Type
  3588 ;;		None
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;		None
  3591 ;; Return value:  Size  Location     Type
  3592 ;;                  1    wreg      void 
  3593 ;; Registers used:
  3594 ;;		None
  3595 ;; Tracked objects:
  3596 ;;		On entry : 0/0
  3597 ;;		On exit  : 0/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMMON   BANK0   BANK1
  3600 ;;      Params:         0       0       0
  3601 ;;      Locals:         0       0       0
  3602 ;;      Temps:          0       0       0
  3603 ;;      Totals:         0       0       0
  3604 ;;Total ram usage:        0 bytes
  3605 ;; Hardware stack levels used: 1
  3606 ;; Hardware stack levels required when called: 7
  3607 ;; This function calls:
  3608 ;;		Nothing
  3609 ;; This function is called by:
  3610 ;;		_start_setup
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614  077B                     _TMR2_StartTimer:	
  3615                           ;psect for function _TMR2_StartTimer
  3616                           
  3617  077B                     l2353:	
  3618                           ;incstack = 0
  3619                           ; Regs used in _TMR2_StartTimer: []
  3620                           
  3621                           
  3622                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
  3623  077B  0020               	movlb	0	; select bank0
  3624  077C  151C               	bsf	28,2	;volatile
  3625  077D                     l142:
  3626  077D  0008               	return
  3627  077E                     __end_of_TMR2_StartTimer:
  3628                           
  3629                           	psect	text11
  3630  066C                     __ptext11:	
  3631 ;; *************** function _SYSTEM_Initialize *****************
  3632 ;; Defined at:
  3633 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3634 ;; Parameters:    Size  Location     Type
  3635 ;;		None
  3636 ;; Auto vars:     Size  Location     Type
  3637 ;;		None
  3638 ;; Return value:  Size  Location     Type
  3639 ;;                  1    wreg      void 
  3640 ;; Registers used:
  3641 ;;		wreg, status,2, status,0, pclath, cstack
  3642 ;; Tracked objects:
  3643 ;;		On entry : 0/0
  3644 ;;		On exit  : 0/0
  3645 ;;		Unchanged: 0/0
  3646 ;; Data sizes:     COMMON   BANK0   BANK1
  3647 ;;      Params:         0       0       0
  3648 ;;      Locals:         0       0       0
  3649 ;;      Temps:          0       0       0
  3650 ;;      Totals:         0       0       0
  3651 ;;Total ram usage:        0 bytes
  3652 ;; Hardware stack levels used: 1
  3653 ;; Hardware stack levels required when called: 9
  3654 ;; This function calls:
  3655 ;;		_ADC_Initialize
  3656 ;;		_FVR_Initialize
  3657 ;;		_OSCILLATOR_Initialize
  3658 ;;		_PIN_MANAGER_Initialize
  3659 ;;		_TMR0_Initialize
  3660 ;;		_TMR2_Initialize
  3661 ;;		_WDT_Initialize
  3662 ;; This function is called by:
  3663 ;;		_start_setup
  3664 ;; This function uses a non-reentrant model
  3665 ;;
  3666                           
  3667  066C                     _SYSTEM_Initialize:	
  3668                           ;psect for function _SYSTEM_Initialize
  3669                           
  3670  066C                     l2351:	
  3671                           ;incstack = 0
  3672                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3673                           
  3674                           
  3675                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  3676  066C  3186  2698  3186   	fcall	_PIN_MANAGER_Initialize
  3677                           
  3678                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  3679  066F  3187  2742  3186   	fcall	_OSCILLATOR_Initialize
  3680                           
  3681                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  3682  0672  3187  276A  3186   	fcall	_WDT_Initialize
  3683                           
  3684                           ;mcc_generated_files/mcc.c: 56:     FVR_Initialize();
  3685  0675  3187  276E  3186   	fcall	_FVR_Initialize
  3686                           
  3687                           ;mcc_generated_files/mcc.c: 57:     ADC_Initialize();
  3688  0678  3187  2733  3186   	fcall	_ADC_Initialize
  3689                           
  3690                           ;mcc_generated_files/mcc.c: 58:     TMR2_Initialize();
  3691  067B  3186  26C2  3186   	fcall	_TMR2_Initialize
  3692                           
  3693                           ;mcc_generated_files/mcc.c: 59:     TMR0_Initialize();
  3694  067E  3186  2682  3186   	fcall	_TMR0_Initialize
  3695  0681                     l25:
  3696  0681  0008               	return
  3697  0682                     __end_of_SYSTEM_Initialize:
  3698                           
  3699                           	psect	text12
  3700  076A                     __ptext12:	
  3701 ;; *************** function _WDT_Initialize *****************
  3702 ;; Defined at:
  3703 ;;		line 72 in file "mcc_generated_files/mcc.c"
  3704 ;; Parameters:    Size  Location     Type
  3705 ;;		None
  3706 ;; Auto vars:     Size  Location     Type
  3707 ;;		None
  3708 ;; Return value:  Size  Location     Type
  3709 ;;                  1    wreg      void 
  3710 ;; Registers used:
  3711 ;;		wreg
  3712 ;; Tracked objects:
  3713 ;;		On entry : 0/0
  3714 ;;		On exit  : 0/0
  3715 ;;		Unchanged: 0/0
  3716 ;; Data sizes:     COMMON   BANK0   BANK1
  3717 ;;      Params:         0       0       0
  3718 ;;      Locals:         0       0       0
  3719 ;;      Temps:          0       0       0
  3720 ;;      Totals:         0       0       0
  3721 ;;Total ram usage:        0 bytes
  3722 ;; Hardware stack levels used: 1
  3723 ;; Hardware stack levels required when called: 7
  3724 ;; This function calls:
  3725 ;;		Nothing
  3726 ;; This function is called by:
  3727 ;;		_SYSTEM_Initialize
  3728 ;; This function uses a non-reentrant model
  3729 ;;
  3730                           
  3731  076A                     _WDT_Initialize:	
  3732                           ;psect for function _WDT_Initialize
  3733                           
  3734  076A                     l2111:	
  3735                           ;incstack = 0
  3736                           ; Regs used in _WDT_Initialize: [wreg]
  3737                           
  3738                           
  3739                           ;mcc_generated_files/mcc.c: 75:     WDTCON = 0x16;
  3740  076A  3016               	movlw	22
  3741  076B  0021               	movlb	1	; select bank1
  3742  076C  0097               	movwf	23	;volatile
  3743  076D                     l31:
  3744  076D  0008               	return
  3745  076E                     __end_of_WDT_Initialize:
  3746                           
  3747                           	psect	text13
  3748  06C2                     __ptext13:	
  3749 ;; *************** function _TMR2_Initialize *****************
  3750 ;; Defined at:
  3751 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;		None
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;		None
  3756 ;; Return value:  Size  Location     Type
  3757 ;;                  1    wreg      void 
  3758 ;; Registers used:
  3759 ;;		wreg, status,2, status,0, pclath, cstack
  3760 ;; Tracked objects:
  3761 ;;		On entry : 0/0
  3762 ;;		On exit  : 0/0
  3763 ;;		Unchanged: 0/0
  3764 ;; Data sizes:     COMMON   BANK0   BANK1
  3765 ;;      Params:         0       0       0
  3766 ;;      Locals:         0       0       0
  3767 ;;      Temps:          0       0       0
  3768 ;;      Totals:         0       0       0
  3769 ;;Total ram usage:        0 bytes
  3770 ;; Hardware stack levels used: 1
  3771 ;; Hardware stack levels required when called: 8
  3772 ;; This function calls:
  3773 ;;		_TMR2_SetInterruptHandler
  3774 ;; This function is called by:
  3775 ;;		_SYSTEM_Initialize
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778                           
  3779  06C2                     _TMR2_Initialize:	
  3780                           ;psect for function _TMR2_Initialize
  3781                           
  3782  06C2                     l2121:	
  3783                           ;incstack = 0
  3784                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3785                           
  3786                           
  3787                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0xF9;
  3788  06C2  30F9               	movlw	249
  3789  06C3  0020               	movlb	0	; select bank0
  3790  06C4  009B               	movwf	27	;volatile
  3791  06C5                     l2123:
  3792                           
  3793                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  3794  06C5  019A               	clrf	26	;volatile
  3795  06C6                     l2125:
  3796                           
  3797                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  3798  06C6  1091               	bcf	17,1	;volatile
  3799  06C7                     l2127:
  3800                           
  3801                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  3802  06C7  0021               	movlb	1	; select bank1
  3803  06C8  1491               	bsf	17,1	;volatile
  3804  06C9                     l2129:
  3805                           
  3806                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  3807  06C9  307E               	movlw	low _TMR2_DefaultInterruptHandler
  3808  06CA  0020               	movlb	0	; select bank0
  3809  06CB  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  3810  06CC  3007               	movlw	high _TMR2_DefaultInterruptHandler
  3811  06CD  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  3812  06CE  3187  274F  3186   	fcall	_TMR2_SetInterruptHandler
  3813  06D1                     l2131:
  3814                           
  3815                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x4E;
  3816  06D1  304E               	movlw	78
  3817  06D2  0020               	movlb	0	; select bank0
  3818  06D3  009C               	movwf	28	;volatile
  3819  06D4                     l139:
  3820  06D4  0008               	return
  3821  06D5                     __end_of_TMR2_Initialize:
  3822                           
  3823                           	psect	text14
  3824  074F                     __ptext14:	
  3825 ;; *************** function _TMR2_SetInterruptHandler *****************
  3826 ;; Defined at:
  3827 ;;		line 147 in file "mcc_generated_files/tmr2.c"
  3828 ;; Parameters:    Size  Location     Type
  3829 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3830 ;;		 -> sec_tick_work(1), TMR2_DefaultInterruptHandler(1), 
  3831 ;; Auto vars:     Size  Location     Type
  3832 ;;		None
  3833 ;; Return value:  Size  Location     Type
  3834 ;;                  1    wreg      void 
  3835 ;; Registers used:
  3836 ;;		wreg
  3837 ;; Tracked objects:
  3838 ;;		On entry : 0/0
  3839 ;;		On exit  : 0/0
  3840 ;;		Unchanged: 0/0
  3841 ;; Data sizes:     COMMON   BANK0   BANK1
  3842 ;;      Params:         0       2       0
  3843 ;;      Locals:         0       0       0
  3844 ;;      Temps:          0       0       0
  3845 ;;      Totals:         0       2       0
  3846 ;;Total ram usage:        2 bytes
  3847 ;; Hardware stack levels used: 1
  3848 ;; Hardware stack levels required when called: 7
  3849 ;; This function calls:
  3850 ;;		Nothing
  3851 ;; This function is called by:
  3852 ;;		_TMR2_Initialize
  3853 ;;		_start_setup
  3854 ;; This function uses a non-reentrant model
  3855 ;;
  3856                           
  3857  074F                     _TMR2_SetInterruptHandler:	
  3858                           ;psect for function _TMR2_SetInterruptHandler
  3859                           
  3860  074F                     l2027:	
  3861                           ;incstack = 0
  3862                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  3863                           
  3864                           
  3865                           ;mcc_generated_files/tmr2.c: 148:     TMR2_InterruptHandler = InterruptHandler;
  3866  074F  0020               	movlb	0	; select bank0
  3867  0750  0821               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  3868  0751  00E3               	movwf	_TMR2_InterruptHandler+1
  3869  0752  0820               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  3870  0753  00E2               	movwf	_TMR2_InterruptHandler
  3871  0754                     l164:
  3872  0754  0008               	return
  3873  0755                     __end_of_TMR2_SetInterruptHandler:
  3874                           
  3875                           	psect	text15
  3876  0682                     __ptext15:	
  3877 ;; *************** function _TMR0_Initialize *****************
  3878 ;; Defined at:
  3879 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  3880 ;; Parameters:    Size  Location     Type
  3881 ;;		None
  3882 ;; Auto vars:     Size  Location     Type
  3883 ;;		None
  3884 ;; Return value:  Size  Location     Type
  3885 ;;                  1    wreg      void 
  3886 ;; Registers used:
  3887 ;;		wreg, status,2, status,0, pclath, cstack
  3888 ;; Tracked objects:
  3889 ;;		On entry : 0/0
  3890 ;;		On exit  : 0/0
  3891 ;;		Unchanged: 0/0
  3892 ;; Data sizes:     COMMON   BANK0   BANK1
  3893 ;;      Params:         0       0       0
  3894 ;;      Locals:         0       0       0
  3895 ;;      Temps:          0       1       0
  3896 ;;      Totals:         0       1       0
  3897 ;;Total ram usage:        1 bytes
  3898 ;; Hardware stack levels used: 1
  3899 ;; Hardware stack levels required when called: 8
  3900 ;; This function calls:
  3901 ;;		_TMR0_SetInterruptHandler
  3902 ;; This function is called by:
  3903 ;;		_SYSTEM_Initialize
  3904 ;; This function uses a non-reentrant model
  3905 ;;
  3906                           
  3907  0682                     _TMR0_Initialize:	
  3908                           ;psect for function _TMR0_Initialize
  3909                           
  3910  0682                     l2133:	
  3911                           ;incstack = 0
  3912                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3913                           
  3914                           
  3915                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD2 
      +                          & 0x3F));
  3916  0682  0021               	movlb	1	; select bank1
  3917  0683  0815               	movf	21,w	;volatile
  3918  0684  39C0               	andlw	192
  3919  0685  3812               	iorlw	18
  3920  0686  0095               	movwf	21	;volatile
  3921  0687                     l2135:
  3922                           
  3923                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x9C;
  3924  0687  309C               	movlw	156
  3925  0688  0020               	movlb	0	; select bank0
  3926  0689  0095               	movwf	21	;volatile
  3927  068A                     l2137:
  3928                           
  3929                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 156;
  3930  068A  309C               	movlw	156
  3931  068B  00A2               	movwf	??_TMR0_Initialize
  3932  068C  0822               	movf	??_TMR0_Initialize,w
  3933  068D  00E4               	movwf	_timer0ReloadVal	;volatile
  3934  068E                     l2139:
  3935                           
  3936                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  3937  068E  110B               	bcf	11,2	;volatile
  3938  068F                     l2141:
  3939                           
  3940                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  3941  068F  168B               	bsf	11,5	;volatile
  3942  0690                     l2143:
  3943                           
  3944                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  3945  0690  307F               	movlw	low _TMR0_DefaultInterruptHandler
  3946  0691  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  3947  0692  3007               	movlw	high _TMR0_DefaultInterruptHandler
  3948  0693  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  3949  0694  3187  2755  3186   	fcall	_TMR0_SetInterruptHandler
  3950  0697                     l184:
  3951  0697  0008               	return
  3952  0698                     __end_of_TMR0_Initialize:
  3953                           
  3954                           	psect	text16
  3955  0755                     __ptext16:	
  3956 ;; *************** function _TMR0_SetInterruptHandler *****************
  3957 ;; Defined at:
  3958 ;;		line 125 in file "mcc_generated_files/tmr0.c"
  3959 ;; Parameters:    Size  Location     Type
  3960 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3961 ;;		 -> switch_zum(1), TMR0_DefaultInterruptHandler(1), 
  3962 ;; Auto vars:     Size  Location     Type
  3963 ;;		None
  3964 ;; Return value:  Size  Location     Type
  3965 ;;                  1    wreg      void 
  3966 ;; Registers used:
  3967 ;;		wreg
  3968 ;; Tracked objects:
  3969 ;;		On entry : 0/0
  3970 ;;		On exit  : 0/0
  3971 ;;		Unchanged: 0/0
  3972 ;; Data sizes:     COMMON   BANK0   BANK1
  3973 ;;      Params:         0       2       0
  3974 ;;      Locals:         0       0       0
  3975 ;;      Temps:          0       0       0
  3976 ;;      Totals:         0       2       0
  3977 ;;Total ram usage:        2 bytes
  3978 ;; Hardware stack levels used: 1
  3979 ;; Hardware stack levels required when called: 7
  3980 ;; This function calls:
  3981 ;;		Nothing
  3982 ;; This function is called by:
  3983 ;;		_TMR0_Initialize
  3984 ;;		_start_setup
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988  0755                     _TMR0_SetInterruptHandler:	
  3989                           ;psect for function _TMR0_SetInterruptHandler
  3990                           
  3991  0755                     l2029:	
  3992                           ;incstack = 0
  3993                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  3994                           
  3995                           
  3996                           ;mcc_generated_files/tmr0.c: 126:     TMR0_InterruptHandler = InterruptHandler;
  3997  0755  0020               	movlb	0	; select bank0
  3998  0756  0821               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  3999  0757  00E1               	movwf	_TMR0_InterruptHandler+1
  4000  0758  0820               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  4001  0759  00E0               	movwf	_TMR0_InterruptHandler
  4002  075A                     l200:
  4003  075A  0008               	return
  4004  075B                     __end_of_TMR0_SetInterruptHandler:
  4005                           
  4006                           	psect	text17
  4007  0698                     __ptext17:	
  4008 ;; *************** function _PIN_MANAGER_Initialize *****************
  4009 ;; Defined at:
  4010 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4011 ;; Parameters:    Size  Location     Type
  4012 ;;		None
  4013 ;; Auto vars:     Size  Location     Type
  4014 ;;		None
  4015 ;; Return value:  Size  Location     Type
  4016 ;;                  1    wreg      void 
  4017 ;; Registers used:
  4018 ;;		wreg, status,2
  4019 ;; Tracked objects:
  4020 ;;		On entry : 0/0
  4021 ;;		On exit  : 0/0
  4022 ;;		Unchanged: 0/0
  4023 ;; Data sizes:     COMMON   BANK0   BANK1
  4024 ;;      Params:         0       0       0
  4025 ;;      Locals:         0       0       0
  4026 ;;      Temps:          0       0       0
  4027 ;;      Totals:         0       0       0
  4028 ;;Total ram usage:        0 bytes
  4029 ;; Hardware stack levels used: 1
  4030 ;; Hardware stack levels required when called: 7
  4031 ;; This function calls:
  4032 ;;		Nothing
  4033 ;; This function is called by:
  4034 ;;		_SYSTEM_Initialize
  4035 ;; This function uses a non-reentrant model
  4036 ;;
  4037                           
  4038  0698                     _PIN_MANAGER_Initialize:	
  4039                           ;psect for function _PIN_MANAGER_Initialize
  4040                           
  4041  0698                     l2093:	
  4042                           ;incstack = 0
  4043                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4044                           
  4045                           
  4046                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  4047  0698  0022               	movlb	2	; select bank2
  4048  0699  018C               	clrf	12	;volatile
  4049                           
  4050                           ;mcc_generated_files/pin_manager.c: 61:     LATC = 0x00;
  4051  069A  018E               	clrf	14	;volatile
  4052  069B                     l2095:
  4053                           
  4054                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0x0F;
  4055  069B  300F               	movlw	15
  4056  069C  0021               	movlb	1	; select bank1
  4057  069D  008C               	movwf	12	;volatile
  4058  069E                     l2097:
  4059                           
  4060                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0x0C;
  4061  069E  300C               	movlw	12
  4062  069F  008E               	movwf	14	;volatile
  4063  06A0                     l2099:
  4064                           
  4065                           ;mcc_generated_files/pin_manager.c: 72:     ANSELC = 0x0C;
  4066  06A0  300C               	movlw	12
  4067  06A1  0023               	movlb	3	; select bank3
  4068  06A2  008E               	movwf	14	;volatile
  4069  06A3                     l2101:
  4070                           
  4071                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x07;
  4072  06A3  3007               	movlw	7
  4073  06A4  008C               	movwf	12	;volatile
  4074                           
  4075                           ;mcc_generated_files/pin_manager.c: 78:     WPUA = 0x00;
  4076  06A5  0024               	movlb	4	; select bank4
  4077  06A6  018C               	clrf	12	;volatile
  4078                           
  4079                           ;mcc_generated_files/pin_manager.c: 79:     WPUC = 0x00;
  4080  06A7  018E               	clrf	14	;volatile
  4081  06A8                     l2103:
  4082                           
  4083                           ;mcc_generated_files/pin_manager.c: 80:     OPTION_REGbits.nWPUEN = 1;
  4084  06A8  0021               	movlb	1	; select bank1
  4085  06A9  1795               	bsf	21,7	;volatile
  4086                           
  4087                           ;mcc_generated_files/pin_manager.c: 86:     APFCON = 0x00;
  4088  06AA  0022               	movlb	2	; select bank2
  4089  06AB  019D               	clrf	29	;volatile
  4090  06AC                     l92:
  4091  06AC  0008               	return
  4092  06AD                     __end_of_PIN_MANAGER_Initialize:
  4093                           
  4094                           	psect	text18
  4095  0742                     __ptext18:	
  4096 ;; *************** function _OSCILLATOR_Initialize *****************
  4097 ;; Defined at:
  4098 ;;		line 62 in file "mcc_generated_files/mcc.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;		None
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;		None
  4103 ;; Return value:  Size  Location     Type
  4104 ;;                  1    wreg      void 
  4105 ;; Registers used:
  4106 ;;		wreg, status,2
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMMON   BANK0   BANK1
  4112 ;;      Params:         0       0       0
  4113 ;;      Locals:         0       0       0
  4114 ;;      Temps:          0       0       0
  4115 ;;      Totals:         0       0       0
  4116 ;;Total ram usage:        0 bytes
  4117 ;; Hardware stack levels used: 1
  4118 ;; Hardware stack levels required when called: 7
  4119 ;; This function calls:
  4120 ;;		Nothing
  4121 ;; This function is called by:
  4122 ;;		_SYSTEM_Initialize
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126  0742                     _OSCILLATOR_Initialize:	
  4127                           ;psect for function _OSCILLATOR_Initialize
  4128                           
  4129  0742                     l2105:	
  4130                           ;incstack = 0
  4131                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4132                           
  4133                           
  4134                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x78;
  4135  0742  3078               	movlw	120
  4136  0743  0021               	movlb	1	; select bank1
  4137  0744  0099               	movwf	25	;volatile
  4138  0745                     l2107:
  4139                           
  4140                           ;mcc_generated_files/mcc.c: 67:     OSCTUNE = 0x00;
  4141  0745  0198               	clrf	24	;volatile
  4142  0746                     l2109:
  4143                           
  4144                           ;mcc_generated_files/mcc.c: 69:     BORCON = 0x00;
  4145  0746  0022               	movlb	2	; select bank2
  4146  0747  0196               	clrf	22	;volatile
  4147  0748                     l28:
  4148  0748  0008               	return
  4149  0749                     __end_of_OSCILLATOR_Initialize:
  4150                           
  4151                           	psect	text19
  4152  076E                     __ptext19:	
  4153 ;; *************** function _FVR_Initialize *****************
  4154 ;; Defined at:
  4155 ;;		line 58 in file "mcc_generated_files/fvr.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;		None
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;		None
  4160 ;; Return value:  Size  Location     Type
  4161 ;;                  1    wreg      void 
  4162 ;; Registers used:
  4163 ;;		wreg
  4164 ;; Tracked objects:
  4165 ;;		On entry : 0/0
  4166 ;;		On exit  : 0/0
  4167 ;;		Unchanged: 0/0
  4168 ;; Data sizes:     COMMON   BANK0   BANK1
  4169 ;;      Params:         0       0       0
  4170 ;;      Locals:         0       0       0
  4171 ;;      Temps:          0       0       0
  4172 ;;      Totals:         0       0       0
  4173 ;;Total ram usage:        0 bytes
  4174 ;; Hardware stack levels used: 1
  4175 ;; Hardware stack levels required when called: 7
  4176 ;; This function calls:
  4177 ;;		Nothing
  4178 ;; This function is called by:
  4179 ;;		_SYSTEM_Initialize
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183  076E                     _FVR_Initialize:	
  4184                           ;psect for function _FVR_Initialize
  4185                           
  4186  076E                     l2113:	
  4187                           ;incstack = 0
  4188                           ; Regs used in _FVR_Initialize: [wreg]
  4189                           
  4190                           
  4191                           ;mcc_generated_files/fvr.c: 61:     FVRCON = 0x82;
  4192  076E  3082               	movlw	130
  4193  076F  0022               	movlb	2	; select bank2
  4194  0770  0097               	movwf	23	;volatile
  4195  0771                     l210:
  4196  0771  0008               	return
  4197  0772                     __end_of_FVR_Initialize:
  4198                           
  4199                           	psect	text20
  4200  0733                     __ptext20:	
  4201 ;; *************** function _ADC_Initialize *****************
  4202 ;; Defined at:
  4203 ;;		line 67 in file "mcc_generated_files/adc.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;		None
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;		None
  4208 ;; Return value:  Size  Location     Type
  4209 ;;                  1    wreg      void 
  4210 ;; Registers used:
  4211 ;;		wreg, status,2
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMMON   BANK0   BANK1
  4217 ;;      Params:         0       0       0
  4218 ;;      Locals:         0       0       0
  4219 ;;      Temps:          0       0       0
  4220 ;;      Totals:         0       0       0
  4221 ;;Total ram usage:        0 bytes
  4222 ;; Hardware stack levels used: 1
  4223 ;; Hardware stack levels required when called: 7
  4224 ;; This function calls:
  4225 ;;		Nothing
  4226 ;; This function is called by:
  4227 ;;		_SYSTEM_Initialize
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230                           
  4231  0733                     _ADC_Initialize:	
  4232                           ;psect for function _ADC_Initialize
  4233                           
  4234  0733                     l2115:	
  4235                           ;incstack = 0
  4236                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4237                           
  4238                           
  4239                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0x40;
  4240  0733  3040               	movlw	64
  4241  0734  0021               	movlb	1	; select bank1
  4242  0735  009E               	movwf	30	;volatile
  4243  0736                     l2117:
  4244                           
  4245                           ;mcc_generated_files/adc.c: 75:     ADRESL = 0x00;
  4246  0736  019B               	clrf	27	;volatile
  4247  0737                     l2119:
  4248                           
  4249                           ;mcc_generated_files/adc.c: 78:     ADRESH = 0x00;
  4250  0737  019C               	clrf	28	;volatile
  4251                           
  4252                           ;mcc_generated_files/adc.c: 81:     ADCON0 = 0x7D;
  4253  0738  307D               	movlw	125
  4254  0739  009D               	movwf	29	;volatile
  4255  073A                     l48:
  4256  073A  0008               	return
  4257  073B                     __end_of_ADC_Initialize:
  4258                           
  4259                           	psect	text21
  4260  02C7                     __ptext21:	
  4261 ;; *************** function _povorot *****************
  4262 ;; Defined at:
  4263 ;;		line 331 in file "main.c"
  4264 ;; Parameters:    Size  Location     Type
  4265 ;;		None
  4266 ;; Auto vars:     Size  Location     Type
  4267 ;;		None
  4268 ;; Return value:  Size  Location     Type
  4269 ;;                  1    wreg      void 
  4270 ;; Registers used:
  4271 ;;		wreg, status,2, status,0, pclath, cstack
  4272 ;; Tracked objects:
  4273 ;;		On entry : 0/0
  4274 ;;		On exit  : 0/0
  4275 ;;		Unchanged: 0/0
  4276 ;; Data sizes:     COMMON   BANK0   BANK1
  4277 ;;      Params:         0       0       0
  4278 ;;      Locals:         0       0       0
  4279 ;;      Temps:          0       0       0
  4280 ;;      Totals:         0       0       0
  4281 ;;Total ram usage:        0 bytes
  4282 ;; Hardware stack levels used: 1
  4283 ;; Hardware stack levels required when called: 8
  4284 ;; This function calls:
  4285 ;;		_go_close
  4286 ;;		_go_open
  4287 ;; This function is called by:
  4288 ;;		_main
  4289 ;; This function uses a non-reentrant model
  4290 ;;
  4291                           
  4292  02C7                     _povorot:	
  4293                           ;psect for function _povorot
  4294                           
  4295  02C7                     l2531:	
  4296                           ;incstack = 0
  4297                           ; Regs used in _povorot: [wreg+status,2+status,0+pclath+cstack]
  4298                           
  4299                           
  4300                           ;main.c: 332:     if ((time_s > ROTATION_TIME) &&
  4301  02C7  3000               	movlw	0
  4302  02C8  0020               	movlb	0	; select bank0
  4303  02C9  0257               	subwf	_time_s+2,w
  4304  02CA  1D03               	skipz
  4305  02CB  2AD2               	goto	u1795
  4306  02CC  3000               	movlw	0
  4307  02CD  0256               	subwf	_time_s+1,w
  4308  02CE  1D03               	skipz
  4309  02CF  2AD2               	goto	u1795
  4310  02D0  3079               	movlw	121
  4311  02D1  0255               	subwf	_time_s,w
  4312  02D2                     u1795:
  4313  02D2  1C03               	skipc
  4314  02D3  2AD5               	goto	u1791
  4315  02D4  2AD6               	goto	u1790
  4316  02D5                     u1791:
  4317  02D5  2AE5               	goto	l2541
  4318  02D6                     u1790:
  4319  02D6                     l2533:
  4320  02D6  197C               	btfsc	_FLAGS,2
  4321  02D7  2AD9               	goto	u1801
  4322  02D8  2ADA               	goto	u1800
  4323  02D9                     u1801:
  4324  02D9  2AE5               	goto	l2541
  4325  02DA                     u1800:
  4326  02DA                     l2535:
  4327  02DA  187C               	btfsc	_FLAGS,0
  4328  02DB  2ADD               	goto	u1811
  4329  02DC  2ADE               	goto	u1810
  4330  02DD                     u1811:
  4331  02DD  2AE5               	goto	l2541
  4332  02DE                     u1810:
  4333  02DE                     l2537:
  4334  02DE  1CFC               	btfss	_FLAGS,1
  4335  02DF  2AE1               	goto	u1821
  4336  02E0  2AE2               	goto	u1820
  4337  02E1                     u1821:
  4338  02E1  2AE5               	goto	l2541
  4339  02E2                     u1820:
  4340  02E2                     l2539:
  4341                           
  4342                           ;main.c: 336:             ) {;main.c: 337:         go_close();
  4343  02E2  3185  25C9  3182   	fcall	_go_close
  4344  02E5                     l2541:
  4345                           
  4346                           ;main.c: 339:     if ((time_s > (ROTATION_TIME + 10 + 2 * 2)) &&
  4347  02E5  3000               	movlw	0
  4348  02E6  0020               	movlb	0	; select bank0
  4349  02E7  0257               	subwf	_time_s+2,w
  4350  02E8  1D03               	skipz
  4351  02E9  2AF0               	goto	u1835
  4352  02EA  3000               	movlw	0
  4353  02EB  0256               	subwf	_time_s+1,w
  4354  02EC  1D03               	skipz
  4355  02ED  2AF0               	goto	u1835
  4356  02EE  3087               	movlw	135
  4357  02EF  0255               	subwf	_time_s,w
  4358  02F0                     u1835:
  4359  02F0  1C03               	skipc
  4360  02F1  2AF3               	goto	u1831
  4361  02F2  2AF4               	goto	u1830
  4362  02F3                     u1831:
  4363  02F3  2B0A               	goto	l433
  4364  02F4                     u1830:
  4365  02F4                     l2543:
  4366  02F4  1D7C               	btfss	_FLAGS,2
  4367  02F5  2AF7               	goto	u1841
  4368  02F6  2AF8               	goto	u1840
  4369  02F7                     u1841:
  4370  02F7  2B0A               	goto	l433
  4371  02F8                     u1840:
  4372  02F8                     l2545:
  4373  02F8  187C               	btfsc	_FLAGS,0
  4374  02F9  2AFB               	goto	u1851
  4375  02FA  2AFC               	goto	u1850
  4376  02FB                     u1851:
  4377  02FB  2B0A               	goto	l433
  4378  02FC                     u1850:
  4379  02FC                     l2547:
  4380  02FC  1CFC               	btfss	_FLAGS,1
  4381  02FD  2AFF               	goto	u1861
  4382  02FE  2B00               	goto	u1860
  4383  02FF                     u1861:
  4384  02FF  2B0A               	goto	l433
  4385  0300                     u1860:
  4386  0300                     l2549:
  4387                           
  4388                           ;main.c: 343:             ) {;main.c: 344:         go_open();
  4389  0300  3187  271F  3182   	fcall	_go_open
  4390  0303                     l2551:
  4391                           
  4392                           ;main.c: 345:         time_s = 0;
  4393  0303  3000               	movlw	0
  4394  0304  0020               	movlb	0	; select bank0
  4395  0305  00D5               	movwf	_time_s
  4396  0306  3000               	movlw	0
  4397  0307  00D6               	movwf	_time_s+1
  4398  0308  3000               	movlw	0
  4399  0309  00D7               	movwf	_time_s+2
  4400  030A                     l433:
  4401  030A  0008               	return
  4402  030B                     __end_of_povorot:
  4403                           
  4404                           	psect	text22
  4405  01D8                     __ptext22:	
  4406 ;; *************** function _get_voltage *****************
  4407 ;; Defined at:
  4408 ;;		line 390 in file "main.c"
  4409 ;; Parameters:    Size  Location     Type
  4410 ;;		None
  4411 ;; Auto vars:     Size  Location     Type
  4412 ;;  buf             1   21[BANK0 ] unsigned char 
  4413 ;;  q               1   22[BANK0 ] unsigned char 
  4414 ;;  q               1   23[BANK0 ] unsigned char 
  4415 ;;  buf             3   16[BANK0 ] unsigned um
  4416 ;;  res             2   19[BANK0 ] unsigned int 
  4417 ;; Return value:  Size  Location     Type
  4418 ;;                  1    wreg      void 
  4419 ;; Registers used:
  4420 ;;		wreg, status,2, status,0, pclath, cstack
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMMON   BANK0   BANK1
  4426 ;;      Params:         0       0       0
  4427 ;;      Locals:         0       8       0
  4428 ;;      Temps:          0       2       0
  4429 ;;      Totals:         0      10       0
  4430 ;;Total ram usage:       10 bytes
  4431 ;; Hardware stack levels used: 1
  4432 ;; Hardware stack levels required when called: 9
  4433 ;; This function calls:
  4434 ;;		_ADC_GetConversion
  4435 ;;		_EEPROM_ReadByte
  4436 ;;		_EEPROM_WriteByte
  4437 ;;		_EEPROM_WriteShortLong
  4438 ;; This function is called by:
  4439 ;;		_main
  4440 ;; This function uses a non-reentrant model
  4441 ;;
  4442                           
  4443  01D8                     _get_voltage:	
  4444                           ;psect for function _get_voltage
  4445                           
  4446  01D8                     l2597:	
  4447                           ;incstack = 0
  4448                           ; Regs used in _get_voltage: [wreg+status,2+status,0+pclath+cstack]
  4449                           
  4450                           
  4451                           ;main.c: 391:     unsigned res = ADC_GetConversion(channel_FVR);
  4452  01D8  301F               	movlw	31
  4453  01D9  3185  25A8  3181   	fcall	_ADC_GetConversion
  4454  01DC  0020               	movlb	0	; select bank0
  4455  01DD  0821               	movf	?_ADC_GetConversion+1,w
  4456  01DE  00B4               	movwf	get_voltage@res+1
  4457  01DF  0820               	movf	?_ADC_GetConversion,w
  4458  01E0  00B3               	movwf	get_voltage@res
  4459  01E1                     l2599:
  4460                           
  4461                           ;main.c: 392:     if (res > 46200) {
  4462  01E1  30B4               	movlw	180
  4463  01E2  0234               	subwf	get_voltage@res+1,w
  4464  01E3  3079               	movlw	121
  4465  01E4  1903               	skipnz
  4466  01E5  0233               	subwf	get_voltage@res,w
  4467  01E6  1C03               	skipc
  4468  01E7  29E9               	goto	u2011
  4469  01E8  29EA               	goto	u2010
  4470  01E9                     u2011:
  4471  01E9  2A39               	goto	l461
  4472  01EA                     u2010:
  4473  01EA                     l2601:
  4474                           
  4475                           ;main.c: 393:         for (char q = 0; q < 0x10; q++) {
  4476  01EA  01B7               	clrf	get_voltage@q
  4477  01EB                     l2607:
  4478                           
  4479                           ;main.c: 394:             char buf = EEPROM_ReadByte(q);
  4480  01EB  0837               	movf	get_voltage@q,w
  4481  01EC  3186  263D  3181   	fcall	_EEPROM_ReadByte
  4482  01EF  0020               	movlb	0	; select bank0
  4483  01F0  00AE               	movwf	??_get_voltage
  4484  01F1  082E               	movf	??_get_voltage,w
  4485  01F2  00B5               	movwf	get_voltage@buf
  4486  01F3                     l2609:
  4487                           
  4488                           ;main.c: 395:             if (buf != START_EEPROM_ADR) EEPROM_WriteByte(q, START_EEPROM_
      +                          ADR);
  4489  01F3  0835               	movf	get_voltage@buf,w
  4490  01F4  065F               	xorwf	_START_EEPROM_ADR,w
  4491  01F5  1903               	skipnz
  4492  01F6  29F8               	goto	u2021
  4493  01F7  29F9               	goto	u2020
  4494  01F8                     u2021:
  4495  01F8  2A01               	goto	l2613
  4496  01F9                     u2020:
  4497  01F9                     l2611:
  4498  01F9  085F               	movf	_START_EEPROM_ADR,w
  4499  01FA  00AE               	movwf	??_get_voltage
  4500  01FB  082E               	movf	??_get_voltage,w
  4501  01FC  00A0               	movwf	EEPROM_WriteByte@dt
  4502  01FD  0837               	movf	get_voltage@q,w
  4503  01FE  3185  2553  3181   	fcall	_EEPROM_WriteByte
  4504  0201                     l2613:
  4505                           
  4506                           ;main.c: 396:         }
  4507  0201  3001               	movlw	1
  4508  0202  0020               	movlb	0	; select bank0
  4509  0203  00AE               	movwf	??_get_voltage
  4510  0204  082E               	movf	??_get_voltage,w
  4511  0205  07B7               	addwf	get_voltage@q,f
  4512  0206                     l2615:
  4513  0206  3010               	movlw	16
  4514  0207  0237               	subwf	get_voltage@q,w
  4515  0208  1C03               	skipc
  4516  0209  2A0B               	goto	u2031
  4517  020A  2A0C               	goto	u2030
  4518  020B                     u2031:
  4519  020B  29EB               	goto	l2607
  4520  020C                     u2030:
  4521  020C                     l2617:
  4522                           
  4523                           ;main.c: 397:         __uint24 buf = time_s;
  4524  020C  0855               	movf	_time_s,w
  4525  020D  00B0               	movwf	get_voltage@buf_800
  4526  020E  0856               	movf	_time_s+1,w
  4527  020F  00B1               	movwf	get_voltage@buf_800+1
  4528  0210  0857               	movf	_time_s+2,w
  4529  0211  00B2               	movwf	get_voltage@buf_800+2
  4530                           
  4531                           ;main.c: 398:         for (char q = START_EEPROM_ADR; q < START_EEPROM_ADR + 12; q += 4)
      +                           {
  4532  0212  085F               	movf	_START_EEPROM_ADR,w
  4533  0213  00AE               	movwf	??_get_voltage
  4534  0214  082E               	movf	??_get_voltage,w
  4535  0215  00B6               	movwf	get_voltage@q_801
  4536  0216  2A27               	goto	l2623
  4537  0217                     l2619:
  4538                           
  4539                           ;main.c: 399:             EEPROM_WriteShortLong(q, buf);
  4540  0217  0020               	movlb	0	; select bank0
  4541  0218  0830               	movf	get_voltage@buf_800,w
  4542  0219  00A5               	movwf	EEPROM_WriteShortLong@ucData
  4543  021A  0831               	movf	get_voltage@buf_800+1,w
  4544  021B  00A6               	movwf	EEPROM_WriteShortLong@ucData+1
  4545  021C  0832               	movf	get_voltage@buf_800+2,w
  4546  021D  00A7               	movwf	EEPROM_WriteShortLong@ucData+2
  4547  021E  0836               	movf	get_voltage@q_801,w
  4548  021F  3183  23D2  3181   	fcall	_EEPROM_WriteShortLong
  4549  0222                     l2621:
  4550                           
  4551                           ;main.c: 400:         }
  4552  0222  3004               	movlw	4
  4553  0223  0020               	movlb	0	; select bank0
  4554  0224  00AE               	movwf	??_get_voltage
  4555  0225  082E               	movf	??_get_voltage,w
  4556  0226  07B6               	addwf	get_voltage@q_801,f
  4557  0227                     l2623:
  4558  0227  085F               	movf	_START_EEPROM_ADR,w
  4559  0228  3E0C               	addlw	12
  4560  0229  00AE               	movwf	??_get_voltage
  4561  022A  3000               	movlw	0
  4562  022B  1803               	skipnc
  4563  022C  3001               	movlw	1
  4564  022D  00AF               	movwf	??_get_voltage+1
  4565  022E  082F               	movf	??_get_voltage+1,w
  4566  022F  3A80               	xorlw	128
  4567  0230  3C80               	sublw	128
  4568  0231  1D03               	skipz
  4569  0232  2A35               	goto	u2045
  4570  0233  082E               	movf	??_get_voltage,w
  4571  0234  0236               	subwf	get_voltage@q_801,w
  4572  0235                     u2045:
  4573  0235  1C03               	skipc
  4574  0236  2A38               	goto	u2041
  4575  0237  2A39               	goto	u2040
  4576  0238                     u2041:
  4577  0238  2A17               	goto	l2619
  4578  0239                     u2040:
  4579  0239                     l461:
  4580  0239  0008               	return
  4581  023A                     __end_of_get_voltage:
  4582                           
  4583                           	psect	text23
  4584  03D2                     __ptext23:	
  4585 ;; *************** function _EEPROM_WriteShortLong *****************
  4586 ;; Defined at:
  4587 ;;		line 40 in file "eeprom.c"
  4588 ;; Parameters:    Size  Location     Type
  4589 ;;  addr            1    wreg     unsigned char 
  4590 ;;  ucData          3    5[BANK0 ] unsigned um
  4591 ;; Auto vars:     Size  Location     Type
  4592 ;;  addr            1   13[BANK0 ] unsigned char 
  4593 ;;  dt              1   12[BANK0 ] unsigned char 
  4594 ;; Return value:  Size  Location     Type
  4595 ;;                  1    wreg      void 
  4596 ;; Registers used:
  4597 ;;		wreg, status,2, status,0, pclath, cstack
  4598 ;; Tracked objects:
  4599 ;;		On entry : 0/0
  4600 ;;		On exit  : 0/0
  4601 ;;		Unchanged: 0/0
  4602 ;; Data sizes:     COMMON   BANK0   BANK1
  4603 ;;      Params:         0       3       0
  4604 ;;      Locals:         0       2       0
  4605 ;;      Temps:          0       4       0
  4606 ;;      Totals:         0       9       0
  4607 ;;Total ram usage:        9 bytes
  4608 ;; Hardware stack levels used: 1
  4609 ;; Hardware stack levels required when called: 8
  4610 ;; This function calls:
  4611 ;;		_EEPROM_WriteByte
  4612 ;; This function is called by:
  4613 ;;		_get_voltage
  4614 ;; This function uses a non-reentrant model
  4615 ;;
  4616                           
  4617  03D2                     _EEPROM_WriteShortLong:	
  4618                           ;psect for function _EEPROM_WriteShortLong
  4619                           
  4620                           
  4621                           ;incstack = 0
  4622                           ; Regs used in _EEPROM_WriteShortLong: [wreg+status,2+status,0+pclath+cstack]
  4623                           ;EEPROM_WriteShortLong@addr stored from wreg
  4624  03D2  0020               	movlb	0	; select bank0
  4625  03D3  00AD               	movwf	EEPROM_WriteShortLong@addr
  4626  03D4                     l2455:
  4627                           
  4628                           ;eeprom.c: 41:     EEPROM_WriteByte(addr, (unsigned char) ucData);
  4629  03D4  0825               	movf	EEPROM_WriteShortLong@ucData,w
  4630  03D5  00A8               	movwf	??_EEPROM_WriteShortLong
  4631  03D6  0828               	movf	??_EEPROM_WriteShortLong,w
  4632  03D7  00A0               	movwf	EEPROM_WriteByte@dt
  4633  03D8  082D               	movf	EEPROM_WriteShortLong@addr,w
  4634  03D9  3185  2553  3183   	fcall	_EEPROM_WriteByte
  4635  03DC                     l2457:
  4636                           
  4637                           ;eeprom.c: 42:      char dt = ucData >> 8;
  4638  03DC  0020               	movlb	0	; select bank0
  4639  03DD  0825               	movf	EEPROM_WriteShortLong@ucData,w
  4640  03DE  00A8               	movwf	??_EEPROM_WriteShortLong
  4641  03DF  0826               	movf	EEPROM_WriteShortLong@ucData+1,w
  4642  03E0  00A9               	movwf	??_EEPROM_WriteShortLong+1
  4643  03E1  0827               	movf	EEPROM_WriteShortLong@ucData+2,w
  4644  03E2  00AA               	movwf	??_EEPROM_WriteShortLong+2
  4645  03E3  3008               	movlw	8
  4646  03E4                     u1695:
  4647  03E4  36AA               	lsrf	??_EEPROM_WriteShortLong+2,f
  4648  03E5  0CA9               	rrf	??_EEPROM_WriteShortLong+1,f
  4649  03E6  0CA8               	rrf	??_EEPROM_WriteShortLong,f
  4650  03E7                     u1690:
  4651  03E7  0B89               	decfsz	9,f
  4652  03E8  2BE4               	goto	u1695
  4653  03E9  0828               	movf	??_EEPROM_WriteShortLong,w
  4654  03EA  00AB               	movwf	??_EEPROM_WriteShortLong+3
  4655  03EB  082B               	movf	??_EEPROM_WriteShortLong+3,w
  4656  03EC  00AC               	movwf	EEPROM_WriteShortLong@dt
  4657  03ED                     l2459:
  4658                           
  4659                           ;eeprom.c: 43:     EEPROM_WriteByte(addr + 1, dt);
  4660  03ED  082C               	movf	EEPROM_WriteShortLong@dt,w
  4661  03EE  00A8               	movwf	??_EEPROM_WriteShortLong
  4662  03EF  0828               	movf	??_EEPROM_WriteShortLong,w
  4663  03F0  00A0               	movwf	EEPROM_WriteByte@dt
  4664  03F1  082D               	movf	EEPROM_WriteShortLong@addr,w
  4665  03F2  3E01               	addlw	1
  4666  03F3  3185  2553  3183   	fcall	_EEPROM_WriteByte
  4667                           
  4668                           ;eeprom.c: 44:     dt = ucData >> 16;
  4669  03F6  0020               	movlb	0	; select bank0
  4670  03F7  0825               	movf	EEPROM_WriteShortLong@ucData,w
  4671  03F8  00A8               	movwf	??_EEPROM_WriteShortLong
  4672  03F9  0826               	movf	EEPROM_WriteShortLong@ucData+1,w
  4673  03FA  00A9               	movwf	??_EEPROM_WriteShortLong+1
  4674  03FB  0827               	movf	EEPROM_WriteShortLong@ucData+2,w
  4675  03FC  00AA               	movwf	??_EEPROM_WriteShortLong+2
  4676  03FD  3010               	movlw	16
  4677  03FE                     u1705:
  4678  03FE  36AA               	lsrf	??_EEPROM_WriteShortLong+2,f
  4679  03FF  0CA9               	rrf	??_EEPROM_WriteShortLong+1,f
  4680  0400  0CA8               	rrf	??_EEPROM_WriteShortLong,f
  4681  0401                     u1700:
  4682  0401  0B89               	decfsz	9,f
  4683  0402  2BFE               	goto	u1705
  4684  0403  0828               	movf	??_EEPROM_WriteShortLong,w
  4685  0404  00AB               	movwf	??_EEPROM_WriteShortLong+3
  4686  0405  082B               	movf	??_EEPROM_WriteShortLong+3,w
  4687  0406  00AC               	movwf	EEPROM_WriteShortLong@dt
  4688  0407                     l2461:
  4689                           
  4690                           ;eeprom.c: 45:     EEPROM_WriteByte(addr + 2, dt);
  4691  0407  082C               	movf	EEPROM_WriteShortLong@dt,w
  4692  0408  00A8               	movwf	??_EEPROM_WriteShortLong
  4693  0409  0828               	movf	??_EEPROM_WriteShortLong,w
  4694  040A  00A0               	movwf	EEPROM_WriteByte@dt
  4695  040B  082D               	movf	EEPROM_WriteShortLong@addr,w
  4696  040C  3E02               	addlw	2
  4697  040D  3185  2553  3183   	fcall	_EEPROM_WriteByte
  4698  0410                     l576:
  4699  0410  0008               	return
  4700  0411                     __end_of_EEPROM_WriteShortLong:
  4701                           
  4702                           	psect	text24
  4703  0553                     __ptext24:	
  4704 ;; *************** function _EEPROM_WriteByte *****************
  4705 ;; Defined at:
  4706 ;;		line 6 in file "eeprom.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;  addr            1    wreg     unsigned char 
  4709 ;;  dt              1    0[BANK0 ] unsigned char 
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;  addr            1    3[BANK0 ] unsigned char 
  4712 ;;  status          1    4[BANK0 ] unsigned char 
  4713 ;; Return value:  Size  Location     Type
  4714 ;;                  1    wreg      void 
  4715 ;; Registers used:
  4716 ;;		wreg, status,2
  4717 ;; Tracked objects:
  4718 ;;		On entry : 0/0
  4719 ;;		On exit  : 0/0
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMMON   BANK0   BANK1
  4722 ;;      Params:         0       1       0
  4723 ;;      Locals:         0       2       0
  4724 ;;      Temps:          0       2       0
  4725 ;;      Totals:         0       5       0
  4726 ;;Total ram usage:        5 bytes
  4727 ;; Hardware stack levels used: 1
  4728 ;; Hardware stack levels required when called: 7
  4729 ;; This function calls:
  4730 ;;		Nothing
  4731 ;; This function is called by:
  4732 ;;		_get_voltage
  4733 ;;		_EEPROM_WriteShortLong
  4734 ;;		_EEPROM_WriteWord
  4735 ;;		_EEPROM_WriteString
  4736 ;; This function uses a non-reentrant model
  4737 ;;
  4738                           
  4739  0553                     _EEPROM_WriteByte:	
  4740                           ;psect for function _EEPROM_WriteByte
  4741                           
  4742                           
  4743                           ;incstack = 0
  4744                           ; Regs used in _EEPROM_WriteByte: [wreg+status,2]
  4745                           ;EEPROM_WriteByte@addr stored from wreg
  4746  0553  0020               	movlb	0	; select bank0
  4747  0554  00A3               	movwf	EEPROM_WriteByte@addr
  4748  0555                     l2179:
  4749  0555                     l558:	
  4750                           ;eeprom.c: 7:     unsigned char status;;eeprom.c: 8:     while (WR);
  4751                           
  4752  0555  0023               	movlb	3	; select bank3
  4753  0556  1895               	btfsc	21,1	;volsfr
  4754  0557  2D59               	goto	u1331
  4755  0558  2D5A               	goto	u1330
  4756  0559                     u1331:
  4757  0559  2D55               	goto	l558
  4758  055A                     u1330:
  4759  055A                     l2181:
  4760                           
  4761                           ;eeprom.c: 9:     status = GIE;
  4762  055A  3000               	movlw	0
  4763  055B  1B8B               	btfsc	11,7	;volatile
  4764  055C  3001               	movlw	1
  4765  055D  0020               	movlb	0	; select bank0
  4766  055E  00A4               	movwf	EEPROM_WriteByte@status
  4767  055F                     l2183:
  4768                           
  4769                           ;eeprom.c: 10:     GIE = 0;
  4770  055F  138B               	bcf	11,7	;volatile
  4771  0560                     l2185:
  4772                           
  4773                           ;eeprom.c: 11:     EEADR = addr;
  4774  0560  0823               	movf	EEPROM_WriteByte@addr,w
  4775  0561  00A1               	movwf	??_EEPROM_WriteByte
  4776  0562  01A2               	clrf	??_EEPROM_WriteByte+1
  4777  0563  0821               	movf	??_EEPROM_WriteByte,w
  4778  0564  0023               	movlb	3	; select bank3
  4779  0565  0091               	movwf	17	;volatile
  4780  0566  0020               	movlb	0	; select bank0
  4781  0567  0822               	movf	??_EEPROM_WriteByte+1,w
  4782  0568  0023               	movlb	3	; select bank3
  4783  0569  0092               	movwf	18	;volatile
  4784  056A                     l2187:
  4785                           
  4786                           ;eeprom.c: 12:     EEDATA = dt;
  4787  056A  0020               	movlb	0	; select bank0
  4788  056B  0820               	movf	EEPROM_WriteByte@dt,w
  4789  056C  0023               	movlb	3	; select bank3
  4790  056D  0093               	movwf	19	;volatile
  4791  056E                     l2189:
  4792                           
  4793                           ;eeprom.c: 13:     WREN = 1;
  4794  056E  1515               	bsf	21,2	;volsfr
  4795  056F                     l2191:
  4796                           
  4797                           ;eeprom.c: 14:     EECON2 = 0x55;
  4798  056F  3055               	movlw	85
  4799  0570  0096               	movwf	22	;volsfr
  4800  0571                     l2193:
  4801                           
  4802                           ;eeprom.c: 15:     EECON2 = 0xAA;
  4803  0571  30AA               	movlw	170
  4804  0572  0096               	movwf	22	;volsfr
  4805  0573                     l2195:
  4806                           
  4807                           ;eeprom.c: 16:     WR = 1;
  4808  0573  1495               	bsf	21,1	;volsfr
  4809  0574                     l2197:
  4810                           
  4811                           ;eeprom.c: 17:     GIE = status;
  4812  0574  0020               	movlb	0	; select bank0
  4813  0575  1824               	btfsc	EEPROM_WriteByte@status,0
  4814  0576  2D78               	goto	u1341
  4815  0577  2D7A               	goto	u1340
  4816  0578                     u1341:
  4817  0578  178B               	bsf	11,7	;volatile
  4818  0579  2D7B               	goto	u1354
  4819  057A                     u1340:
  4820  057A  138B               	bcf	11,7	;volatile
  4821  057B                     u1354:
  4822  057B                     l2199:
  4823                           
  4824                           ;eeprom.c: 18:     WREN = 0;
  4825  057B  0023               	movlb	3	; select bank3
  4826  057C  1115               	bcf	21,2	;volsfr
  4827  057D                     l561:
  4828  057D  0008               	return
  4829  057E                     __end_of_EEPROM_WriteByte:
  4830                           
  4831                           	psect	text25
  4832  063D                     __ptext25:	
  4833 ;; *************** function _EEPROM_ReadByte *****************
  4834 ;; Defined at:
  4835 ;;		line 21 in file "eeprom.c"
  4836 ;; Parameters:    Size  Location     Type
  4837 ;;  addr            1    wreg     unsigned char 
  4838 ;; Auto vars:     Size  Location     Type
  4839 ;;  addr            1    2[BANK0 ] unsigned char 
  4840 ;; Return value:  Size  Location     Type
  4841 ;;                  1    wreg      unsigned char 
  4842 ;; Registers used:
  4843 ;;		wreg
  4844 ;; Tracked objects:
  4845 ;;		On entry : 0/0
  4846 ;;		On exit  : 0/0
  4847 ;;		Unchanged: 0/0
  4848 ;; Data sizes:     COMMON   BANK0   BANK1
  4849 ;;      Params:         0       0       0
  4850 ;;      Locals:         0       1       0
  4851 ;;      Temps:          0       2       0
  4852 ;;      Totals:         0       3       0
  4853 ;;Total ram usage:        3 bytes
  4854 ;; Hardware stack levels used: 1
  4855 ;; Hardware stack levels required when called: 7
  4856 ;; This function calls:
  4857 ;;		Nothing
  4858 ;; This function is called by:
  4859 ;;		_get_voltage
  4860 ;;		_get_adr
  4861 ;;		_EEPROM_ReadShortLong
  4862 ;;		_EEPROM_ReadWord
  4863 ;;		_EEPROM_ReadString
  4864 ;; This function uses a non-reentrant model
  4865 ;;
  4866                           
  4867  063D                     _EEPROM_ReadByte:	
  4868                           ;psect for function _EEPROM_ReadByte
  4869                           
  4870                           
  4871                           ;incstack = 0
  4872                           ; Regs used in _EEPROM_ReadByte: [wreg]
  4873                           ;EEPROM_ReadByte@addr stored from wreg
  4874  063D  0020               	movlb	0	; select bank0
  4875  063E  00A2               	movwf	EEPROM_ReadByte@addr
  4876  063F                     l2005:
  4877  063F                     l564:	
  4878                           ;eeprom.c: 22:     while (RD || WR);
  4879                           
  4880  063F  0023               	movlb	3	; select bank3
  4881  0640  1815               	btfsc	21,0	;volsfr
  4882  0641  2E43               	goto	u1091
  4883  0642  2E44               	goto	u1090
  4884  0643                     u1091:
  4885  0643  2E3F               	goto	l564
  4886  0644                     u1090:
  4887  0644                     l2007:
  4888  0644  1895               	btfsc	21,1	;volsfr
  4889  0645  2E47               	goto	u1101
  4890  0646  2E48               	goto	u1100
  4891  0647                     u1101:
  4892  0647  2E3F               	goto	l564
  4893  0648                     u1100:
  4894  0648                     l2009:
  4895                           
  4896                           ;eeprom.c: 23:     EEADR = addr;
  4897  0648  0020               	movlb	0	; select bank0
  4898  0649  0822               	movf	EEPROM_ReadByte@addr,w
  4899  064A  00A0               	movwf	??_EEPROM_ReadByte
  4900  064B  01A1               	clrf	??_EEPROM_ReadByte+1
  4901  064C  0820               	movf	??_EEPROM_ReadByte,w
  4902  064D  0023               	movlb	3	; select bank3
  4903  064E  0091               	movwf	17	;volatile
  4904  064F  0020               	movlb	0	; select bank0
  4905  0650  0821               	movf	??_EEPROM_ReadByte+1,w
  4906  0651  0023               	movlb	3	; select bank3
  4907  0652  0092               	movwf	18	;volatile
  4908  0653                     l2011:
  4909                           
  4910                           ;eeprom.c: 24:     RD = 1;
  4911  0653  1415               	bsf	21,0	;volsfr
  4912                           
  4913                           ;eeprom.c: 25:     return EEDATA;
  4914  0654  0813               	movf	19,w	;volatile
  4915  0655                     l567:
  4916  0655  0008               	return
  4917  0656                     __end_of_EEPROM_ReadByte:
  4918                           
  4919                           	psect	text26
  4920  044F                     __ptext26:	
  4921 ;; *************** function _get_jump *****************
  4922 ;; Defined at:
  4923 ;;		line 219 in file "main.c"
  4924 ;; Parameters:    Size  Location     Type
  4925 ;;		None
  4926 ;; Auto vars:     Size  Location     Type
  4927 ;;  res             2    5[BANK0 ] unsigned int 
  4928 ;; Return value:  Size  Location     Type
  4929 ;;                  1    wreg      void 
  4930 ;; Registers used:
  4931 ;;		wreg, status,2, status,0, pclath, cstack
  4932 ;; Tracked objects:
  4933 ;;		On entry : 0/0
  4934 ;;		On exit  : 0/0
  4935 ;;		Unchanged: 0/0
  4936 ;; Data sizes:     COMMON   BANK0   BANK1
  4937 ;;      Params:         0       0       0
  4938 ;;      Locals:         0       2       0
  4939 ;;      Temps:          0       1       0
  4940 ;;      Totals:         0       3       0
  4941 ;;Total ram usage:        3 bytes
  4942 ;; Hardware stack levels used: 1
  4943 ;; Hardware stack levels required when called: 8
  4944 ;; This function calls:
  4945 ;;		_ADC_GetConversion
  4946 ;; This function is called by:
  4947 ;;		_main
  4948 ;; This function uses a non-reentrant model
  4949 ;;
  4950                           
  4951  044F                     _get_jump:	
  4952                           ;psect for function _get_jump
  4953                           
  4954  044F                     l377:	
  4955                           ;incstack = 0
  4956                           ; Regs used in _get_jump: [wreg+status,2+status,0+pclath+cstack]
  4957                           ;main.c: 221:     static signed char jump_counter;;main.c: 222:     do { ANSELAbits.ANSA
      +                          1 = 1; } while(0);
  4958                           
  4959  044F  0023               	movlb	3	; select bank3
  4960  0450  148C               	bsf	12,1	;volatile
  4961  0451                     l2507:
  4962                           
  4963                           ;main.c: 223:     unsigned res = ADC_GetConversion(PIN_JUMP_STATE);
  4964  0451  3001               	movlw	1
  4965  0452  3185  25A8  3184   	fcall	_ADC_GetConversion
  4966  0455  0020               	movlb	0	; select bank0
  4967  0456  0821               	movf	?_ADC_GetConversion+1,w
  4968  0457  00A6               	movwf	get_jump@res+1
  4969  0458  0820               	movf	?_ADC_GetConversion,w
  4970  0459  00A5               	movwf	get_jump@res
  4971  045A                     l2509:
  4972  045A  0023               	movlb	3	; select bank3
  4973  045B  108C               	bcf	12,1	;volatile
  4974  045C                     l2511:
  4975                           
  4976                           ;main.c: 227:     if (res < 2000) jump_counter--;
  4977  045C  3007               	movlw	7
  4978  045D  0020               	movlb	0	; select bank0
  4979  045E  0226               	subwf	get_jump@res+1,w
  4980  045F  30D0               	movlw	208
  4981  0460  1903               	skipnz
  4982  0461  0225               	subwf	get_jump@res,w
  4983  0462  1803               	skipnc
  4984  0463  2C65               	goto	u1761
  4985  0464  2C66               	goto	u1760
  4986  0465                     u1761:
  4987  0465  2C6B               	goto	l2515
  4988  0466                     u1760:
  4989  0466                     l2513:
  4990  0466  30FF               	movlw	255
  4991  0467  00A4               	movwf	??_get_jump
  4992  0468  0824               	movf	??_get_jump,w
  4993  0469  07DB               	addwf	get_jump@jump_counter,f
  4994  046A  2C6F               	goto	l2517
  4995  046B                     l2515:
  4996  046B  3001               	movlw	1
  4997  046C  00A4               	movwf	??_get_jump
  4998  046D  0824               	movf	??_get_jump,w
  4999  046E  07DB               	addwf	get_jump@jump_counter,f
  5000  046F                     l2517:
  5001                           
  5002                           ;main.c: 239:     if (jump_counter > 10) {
  5003  046F  085B               	movf	get_jump@jump_counter,w
  5004  0470  3A80               	xorlw	128
  5005  0471  3E75               	addlw	-139
  5006  0472  1C03               	skipc
  5007  0473  2C75               	goto	u1771
  5008  0474  2C76               	goto	u1770
  5009  0475                     u1771:
  5010  0475  2C7C               	goto	l2523
  5011  0476                     u1770:
  5012  0476                     l2519:
  5013                           
  5014                           ;main.c: 240:         jump_counter = 10;
  5015  0476  300A               	movlw	10
  5016  0477  00A4               	movwf	??_get_jump
  5017  0478  0824               	movf	??_get_jump,w
  5018  0479  00DB               	movwf	get_jump@jump_counter
  5019  047A                     l2521:
  5020                           
  5021                           ;main.c: 241:         FLAGS.bits._JUMP_CONNECTED = 0;
  5022  047A  127C               	bcf	_FLAGS,4
  5023                           
  5024                           ;main.c: 242:     } else if (jump_counter<-10) {
  5025  047B  2C88               	goto	l386
  5026  047C                     l2523:
  5027  047C  085B               	movf	get_jump@jump_counter,w
  5028  047D  3A80               	xorlw	128
  5029  047E  3E8A               	addlw	138
  5030  047F  1803               	skipnc
  5031  0480  2C82               	goto	u1781
  5032  0481  2C83               	goto	u1780
  5033  0482                     u1781:
  5034  0482  2C88               	goto	l386
  5035  0483                     u1780:
  5036  0483                     l2525:
  5037                           
  5038                           ;main.c: 243:         jump_counter = -10;
  5039  0483  30F6               	movlw	246
  5040  0484  00A4               	movwf	??_get_jump
  5041  0485  0824               	movf	??_get_jump,w
  5042  0486  00DB               	movwf	get_jump@jump_counter
  5043  0487                     l2527:
  5044                           
  5045                           ;main.c: 244:         FLAGS.bits._JUMP_CONNECTED = 1;
  5046  0487  167C               	bsf	_FLAGS,4
  5047  0488                     l386:
  5048  0488  0008               	return
  5049  0489                     __end_of_get_jump:
  5050                           
  5051                           	psect	text27
  5052  0411                     __ptext27:	
  5053 ;; *************** function _get_fun *****************
  5054 ;; Defined at:
  5055 ;;		line 145 in file "main.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;		None
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;  res             2    5[BANK0 ] unsigned int 
  5060 ;; Return value:  Size  Location     Type
  5061 ;;                  1    wreg      void 
  5062 ;; Registers used:
  5063 ;;		wreg, status,2, status,0, pclath, cstack
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMMON   BANK0   BANK1
  5069 ;;      Params:         0       0       0
  5070 ;;      Locals:         0       2       0
  5071 ;;      Temps:          0       1       0
  5072 ;;      Totals:         0       3       0
  5073 ;;Total ram usage:        3 bytes
  5074 ;; Hardware stack levels used: 1
  5075 ;; Hardware stack levels required when called: 8
  5076 ;; This function calls:
  5077 ;;		_ADC_GetConversion
  5078 ;; This function is called by:
  5079 ;;		_main
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083  0411                     _get_fun:	
  5084                           ;psect for function _get_fun
  5085                           
  5086  0411                     l339:	
  5087                           ;incstack = 0
  5088                           ; Regs used in _get_fun: [wreg+status,2+status,0+pclath+cstack]
  5089                           ;main.c: 147:     static signed char fun_counter;;main.c: 148:     do { LATCbits.LATC1 =
      +                           1; } while(0);
  5090                           
  5091  0411  0022               	movlb	2	; select bank2
  5092  0412  148E               	bsf	14,1	;volatile
  5093  0413                     l341:	
  5094                           ;main.c: 149:     do { ANSELCbits.ANSC2 = 1; } while(0);
  5095                           
  5096  0413  0023               	movlb	3	; select bank3
  5097  0414  150E               	bsf	14,2	;volatile
  5098  0415                     l2481:
  5099                           
  5100                           ;main.c: 150:     unsigned res = ADC_GetConversion(PIN_FUN_STATE);
  5101  0415  3006               	movlw	6
  5102  0416  3185  25A8  3184   	fcall	_ADC_GetConversion
  5103  0419  0020               	movlb	0	; select bank0
  5104  041A  0821               	movf	?_ADC_GetConversion+1,w
  5105  041B  00A6               	movwf	get_fun@res+1
  5106  041C  0820               	movf	?_ADC_GetConversion,w
  5107  041D  00A5               	movwf	get_fun@res
  5108  041E                     l2483:
  5109  041E  0023               	movlb	3	; select bank3
  5110  041F  110E               	bcf	14,2	;volatile
  5111  0420                     l2485:
  5112  0420  0022               	movlb	2	; select bank2
  5113  0421  108E               	bcf	14,1	;volatile
  5114  0422                     l2487:
  5115                           
  5116                           ;main.c: 153:     if (res < 2000) fun_counter--;
  5117  0422  3007               	movlw	7
  5118  0423  0020               	movlb	0	; select bank0
  5119  0424  0226               	subwf	get_fun@res+1,w
  5120  0425  30D0               	movlw	208
  5121  0426  1903               	skipnz
  5122  0427  0225               	subwf	get_fun@res,w
  5123  0428  1803               	skipnc
  5124  0429  2C2B               	goto	u1731
  5125  042A  2C2C               	goto	u1730
  5126  042B                     u1731:
  5127  042B  2C31               	goto	l2491
  5128  042C                     u1730:
  5129  042C                     l2489:
  5130  042C  30FF               	movlw	255
  5131  042D  00A4               	movwf	??_get_fun
  5132  042E  0824               	movf	??_get_fun,w
  5133  042F  07DD               	addwf	get_fun@fun_counter,f
  5134  0430  2C35               	goto	l2493
  5135  0431                     l2491:
  5136  0431  3001               	movlw	1
  5137  0432  00A4               	movwf	??_get_fun
  5138  0433  0824               	movf	??_get_fun,w
  5139  0434  07DD               	addwf	get_fun@fun_counter,f
  5140  0435                     l2493:
  5141                           
  5142                           ;main.c: 166:        if (fun_counter > 10) {
  5143  0435  085D               	movf	get_fun@fun_counter,w
  5144  0436  3A80               	xorlw	128
  5145  0437  3E75               	addlw	-139
  5146  0438  1C03               	skipc
  5147  0439  2C3B               	goto	u1741
  5148  043A  2C3C               	goto	u1740
  5149  043B                     u1741:
  5150  043B  2C42               	goto	l2499
  5151  043C                     u1740:
  5152  043C                     l2495:
  5153                           
  5154                           ;main.c: 167:         fun_counter = 10;
  5155  043C  300A               	movlw	10
  5156  043D  00A4               	movwf	??_get_fun
  5157  043E  0824               	movf	??_get_fun,w
  5158  043F  00DD               	movwf	get_fun@fun_counter
  5159  0440                     l2497:
  5160                           
  5161                           ;main.c: 168:         FLAGS.bits._FUN_CONNECTED = 0;
  5162  0440  11FC               	bcf	_FLAGS,3
  5163                           
  5164                           ;main.c: 169:     } else if (fun_counter<-10) {
  5165  0441  2C4E               	goto	l352
  5166  0442                     l2499:
  5167  0442  085D               	movf	get_fun@fun_counter,w
  5168  0443  3A80               	xorlw	128
  5169  0444  3E8A               	addlw	138
  5170  0445  1803               	skipnc
  5171  0446  2C48               	goto	u1751
  5172  0447  2C49               	goto	u1750
  5173  0448                     u1751:
  5174  0448  2C4E               	goto	l352
  5175  0449                     u1750:
  5176  0449                     l2501:
  5177                           
  5178                           ;main.c: 170:         fun_counter = -10;
  5179  0449  30F6               	movlw	246
  5180  044A  00A4               	movwf	??_get_fun
  5181  044B  0824               	movf	??_get_fun,w
  5182  044C  00DD               	movwf	get_fun@fun_counter
  5183  044D                     l2503:
  5184                           
  5185                           ;main.c: 171:         FLAGS.bits._FUN_CONNECTED = 1;
  5186  044D  15FC               	bsf	_FLAGS,3
  5187  044E                     l352:
  5188  044E  0008               	return
  5189  044F                     __end_of_get_fun:
  5190                           
  5191                           	psect	text28
  5192  05A8                     __ptext28:	
  5193 ;; *************** function _ADC_GetConversion *****************
  5194 ;; Defined at:
  5195 ;;		line 116 in file "mcc_generated_files/adc.c"
  5196 ;; Parameters:    Size  Location     Type
  5197 ;;  channel         1    wreg     enum E2178
  5198 ;; Auto vars:     Size  Location     Type
  5199 ;;  channel         1    3[BANK0 ] enum E2178
  5200 ;; Return value:  Size  Location     Type
  5201 ;;                  2    0[BANK0 ] unsigned short 
  5202 ;; Registers used:
  5203 ;;		wreg, status,2, status,0
  5204 ;; Tracked objects:
  5205 ;;		On entry : 0/0
  5206 ;;		On exit  : 0/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMMON   BANK0   BANK1
  5209 ;;      Params:         0       2       0
  5210 ;;      Locals:         0       1       0
  5211 ;;      Temps:          0       1       0
  5212 ;;      Totals:         0       4       0
  5213 ;;Total ram usage:        4 bytes
  5214 ;; Hardware stack levels used: 1
  5215 ;; Hardware stack levels required when called: 7
  5216 ;; This function calls:
  5217 ;;		Nothing
  5218 ;; This function is called by:
  5219 ;;		_get_fun
  5220 ;;		_get_fun_full
  5221 ;;		_get_jump
  5222 ;;		_get_jump_full
  5223 ;;		_get_voltage
  5224 ;; This function uses a non-reentrant model
  5225 ;;
  5226                           
  5227  05A8                     _ADC_GetConversion:	
  5228                           ;psect for function _ADC_GetConversion
  5229                           
  5230                           
  5231                           ;incstack = 0
  5232                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  5233                           ;ADC_GetConversion@channel stored from wreg
  5234  05A8  0020               	movlb	0	; select bank0
  5235  05A9  00A3               	movwf	ADC_GetConversion@channel
  5236  05AA                     l2145:
  5237                           
  5238                           ;mcc_generated_files/adc.c: 116: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 117: {;mcc_generated_files/adc.c: 119:     ADCON0bits.CHS = ch
      +                          annel;
  5239  05AA  0823               	movf	ADC_GetConversion@channel,w
  5240  05AB  00A2               	movwf	??_ADC_GetConversion
  5241  05AC  0DA2               	rlf	??_ADC_GetConversion,f
  5242  05AD  0DA2               	rlf	??_ADC_GetConversion,f
  5243  05AE  0021               	movlb	1	; select bank1
  5244  05AF  081D               	movf	29,w	;volatile
  5245  05B0  0020               	movlb	0	; select bank0
  5246  05B1  0622               	xorwf	??_ADC_GetConversion,w
  5247  05B2  3983               	andlw	-125
  5248  05B3  0622               	xorwf	??_ADC_GetConversion,w
  5249  05B4  0021               	movlb	1	; select bank1
  5250  05B5  009D               	movwf	29	;volatile
  5251  05B6                     l2147:
  5252                           
  5253                           ;mcc_generated_files/adc.c: 122:     ADCON0bits.ADON = 1;
  5254  05B6  141D               	bsf	29,0	;volatile
  5255  05B7                     l2149:
  5256                           
  5257                           ;mcc_generated_files/adc.c: 125:     _delay((unsigned long)((5)*(16000000/4000000.0)));
  5258  05B7  3006               	movlw	6
  5259  05B8                     u2157:
  5260  05B8  0B89               	decfsz	9,f
  5261  05B9  2DB8               	goto	u2157
  5262  05BA  3200               	nop2
  5263  05BB                     l2151:
  5264                           
  5265                           ;mcc_generated_files/adc.c: 128:     ADCON0bits.GO_nDONE = 1;
  5266  05BB  0021               	movlb	1	; select bank1
  5267  05BC  149D               	bsf	29,1	;volatile
  5268  05BD                     l66:	
  5269                           ;mcc_generated_files/adc.c: 132:     {;mcc_generated_files/adc.c: 133:     }
  5270                           
  5271                           
  5272                           ;mcc_generated_files/adc.c: 131:     while (ADCON0bits.GO_nDONE)
  5273  05BD  189D               	btfsc	29,1	;volatile
  5274  05BE  2DC0               	goto	u1241
  5275  05BF  2DC1               	goto	u1240
  5276  05C0                     u1241:
  5277  05C0  2DBD               	goto	l66
  5278  05C1                     u1240:
  5279  05C1                     l2153:
  5280                           
  5281                           ;mcc_generated_files/adc.c: 136:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  5282  05C1  081C               	movf	28,w	;volatile
  5283  05C2  0020               	movlb	0	; select bank0
  5284  05C3  00A1               	movwf	?_ADC_GetConversion+1
  5285  05C4  0021               	movlb	1	; select bank1
  5286  05C5  081B               	movf	27,w	;volatile
  5287  05C6  0020               	movlb	0	; select bank0
  5288  05C7  00A0               	movwf	?_ADC_GetConversion
  5289  05C8                     l69:
  5290  05C8  0008               	return
  5291  05C9                     __end_of_ADC_GetConversion:
  5292                           
  5293                           	psect	text29
  5294  034E                     __ptext29:	
  5295 ;; *************** function _fun_work *****************
  5296 ;; Defined at:
  5297 ;;		line 350 in file "main.c"
  5298 ;; Parameters:    Size  Location     Type
  5299 ;;		None
  5300 ;; Auto vars:     Size  Location     Type
  5301 ;;		None
  5302 ;; Return value:  Size  Location     Type
  5303 ;;                  1    wreg      void 
  5304 ;; Registers used:
  5305 ;;		wreg, status,2, status,0, pclath, cstack
  5306 ;; Tracked objects:
  5307 ;;		On entry : 0/0
  5308 ;;		On exit  : 0/0
  5309 ;;		Unchanged: 0/0
  5310 ;; Data sizes:     COMMON   BANK0   BANK1
  5311 ;;      Params:         0       0       0
  5312 ;;      Locals:         0       0       0
  5313 ;;      Temps:          0       1       0
  5314 ;;      Totals:         0       1       0
  5315 ;;Total ram usage:        1 bytes
  5316 ;; Hardware stack levels used: 1
  5317 ;; Hardware stack levels required when called: 9
  5318 ;; This function calls:
  5319 ;;		_beep
  5320 ;;		_go_close
  5321 ;;		_go_close_alt
  5322 ;;		_go_open
  5323 ;;		_go_open_alt
  5324 ;; This function is called by:
  5325 ;;		_main
  5326 ;; This function uses a non-reentrant model
  5327 ;;
  5328                           
  5329  034E                     _fun_work:	
  5330                           ;psect for function _fun_work
  5331                           
  5332  034E                     l2553:	
  5333                           ;incstack = 0
  5334                           ; Regs used in _fun_work: [wreg+status,2+status,0+pclath+cstack]
  5335                           
  5336                           
  5337                           ;main.c: 351:     {;main.c: 352:         if (FLAGS.bits._FUN_CONNECTED &&
  5338  034E  1DFC               	btfss	_FLAGS,3
  5339  034F  2B51               	goto	u1871
  5340  0350  2B52               	goto	u1870
  5341  0351                     u1871:
  5342  0351  2B70               	goto	l2569
  5343  0352                     u1870:
  5344  0352                     l2555:
  5345  0352  187C               	btfsc	_FLAGS,0
  5346  0353  2B55               	goto	u1881
  5347  0354  2B56               	goto	u1880
  5348  0355                     u1881:
  5349  0355  2B70               	goto	l2569
  5350  0356                     u1880:
  5351  0356                     l2557:
  5352  0356  1D7C               	btfss	_FLAGS,2
  5353  0357  2B59               	goto	u1891
  5354  0358  2B5A               	goto	u1890
  5355  0359                     u1891:
  5356  0359  2B70               	goto	l2569
  5357  035A                     u1890:
  5358  035A                     l2559:
  5359  035A  1AFC               	btfsc	_FLAGS,5
  5360  035B  2B5D               	goto	u1901
  5361  035C  2B5E               	goto	u1900
  5362  035D                     u1901:
  5363  035D  2B70               	goto	l2569
  5364  035E                     u1900:
  5365  035E                     l2561:
  5366                           
  5367                           ;main.c: 355:                 !FLAGS.bits.RELE_POW_WAIT) {;main.c: 356:             if (
      +                          FLAGS.bits.NORMAL_WORK_MODE) go_open();
  5368  035E  1CFC               	btfss	_FLAGS,1
  5369  035F  2B61               	goto	u1911
  5370  0360  2B62               	goto	u1910
  5371  0361                     u1911:
  5372  0361  2B66               	goto	l2565
  5373  0362                     u1910:
  5374  0362                     l2563:
  5375  0362  3187  271F  3183   	fcall	_go_open
  5376  0365  2B69               	goto	l2567
  5377  0366                     l2565:
  5378  0366  3187  275B  3183   	fcall	_go_open_alt
  5379  0369                     l2567:
  5380                           
  5381                           ;main.c: 359:             beep( 40, 1);
  5382  0369  0020               	movlb	0	; select bank0
  5383  036A  01A0               	clrf	beep@count
  5384  036B  0AA0               	incf	beep@count,f
  5385  036C  3028               	movlw	40
  5386  036D  3185  2523  3183   	fcall	_beep
  5387  0370                     l2569:
  5388                           
  5389                           ;main.c: 361:         if (!FLAGS.bits._FUN_CONNECTED &&
  5390  0370  19FC               	btfsc	_FLAGS,3
  5391  0371  2B73               	goto	u1921
  5392  0372  2B74               	goto	u1920
  5393  0373                     u1921:
  5394  0373  2B90               	goto	l442
  5395  0374                     u1920:
  5396  0374                     l2571:
  5397  0374  197C               	btfsc	_FLAGS,2
  5398  0375  2B77               	goto	u1931
  5399  0376  2B78               	goto	u1930
  5400  0377                     u1931:
  5401  0377  2B90               	goto	l442
  5402  0378                     u1930:
  5403  0378                     l2573:
  5404  0378  1AFC               	btfsc	_FLAGS,5
  5405  0379  2B7B               	goto	u1941
  5406  037A  2B7C               	goto	u1940
  5407  037B                     u1941:
  5408  037B  2B90               	goto	l442
  5409  037C                     u1940:
  5410  037C                     l2575:
  5411                           
  5412                           ;main.c: 363:                 !FLAGS.bits.RELE_POW_WAIT) {;main.c: 364:             if (
      +                          FLAGS.bits.NORMAL_WORK_MODE) go_close();
  5413  037C  1CFC               	btfss	_FLAGS,1
  5414  037D  2B7F               	goto	u1951
  5415  037E  2B80               	goto	u1950
  5416  037F                     u1951:
  5417  037F  2B84               	goto	l2579
  5418  0380                     u1950:
  5419  0380                     l2577:
  5420  0380  3185  25C9  3183   	fcall	_go_close
  5421  0383  2B87               	goto	l2581
  5422  0384                     l2579:
  5423  0384  3187  2760  3183   	fcall	_go_close_alt
  5424  0387                     l2581:
  5425                           
  5426                           ;main.c: 367:             beep( 40, 2);
  5427  0387  3002               	movlw	2
  5428  0388  0020               	movlb	0	; select bank0
  5429  0389  00A6               	movwf	??_fun_work
  5430  038A  0826               	movf	??_fun_work,w
  5431  038B  00A0               	movwf	beep@count
  5432  038C  3028               	movlw	40
  5433  038D  3185  2523  3183   	fcall	_beep
  5434  0390                     l442:
  5435  0390  0008               	return
  5436  0391                     __end_of_fun_work:
  5437                           
  5438                           	psect	text30
  5439  075B                     __ptext30:	
  5440 ;; *************** function _go_open_alt *****************
  5441 ;; Defined at:
  5442 ;;		line 114 in file "main.c"
  5443 ;; Parameters:    Size  Location     Type
  5444 ;;		None
  5445 ;; Auto vars:     Size  Location     Type
  5446 ;;		None
  5447 ;; Return value:  Size  Location     Type
  5448 ;;                  1    wreg      void 
  5449 ;; Registers used:
  5450 ;;		None
  5451 ;; Tracked objects:
  5452 ;;		On entry : 0/0
  5453 ;;		On exit  : 0/0
  5454 ;;		Unchanged: 0/0
  5455 ;; Data sizes:     COMMON   BANK0   BANK1
  5456 ;;      Params:         0       0       0
  5457 ;;      Locals:         0       0       0
  5458 ;;      Temps:          0       0       0
  5459 ;;      Totals:         0       0       0
  5460 ;;Total ram usage:        0 bytes
  5461 ;; Hardware stack levels used: 1
  5462 ;; Hardware stack levels required when called: 7
  5463 ;; This function calls:
  5464 ;;		Nothing
  5465 ;; This function is called by:
  5466 ;;		_fun_work
  5467 ;; This function uses a non-reentrant model
  5468 ;;
  5469                           
  5470  075B                     _go_open_alt:	
  5471                           ;psect for function _go_open_alt
  5472                           
  5473  075B                     l2397:	
  5474                           ;incstack = 0
  5475                           ; Regs used in _go_open_alt: []
  5476                           
  5477                           
  5478                           ;main.c: 115:     FLAGS.bits.CLOSED = 0;
  5479  075B  117C               	bcf	_FLAGS,2
  5480  075C                     l306:	
  5481                           ;main.c: 116:     do { LATCbits.LATC4 = 0; } while(0);
  5482                           
  5483  075C  0022               	movlb	2	; select bank2
  5484  075D  120E               	bcf	14,4	;volatile
  5485  075E                     l308:	
  5486                           ;main.c: 117:     do { LATCbits.LATC5 = 0; } while(0);
  5487                           
  5488  075E  128E               	bcf	14,5	;volatile
  5489  075F                     l310:
  5490  075F  0008               	return
  5491  0760                     __end_of_go_open_alt:
  5492                           
  5493                           	psect	text31
  5494  071F                     __ptext31:	
  5495 ;; *************** function _go_open *****************
  5496 ;; Defined at:
  5497 ;;		line 100 in file "main.c"
  5498 ;; Parameters:    Size  Location     Type
  5499 ;;		None
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;		None
  5502 ;; Return value:  Size  Location     Type
  5503 ;;                  1    wreg      void 
  5504 ;; Registers used:
  5505 ;;		wreg
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 0/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMMON   BANK0   BANK1
  5511 ;;      Params:         0       0       0
  5512 ;;      Locals:         0       0       0
  5513 ;;      Temps:          0       1       0
  5514 ;;      Totals:         0       1       0
  5515 ;;Total ram usage:        1 bytes
  5516 ;; Hardware stack levels used: 1
  5517 ;; Hardware stack levels required when called: 7
  5518 ;; This function calls:
  5519 ;;		Nothing
  5520 ;; This function is called by:
  5521 ;;		_povorot
  5522 ;;		_fun_work
  5523 ;; This function uses a non-reentrant model
  5524 ;;
  5525                           
  5526  071F                     _go_open:	
  5527                           ;psect for function _go_open
  5528                           
  5529  071F                     l292:	
  5530                           ;incstack = 0
  5531                           ; Regs used in _go_open: [wreg]
  5532                           ;main.c: 101:     do { LATCbits.LATC4 = 0; } while(0);
  5533                           
  5534  071F  0022               	movlb	2	; select bank2
  5535  0720  120E               	bcf	14,4	;volatile
  5536  0721                     l294:	
  5537                           ;main.c: 102:     do { LATCbits.LATC5 = 1; } while(0);
  5538                           
  5539  0721  168E               	bsf	14,5	;volatile
  5540  0722                     l2389:
  5541                           
  5542                           ;main.c: 103:     time_pow_s = 10;
  5543  0722  300A               	movlw	10
  5544  0723  0020               	movlb	0	; select bank0
  5545  0724  00A0               	movwf	??_go_open
  5546  0725  0820               	movf	??_go_open,w
  5547  0726  00DE               	movwf	_time_pow_s
  5548  0727                     l2391:
  5549                           
  5550                           ;main.c: 104:     FLAGS.bits.RELE_POW_WAIT = 1;
  5551  0727  16FC               	bsf	_FLAGS,5
  5552  0728                     l296:
  5553  0728  0008               	return
  5554  0729                     __end_of_go_open:
  5555                           
  5556                           	psect	text32
  5557  0760                     __ptext32:	
  5558 ;; *************** function _go_close_alt *****************
  5559 ;; Defined at:
  5560 ;;		line 108 in file "main.c"
  5561 ;; Parameters:    Size  Location     Type
  5562 ;;		None
  5563 ;; Auto vars:     Size  Location     Type
  5564 ;;		None
  5565 ;; Return value:  Size  Location     Type
  5566 ;;                  1    wreg      void 
  5567 ;; Registers used:
  5568 ;;		None
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMMON   BANK0   BANK1
  5574 ;;      Params:         0       0       0
  5575 ;;      Locals:         0       0       0
  5576 ;;      Temps:          0       0       0
  5577 ;;      Totals:         0       0       0
  5578 ;;Total ram usage:        0 bytes
  5579 ;; Hardware stack levels used: 1
  5580 ;; Hardware stack levels required when called: 7
  5581 ;; This function calls:
  5582 ;;		Nothing
  5583 ;; This function is called by:
  5584 ;;		_fun_work
  5585 ;;		_switch_wm
  5586 ;; This function uses a non-reentrant model
  5587 ;;
  5588                           
  5589  0760                     _go_close_alt:	
  5590                           ;psect for function _go_close_alt
  5591                           
  5592  0760                     l2395:	
  5593                           ;incstack = 0
  5594                           ; Regs used in _go_close_alt: []
  5595                           
  5596                           
  5597                           ;main.c: 109:     FLAGS.bits.CLOSED = 1;
  5598  0760  157C               	bsf	_FLAGS,2
  5599  0761                     l299:	
  5600                           ;main.c: 110:     do { LATCbits.LATC4 = 0; } while(0);
  5601                           
  5602  0761  0022               	movlb	2	; select bank2
  5603  0762  120E               	bcf	14,4	;volatile
  5604  0763                     l301:	
  5605                           ;main.c: 111:     do { LATCbits.LATC5 = 1; } while(0);
  5606                           
  5607  0763  168E               	bsf	14,5	;volatile
  5608  0764                     l303:
  5609  0764  0008               	return
  5610  0765                     __end_of_go_close_alt:
  5611                           
  5612                           	psect	text33
  5613  05C9                     __ptext33:	
  5614 ;; *************** function _go_close *****************
  5615 ;; Defined at:
  5616 ;;		line 89 in file "main.c"
  5617 ;; Parameters:    Size  Location     Type
  5618 ;;		None
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;		None
  5621 ;; Return value:  Size  Location     Type
  5622 ;;                  1    wreg      void 
  5623 ;; Registers used:
  5624 ;;		wreg
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMMON   BANK0   BANK1
  5630 ;;      Params:         0       0       0
  5631 ;;      Locals:         0       0       0
  5632 ;;      Temps:          0       2       0
  5633 ;;      Totals:         0       2       0
  5634 ;;Total ram usage:        2 bytes
  5635 ;; Hardware stack levels used: 1
  5636 ;; Hardware stack levels required when called: 7
  5637 ;; This function calls:
  5638 ;;		Nothing
  5639 ;; This function is called by:
  5640 ;;		_povorot
  5641 ;;		_fun_work
  5642 ;;		_switch_wm
  5643 ;; This function uses a non-reentrant model
  5644 ;;
  5645                           
  5646  05C9                     _go_close:	
  5647                           ;psect for function _go_close
  5648                           
  5649  05C9                     l2377:	
  5650                           ;incstack = 0
  5651                           ; Regs used in _go_close: [wreg]
  5652                           
  5653                           
  5654                           ;main.c: 90:     time_s = 0;
  5655  05C9  3000               	movlw	0
  5656  05CA  0020               	movlb	0	; select bank0
  5657  05CB  00D5               	movwf	_time_s
  5658  05CC  3000               	movlw	0
  5659  05CD  00D6               	movwf	_time_s+1
  5660  05CE  3000               	movlw	0
  5661  05CF  00D7               	movwf	_time_s+2
  5662  05D0                     l2379:
  5663  05D0  0022               	movlb	2	; select bank2
  5664  05D1  160E               	bsf	14,4	;volatile
  5665  05D2                     l286:
  5666                           
  5667                           ;main.c: 92:     _delay((unsigned long)((2 * 1000)*(16000000/4000.0)));
  5668  05D2  3029               	movlw	41
  5669  05D3  0020               	movlb	0	; select bank0
  5670  05D4  00A1               	movwf	??_go_close+1
  5671  05D5  3096               	movlw	150
  5672  05D6  00A0               	movwf	??_go_close
  5673  05D7  307F               	movlw	127
  5674  05D8                     u2167:
  5675  05D8  0B89               	decfsz	9,f
  5676  05D9  2DD8               	goto	u2167
  5677  05DA  0BA0               	decfsz	??_go_close,f
  5678  05DB  2DD8               	goto	u2167
  5679  05DC  0BA1               	decfsz	??_go_close+1,f
  5680  05DD  2DD8               	goto	u2167
  5681  05DE                     l2381:
  5682  05DE  0022               	movlb	2	; select bank2
  5683  05DF  168E               	bsf	14,5	;volatile
  5684  05E0                     l288:
  5685                           
  5686                           ;main.c: 94:     time_pow_s = 10;
  5687  05E0  300A               	movlw	10
  5688  05E1  0020               	movlb	0	; select bank0
  5689  05E2  00A0               	movwf	??_go_close
  5690  05E3  0820               	movf	??_go_close,w
  5691  05E4  00DE               	movwf	_time_pow_s
  5692  05E5                     l2383:
  5693                           
  5694                           ;main.c: 95:     FLAGS.bits.RELE_POW_WAIT = 1;
  5695  05E5  16FC               	bsf	_FLAGS,5
  5696  05E6                     l2385:
  5697                           
  5698                           ;main.c: 96:     FLAGS.bits.RELE_CON_WAIT = 1;
  5699  05E6  177C               	bsf	_FLAGS,6
  5700  05E7                     l289:
  5701  05E7  0008               	return
  5702  05E8                     __end_of_go_close:
  5703                           
  5704                           	psect	text34
  5705  0523                     __ptext34:	
  5706 ;; *************** function _beep *****************
  5707 ;; Defined at:
  5708 ;;		line 79 in file "main.c"
  5709 ;; Parameters:    Size  Location     Type
  5710 ;;  time            1    wreg     unsigned char 
  5711 ;;  count           1    0[BANK0 ] unsigned char 
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;  time            1    3[BANK0 ] unsigned char 
  5714 ;;  i               1    5[BANK0 ] unsigned char 
  5715 ;;  j               1    4[BANK0 ] unsigned char 
  5716 ;; Return value:  Size  Location     Type
  5717 ;;                  1    wreg      void 
  5718 ;; Registers used:
  5719 ;;		wreg, status,2, status,0, pclath, cstack
  5720 ;; Tracked objects:
  5721 ;;		On entry : 0/0
  5722 ;;		On exit  : 0/0
  5723 ;;		Unchanged: 0/0
  5724 ;; Data sizes:     COMMON   BANK0   BANK1
  5725 ;;      Params:         0       1       0
  5726 ;;      Locals:         0       3       0
  5727 ;;      Temps:          0       2       0
  5728 ;;      Totals:         0       6       0
  5729 ;;Total ram usage:        6 bytes
  5730 ;; Hardware stack levels used: 1
  5731 ;; Hardware stack levels required when called: 8
  5732 ;; This function calls:
  5733 ;;		_switch_zum
  5734 ;; This function is called by:
  5735 ;;		_fun_work
  5736 ;;		_switch_wm
  5737 ;; This function uses a non-reentrant model
  5738 ;;
  5739                           
  5740  0523                     _beep:	
  5741                           ;psect for function _beep
  5742                           
  5743                           
  5744                           ;incstack = 0
  5745                           ; Regs used in _beep: [wreg+status,2+status,0+pclath+cstack]
  5746                           ;beep@time stored from wreg
  5747  0523  0020               	movlb	0	; select bank0
  5748  0524  00A3               	movwf	beep@time
  5749  0525                     l2359:
  5750                           
  5751                           ;main.c: 80:     for (char j = 0; j < count; j++) {
  5752  0525  01A4               	clrf	beep@j
  5753  0526  2D4C               	goto	l2375
  5754  0527                     l2361:
  5755                           
  5756                           ;main.c: 81:         for (char i = 0; i < time; i++) {
  5757  0527  01A5               	clrf	beep@i
  5758  0528  2D35               	goto	l2369
  5759  0529                     l2363:
  5760                           
  5761                           ;main.c: 82:             switch_zum();
  5762  0529  3186  26D5  3185   	fcall	_switch_zum
  5763  052C                     l2365:
  5764                           
  5765                           ;main.c: 83:             _delay((unsigned long)((300)*(16000000/4000000.0)));
  5766  052C  30F0               	movlw	240
  5767  052D                     u2177:
  5768  052D  3200               	nop2
  5769  052E  0B89               	decfsz	9,f
  5770  052F  2D2D               	goto	u2177
  5771  0530                     l2367:
  5772                           
  5773                           ;main.c: 84:         }
  5774  0530  3001               	movlw	1
  5775  0531  0020               	movlb	0	; select bank0
  5776  0532  00A1               	movwf	??_beep
  5777  0533  0821               	movf	??_beep,w
  5778  0534  07A5               	addwf	beep@i,f
  5779  0535                     l2369:
  5780  0535  0823               	movf	beep@time,w
  5781  0536  0225               	subwf	beep@i,w
  5782  0537  1C03               	skipc
  5783  0538  2D3A               	goto	u1591
  5784  0539  2D3B               	goto	u1590
  5785  053A                     u1591:
  5786  053A  2D29               	goto	l2363
  5787  053B                     u1590:
  5788  053B                     l2371:
  5789                           
  5790                           ;main.c: 85:         _delay((unsigned long)((100)*(16000000/4000.0)));
  5791  053B  3003               	movlw	3
  5792  053C  0020               	movlb	0	; select bank0
  5793  053D  00A2               	movwf	??_beep+1
  5794  053E  3008               	movlw	8
  5795  053F  00A1               	movwf	??_beep
  5796  0540  3077               	movlw	119
  5797  0541                     u2187:
  5798  0541  0B89               	decfsz	9,f
  5799  0542  2D41               	goto	u2187
  5800  0543  0BA1               	decfsz	??_beep,f
  5801  0544  2D41               	goto	u2187
  5802  0545  0BA2               	decfsz	??_beep+1,f
  5803  0546  2D41               	goto	u2187
  5804  0547                     l2373:
  5805                           
  5806                           ;main.c: 86:     }
  5807  0547  3001               	movlw	1
  5808  0548  0020               	movlb	0	; select bank0
  5809  0549  00A1               	movwf	??_beep
  5810  054A  0821               	movf	??_beep,w
  5811  054B  07A4               	addwf	beep@j,f
  5812  054C                     l2375:
  5813  054C  0820               	movf	beep@count,w
  5814  054D  0224               	subwf	beep@j,w
  5815  054E  1C03               	skipc
  5816  054F  2D51               	goto	u1601
  5817  0550  2D52               	goto	u1600
  5818  0551                     u1601:
  5819  0551  2D27               	goto	l2361
  5820  0552                     u1600:
  5821  0552                     l282:
  5822  0552  0008               	return
  5823  0553                     __end_of_beep:
  5824                           
  5825                           	psect	text35
  5826  06D5                     __ptext35:	
  5827 ;; *************** function _switch_zum *****************
  5828 ;; Defined at:
  5829 ;;		line 71 in file "main.c"
  5830 ;; Parameters:    Size  Location     Type
  5831 ;;		None
  5832 ;; Auto vars:     Size  Location     Type
  5833 ;;		None
  5834 ;; Return value:  Size  Location     Type
  5835 ;;                  1    wreg      void 
  5836 ;; Registers used:
  5837 ;;		status,0
  5838 ;; Tracked objects:
  5839 ;;		On entry : 0/0
  5840 ;;		On exit  : 0/0
  5841 ;;		Unchanged: 0/0
  5842 ;; Data sizes:     COMMON   BANK0   BANK1
  5843 ;;      Params:         0       0       0
  5844 ;;      Locals:         0       0       0
  5845 ;;      Temps:          0       0       0
  5846 ;;      Totals:         0       0       0
  5847 ;;Total ram usage:        0 bytes
  5848 ;; Hardware stack levels used: 1
  5849 ;; Hardware stack levels required when called: 7
  5850 ;; This function calls:
  5851 ;;		Nothing
  5852 ;; This function is called by:
  5853 ;;		_beep
  5854 ;;		_start_setup
  5855 ;;		_TMR0_ISR
  5856 ;; This function uses a non-reentrant model
  5857 ;;
  5858                           
  5859  06D5                     _switch_zum:	
  5860                           ;psect for function _switch_zum
  5861                           
  5862                           
  5863                           ;Skip over the trampoline to the duplicate function for level 1
  5864  06D5  1C7E               	btfss	int$flags,0
  5865  06D6  2ED8               	goto	_switch_zum$intlevel0
  5866  06D7  2F12               	ljmp	i1_switch_zum
  5867  06D8                     _switch_zum$intlevel0:
  5868  06D8                     l268:	
  5869                           ;incstack = 0
  5870                           ; Regs used in _switch_zum: [status,0]
  5871                           ;main.c: 72:     do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  5872                           
  5873  06D8                     l2157:
  5874  06D8  1003               	clrc
  5875  06D9  0022               	movlb	2	; select bank2
  5876  06DA  1E8C               	btfss	12,5	;volatile
  5877  06DB  1403               	setc
  5878  06DC  1803               	btfsc	3,0
  5879  06DD  2EDF               	goto	u1251
  5880  06DE  2EE2               	goto	u1250
  5881  06DF                     u1251:
  5882  06DF  0022               	movlb	2	; select bank2
  5883  06E0  168C               	bsf	12,5	;volatile
  5884  06E1  2EE4               	goto	u1264
  5885  06E2                     u1250:
  5886  06E2  0022               	movlb	2	; select bank2
  5887  06E3  128C               	bcf	12,5	;volatile
  5888  06E4                     u1264:
  5889  06E4                     l270:
  5890  06E4  0008               	return
  5891  06E5                     __end_of_switch_zum:
  5892                           
  5893                           	psect	intentry
  5894  0004                     __pintentry:	
  5895 ;; *************** function _INTERRUPT_InterruptManager *****************
  5896 ;; Defined at:
  5897 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5898 ;; Parameters:    Size  Location     Type
  5899 ;;		None
  5900 ;; Auto vars:     Size  Location     Type
  5901 ;;		None
  5902 ;; Return value:  Size  Location     Type
  5903 ;;                  1    wreg      void 
  5904 ;; Registers used:
  5905 ;;		wreg, status,2, status,0, pclath, cstack
  5906 ;; Tracked objects:
  5907 ;;		On entry : 0/0
  5908 ;;		On exit  : 0/0
  5909 ;;		Unchanged: 0/0
  5910 ;; Data sizes:     COMMON   BANK0   BANK1
  5911 ;;      Params:         0       0       0
  5912 ;;      Locals:         0       0       0
  5913 ;;      Temps:          0       0       0
  5914 ;;      Totals:         0       0       0
  5915 ;;Total ram usage:        0 bytes
  5916 ;; Hardware stack levels used: 1
  5917 ;; Hardware stack levels required when called: 6
  5918 ;; This function calls:
  5919 ;;		_TMR0_ISR
  5920 ;;		_TMR2_ISR
  5921 ;; This function is called by:
  5922 ;;		Interrupt level 1
  5923 ;; This function uses a non-reentrant model
  5924 ;;
  5925                           
  5926  0004                     _INTERRUPT_InterruptManager:
  5927                           
  5928                           ;incstack = 0
  5929  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  5930                           
  5931                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  5932  0005  3180               	pagesel	$
  5933  0006                     i1l2685:
  5934                           
  5935                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  5936  0006  1E8B               	btfss	11,5	;volatile
  5937  0007  2809               	goto	u205_21
  5938  0008  280A               	goto	u205_20
  5939  0009                     u205_21:
  5940  0009  2812               	goto	i1l110
  5941  000A                     u205_20:
  5942  000A                     i1l2687:
  5943  000A  1D0B               	btfss	11,2	;volatile
  5944  000B  280D               	goto	u206_21
  5945  000C  280E               	goto	u206_20
  5946  000D                     u206_21:
  5947  000D  2812               	goto	i1l110
  5948  000E                     u206_20:
  5949  000E                     i1l2689:
  5950                           
  5951                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
  5952  000E  3186  26F5  3180   	fcall	_TMR0_ISR
  5953                           
  5954                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  5955  0011  2824               	goto	i1l116
  5956  0012                     i1l110:	
  5957                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
  5958                           
  5959  0012  1F0B               	btfss	11,6	;volatile
  5960  0013  2815               	goto	u207_21
  5961  0014  2816               	goto	u207_20
  5962  0015                     u207_21:
  5963  0015  2824               	goto	i1l116
  5964  0016                     u207_20:
  5965  0016                     i1l2691:
  5966                           
  5967                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  5968  0016  0021               	movlb	1	; select bank1
  5969  0017  1C91               	btfss	17,1	;volatile
  5970  0018  281A               	goto	u208_21
  5971  0019  281B               	goto	u208_20
  5972  001A                     u208_21:
  5973  001A  2824               	goto	i1l115
  5974  001B                     u208_20:
  5975  001B                     i1l2693:
  5976  001B  0020               	movlb	0	; select bank0
  5977  001C  1C91               	btfss	17,1	;volatile
  5978  001D  281F               	goto	u209_21
  5979  001E  2820               	goto	u209_20
  5980  001F                     u209_21:
  5981  001F  2824               	goto	i1l115
  5982  0020                     u209_20:
  5983  0020                     i1l2695:
  5984                           
  5985                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR2_ISR();
  5986  0020  3186  26AD  3180   	fcall	_TMR2_ISR
  5987                           
  5988                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  5989  0023  2824               	goto	i1l116
  5990  0024                     i1l115:	
  5991                           ;mcc_generated_files/interrupt_manager.c: 71:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 73:     }
  5992                           
  5993  0024                     i1l116:
  5994  0024  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5995  0025  0009               	retfie
  5996  0026                     __end_of_INTERRUPT_InterruptManager:
  5997                           
  5998                           	psect	text37
  5999  06AD                     __ptext37:	
  6000 ;; *************** function _TMR2_ISR *****************
  6001 ;; Defined at:
  6002 ;;		line 119 in file "mcc_generated_files/tmr2.c"
  6003 ;; Parameters:    Size  Location     Type
  6004 ;;		None
  6005 ;; Auto vars:     Size  Location     Type
  6006 ;;		None
  6007 ;; Return value:  Size  Location     Type
  6008 ;;                  1    wreg      void 
  6009 ;; Registers used:
  6010 ;;		wreg, status,2, status,0, pclath, cstack
  6011 ;; Tracked objects:
  6012 ;;		On entry : 0/0
  6013 ;;		On exit  : 0/0
  6014 ;;		Unchanged: 0/0
  6015 ;; Data sizes:     COMMON   BANK0   BANK1
  6016 ;;      Params:         0       0       0
  6017 ;;      Locals:         0       0       0
  6018 ;;      Temps:          0       0       0
  6019 ;;      Totals:         0       0       0
  6020 ;;Total ram usage:        0 bytes
  6021 ;; Hardware stack levels used: 1
  6022 ;; Hardware stack levels required when called: 5
  6023 ;; This function calls:
  6024 ;;		_TMR2_CallBack
  6025 ;; This function is called by:
  6026 ;;		_INTERRUPT_InterruptManager
  6027 ;; This function uses a non-reentrant model
  6028 ;;
  6029                           
  6030  06AD                     _TMR2_ISR:	
  6031                           ;psect for function _TMR2_ISR
  6032                           
  6033  06AD                     i1l2473:	
  6034                           ;incstack = 0
  6035                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
  6036                           
  6037                           
  6038                           ;mcc_generated_files/tmr2.c: 121:     static volatile unsigned int CountCallBack = 0;;mc
      +                          c_generated_files/tmr2.c: 124:     PIR1bits.TMR2IF = 0;
  6039  06AD  0020               	movlb	0	; select bank0
  6040  06AE  1091               	bcf	17,1	;volatile
  6041  06AF                     i1l2475:
  6042                           
  6043                           ;mcc_generated_files/tmr2.c: 127:     if (++CountCallBack >= 100)
  6044  06AF  3001               	movlw	1
  6045  06B0  07F8               	addwf	TMR2_ISR@CountCallBack,f	;volatile
  6046  06B1  3000               	movlw	0
  6047  06B2  3DF9               	addwfc	TMR2_ISR@CountCallBack+1,f	;volatile
  6048  06B3  3000               	movlw	0
  6049  06B4  0279               	subwf	TMR2_ISR@CountCallBack+1,w	;volatile
  6050  06B5  3064               	movlw	100
  6051  06B6  1903               	skipnz
  6052  06B7  0278               	subwf	TMR2_ISR@CountCallBack,w	;volatile
  6053  06B8  1C03               	skipc
  6054  06B9  2EBB               	goto	u172_21
  6055  06BA  2EBC               	goto	u172_20
  6056  06BB                     u172_21:
  6057  06BB  2EC1               	goto	i1l157
  6058  06BC                     u172_20:
  6059  06BC                     i1l2477:
  6060                           
  6061                           ;mcc_generated_files/tmr2.c: 128:     {;mcc_generated_files/tmr2.c: 130:         TMR2_Ca
      +                          llBack();
  6062  06BC  3187  2705  3186   	fcall	_TMR2_CallBack
  6063  06BF                     i1l2479:
  6064                           
  6065                           ;mcc_generated_files/tmr2.c: 133:         CountCallBack = 0;
  6066  06BF  01F8               	clrf	TMR2_ISR@CountCallBack	;volatile
  6067  06C0  01F9               	clrf	TMR2_ISR@CountCallBack+1	;volatile
  6068  06C1                     i1l157:
  6069  06C1  0008               	return
  6070  06C2                     __end_of_TMR2_ISR:
  6071                           
  6072                           	psect	text38
  6073  0705                     __ptext38:	
  6074 ;; *************** function _TMR2_CallBack *****************
  6075 ;; Defined at:
  6076 ;;		line 137 in file "mcc_generated_files/tmr2.c"
  6077 ;; Parameters:    Size  Location     Type
  6078 ;;		None
  6079 ;; Auto vars:     Size  Location     Type
  6080 ;;		None
  6081 ;; Return value:  Size  Location     Type
  6082 ;;                  1    wreg      void 
  6083 ;; Registers used:
  6084 ;;		wreg, status,2, status,0, pclath, cstack
  6085 ;; Tracked objects:
  6086 ;;		On entry : 0/0
  6087 ;;		On exit  : 0/0
  6088 ;;		Unchanged: 0/0
  6089 ;; Data sizes:     COMMON   BANK0   BANK1
  6090 ;;      Params:         0       0       0
  6091 ;;      Locals:         0       0       0
  6092 ;;      Temps:          0       0       0
  6093 ;;      Totals:         0       0       0
  6094 ;;Total ram usage:        0 bytes
  6095 ;; Hardware stack levels used: 1
  6096 ;; Hardware stack levels required when called: 4
  6097 ;; This function calls:
  6098 ;;		Absolute function
  6099 ;;		_TMR2_DefaultInterruptHandler
  6100 ;;		_sec_tick_work
  6101 ;; This function is called by:
  6102 ;;		_TMR2_ISR
  6103 ;; This function uses a non-reentrant model
  6104 ;;
  6105                           
  6106  0705                     _TMR2_CallBack:	
  6107                           ;psect for function _TMR2_CallBack
  6108                           
  6109  0705                     i1l2355:	
  6110                           ;incstack = 0
  6111                           ; Regs used in _TMR2_CallBack: [wreg+status,2+status,0+pclath+cstack]
  6112                           
  6113                           
  6114                           ;mcc_generated_files/tmr2.c: 141:     if(TMR2_InterruptHandler)
  6115  0705  0020               	movlb	0	; select bank0
  6116  0706  0862               	movf	_TMR2_InterruptHandler,w
  6117  0707  0463               	iorwf	_TMR2_InterruptHandler+1,w
  6118  0708  1903               	btfsc	3,2
  6119  0709  2F0B               	goto	u158_21
  6120  070A  2F0C               	goto	u158_20
  6121  070B                     u158_21:
  6122  070B  2F11               	goto	i1l161
  6123  070C                     u158_20:
  6124  070C                     i1l2357:
  6125                           
  6126                           ;mcc_generated_files/tmr2.c: 142:     {;mcc_generated_files/tmr2.c: 143:         TMR2_In
      +                          terruptHandler();
  6127  070C  0863               	movf	_TMR2_InterruptHandler+1,w
  6128  070D  008A               	movwf	10
  6129  070E  0862               	movf	_TMR2_InterruptHandler,w
  6130  070F  000A               	callw
  6131  0710  3187               	pagesel	$
  6132  0711                     i1l161:
  6133  0711  0008               	return
  6134  0712                     __end_of_TMR2_CallBack:
  6135                           
  6136                           	psect	text39
  6137  077E                     __ptext39:	
  6138 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  6139 ;; Defined at:
  6140 ;;		line 151 in file "mcc_generated_files/tmr2.c"
  6141 ;; Parameters:    Size  Location     Type
  6142 ;;		None
  6143 ;; Auto vars:     Size  Location     Type
  6144 ;;		None
  6145 ;; Return value:  Size  Location     Type
  6146 ;;                  1    wreg      void 
  6147 ;; Registers used:
  6148 ;;		None
  6149 ;; Tracked objects:
  6150 ;;		On entry : 0/0
  6151 ;;		On exit  : 0/0
  6152 ;;		Unchanged: 0/0
  6153 ;; Data sizes:     COMMON   BANK0   BANK1
  6154 ;;      Params:         0       0       0
  6155 ;;      Locals:         0       0       0
  6156 ;;      Temps:          0       0       0
  6157 ;;      Totals:         0       0       0
  6158 ;;Total ram usage:        0 bytes
  6159 ;; Hardware stack levels used: 1
  6160 ;; This function calls:
  6161 ;;		Nothing
  6162 ;; This function is called by:
  6163 ;;		_TMR2_Initialize
  6164 ;;		_TMR2_CallBack
  6165 ;; This function uses a non-reentrant model
  6166 ;;
  6167                           
  6168  077E                     _TMR2_DefaultInterruptHandler:	
  6169                           ;psect for function _TMR2_DefaultInterruptHandler
  6170                           
  6171  077E                     i1l167:	
  6172                           ;incstack = 0
  6173                           ; Regs used in _TMR2_DefaultInterruptHandler: []
  6174                           
  6175  077E  0008               	return
  6176  077F                     __end_of_TMR2_DefaultInterruptHandler:
  6177                           
  6178                           	psect	text40
  6179  0391                     __ptext40:	
  6180 ;; *************** function _sec_tick_work *****************
  6181 ;; Defined at:
  6182 ;;		line 310 in file "main.c"
  6183 ;; Parameters:    Size  Location     Type
  6184 ;;		None
  6185 ;; Auto vars:     Size  Location     Type
  6186 ;;		None
  6187 ;; Return value:  Size  Location     Type
  6188 ;;                  1    wreg      void 
  6189 ;; Registers used:
  6190 ;;		wreg, status,2, status,0, pclath, cstack
  6191 ;; Tracked objects:
  6192 ;;		On entry : 0/0
  6193 ;;		On exit  : 0/0
  6194 ;;		Unchanged: 0/0
  6195 ;; Data sizes:     COMMON   BANK0   BANK1
  6196 ;;      Params:         0       0       0
  6197 ;;      Locals:         0       0       0
  6198 ;;      Temps:          1       0       0
  6199 ;;      Totals:         1       0       0
  6200 ;;Total ram usage:        1 bytes
  6201 ;; Hardware stack levels used: 1
  6202 ;; Hardware stack levels required when called: 3
  6203 ;; This function calls:
  6204 ;;		_get_measure
  6205 ;;		_rele_tick
  6206 ;;		_toggle_tone
  6207 ;;		i1_switch_zum
  6208 ;; This function is called by:
  6209 ;;		_start_setup
  6210 ;;		_TMR2_CallBack
  6211 ;; This function uses a non-reentrant model
  6212 ;;
  6213                           
  6214  0391                     _sec_tick_work:	
  6215                           ;psect for function _sec_tick_work
  6216                           
  6217  0391                     i1l2159:	
  6218                           ;incstack = 0
  6219                           ; Regs used in _sec_tick_work: [wreg+status,2+status,0+pclath+cstack]
  6220                           
  6221                           
  6222                           ;main.c: 312:     switch_zum();
  6223  0391  3187  2712  3183   	fcall	i1_switch_zum
  6224  0394                     i1l2161:
  6225                           
  6226                           ;main.c: 314:     time_s++;
  6227  0394  3001               	movlw	1
  6228  0395  0020               	movlb	0	; select bank0
  6229  0396  07D5               	addwf	_time_s,f
  6230  0397  3000               	movlw	0
  6231  0398  1803               	skipnc
  6232  0399  3001               	movlw	1
  6233  039A  07D6               	addwf	_time_s+1,f
  6234  039B  3000               	movlw	0
  6235  039C  1803               	skipnc
  6236  039D  3001               	movlw	1
  6237  039E  07D7               	addwf	_time_s+2,f
  6238                           
  6239                           ;main.c: 315:     rele_tick();
  6240  039F  3185  257E  3183   	fcall	_rele_tick
  6241  03A2  0064               	clrwdt	;# 
  6242  03A3                     i1l2163:
  6243                           
  6244                           ;main.c: 317:     if (FLAGS.bits.ALARM) {
  6245  03A3  1C7C               	btfss	_FLAGS,0
  6246  03A4  2BA6               	goto	u127_21
  6247  03A5  2BA7               	goto	u127_20
  6248  03A6                     u127_21:
  6249  03A6  2BB7               	goto	i1l2169
  6250  03A7                     u127_20:
  6251  03A7                     i1l2165:
  6252  03A7  1003               	clrc
  6253  03A8  0022               	movlb	2	; select bank2
  6254  03A9  1E0C               	btfss	12,4	;volatile
  6255  03AA  1403               	setc
  6256  03AB  1803               	btfsc	3,0
  6257  03AC  2BAE               	goto	u128_21
  6258  03AD  2BB1               	goto	u128_20
  6259  03AE                     u128_21:
  6260  03AE  0022               	movlb	2	; select bank2
  6261  03AF  160C               	bsf	12,4	;volatile
  6262  03B0  2BB3               	goto	u129_24
  6263  03B1                     u128_20:
  6264  03B1  0022               	movlb	2	; select bank2
  6265  03B2  120C               	bcf	12,4	;volatile
  6266  03B3                     u129_24:
  6267  03B3                     i1l2167:
  6268                           
  6269                           ;main.c: 319:         toggle_tone();
  6270  03B3  3187  2729  3183   	fcall	_toggle_tone
  6271                           
  6272                           ;main.c: 320:     } else {
  6273  03B6  2BD1               	goto	i1l428
  6274  03B7                     i1l2169:
  6275                           
  6276                           ;main.c: 321:         get_measure();
  6277  03B7  3184  24C1  3183   	fcall	_get_measure
  6278  03BA                     i1l2171:
  6279                           
  6280                           ;main.c: 322:         static char iled;;main.c: 323:         iled++;
  6281  03BA  3001               	movlw	1
  6282  03BB  00F7               	movwf	??_sec_tick_work
  6283  03BC  0877               	movf	??_sec_tick_work,w
  6284  03BD  07FA               	addwf	sec_tick_work@iled,f
  6285  03BE                     i1l2173:
  6286                           
  6287                           ;main.c: 324:         if (iled > 2) {
  6288  03BE  3003               	movlw	3
  6289  03BF  027A               	subwf	sec_tick_work@iled,w
  6290  03C0  1C03               	skipc
  6291  03C1  2BC3               	goto	u130_21
  6292  03C2  2BC4               	goto	u130_20
  6293  03C3                     u130_21:
  6294  03C3  2BD1               	goto	i1l428
  6295  03C4                     u130_20:
  6296  03C4                     i1l2175:
  6297  03C4  1003               	clrc
  6298  03C5  0022               	movlb	2	; select bank2
  6299  03C6  1E0C               	btfss	12,4	;volatile
  6300  03C7  1403               	setc
  6301  03C8  1803               	btfsc	3,0
  6302  03C9  2BCB               	goto	u131_21
  6303  03CA  2BCE               	goto	u131_20
  6304  03CB                     u131_21:
  6305  03CB  0022               	movlb	2	; select bank2
  6306  03CC  160C               	bsf	12,4	;volatile
  6307  03CD  2BD0               	goto	u132_24
  6308  03CE                     u131_20:
  6309  03CE  0022               	movlb	2	; select bank2
  6310  03CF  120C               	bcf	12,4	;volatile
  6311  03D0                     u132_24:
  6312  03D0                     i1l2177:
  6313                           
  6314                           ;main.c: 326:             iled = 0;
  6315  03D0  01FA               	clrf	sec_tick_work@iled
  6316  03D1                     i1l428:
  6317  03D1  0008               	return
  6318  03D2                     __end_of_sec_tick_work:
  6319                           
  6320                           	psect	text41
  6321  0729                     __ptext41:	
  6322 ;; *************** function _toggle_tone *****************
  6323 ;; Defined at:
  6324 ;;		line 75 in file "main.c"
  6325 ;; Parameters:    Size  Location     Type
  6326 ;;		None
  6327 ;; Auto vars:     Size  Location     Type
  6328 ;;		None
  6329 ;; Return value:  Size  Location     Type
  6330 ;;                  1    wreg      void 
  6331 ;; Registers used:
  6332 ;;		status,0
  6333 ;; Tracked objects:
  6334 ;;		On entry : 0/0
  6335 ;;		On exit  : 0/0
  6336 ;;		Unchanged: 0/0
  6337 ;; Data sizes:     COMMON   BANK0   BANK1
  6338 ;;      Params:         0       0       0
  6339 ;;      Locals:         0       0       0
  6340 ;;      Temps:          0       0       0
  6341 ;;      Totals:         0       0       0
  6342 ;;Total ram usage:        0 bytes
  6343 ;; Hardware stack levels used: 1
  6344 ;; This function calls:
  6345 ;;		Nothing
  6346 ;; This function is called by:
  6347 ;;		_sec_tick_work
  6348 ;; This function uses a non-reentrant model
  6349 ;;
  6350                           
  6351  0729                     _toggle_tone:	
  6352                           ;psect for function _toggle_tone
  6353                           
  6354  0729                     i1l2031:	
  6355                           ;incstack = 0
  6356                           ; Regs used in _toggle_tone: [status,0]
  6357                           
  6358                           
  6359                           ;main.c: 76:     INTCONbits.TMR0IE = ~INTCONbits.TMR0IE;
  6360  0729  1003               	clrc
  6361  072A  1E8B               	btfss	11,5	;volatile
  6362  072B  1403               	setc
  6363  072C  1803               	btfsc	3,0
  6364  072D  2F2F               	goto	u112_21
  6365  072E  2F31               	goto	u112_20
  6366  072F                     u112_21:
  6367  072F  168B               	bsf	11,5	;volatile
  6368  0730  2F32               	goto	u113_24
  6369  0731                     u112_20:
  6370  0731  128B               	bcf	11,5	;volatile
  6371  0732                     u113_24:
  6372  0732                     i1l273:
  6373  0732  0008               	return
  6374  0733                     __end_of_toggle_tone:
  6375                           
  6376                           	psect	text42
  6377  057E                     __ptext42:	
  6378 ;; *************** function _rele_tick *****************
  6379 ;; Defined at:
  6380 ;;		line 289 in file "main.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;		None
  6383 ;; Auto vars:     Size  Location     Type
  6384 ;;		None
  6385 ;; Return value:  Size  Location     Type
  6386 ;;                  1    wreg      void 
  6387 ;; Registers used:
  6388 ;;		wreg, status,2, status,0
  6389 ;; Tracked objects:
  6390 ;;		On entry : 0/0
  6391 ;;		On exit  : 0/0
  6392 ;;		Unchanged: 0/0
  6393 ;; Data sizes:     COMMON   BANK0   BANK1
  6394 ;;      Params:         0       0       0
  6395 ;;      Locals:         0       0       0
  6396 ;;      Temps:          2       0       0
  6397 ;;      Totals:         2       0       0
  6398 ;;Total ram usage:        2 bytes
  6399 ;; Hardware stack levels used: 1
  6400 ;; This function calls:
  6401 ;;		Nothing
  6402 ;; This function is called by:
  6403 ;;		_sec_tick_work
  6404 ;; This function uses a non-reentrant model
  6405 ;;
  6406                           
  6407  057E                     _rele_tick:	
  6408                           ;psect for function _rele_tick
  6409                           
  6410  057E                     i1l2053:	
  6411                           ;incstack = 0
  6412                           ; Regs used in _rele_tick: [wreg+status,2+status,0]
  6413                           
  6414                           
  6415                           ;main.c: 290:     if (FLAGS.bits.RELE_POW_WAIT) {
  6416  057E  1EFC               	btfss	_FLAGS,5
  6417  057F  2D81               	goto	u117_21
  6418  0580  2D82               	goto	u117_20
  6419  0581                     u117_21:
  6420  0581  2DA7               	goto	i1l416
  6421  0582                     u117_20:
  6422  0582                     i1l2055:
  6423                           
  6424                           ;main.c: 291:         if (time_pow_s > 0) {
  6425  0582  0020               	movlb	0	; select bank0
  6426  0583  085E               	movf	_time_pow_s,w
  6427  0584  1903               	btfsc	3,2
  6428  0585  2D87               	goto	u118_21
  6429  0586  2D88               	goto	u118_20
  6430  0587                     u118_21:
  6431  0587  2D8B               	goto	i1l406
  6432  0588                     u118_20:
  6433  0588                     i1l2057:
  6434                           
  6435                           ;main.c: 292:             time_pow_s--;
  6436  0588  3001               	movlw	1
  6437  0589  02DE               	subwf	_time_pow_s,f
  6438                           
  6439                           ;main.c: 293:         } else {
  6440  058A  2DA7               	goto	i1l416
  6441  058B                     i1l406:
  6442                           
  6443                           ;main.c: 294:             if (FLAGS.bits.RELE_CON_WAIT) {
  6444  058B  1F7C               	btfss	_FLAGS,6
  6445  058C  2D8E               	goto	u119_21
  6446  058D  2D8F               	goto	u119_20
  6447  058E                     u119_21:
  6448  058E  2DA3               	goto	i1l414
  6449  058F                     u119_20:
  6450  058F                     i1l409:	
  6451                           ;main.c: 295:                 do { LATCbits.LATC5 = 0; } while(0);
  6452                           
  6453  058F  0022               	movlb	2	; select bank2
  6454  0590  128E               	bcf	14,5	;volatile
  6455  0591                     i1l2059:
  6456                           
  6457                           ;main.c: 296:                 _delay((unsigned long)((2 * 1000)*(16000000/4000.0)));
  6458  0591  3029               	movlw	41
  6459  0592  00F1               	movwf	??_rele_tick+1
  6460  0593  3096               	movlw	150
  6461  0594  00F0               	movwf	??_rele_tick
  6462  0595  307F               	movlw	127
  6463  0596                     u219_27:
  6464  0596  0B89               	decfsz	9,f
  6465  0597  2D96               	goto	u219_27
  6466  0598  0BF0               	decfsz	??_rele_tick,f
  6467  0599  2D96               	goto	u219_27
  6468  059A  0BF1               	decfsz	??_rele_tick+1,f
  6469  059B  2D96               	goto	u219_27
  6470  059C  0000               	nop
  6471  059D                     i1l2061:
  6472  059D  0022               	movlb	2	; select bank2
  6473  059E  120E               	bcf	14,4	;volatile
  6474  059F                     i1l2063:
  6475                           
  6476                           ;main.c: 298:                 FLAGS.bits.CLOSED = 1;
  6477  059F  157C               	bsf	_FLAGS,2
  6478  05A0                     i1l2065:
  6479                           
  6480                           ;main.c: 299:                 FLAGS.bits.RELE_CON_WAIT = 0;
  6481  05A0  137C               	bcf	_FLAGS,6
  6482  05A1                     i1l2067:
  6483                           
  6484                           ;main.c: 300:                 FLAGS.bits.RELE_POW_WAIT = 0;
  6485  05A1  12FC               	bcf	_FLAGS,5
  6486                           
  6487                           ;main.c: 301:             } else {
  6488  05A2  2DA7               	goto	i1l416
  6489  05A3                     i1l414:	
  6490                           ;main.c: 302:                 do { LATCbits.LATC5 = 0; } while(0);
  6491                           
  6492  05A3  0022               	movlb	2	; select bank2
  6493  05A4  128E               	bcf	14,5	;volatile
  6494  05A5                     i1l415:
  6495                           
  6496                           ;main.c: 303:                 FLAGS.bits.CLOSED = 0;
  6497  05A5  117C               	bcf	_FLAGS,2
  6498                           
  6499                           ;main.c: 304:                 FLAGS.bits.RELE_POW_WAIT = 0;
  6500  05A6  12FC               	bcf	_FLAGS,5
  6501  05A7                     i1l416:
  6502  05A7  0008               	return
  6503  05A8                     __end_of_rele_tick:
  6504                           
  6505                           	psect	text43
  6506  04C1                     __ptext43:	
  6507 ;; *************** function _get_measure *****************
  6508 ;; Defined at:
  6509 ;;		line 132 in file "main.c"
  6510 ;; Parameters:    Size  Location     Type
  6511 ;;		None
  6512 ;; Auto vars:     Size  Location     Type
  6513 ;;  res             2    5[COMMON] unsigned int 
  6514 ;; Return value:  Size  Location     Type
  6515 ;;                  1    wreg      void 
  6516 ;; Registers used:
  6517 ;;		wreg, status,2, status,0, pclath, cstack
  6518 ;; Tracked objects:
  6519 ;;		On entry : 0/0
  6520 ;;		On exit  : 0/0
  6521 ;;		Unchanged: 0/0
  6522 ;; Data sizes:     COMMON   BANK0   BANK1
  6523 ;;      Params:         0       0       0
  6524 ;;      Locals:         2       0       0
  6525 ;;      Temps:          1       0       0
  6526 ;;      Totals:         3       0       0
  6527 ;;Total ram usage:        3 bytes
  6528 ;; Hardware stack levels used: 1
  6529 ;; Hardware stack levels required when called: 2
  6530 ;; This function calls:
  6531 ;;		_start_alarm
  6532 ;;		i1_ADC_GetConversion
  6533 ;; This function is called by:
  6534 ;;		_sec_tick_work
  6535 ;; This function uses a non-reentrant model
  6536 ;;
  6537                           
  6538  04C1                     _get_measure:	
  6539                           ;psect for function _get_measure
  6540                           
  6541  04C1                     i1l322:	
  6542                           ;incstack = 0
  6543                           ; Regs used in _get_measure: [wreg+status,2+status,0+pclath+cstack]
  6544                           ;main.c: 133:     static unsigned char measures;;main.c: 134:     do { LATCbits.LATC1 = 
      +                          1; } while(0);
  6545                           
  6546  04C1  0022               	movlb	2	; select bank2
  6547  04C2  148E               	bsf	14,1	;volatile
  6548  04C3                     i1l324:	
  6549                           ;main.c: 135:     do { ANSELCbits.ANSC3 = 1; } while(0);
  6550                           
  6551  04C3  0023               	movlb	3	; select bank3
  6552  04C4  158E               	bsf	14,3	;volatile
  6553  04C5                     i1l2033:
  6554                           
  6555                           ;main.c: 136:     unsigned res = ADC_GetConversion(PIN_WSP_STATE);
  6556  04C5  3007               	movlw	7
  6557  04C6  3186  2622  3184   	fcall	i1_ADC_GetConversion
  6558  04C9  0871               	movf	?i1_ADC_GetConversion+1,w
  6559  04CA  00F6               	movwf	get_measure@res+1
  6560  04CB  0870               	movf	?i1_ADC_GetConversion,w
  6561  04CC  00F5               	movwf	get_measure@res
  6562  04CD                     i1l2035:
  6563  04CD  0023               	movlb	3	; select bank3
  6564  04CE  118E               	bcf	14,3	;volatile
  6565  04CF                     i1l2037:
  6566  04CF  0022               	movlb	2	; select bank2
  6567  04D0  108E               	bcf	14,1	;volatile
  6568  04D1                     i1l2039:
  6569                           
  6570                           ;main.c: 139:     if (res < BAD_WSP_VOLTAGE) measures++;
  6571  04D1  304E               	movlw	78
  6572  04D2  0276               	subwf	get_measure@res+1,w
  6573  04D3  3020               	movlw	32
  6574  04D4  1903               	skipnz
  6575  04D5  0275               	subwf	get_measure@res,w
  6576  04D6  1803               	skipnc
  6577  04D7  2CD9               	goto	u114_21
  6578  04D8  2CDA               	goto	u114_20
  6579  04D9                     u114_21:
  6580  04D9  2CDF               	goto	i1l2043
  6581  04DA                     u114_20:
  6582  04DA                     i1l2041:
  6583  04DA  3001               	movlw	1
  6584  04DB  00F4               	movwf	??_get_measure
  6585  04DC  0874               	movf	??_get_measure,w
  6586  04DD  07FB               	addwf	get_measure@measures,f
  6587  04DE  2CE9               	goto	i1l2047
  6588  04DF                     i1l2043:
  6589  04DF  309C               	movlw	156
  6590  04E0  0276               	subwf	get_measure@res+1,w
  6591  04E1  3041               	movlw	65
  6592  04E2  1903               	skipnz
  6593  04E3  0275               	subwf	get_measure@res,w
  6594  04E4  1C03               	skipc
  6595  04E5  2CE7               	goto	u115_21
  6596  04E6  2CE8               	goto	u115_20
  6597  04E7                     u115_21:
  6598  04E7  2CE9               	goto	i1l2047
  6599  04E8                     u115_20:
  6600  04E8                     i1l2045:
  6601  04E8  01FB               	clrf	get_measure@measures
  6602  04E9                     i1l2047:
  6603                           
  6604                           ;main.c: 141:     if (measures > 2) start_alarm();
  6605  04E9  3003               	movlw	3
  6606  04EA  027B               	subwf	get_measure@measures,w
  6607  04EB  1C03               	skipc
  6608  04EC  2CEE               	goto	u116_21
  6609  04ED  2CEF               	goto	u116_20
  6610  04EE                     u116_21:
  6611  04EE  2CF2               	goto	i1l334
  6612  04EF                     u116_20:
  6613  04EF                     i1l2049:
  6614  04EF  3186  26E5  3184   	fcall	_start_alarm
  6615  04F2                     i1l334:
  6616  04F2  0008               	return
  6617  04F3                     __end_of_get_measure:
  6618                           
  6619                           	psect	text44
  6620  0622                     __ptext44:	
  6621 ;; *************** function i1_ADC_GetConversion *****************
  6622 ;; Defined at:
  6623 ;;		line 116 in file "mcc_generated_files/adc.c"
  6624 ;; Parameters:    Size  Location     Type
  6625 ;;  channel         1    wreg     enum E2178
  6626 ;; Auto vars:     Size  Location     Type
  6627 ;;  channel         1    3[COMMON] enum E2178
  6628 ;; Return value:  Size  Location     Type
  6629 ;;                  2    0[COMMON] unsigned short 
  6630 ;; Registers used:
  6631 ;;		wreg, status,2, status,0
  6632 ;; Tracked objects:
  6633 ;;		On entry : 0/0
  6634 ;;		On exit  : 0/0
  6635 ;;		Unchanged: 0/0
  6636 ;; Data sizes:     COMMON   BANK0   BANK1
  6637 ;;      Params:         2       0       0
  6638 ;;      Locals:         1       0       0
  6639 ;;      Temps:          1       0       0
  6640 ;;      Totals:         4       0       0
  6641 ;;Total ram usage:        4 bytes
  6642 ;; Hardware stack levels used: 1
  6643 ;; This function calls:
  6644 ;;		Nothing
  6645 ;; This function is called by:
  6646 ;;		_get_measure
  6647 ;; This function uses a non-reentrant model
  6648 ;;
  6649                           
  6650  0622                     i1_ADC_GetConversion:	
  6651                           ;psect for function i1_ADC_GetConversion
  6652                           
  6653                           
  6654                           ;incstack = 0
  6655                           ; Regs used in i1_ADC_GetConversion: [wreg+status,2+status,0]
  6656                           ;i1ADC_GetConversion@channel stored from wreg
  6657  0622  00F3               	movwf	i1ADC_GetConversion@channel
  6658  0623                     i1l2015:
  6659                           
  6660                           ;mcc_generated_files/adc.c: 116: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 117: {;mcc_generated_files/adc.c: 119:     ADCON0bits.CHS = ch
      +                          annel;
  6661  0623  0873               	movf	i1ADC_GetConversion@channel,w
  6662  0624  00F2               	movwf	??i1_ADC_GetConversion
  6663  0625  0DF2               	rlf	??i1_ADC_GetConversion,f
  6664  0626  0DF2               	rlf	??i1_ADC_GetConversion,f
  6665  0627  0021               	movlb	1	; select bank1
  6666  0628  081D               	movf	29,w	;volatile
  6667  0629  0672               	xorwf	??i1_ADC_GetConversion,w
  6668  062A  3983               	andlw	-125
  6669  062B  0672               	xorwf	??i1_ADC_GetConversion,w
  6670  062C  009D               	movwf	29	;volatile
  6671  062D                     i1l2017:
  6672                           
  6673                           ;mcc_generated_files/adc.c: 122:     ADCON0bits.ADON = 1;
  6674  062D  141D               	bsf	29,0	;volatile
  6675  062E                     i1l2019:
  6676                           
  6677                           ;mcc_generated_files/adc.c: 125:     _delay((unsigned long)((5)*(16000000/4000000.0)));
  6678  062E  3006               	movlw	6
  6679  062F                     u220_27:
  6680  062F  0B89               	decfsz	9,f
  6681  0630  2E2F               	goto	u220_27
  6682  0631  3200               	nop2
  6683  0632                     i1l2021:
  6684                           
  6685                           ;mcc_generated_files/adc.c: 128:     ADCON0bits.GO_nDONE = 1;
  6686  0632  0021               	movlb	1	; select bank1
  6687  0633  149D               	bsf	29,1	;volatile
  6688  0634                     i1l66:	
  6689                           ;mcc_generated_files/adc.c: 132:     {;mcc_generated_files/adc.c: 133:     }
  6690                           
  6691                           
  6692                           ;mcc_generated_files/adc.c: 131:     while (ADCON0bits.GO_nDONE)
  6693  0634  189D               	btfsc	29,1	;volatile
  6694  0635  2E37               	goto	u111_21
  6695  0636  2E38               	goto	u111_20
  6696  0637                     u111_21:
  6697  0637  2E34               	goto	i1l66
  6698  0638                     u111_20:
  6699  0638                     i1l2023:
  6700                           
  6701                           ;mcc_generated_files/adc.c: 136:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  6702  0638  081C               	movf	28,w	;volatile
  6703  0639  00F1               	movwf	?i1_ADC_GetConversion+1
  6704  063A  081B               	movf	27,w	;volatile
  6705  063B  00F0               	movwf	?i1_ADC_GetConversion
  6706  063C                     i1l69:
  6707  063C  0008               	return
  6708  063D                     __end_ofi1_ADC_GetConversion:
  6709                           
  6710                           	psect	text45
  6711  06E5                     __ptext45:	
  6712 ;; *************** function _start_alarm *****************
  6713 ;; Defined at:
  6714 ;;		line 121 in file "main.c"
  6715 ;; Parameters:    Size  Location     Type
  6716 ;;		None
  6717 ;; Auto vars:     Size  Location     Type
  6718 ;;		None
  6719 ;; Return value:  Size  Location     Type
  6720 ;;                  1    wreg      void 
  6721 ;; Registers used:
  6722 ;;		wreg, status,2, status,0, pclath, cstack
  6723 ;; Tracked objects:
  6724 ;;		On entry : 0/0
  6725 ;;		On exit  : 0/0
  6726 ;;		Unchanged: 0/0
  6727 ;; Data sizes:     COMMON   BANK0   BANK1
  6728 ;;      Params:         0       0       0
  6729 ;;      Locals:         0       0       0
  6730 ;;      Temps:          0       0       0
  6731 ;;      Totals:         0       0       0
  6732 ;;Total ram usage:        0 bytes
  6733 ;; Hardware stack levels used: 1
  6734 ;; Hardware stack levels required when called: 1
  6735 ;; This function calls:
  6736 ;;		i1_go_close
  6737 ;;		i1_go_close_alt
  6738 ;; This function is called by:
  6739 ;;		_get_measure
  6740 ;; This function uses a non-reentrant model
  6741 ;;
  6742                           
  6743  06E5                     _start_alarm:	
  6744                           ;psect for function _start_alarm
  6745                           
  6746  06E5                     i1l1999:	
  6747                           ;incstack = 0
  6748                           ; Regs used in _start_alarm: [wreg+status,2+status,0+pclath+cstack]
  6749                           
  6750                           
  6751                           ;main.c: 122:     FLAGS.bits.ALARM = 1;
  6752  06E5  147C               	bsf	_FLAGS,0
  6753  06E6                     i1l313:	
  6754                           ;main.c: 123:     do { LATCbits.LATC0 = 1; } while(0);
  6755                           
  6756  06E6  0022               	movlb	2	; select bank2
  6757  06E7  140E               	bsf	14,0	;volatile
  6758  06E8                     i1l314:
  6759                           
  6760                           ;main.c: 124:     INTCONbits.TMR0IE = 1;
  6761  06E8  168B               	bsf	11,5	;volatile
  6762                           
  6763                           ;main.c: 125:     if (FLAGS.bits.NORMAL_WORK_MODE) {
  6764  06E9  1CFC               	btfss	_FLAGS,1
  6765  06EA  2EEC               	goto	u108_21
  6766  06EB  2EED               	goto	u108_20
  6767  06EC                     u108_21:
  6768  06EC  2EF1               	goto	i1l2003
  6769  06ED                     u108_20:
  6770  06ED                     i1l2001:
  6771                           
  6772                           ;main.c: 126:         go_close();
  6773  06ED  3185  25E8  3186   	fcall	i1_go_close
  6774                           
  6775                           ;main.c: 127:     } else {
  6776  06F0  2EF4               	goto	i1l317
  6777  06F1                     i1l2003:
  6778                           
  6779                           ;main.c: 128:         go_close_alt();
  6780  06F1  3187  2765  3186   	fcall	i1_go_close_alt
  6781  06F4                     i1l317:
  6782  06F4  0008               	return
  6783  06F5                     __end_of_start_alarm:
  6784                           
  6785                           	psect	text46
  6786  0765                     __ptext46:	
  6787 ;; *************** function i1_go_close_alt *****************
  6788 ;; Defined at:
  6789 ;;		line 108 in file "main.c"
  6790 ;; Parameters:    Size  Location     Type
  6791 ;;		None
  6792 ;; Auto vars:     Size  Location     Type
  6793 ;;		None
  6794 ;; Return value:  Size  Location     Type
  6795 ;;                  1    wreg      void 
  6796 ;; Registers used:
  6797 ;;		None
  6798 ;; Tracked objects:
  6799 ;;		On entry : 0/0
  6800 ;;		On exit  : 0/0
  6801 ;;		Unchanged: 0/0
  6802 ;; Data sizes:     COMMON   BANK0   BANK1
  6803 ;;      Params:         0       0       0
  6804 ;;      Locals:         0       0       0
  6805 ;;      Temps:          0       0       0
  6806 ;;      Totals:         0       0       0
  6807 ;;Total ram usage:        0 bytes
  6808 ;; Hardware stack levels used: 1
  6809 ;; This function calls:
  6810 ;;		Nothing
  6811 ;; This function is called by:
  6812 ;;		_start_alarm
  6813 ;; This function uses a non-reentrant model
  6814 ;;
  6815                           
  6816  0765                     i1_go_close_alt:	
  6817                           ;psect for function i1_go_close_alt
  6818                           
  6819  0765                     i1l1997:	
  6820                           ;incstack = 0
  6821                           ; Regs used in i1_go_close_alt: []
  6822                           
  6823                           
  6824                           ;main.c: 109:     FLAGS.bits.CLOSED = 1;
  6825  0765  157C               	bsf	_FLAGS,2
  6826  0766                     i1l299:	
  6827                           ;main.c: 110:     do { LATCbits.LATC4 = 0; } while(0);
  6828                           
  6829  0766  0022               	movlb	2	; select bank2
  6830  0767  120E               	bcf	14,4	;volatile
  6831  0768                     i1l301:	
  6832                           ;main.c: 111:     do { LATCbits.LATC5 = 1; } while(0);
  6833                           
  6834  0768  168E               	bsf	14,5	;volatile
  6835  0769                     i1l303:
  6836  0769  0008               	return
  6837  076A                     __end_ofi1_go_close_alt:
  6838                           
  6839                           	psect	text47
  6840  05E8                     __ptext47:	
  6841 ;; *************** function i1_go_close *****************
  6842 ;; Defined at:
  6843 ;;		line 89 in file "main.c"
  6844 ;; Parameters:    Size  Location     Type
  6845 ;;		None
  6846 ;; Auto vars:     Size  Location     Type
  6847 ;;		None
  6848 ;; Return value:  Size  Location     Type
  6849 ;;                  1    wreg      void 
  6850 ;; Registers used:
  6851 ;;		wreg
  6852 ;; Tracked objects:
  6853 ;;		On entry : 0/0
  6854 ;;		On exit  : 0/0
  6855 ;;		Unchanged: 0/0
  6856 ;; Data sizes:     COMMON   BANK0   BANK1
  6857 ;;      Params:         0       0       0
  6858 ;;      Locals:         0       0       0
  6859 ;;      Temps:          2       0       0
  6860 ;;      Totals:         2       0       0
  6861 ;;Total ram usage:        2 bytes
  6862 ;; Hardware stack levels used: 1
  6863 ;; This function calls:
  6864 ;;		Nothing
  6865 ;; This function is called by:
  6866 ;;		_start_alarm
  6867 ;; This function uses a non-reentrant model
  6868 ;;
  6869                           
  6870  05E8                     i1_go_close:	
  6871                           ;psect for function i1_go_close
  6872                           
  6873  05E8                     i1l1985:	
  6874                           ;incstack = 0
  6875                           ; Regs used in i1_go_close: [wreg]
  6876                           
  6877                           
  6878                           ;main.c: 90:     time_s = 0;
  6879  05E8  3000               	movlw	0
  6880  05E9  0020               	movlb	0	; select bank0
  6881  05EA  00D5               	movwf	_time_s
  6882  05EB  3000               	movlw	0
  6883  05EC  00D6               	movwf	_time_s+1
  6884  05ED  3000               	movlw	0
  6885  05EE  00D7               	movwf	_time_s+2
  6886  05EF                     i1l1987:
  6887  05EF  0022               	movlb	2	; select bank2
  6888  05F0  160E               	bsf	14,4	;volatile
  6889  05F1                     i1l286:
  6890                           
  6891                           ;main.c: 92:     _delay((unsigned long)((2 * 1000)*(16000000/4000.0)));
  6892  05F1  3029               	movlw	41
  6893  05F2  00F1               	movwf	??i1_go_close+1
  6894  05F3  3096               	movlw	150
  6895  05F4  00F0               	movwf	??i1_go_close
  6896  05F5  307F               	movlw	127
  6897  05F6                     u221_27:
  6898  05F6  0B89               	decfsz	9,f
  6899  05F7  2DF6               	goto	u221_27
  6900  05F8  0BF0               	decfsz	??i1_go_close,f
  6901  05F9  2DF6               	goto	u221_27
  6902  05FA  0BF1               	decfsz	??i1_go_close+1,f
  6903  05FB  2DF6               	goto	u221_27
  6904  05FC  0000               	nop
  6905  05FD                     i1l1989:
  6906  05FD  0022               	movlb	2	; select bank2
  6907  05FE  168E               	bsf	14,5	;volatile
  6908  05FF                     i1l288:
  6909                           
  6910                           ;main.c: 94:     time_pow_s = 10;
  6911  05FF  300A               	movlw	10
  6912  0600  00F0               	movwf	??i1_go_close
  6913  0601  0870               	movf	??i1_go_close,w
  6914  0602  0020               	movlb	0	; select bank0
  6915  0603  00DE               	movwf	_time_pow_s
  6916  0604                     i1l1991:
  6917                           
  6918                           ;main.c: 95:     FLAGS.bits.RELE_POW_WAIT = 1;
  6919  0604  16FC               	bsf	_FLAGS,5
  6920  0605                     i1l1993:
  6921                           
  6922                           ;main.c: 96:     FLAGS.bits.RELE_CON_WAIT = 1;
  6923  0605  177C               	bsf	_FLAGS,6
  6924  0606                     i1l289:
  6925  0606  0008               	return
  6926  0607                     __end_ofi1_go_close:
  6927                           
  6928                           	psect	text48
  6929  06F5                     __ptext48:	
  6930 ;; *************** function _TMR0_ISR *****************
  6931 ;; Defined at:
  6932 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  6933 ;; Parameters:    Size  Location     Type
  6934 ;;		None
  6935 ;; Auto vars:     Size  Location     Type
  6936 ;;		None
  6937 ;; Return value:  Size  Location     Type
  6938 ;;                  1    wreg      void 
  6939 ;; Registers used:
  6940 ;;		wreg, status,2, status,0, pclath, cstack
  6941 ;; Tracked objects:
  6942 ;;		On entry : 0/0
  6943 ;;		On exit  : 0/0
  6944 ;;		Unchanged: 0/0
  6945 ;; Data sizes:     COMMON   BANK0   BANK1
  6946 ;;      Params:         0       0       0
  6947 ;;      Locals:         0       0       0
  6948 ;;      Temps:          0       0       0
  6949 ;;      Totals:         0       0       0
  6950 ;;Total ram usage:        0 bytes
  6951 ;; Hardware stack levels used: 1
  6952 ;; Hardware stack levels required when called: 1
  6953 ;; This function calls:
  6954 ;;		Absolute function
  6955 ;;		_TMR0_DefaultInterruptHandler
  6956 ;;		i1_switch_zum
  6957 ;; This function is called by:
  6958 ;;		_INTERRUPT_InterruptManager
  6959 ;; This function uses a non-reentrant model
  6960 ;;
  6961                           
  6962  06F5                     _TMR0_ISR:	
  6963                           ;psect for function _TMR0_ISR
  6964                           
  6965  06F5                     i1l2465:	
  6966                           ;incstack = 0
  6967                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  6968                           
  6969                           
  6970                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
  6971  06F5  110B               	bcf	11,2	;volatile
  6972  06F6                     i1l2467:
  6973                           
  6974                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
  6975  06F6  0020               	movlb	0	; select bank0
  6976  06F7  0864               	movf	_timer0ReloadVal,w	;volatile
  6977  06F8  0095               	movwf	21	;volatile
  6978  06F9                     i1l2469:
  6979                           
  6980                           ;mcc_generated_files/tmr0.c: 116:     if(TMR0_InterruptHandler)
  6981  06F9  0860               	movf	_TMR0_InterruptHandler,w
  6982  06FA  0461               	iorwf	_TMR0_InterruptHandler+1,w
  6983  06FB  1903               	btfsc	3,2
  6984  06FC  2EFE               	goto	u171_21
  6985  06FD  2EFF               	goto	u171_20
  6986  06FE                     u171_21:
  6987  06FE  2F04               	goto	i1l197
  6988  06FF                     u171_20:
  6989  06FF                     i1l2471:
  6990                           
  6991                           ;mcc_generated_files/tmr0.c: 117:     {;mcc_generated_files/tmr0.c: 118:         TMR0_In
      +                          terruptHandler();
  6992  06FF  0861               	movf	_TMR0_InterruptHandler+1,w
  6993  0700  008A               	movwf	10
  6994  0701  0860               	movf	_TMR0_InterruptHandler,w
  6995  0702  000A               	callw
  6996  0703  3186               	pagesel	$
  6997  0704                     i1l197:
  6998  0704  0008               	return
  6999  0705                     __end_of_TMR0_ISR:
  7000                           
  7001                           	psect	text49
  7002  077F                     __ptext49:	
  7003 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  7004 ;; Defined at:
  7005 ;;		line 129 in file "mcc_generated_files/tmr0.c"
  7006 ;; Parameters:    Size  Location     Type
  7007 ;;		None
  7008 ;; Auto vars:     Size  Location     Type
  7009 ;;		None
  7010 ;; Return value:  Size  Location     Type
  7011 ;;                  1    wreg      void 
  7012 ;; Registers used:
  7013 ;;		None
  7014 ;; Tracked objects:
  7015 ;;		On entry : 0/0
  7016 ;;		On exit  : 0/0
  7017 ;;		Unchanged: 0/0
  7018 ;; Data sizes:     COMMON   BANK0   BANK1
  7019 ;;      Params:         0       0       0
  7020 ;;      Locals:         0       0       0
  7021 ;;      Temps:          0       0       0
  7022 ;;      Totals:         0       0       0
  7023 ;;Total ram usage:        0 bytes
  7024 ;; Hardware stack levels used: 1
  7025 ;; This function calls:
  7026 ;;		Nothing
  7027 ;; This function is called by:
  7028 ;;		_TMR0_Initialize
  7029 ;;		_TMR0_ISR
  7030 ;; This function uses a non-reentrant model
  7031 ;;
  7032                           
  7033  077F                     _TMR0_DefaultInterruptHandler:	
  7034                           ;psect for function _TMR0_DefaultInterruptHandler
  7035                           
  7036  077F                     i1l203:	
  7037                           ;incstack = 0
  7038                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  7039                           
  7040  077F  0008               	return
  7041  0780                     __end_of_TMR0_DefaultInterruptHandler:
  7042                           
  7043                           	psect	text50
  7044  0712                     __ptext50:	
  7045 ;; *************** function i1_switch_zum *****************
  7046 ;; Defined at:
  7047 ;;		line 71 in file "main.c"
  7048 ;; Parameters:    Size  Location     Type
  7049 ;;		None
  7050 ;; Auto vars:     Size  Location     Type
  7051 ;;		None
  7052 ;; Return value:  Size  Location     Type
  7053 ;;                  1    wreg      void 
  7054 ;; Registers used:
  7055 ;;		status,0
  7056 ;; Tracked objects:
  7057 ;;		On entry : 0/0
  7058 ;;		On exit  : 0/0
  7059 ;;		Unchanged: 0/0
  7060 ;; Data sizes:     COMMON   BANK0   BANK1
  7061 ;;      Params:         0       0       0
  7062 ;;      Locals:         0       0       0
  7063 ;;      Temps:          0       0       0
  7064 ;;      Totals:         0       0       0
  7065 ;;Total ram usage:        0 bytes
  7066 ;; Hardware stack levels used: 1
  7067 ;; This function calls:
  7068 ;;		Nothing
  7069 ;; This function is called by:
  7070 ;;		_sec_tick_work
  7071 ;;		_TMR0_ISR
  7072 ;; This function uses a non-reentrant model
  7073 ;;
  7074                           
  7075  0712                     i1_switch_zum:	
  7076                           ;psect for function i1_switch_zum
  7077                           
  7078  0712                     i1l268:	
  7079                           ;incstack = 0
  7080                           ; Regs used in i1_switch_zum: [status,0]
  7081                           ;main.c: 72:     do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  7082                           
  7083  0712                     i1l2091:
  7084  0712  1003               	clrc
  7085  0713  0022               	movlb	2	; select bank2
  7086  0714  1E8C               	btfss	12,5	;volatile
  7087  0715  1403               	setc
  7088  0716  1803               	btfsc	3,0
  7089  0717  2F19               	goto	u122_21
  7090  0718  2F1C               	goto	u122_20
  7091  0719                     u122_21:
  7092  0719  0022               	movlb	2	; select bank2
  7093  071A  168C               	bsf	12,5	;volatile
  7094  071B  2F1E               	goto	u123_24
  7095  071C                     u122_20:
  7096  071C  0022               	movlb	2	; select bank2
  7097  071D  128C               	bcf	12,5	;volatile
  7098  071E                     u123_24:
  7099  071E                     i1l270:
  7100  071E  0008               	return
  7101  071F                     __end_ofi1_switch_zum:
  7102  007E                     btemp	set	126	;btemp
  7103  007E                     int$flags	set	126
  7104  007E                     wtemp0	set	126
  7105                           
  7106                           	psect	idloc
  7107                           
  7108                           ;Config register IDLOC0 @ 0x8000
  7109                           ;	unspecified, using default values
  7110  8000                     	org	32768
  7111  8000  3FFF               	dw	16383
  7112                           
  7113                           ;Config register IDLOC1 @ 0x8001
  7114                           ;	unspecified, using default values
  7115  8001                     	org	32769
  7116  8001  3FFF               	dw	16383
  7117                           
  7118                           ;Config register IDLOC2 @ 0x8002
  7119                           ;	unspecified, using default values
  7120  8002                     	org	32770
  7121  8002  3FFF               	dw	16383
  7122                           
  7123                           ;Config register IDLOC3 @ 0x8003
  7124                           ;	unspecified, using default values
  7125  8003                     	org	32771
  7126  8003  3FFF               	dw	16383
  7127                           
  7128                           	psect	config
  7129                           
  7130                           ;Config register CONFIG1 @ 0x8007
  7131                           ;	Oscillator Selection
  7132                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  7133                           ;	Watchdog Timer Enable
  7134                           ;	WDTE = ON, WDT enabled
  7135                           ;	Power-up Timer Enable
  7136                           ;	PWRTE = OFF, PWRT disabled
  7137                           ;	MCLR Pin Function Select
  7138                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  7139                           ;	Flash Program Memory Code Protection
  7140                           ;	CP = OFF, Program memory code protection is disabled
  7141                           ;	Data Memory Code Protection
  7142                           ;	CPD = OFF, Data memory code protection is disabled
  7143                           ;	Brown-out Reset Enable
  7144                           ;	BOREN = ON, Brown-out Reset enabled
  7145                           ;	Clock Out Enable
  7146                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  7147                           ;	Internal/External Switchover
  7148                           ;	IESO = ON, Internal/External Switchover mode is enabled
  7149                           ;	Fail-Safe Clock Monitor Enable
  7150                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  7151  8007                     	org	32775
  7152  8007  3FFC               	dw	16380
  7153                           
  7154                           ;Config register CONFIG2 @ 0x8008
  7155                           ;	Flash Memory Self-Write Protection
  7156                           ;	WRT = OFF, Write protection off
  7157                           ;	PLL Enable
  7158                           ;	PLLEN = OFF, 4x PLL disabled
  7159                           ;	Stack Overflow/Underflow Reset Enable
  7160                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  7161                           ;	Brown-out Reset Voltage Selection
  7162                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  7163                           ;	Low-Voltage Programming Enable
  7164                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  7165  8008                     	org	32776
  7166  8008  1EFF               	dw	7935

Data Sizes:
    Strings     0
    Constant    9
    Data        0
    BSS         44
    Persistent  37
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80     41      69
    BANK1            16      0      16

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> switch_zum(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> i1_switch_zum(), switch_zum(), TMR0_DefaultInterruptHandler(), Absolute function(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> sec_tick_work(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> sec_tick_work(), Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR2_CallBack->_sec_tick_work
    _sec_tick_work->_get_measure
    _get_measure->i1_ADC_GetConversion
    _start_alarm->i1_go_close

Critical Paths under _main in BANK0

    _switch_wm->_beep
    _get_jump_full->_ADC_GetConversion
    _get_fun_full->_ADC_GetConversion
    _get_eeprom->_get_time
    _get_time->_EEPROM_ReadShortLong
    _EEPROM_ReadShortLong->_EEPROM_ReadByte
    _get_adr->_EEPROM_ReadByte
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _povorot->_go_close
    _get_voltage->_EEPROM_WriteShortLong
    _EEPROM_WriteShortLong->_EEPROM_WriteByte
    _get_jump->_ADC_GetConversion
    _get_fun->_ADC_GetConversion
    _fun_work->_beep

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5104
                           _fun_work
                            _get_fun
                           _get_jump
                        _get_voltage
                            _povorot
                        _start_setup
                          _switch_wm
 ---------------------------------------------------------------------------------
 (1) _switch_wm                                            1     1      0     396
                                              6 BANK0      1     1      0
                               _beep
                           _go_close
                       _go_close_alt
 ---------------------------------------------------------------------------------
 (1) _start_setup                                          0     0      0    2521
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
                         _get_eeprom
                       _get_fun_full
                      _get_jump_full
 ---------------------------------------------------------------------------------
 (2) _get_jump_full                                        4     4      0      70
                                              4 BANK0      4     4      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (2) _get_fun_full                                         4     4      0      70
                                              4 BANK0      4     4      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (2) _get_eeprom                                           0     0      0    1685
                            _get_adr
                           _get_time
 ---------------------------------------------------------------------------------
 (3) _get_time                                            25    25      0     977
                                             16 BANK0     25    25      0
               _EEPROM_ReadShortLong
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     196
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _EEPROM_ReadShortLong                                13    10      3     113
                                              3 BANK0     13    10      3
                    _EEPROM_ReadByte
 ---------------------------------------------------------------------------------
 (3) _get_adr                                             22    22      0     708
                                              3 BANK0     22    22      0
                    _EEPROM_ReadByte
 ---------------------------------------------------------------------------------
 (2) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     348
                     _ADC_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      1     1      0     174
                                              2 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR0_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _povorot                                              0     0      0       0
                           _go_close
                            _go_open
 ---------------------------------------------------------------------------------
 (1) _get_voltage                                         10    10      0    1701
                                             14 BANK0     10    10      0
                  _ADC_GetConversion
                    _EEPROM_ReadByte
                   _EEPROM_WriteByte
              _EEPROM_WriteShortLong
 ---------------------------------------------------------------------------------
 (2) _EEPROM_WriteShortLong                                9     6      3     853
                                              5 BANK0      9     6      3
                   _EEPROM_WriteByte
 ---------------------------------------------------------------------------------
 (3) _EEPROM_WriteByte                                     5     4      1     599
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (5) _EEPROM_ReadByte                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _get_jump                                             3     3      0      45
                                              4 BANK0      3     3      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (1) _get_fun                                              3     3      0      45
                                              4 BANK0      3     3      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversion                                    4     2      2      22
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _fun_work                                             1     1      0     396
                                              6 BANK0      1     1      0
                               _beep
                           _go_close
                       _go_close_alt
                            _go_open
                        _go_open_alt
 ---------------------------------------------------------------------------------
 (2) _go_open_alt                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _go_open                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _go_close_alt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _go_close                                             2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _beep                                                 6     5      1     396
                                              0 BANK0      6     5      1
                         _switch_zum
 ---------------------------------------------------------------------------------
 (3) _switch_zum                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           0     0      0      67
                           _TMR0_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR2_ISR                                             0     0      0      67
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (8) _TMR2_CallBack                                        0     0      0      67
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
                      _sec_tick_work *
 ---------------------------------------------------------------------------------
 (9) _sec_tick_work                                        1     1      0      67
                                              7 COMMON     1     1      0
                        _get_measure
                          _rele_tick
                        _toggle_tone
                       i1_switch_zum
 ---------------------------------------------------------------------------------
 (10) _toggle_tone                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _rele_tick                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _get_measure                                         3     3      0      67
                                              4 COMMON     3     3      0
                        _start_alarm
                i1_ADC_GetConversion
 ---------------------------------------------------------------------------------
 (11) i1_ADC_GetConversion                                 4     2      2      22
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (11) _start_alarm                                         0     0      0       0
                         i1_go_close
                     i1_go_close_alt
 ---------------------------------------------------------------------------------
 (12) i1_go_close_alt                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_go_close                                          2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                       i1_switch_zum *
 ---------------------------------------------------------------------------------
 (10) i1_switch_zum                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fun_work
     _beep
       _switch_zum
     _go_close
     _go_close_alt
     _go_open
     _go_open_alt
   _get_fun
     _ADC_GetConversion
   _get_jump
     _ADC_GetConversion
   _get_voltage
     _ADC_GetConversion
     _EEPROM_ReadByte
     _EEPROM_WriteByte
     _EEPROM_WriteShortLong
       _EEPROM_WriteByte
   _povorot
     _go_close
     _go_open
   _start_setup
     _SYSTEM_Initialize
       _ADC_Initialize
       _FVR_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
       _TMR2_Initialize
         _TMR2_SetInterruptHandler
       _WDT_Initialize
     _TMR0_SetInterruptHandler
     _TMR2_SetInterruptHandler
     _TMR2_StartTimer
     _get_eeprom
       _get_adr
         _EEPROM_ReadByte
       _get_time
         _EEPROM_ReadShortLong
           _EEPROM_ReadByte
         ___bmul
     _get_fun_full
       _ADC_GetConversion
     _get_jump_full
       _ADC_GetConversion
   _switch_wm
     _beep
     _go_close
     _go_close_alt

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
     i1_switch_zum *
   _TMR2_ISR
     _TMR2_CallBack
       Absolute function(Fake) *
       _TMR2_DefaultInterruptHandler *
       _sec_tick_work *
         _get_measure
           _start_alarm
             i1_go_close
             i1_go_close_alt
           i1_ADC_GetConversion
         _rele_tick
         _toggle_tone
         i1_switch_zum

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              60      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      62       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     29      45       6       86.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            10      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               10      0      10       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      62       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Thu May 05 09:38:06 2022

        __end_of_TMR2_SetInterruptHandler 0755                          get_fun_full@flag 0027  
                      get_fun@fun_counter 005D                            ___bmul@product 0022  
                   __end_of_sec_tick_work 03D2                                        l31 076D  
                                      l25 0681                                        l28 0748  
                                      l48 073A                                        l66 05BD  
                                      l92 06AC                                        l69 05C8  
                                      _RD 0CA8                                        _WR 0CA9  
                           ?_go_close_alt 0070                              ?_get_voltage 0070  
                          ?_get_jump_full 0070                    __end_of_FVR_Initialize 0772  
                         _timer0ReloadVal 0064                                       l200 075A  
                                     l210 0771                                       l301 0763  
                                     l310 075F                                       l142 077D  
                                     l303 0764                                       l400 034B  
                                     l306 075C                                       l402 034D  
                                     l139 06D4                                       l308 075E  
                                     l164 0754                                       l341 0413  
                                     l270 06E4                                       l352 044E  
                                     l184 0697                                       l504 0134  
                                     l433 030A                                       l282 0552  
                                     l442 0390                                       l370 027E  
                                     l450 0519                                       l339 0411  
                                     l507 0741                                       l451 0522  
                                     l268 06D8                                       l292 071F  
                                     l372 0280                                       l532 04C0  
                                     l461 0239                                       l357 023A  
                                     l445 050D                                       l286 05D2  
                                     l294 0721                                       l359 023C  
                                     l391 030B                                       l288 05E0  
                                     l296 0728                                       l368 027C  
                                     l289 05E7                                       l377 044F  
                                     l561 057D                                       l386 0488  
                                     l299 0761                                       l483 01D7  
                                     l564 063F                                       l558 0555  
                                     l567 0655                                       l576 0410  
                                     l579 02C6                                       l773 066B  
                                     _GIE 005F                               _start_alarm 06E5  
                                     _PR2 001B                               _start_setup 0489  
                            ?_go_open_alt 0070                           _TMR2_Initialize 06C2  
                                     wreg 0009                                i1_go_close 05E8  
                             get_jump@res 0025                                      l2011 0653  
                                    l2005 063F                                      l2101 06A3  
                                    l2007 0644                                      l2103 06A8  
                                    l2111 076A                                      l2009 0648  
                                    l2113 076E                                      l2105 0742  
                                    l2121 06C2                                      l2201 0135  
                                    l2115 0733                                      l2107 0745  
                                    l2027 074F                                      l2131 06D1  
                                    l2123 06C5                                      l2211 0141  
                                    l2203 0135                                      l2117 0736  
                                    l2109 0746                                      l2029 0755  
                                    l2141 068F                                      l2133 0682  
                                    l2125 06C6                                      l2213 0149  
                                    l2205 0140                                      l2301 008C  
                                    l2151 05BB                                      l2119 0737  
                                    l2143 0690                                      l2135 0687  
                                    l2127 06C7                                      l2231 0168  
                                    l2223 0150                                      l2071 02B2  
                                    l2303 0090                                      l2153 05C1  
                                    l2145 05AA                                      l2137 068A  
                                    l2129 06C9                                      l2241 0174  
                                    l2233 016E                                      l2225 015A  
                                    l2217 014F                                      l2073 02C0  
                                    l2081 065D                                      l2321 00D7  
                                    l2305 0096                                      l2401 0240  
                                    l2147 05B6                                      l2139 068E  
                                    l2243 017D                                      l2235 0173  
                                    l2227 0163                                      l2251 0197  
                                    l2083 0661                                      l2331 00F9  
                                    l2323 00D9                                      l2315 00A2  
                                    l2307 009D                                      l2411 0262  
                                    l2403 0249                                      l2157 06D8  
                                    l2149 05B7                                      l2501 0449  
                                    l2181 055A                                      l2093 0698  
                                    l2261 01A3                                      l2253 019B  
                                    l2245 018C                                      l2229 0164  
                                    l2069 0283                                      l2085 0663  
                                    l2077 0658                                      l2341 010E  
                                    l2325 00DD                                      l2317 00BB  
                                    l2309 00A1                                      l2421 0275  
                                    l2413 0266                                      l2405 0252  
                                    l2503 044D                                      l2511 045C  
                                    l2191 056F                                      l2183 055F  
                                    l2095 069B                                      l2351 066C  
                                    l2271 01C9                                      l2263 01B3  
                                    l2255 01A1                                      l2247 018D  
                                    l2087 066A                                      l2079 0659  
                                    l2343 0112                                      l2319 00D1  
                                    l2327 00E3                                      l2415 0267  
                                    l2407 0257                                      l2431 0318  
                                    l2361 0527                                      l2521 047A  
                                    l2513 0466                                      l2193 0571  
                                    l2185 0560                                      l2601 01EA  
                                    l2097 069E                                      l2353 077B  
                                    l2273 01CE                                      l2265 01B7  
                                    l2249 0191                                      l2345 0118  
                                    l2337 00FC                                      l2329 00E7  
                                    l2281 0042                                      l2425 0277  
                                    l2417 026A                                      l2409 025B  
                                    l2441 0335                                      l2433 0321  
                                    l2371 053B                                      l2363 0529  
                                    l2523 047C                                      l2515 046B  
                                    l2507 0451                                      l2195 0573  
                                    l2187 056A                                      l2179 0555  
                                    l2611 01F9                                      l2531 02C7  
                                    l2099 06A0                                      l2275 01D3  
                                    l2267 01BB                                      l2347 012A  
                                    l2339 010A                                      l2283 004C  
                                    l2419 0271                                      l2443 0336  
                                    l2435 0326                                      l2427 030D  
                                    l2373 0547                                      l2365 052C  
                                    l2381 05DE                                      l2525 0483  
                                    l2517 046F                                      l2509 045A  
                                    l2197 0574                                      l2189 056E  
                                    l2461 0407                                      l2621 0222  
                                    l2613 0201                                      l2533 02D6  
                                    l2541 02E5                                      l2269 01C1  
                                    l2349 0130                                      l2285 0052  
                                    l2277 003F                                      l2453 0346  
                                    l2445 0339                                      l2437 032A  
                                    l2429 030F                                      l2701 060A  
                                    l2367 0530                                      l2375 054C  
                                    l2359 0525                                      l2383 05E5  
                                    l2391 0727                                      l2527 0487  
                                    l2519 0476                                      l2199 057B  
                                    l2455 03D4                                      l2623 0227  
                                    l2615 0206                                      l2607 01EB  
                                    l2551 0303                                      l2543 02F4  
                                    l2535 02DA                                      l2295 0064  
                                    l2287 0057                                      l2279 0042  
                                    l2463 073B                                      l2447 0340  
                                    l2439 0331                                      l2631 048E  
                                    l2703 060D                                      l2369 0535  
                                    l2385 05E6                                      l2377 05C9  
                                    l2561 035E                                      l2553 034E  
                                    l2481 0415                                      l2457 03DC  
                                    l2617 020C                                      l2609 01F3  
                                    l2545 02F8                                      l2537 02DE  
                                    l2297 007E                                      l2289 0063  
                                    l2449 0344                                      l2641 04A6  
                                    l2633 0491                                      l2625 0489  
                                    l2705 0611                                      l2379 05D0  
                                    l2395 0760                                      l2571 0374  
                                    l2563 0362                                      l2555 0352  
                                    l2491 0431                                      l2483 041E  
                                    l2459 03ED                                      l2619 0217  
                                    l2547 02FC                                      l2539 02E2  
                                    l2299 0086                                      l2651 04AE  
                                    l2643 04A7                                      l2635 0499  
                                    l2627 048C                                      l2389 0722  
                                    l2397 075B                                      l2581 0387  
                                    l2573 0378                                      l2565 0366  
                                    l2557 0356                                      l2493 0435  
                                    l2485 0420                                      l2549 0300  
                                    l2661 04B5                                      l2653 04B0  
                                    l2645 04A8                                      l2637 04A1  
                                    l2629 048D                                      l2575 037C  
                                    l2567 0369                                      l2559 035A  
                                    l2495 043C                                      l2487 0422  
                                    l2399 023E                                      l2663 04B6  
                                    l2655 04B1                                      l2647 04AA  
                                    l2639 04A4                                      l2591 0503  
                                    l2583 04F3                                      l2577 0380  
                                    l2569 0370                                      l2497 0440  
                                    l2489 042C                                      l2665 04B8  
                                    l2657 04B2                                      l2649 04AC  
                                    l2593 0511                                      l2585 04F7  
                                    l2579 0384                                      l2499 0442  
                                    l2667 04BB                                      l2659 04B4  
                                    l2595 0516                                      l2587 04FB  
                                    l2597 01D8                                      l2669 04BE  
                                    l2589 0500                                      l2599 01E1  
                                    l2699 0607                               get_time@buf 0045  
                                    u1100 0648                                      u1101 0647  
                                    u1200 065D                                      u2000 0516  
                                    u1201 065C                                      u2001 0515  
                                    u2010 01EA                                      u1210 066A  
                                    u2011 01E9                                      u1211 0669  
                                    u2020 01F9                                      u2100 0611  
                                    u2021 01F8                                      u2101 0610  
                                    u2030 020C                                      u2031 020B  
                                    u1240 05C1                                      u2040 0239  
                                    u1400 0173                                      u1241 05C0  
                                    u2041 0238                                      u1401 0172  
                                    u1250 06E2                                      u1090 0644  
                                    u1330 055A                                      u1410 017D  
                                    u1251 06DF                                      u1091 0643  
                                    u1331 0559                                      u1411 017C  
                                    u1340 057A                                      u1420 0197  
                                    u1500 0096                                      u1341 0578  
                                    u2045 0235                                      u1421 0196  
                                    u1501 0095                                      _LATA 010C  
                                    u1430 01A1                                      u1510 009D  
                                    u1431 01A0                                      u1511 009C  
                                    _LATC 010E                                      u1264 06E4  
                                    u1600 0552                                      u1440 01B3  
                                    u1360 013D                                      u1520 00BB  
                                    u1601 0551                                      u1441 01B2  
                                    u1521 00BA                                      u1354 057B  
                                    u1450 01C1                                      u1370 014E  
                                    u1530 00E3                                      u1610 0252  
                                    u1451 01C0                                      u1371 014D  
                                    u1531 00E2                                      u1611 0251  
                                    u1700 0401                                      u1460 01CE  
                                    u1380 015A                                      u1540 00F9  
                                    u1620 0262                                      u2157 05B8  
                                    u1461 01CD                                      u1381 0159  
                                    u1541 00F8                                      u1621 0261  
                                    u1470 01D3                                      u1390 016E  
                                    u1550 010A                                      u1630 0271  
                                    u2167 05D8                                      u1471 01D2  
                                    u1391 016D                                      u1551 0109  
                                    u1631 0270                                      u1800 02DA  
                                    u1560 0118                                      u1480 0049  
                                    u1640 027C                                      u2177 052D  
                                    u1705 03FE                                      u1801 02D9  
                                    u1561 0117                                      u1545 00F5  
                                    u1641 027B                                      u1730 042C  
                                    u1810 02DE                                      u1570 0130  
                                    u1490 007E                                      u1650 0321  
                                    u2187 0541                                      u1731 042B  
                                    u1811 02DD                                      u1571 012F  
                                    u1491 007D                                      u1651 0320  
                                    u1900 035E                                      u1740 043C  
                                    u1820 02E2                                      u1660 0331  
                                    u1901 035D                                      u1741 043B  
                                    u1821 02E1                                      u1661 0330  
                                    u1590 053B                                      u1910 0362  
                                    u1750 0449                                      u1830 02F4  
                                    u1670 0340                                      u1591 053A  
                                    u1911 0361                                      u1751 0448  
                                    u1831 02F3                                      u1495 007A  
                                    u1671 033F                                      u1920 0374  
                                    u1760 0466                                      u1840 02F8  
                                    u1680 034B                                      u1921 0373  
                                    u1761 0465                                      u1841 02F7  
                                    u1681 034A                                      u1930 0378  
                                    u1770 0476                                      u1690 03E7  
                                    u1850 02FC                                      u1931 0377  
                                    u1771 0475                                      u1851 02FB  
                                    u1835 02F0                                      u1940 037C  
                                    u1780 0483                                      u1860 0300  
                                    u1941 037B                                      u1781 0482  
                                    u1861 02FF                                      u1950 0380  
                                    u1870 0352                                      u1790 02D6  
                                    u1951 037F                                      u1871 0351  
                                    u1695 03E4                                      u1791 02D5  
                                    u1880 0356                                      u1960 04F7  
                                    u1881 0355                                      u1961 04F6  
                                    u1890 035A                                      u1970 04FB  
                                    u1891 0359                                      u1795 02D2  
                                    u1971 04FA                                      u1980 0500  
                                    u1981 04FF                                      u1990 0511  
                                    u1991 0510                                      i1l66 0634  
                                    i1l69 063C                                      _TMR0 0015  
                                    _TMR2 001A                                      _WREN 0CAA  
                                    _WPUA 020C                                      _WPUC 020E  
                                    _beep 0523                                      _main 0607  
                                    fsr0h 0005                                      fsr1h 0007  
                                    indf0 0000                                      fsr0l 0004  
                                    indf1 0001                                      fsr1l 0006  
                    EEPROM_WriteByte@addr 0023                                      btemp 007E  
                          ??_get_fun_full 0024                                      start 0026  
                       ___bmul@multiplier 0023                      __end_ofi1_switch_zum 071F  
                 get_fun_full@fun_counter 005C                            ??_go_close_alt 0020  
                 __end_of_TMR0_Initialize 0698            ??_TMR0_DefaultInterruptHandler 0070  
                         ?_FVR_Initialize 0070             __end_of_OSCILLATOR_Initialize 0749  
                                   ?_beep 0020                                     ?_main 0070  
                            get_time@buf2 0041                                     _EEADR 0191  
                                   _FLAGS 007C                                     _T2CON 001C  
                                   i1l110 0012                                     i1l203 077F  
                                   i1l115 0024                                     i1l116 0024  
                                   i1l301 0768                                     i1l303 0769  
                                   i1l313 06E6                                     i1l161 0711  
                                   i1l314 06E8                                     i1l322 04C1  
                                   i1l324 04C3                                     i1l317 06F4  
                                   i1l157 06C1                                     i1l270 071E  
                                   i1l334 04F2                                     i1l414 05A3  
                                   i1l406 058B                                     i1l415 05A5  
                                   i1l167 077E                                     i1l416 05A7  
                                   i1l409 058F                                     i1l273 0732  
                                   i1l268 0712                                     i1l428 03D1  
                                   i1l197 0704                                     i1l286 05F1  
                                   i1l288 05FF                                     i1l289 0606  
                                   i1l299 0766                                     _TRISA 008C  
                                   _TRISC 008E                 ?_TMR0_SetInterruptHandler 0020  
                         __end_of_get_adr 01D8                          __end_of_TMR0_ISR 0705  
                         __end_of_get_fun 044F                          __end_of_TMR2_ISR 06C2  
                         __end_of_go_open 0729                                     beep@i 0025  
                                   beep@j 0024                            _WDT_Initialize 076A  
                                   pclath 000A                           __end_of_povorot 030B  
                                   status 0003                                     wtemp0 007E  
                         _TMR2_StartTimer 077B                              get_voltage@q 0037  
                         __initialization 0027                              __end_of_beep 0553  
                            __end_of_main 0622                           ??_get_jump_full 0024  
                 __end_of_TMR2_Initialize 06D5               ?_INTERRUPT_InterruptManager 0070  
                                  ??_beep 0021                             get_time@F2661 0052  
                _TMR2_SetInterruptHandler 074F                                    ??_main 0049  
                           get_time@F2659 0049                    __end_of_WDT_Initialize 076E  
                             ?i1_go_close 0070                       i1_ADC_GetConversion 0622  
                           get_time@q_822 0048                             get_time@q_823 0047  
                                  _ADCON0 009D                                    _ADCON1 009E  
                                  _ADRESH 009C                                    _ADRESL 009B  
                                  _EEDATA 0193                                    _EECON2 0196  
                                  _APFCON 011D                                    _ANSELA 018C  
                                  _ANSELC 018E                                    _BORCON 0116  
                           get_time@times 0034                                    i1l2001 06ED  
                                  i1l2003 06F1                                    i1l2021 0632  
                                  i1l2023 0638                                    i1l2015 0623  
                                  i1l2031 0729                                    u111_20 0638  
                                  u111_21 0637                                    i1l2017 062D  
                                  i1l2041 04DA                                    i1l2033 04C5  
                                  i1l2019 062E                                    i1l2043 04DF  
                                  i1l2035 04CD                                    i1l2045 04E8  
                                  i1l2037 04CF                                    i1l2061 059D  
                                  i1l2053 057E                                    i1l2047 04E9  
                                  i1l2039 04D1                                    i1l2063 059F  
                                  i1l2055 0582                                    u112_20 0731  
                                  i1l2049 04EF                                    i1l2065 05A0  
                                  i1l2057 0588                                    u112_21 072F  
                                  i1l2161 0394                                    i1l2091 0712  
                                  i1l2067 05A1                                    i1l2059 0591  
                                  i1l2171 03BA                                    i1l2163 03A3  
                                  i1l2173 03BE                                    i1l2165 03A7  
                                  i1l2175 03C4                                    i1l2167 03B3  
                                  i1l2159 0391                                    i1l2177 03D0  
                                  i1l2169 03B7                                    i1l2355 0705  
                                  u113_24 0732                                    i1l2357 070C  
                                  i1l2471 06FF                                    u122_20 071C  
                                  u114_20 04DA                                    u130_20 03C4  
                                  u122_21 0719                                    i1l2465 06F5  
                                  u114_21 04D9                                    u130_21 03C3  
                                  i1l2473 06AD                                    i1l2467 06F6  
                                  i1l2475 06AF                                    i1l2469 06F9  
                                  i1l2477 06BC                                    i1l2479 06BF  
                                  u115_20 04E8                                    u131_20 03CE  
                                  u115_21 04E7                                    u131_21 03CB  
                                  i1l2691 0016                                    u123_24 071E  
                                  i1l2693 001B                                    i1l2685 0006  
                                  i1l1991 0604                                    i1l2695 0020  
                                  i1l2687 000A                                    u108_20 06ED  
                                  u116_20 04EF                                    i1l1993 0605  
                                  i1l1985 05E8                                    u108_21 06EC  
                                  u116_21 04EE                                    i1l2689 000E  
                                  i1l1987 05EF                                    u132_24 03D0  
                                  i1l1989 05FD                                    i1l1997 0765  
                                  i1l1999 06E5                                    u220_27 062F  
                                  u117_20 0582                                    u205_20 000A  
                                  u117_21 0581                                    u205_21 0009  
                                  u221_27 05F6                                    u118_20 0588  
                                  u206_20 000E                                    u118_21 0587  
                                  u206_21 000D                                    u119_20 058F  
                                  u127_20 03A7                                    u207_20 0016  
                                  u119_21 058E                                    u127_21 03A6  
                                  u207_21 0015                                    u128_20 03B1  
                                  u208_20 001B                                    u128_21 03AE  
                                  u208_21 001A                                    u209_20 0020  
                                  u209_21 001F                                    u129_24 03B3  
                                  u171_20 06FF                                    _FVRCON 0117  
                                  u171_21 06FE                                    u219_27 0596  
                                  u172_20 06BC                                    u172_21 06BB  
                                  u158_20 070C                                    u158_21 070B  
                        _GOOD_WSP_VOLTAGE 0775                                    _OSCCON 0099  
                                  _WDTCON 0097             __end_of_EEPROM_WriteShortLong 0411  
                    ?i1_ADC_GetConversion 0070                          __end_of_get_jump 0489  
                        __end_of_get_time 0135                          __end_of_go_close 05E8  
                                  ___bmul 0656                      _switch_zum$intlevel0 06D8  
                        ?_TMR0_Initialize 0070                         ??_EEPROM_ReadByte 0020  
                        __end_of_fun_work 0391                                    _time_s 0055  
                __end_of_EEPROM_WriteByte 057E                                 ??_get_adr 0023  
                               ??_get_fun 0024                                 ??_go_open 0020  
                    __end_of_get_fun_full 0281                           ?_WDT_Initialize 0070  
                          get_measure@res 0075                    EEPROM_WriteByte@status 0024  
                ADC_GetConversion@channel 0023                                 ??_povorot 0022  
                 __end_of_TMR2_StartTimer 077E  TMR0_SetInterruptHandler@InterruptHandler 0020  
TMR2_SetInterruptHandler@InterruptHandler 0020                      __end_of_go_close_alt 0765  
                       _SYSTEM_Initialize 066C                   __end_of__initialization 003C  
                   __end_of_TMR2_CallBack 0712                        ?_SYSTEM_Initialize 0070  
                            ?_toggle_tone 0070                     ??i1_ADC_GetConversion 0072  
                     ___bmul@multiplicand 0020                  EEPROM_ReadShortLong@addr 002F  
                          __pcstackCOMMON 0070                 get_jump_full@jump_counter 005A  
                     ??_SYSTEM_Initialize 0023                                 ?_TMR0_ISR 0070  
                               ?_TMR2_ISR 0070                     __end_of_ROTATION_TIME 0775  
                        ?_TMR2_Initialize 0070                i1ADC_GetConversion@channel 0073  
                            ?_start_alarm 0070                            _OPTION_REGbits 0095  
                            ?_start_setup 0070                              i1_switch_zum 0712  
               __end_of_SYSTEM_Initialize 0682                                __pbssBANK0 0049  
                              __pbssBANK1 00A0                          ??_FVR_Initialize 0020  
                              __pmaintext 0607                                   ?___bmul 0020  
        __end_of_TMR0_SetInterruptHandler 075B                                ??_TMR0_ISR 0070  
                              ??_TMR2_ISR 0078                                __pintentry 0004  
                        get_jump_full@res 0025                                _get_eeprom 073B  
                                 _OSCTUNE 0098                          ?_TMR2_StartTimer 0070  
                               ?_get_jump 0070                                 ?_get_time 0070  
                               ?_go_close 0070                                 ?_fun_work 0070  
                    _ADC_InterruptHandler 0058                ??_TMR2_SetInterruptHandler 0022  
                __end_of_GOOD_WSP_VOLTAGE 0778                                   __ptext1 04F3  
                                 __ptext2 0489                       get_measure@measures 007B  
                                 __ptext3 030B                                   __ptext4 023A  
                                 __ptext5 073B                                   __ptext6 003F  
                                 __ptext7 0656                                   __ptext8 0281  
                                 __ptext9 0135                                   _get_adr 0135  
                                 _get_fun 0411                                   _go_open 071F  
                   _OSCILLATOR_Initialize 0742                                 _T2CONbits 001C  
                ??_PIN_MANAGER_Initialize 0020                              ??i1_go_close 0070  
                                 _povorot 02C7                                   clrloop0 074A  
                              ??_get_jump 0024                                ??_get_time 0030  
                              ??_go_close 0020                         __end_of_rele_tick 05A8  
                    end_of_initialization 003C                                ??_fun_work 0026  
                         _EEPROM_ReadByte 063D                              _get_fun_full 023A  
                      __end_ofi1_go_close 0607                     __end_of_get_jump_full 034E  
                           _sec_tick_work 0391                                _time_pow_s 005E  
                            _go_close_alt 0760                          ??_WDT_Initialize 0020  
                _TMR0_SetInterruptHandler 0755                         ?_EEPROM_WriteByte 0020  
                       __end_of_switch_wm 0523                            get_voltage@buf 0035  
                          get_voltage@res 0033                               ?_get_eeprom 0070  
                      ??_EEPROM_WriteByte 0021                                get_adr@adr 0024  
                              get_adr@buf 0038                                 _TRISAbits 008C  
                               _TRISCbits 008E                           get_fun_full@res 0025  
                              get_fun@res 0025                        EEPROM_WriteByte@dt 0020  
            __end_of_EEPROM_ReadShortLong 02C7                             ??_get_measure 0074  
                   _EEPROM_WriteShortLong 03D2                                _switch_zum 06D5  
    __end_of_TMR2_DefaultInterruptHandler 077F              _TMR2_DefaultInterruptHandler 077E  
                          __end_of___bmul 066C                            ?_sec_tick_work 0070  
                           ??_get_voltage 002E                            _ADC_Initialize 0733  
                  ?_OSCILLATOR_Initialize 0070                            i1_go_close_alt 0765  
                           ??_go_open_alt 0020                       start_initialization 0027  
                 __end_of_EEPROM_ReadByte 0656               __end_ofi1_ADC_GetConversion 063D  
                                ??___bmul 0021                    __end_of_ADC_Initialize 073B  
                     __end_of_get_measure 04F3                    __end_ofi1_go_close_alt 076A  
           ?_TMR2_DefaultInterruptHandler 0070                               __pbssCOMMON 0078  
                     __end_of_get_voltage 023A                                 ___latbits 0000  
                           __pcstackBANK0 0020                       __end_of_go_open_alt 0760  
                        _START_EEPROM_ADR 005F                     _TMR0_InterruptHandler 0060  
                               __pnvBANK0 0060                    ?_EEPROM_WriteShortLong 0025  
                  _PIN_MANAGER_Initialize 0698                           ??_sec_tick_work 0077  
                             ?_switch_zum 0070                           ?_ADC_Initialize 0070  
                               beep@count 0020                           ?i1_go_close_alt 0070  
            ??_INTERRUPT_InterruptManager 0078               EEPROM_WriteShortLong@ucData 0025  
                                ?_get_adr 0070                                  ?_get_fun 0070  
                                ?_go_open 0070                      _EEPROM_ReadShortLong 0281  
                       sec_tick_work@iled 007A                                  ?_povorot 0070  
                      get_time@time_count 003E                          ?_EEPROM_ReadByte 0070  
                       ??_TMR0_Initialize 0022                         get_jump_full@flag 0027  
                                _LATAbits 010C                                  _LATCbits 010E  
                               _rele_tick 057E                                 clear_ram0 0749  
                           _TMR2_CallBack 0705                                  _PIE1bits 0091  
                             _get_measure 04C1                ??_TMR0_SetInterruptHandler 0022  
                                _PIR1bits 0011                                  _TMR0_ISR 06F5  
                                _TMR2_ISR 06AD                             _ROTATION_TIME 0772  
                             _get_voltage 01D8                                _ADCON0bits 009D  
                   ?_EEPROM_ReadShortLong 0023                                  _WPUAbits 020C  
                                _WPUCbits 020E                                 get_time@i 0044  
                               get_time@q 0046                              ??_get_eeprom 0049  
          ??_TMR2_DefaultInterruptHandler 0070                               _go_open_alt 075B  
               ?_TMR2_SetInterruptHandler 0020                         get_time@adr_error 003D  
                               _switch_wm 04F3                         ??_TMR2_Initialize 0022  
                          ?_TMR2_CallBack 0070                                ?_rele_tick 0070  
                           ??_toggle_tone 0070                         _ADC_GetConversion 05A8  
                      __end_of_get_eeprom 0742                   ??_OSCILLATOR_Initialize 0020  
                      ?_ADC_GetConversion 0020                    EEPROM_ReadShortLong@dt 002C  
                           ??_start_alarm 0072                                _ANSELAbits 018C  
                              _ANSELCbits 018E                       ??_ADC_GetConversion 0022  
                           ??_start_setup 0049                   EEPROM_WriteShortLong@dt 002C  
                              ?_switch_wm 0070                        get_voltage@buf_800 0030  
                                __ptext10 077B                                  __ptext11 066C  
                                __ptext20 0733                                  __ptext12 076A  
                                __ptext21 02C7                                  __ptext13 06C2  
                                __ptext30 075B                                  __ptext22 01D8  
                                __ptext14 074F                                  __ptext31 071F  
                                __ptext23 03D2                                  __ptext15 0682  
                                __ptext40 0391                                  __ptext32 0760  
                                __ptext24 0553                                  __ptext16 0755  
                                __ptext41 0729                                  __ptext33 05C9  
                                __ptext25 063D                                  __ptext17 0698  
                                __ptext50 0712                                  __ptext42 057E  
                                __ptext34 0523                                  __ptext26 044F  
                                __ptext18 0742                                  __ptext43 04C1  
                                __ptext35 06D5                                  __ptext27 0411  
                                __ptext19 076E                                  __ptext44 0622  
                                __ptext28 05A8                                  __ptext45 06E5  
                                __ptext37 06AD                                  __ptext29 034E  
                                __ptext46 0765                                  __ptext38 0705  
                                __ptext47 05E8                                  __ptext39 077E  
                                __ptext48 06F5                                  __ptext49 077F  
                           ?i1_switch_zum 0070                                  beep@time 0023  
                                _get_jump 044F                                  _get_time 003F  
                                _go_close 05C9                           _BAD_WSP_VOLTAGE 0778  
                                _fun_work 034E      __end_of_TMR0_DefaultInterruptHandler 0780  
            _TMR0_DefaultInterruptHandler 077F                 __end_of_ADC_GetConversion 05C9  
                                int$flags 007E                                  get_adr@i 0034  
                                get_adr@q 0035                         ??_TMR2_StartTimer 0020  
                     __end_of_toggle_tone 0733        __end_of_INTERRUPT_InterruptManager 0026  
              _INTERRUPT_InterruptManager 0004                    ??_EEPROM_ReadShortLong 0026  
                    get_jump@jump_counter 005B                                _INTCONbits 000B  
                              _FVRCONbits 0117                            ??i1_switch_zum 0070  
                     __end_of_start_alarm 06F5                       __end_of_start_setup 04C1  
                                intlevel1 0000                           ??_TMR2_CallBack 0078  
                 ??_EEPROM_WriteShortLong 0028                 EEPROM_WriteShortLong@addr 002D  
                 ?_PIN_MANAGER_Initialize 0070                               ??_rele_tick 0070  
                     EEPROM_ReadByte@addr 0022                          ??_ADC_Initialize 0020  
           ?_TMR0_DefaultInterruptHandler 0070                          ??i1_go_close_alt 0070  
                            ??_switch_zum 0020                             _get_jump_full 030B  
                           __pstringtext1 0772                             __pstringtext2 0775  
                           __pstringtext3 0778                            _FVR_Initialize 076E  
                              _OPTION_REG 0095                          get_voltage@q_801 0036  
                   TMR2_ISR@CountCallBack 0078                           _TMR0_Initialize 0682  
                 __end_of_BAD_WSP_VOLTAGE 077B                               ??_switch_wm 0026  
                            get_adr@F2639 00A0                        __end_of_switch_zum 06E5  
          __end_of_PIN_MANAGER_Initialize 06AD                          _EEPROM_WriteByte 0553  
                            get_adr@i_811 0036                              get_adr@q_810 0037  
                   _TMR2_InterruptHandler 0062                               _toggle_tone 0729  
                           ?_get_fun_full 0070                              ?_get_measure 0070  
