

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Fri Apr 29 15:38:53 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F1823
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	intentry,global,class=CODE,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,delta=2
    60                           	psect	text45,local,class=CODE,merge=1,delta=2
    61                           	psect	text46,local,class=CODE,merge=1,delta=2
    62                           	psect	text47,local,class=CODE,merge=1,delta=2
    63                           	psect	text48,local,class=CODE,merge=1,delta=2
    64                           	psect	text49,local,class=CODE,merge=1,delta=2
    65                           	psect	text50,local,class=CODE,merge=1,delta=2
    66                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    67                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    68                           	dabs	1,0x7E,2
    69  0000                     
    70                           ; Version 2.40
    71                           ; Generated 17/11/2021 GMT
    72                           ; 
    73                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution. Publication is not required when
    87                           ;        this file is used in an embedded application.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC16F1823 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     	;# 
   106  0001                     	;# 
   107  0002                     	;# 
   108  0003                     	;# 
   109  0004                     	;# 
   110  0005                     	;# 
   111  0006                     	;# 
   112  0007                     	;# 
   113  0008                     	;# 
   114  0009                     	;# 
   115  000A                     	;# 
   116  000B                     	;# 
   117  000C                     	;# 
   118  000E                     	;# 
   119  0011                     	;# 
   120  0012                     	;# 
   121  0015                     	;# 
   122  0016                     	;# 
   123  0016                     	;# 
   124  0017                     	;# 
   125  0018                     	;# 
   126  0019                     	;# 
   127  001A                     	;# 
   128  001B                     	;# 
   129  001C                     	;# 
   130  001E                     	;# 
   131  001F                     	;# 
   132  008C                     	;# 
   133  008E                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0095                     	;# 
   137  0096                     	;# 
   138  0097                     	;# 
   139  0098                     	;# 
   140  0099                     	;# 
   141  009A                     	;# 
   142  009B                     	;# 
   143  009B                     	;# 
   144  009C                     	;# 
   145  009D                     	;# 
   146  009E                     	;# 
   147  010C                     	;# 
   148  010E                     	;# 
   149  0111                     	;# 
   150  0112                     	;# 
   151  0113                     	;# 
   152  0114                     	;# 
   153  0115                     	;# 
   154  0116                     	;# 
   155  0117                     	;# 
   156  0118                     	;# 
   157  0119                     	;# 
   158  011A                     	;# 
   159  011B                     	;# 
   160  011D                     	;# 
   161  011D                     	;# 
   162  018C                     	;# 
   163  018E                     	;# 
   164  0191                     	;# 
   165  0191                     	;# 
   166  0192                     	;# 
   167  0193                     	;# 
   168  0193                     	;# 
   169  0193                     	;# 
   170  0194                     	;# 
   171  0195                     	;# 
   172  0196                     	;# 
   173  0199                     	;# 
   174  019A                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019D                     	;# 
   182  019E                     	;# 
   183  019F                     	;# 
   184  020C                     	;# 
   185  020E                     	;# 
   186  0211                     	;# 
   187  0211                     	;# 
   188  0212                     	;# 
   189  0212                     	;# 
   190  0213                     	;# 
   191  0213                     	;# 
   192  0214                     	;# 
   193  0214                     	;# 
   194  0215                     	;# 
   195  0215                     	;# 
   196  0215                     	;# 
   197  0216                     	;# 
   198  0216                     	;# 
   199  0217                     	;# 
   200  0217                     	;# 
   201  0291                     	;# 
   202  0291                     	;# 
   203  0292                     	;# 
   204  0293                     	;# 
   205  0294                     	;# 
   206  0295                     	;# 
   207  0295                     	;# 
   208  0296                     	;# 
   209  0391                     	;# 
   210  0392                     	;# 
   211  0393                     	;# 
   212  039A                     	;# 
   213  039C                     	;# 
   214  039D                     	;# 
   215  039E                     	;# 
   216  039F                     	;# 
   217  0FE4                     	;# 
   218  0FE5                     	;# 
   219  0FE6                     	;# 
   220  0FE7                     	;# 
   221  0FE8                     	;# 
   222  0FE9                     	;# 
   223  0FEA                     	;# 
   224  0FEB                     	;# 
   225  0FED                     	;# 
   226  0FEE                     	;# 
   227  0FEF                     	;# 
   228  0000                     	;# 
   229  0001                     	;# 
   230  0002                     	;# 
   231  0003                     	;# 
   232  0004                     	;# 
   233  0005                     	;# 
   234  0006                     	;# 
   235  0007                     	;# 
   236  0008                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000E                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0015                     	;# 
   245  0016                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001C                     	;# 
   253  001E                     	;# 
   254  001F                     	;# 
   255  008C                     	;# 
   256  008E                     	;# 
   257  0091                     	;# 
   258  0092                     	;# 
   259  0095                     	;# 
   260  0096                     	;# 
   261  0097                     	;# 
   262  0098                     	;# 
   263  0099                     	;# 
   264  009A                     	;# 
   265  009B                     	;# 
   266  009B                     	;# 
   267  009C                     	;# 
   268  009D                     	;# 
   269  009E                     	;# 
   270  010C                     	;# 
   271  010E                     	;# 
   272  0111                     	;# 
   273  0112                     	;# 
   274  0113                     	;# 
   275  0114                     	;# 
   276  0115                     	;# 
   277  0116                     	;# 
   278  0117                     	;# 
   279  0118                     	;# 
   280  0119                     	;# 
   281  011A                     	;# 
   282  011B                     	;# 
   283  011D                     	;# 
   284  011D                     	;# 
   285  018C                     	;# 
   286  018E                     	;# 
   287  0191                     	;# 
   288  0191                     	;# 
   289  0192                     	;# 
   290  0193                     	;# 
   291  0193                     	;# 
   292  0193                     	;# 
   293  0194                     	;# 
   294  0195                     	;# 
   295  0196                     	;# 
   296  0199                     	;# 
   297  019A                     	;# 
   298  019B                     	;# 
   299  019B                     	;# 
   300  019B                     	;# 
   301  019B                     	;# 
   302  019C                     	;# 
   303  019C                     	;# 
   304  019D                     	;# 
   305  019E                     	;# 
   306  019F                     	;# 
   307  020C                     	;# 
   308  020E                     	;# 
   309  0211                     	;# 
   310  0211                     	;# 
   311  0212                     	;# 
   312  0212                     	;# 
   313  0213                     	;# 
   314  0213                     	;# 
   315  0214                     	;# 
   316  0214                     	;# 
   317  0215                     	;# 
   318  0215                     	;# 
   319  0215                     	;# 
   320  0216                     	;# 
   321  0216                     	;# 
   322  0217                     	;# 
   323  0217                     	;# 
   324  0291                     	;# 
   325  0291                     	;# 
   326  0292                     	;# 
   327  0293                     	;# 
   328  0294                     	;# 
   329  0295                     	;# 
   330  0295                     	;# 
   331  0296                     	;# 
   332  0391                     	;# 
   333  0392                     	;# 
   334  0393                     	;# 
   335  039A                     	;# 
   336  039C                     	;# 
   337  039D                     	;# 
   338  039E                     	;# 
   339  039F                     	;# 
   340  0FE4                     	;# 
   341  0FE5                     	;# 
   342  0FE6                     	;# 
   343  0FE7                     	;# 
   344  0FE8                     	;# 
   345  0FE9                     	;# 
   346  0FEA                     	;# 
   347  0FEB                     	;# 
   348  0FED                     	;# 
   349  0FEE                     	;# 
   350  0FEF                     	;# 
   351  0000                     	;# 
   352  0001                     	;# 
   353  0002                     	;# 
   354  0003                     	;# 
   355  0004                     	;# 
   356  0005                     	;# 
   357  0006                     	;# 
   358  0007                     	;# 
   359  0008                     	;# 
   360  0009                     	;# 
   361  000A                     	;# 
   362  000B                     	;# 
   363  000C                     	;# 
   364  000E                     	;# 
   365  0011                     	;# 
   366  0012                     	;# 
   367  0015                     	;# 
   368  0016                     	;# 
   369  0016                     	;# 
   370  0017                     	;# 
   371  0018                     	;# 
   372  0019                     	;# 
   373  001A                     	;# 
   374  001B                     	;# 
   375  001C                     	;# 
   376  001E                     	;# 
   377  001F                     	;# 
   378  008C                     	;# 
   379  008E                     	;# 
   380  0091                     	;# 
   381  0092                     	;# 
   382  0095                     	;# 
   383  0096                     	;# 
   384  0097                     	;# 
   385  0098                     	;# 
   386  0099                     	;# 
   387  009A                     	;# 
   388  009B                     	;# 
   389  009B                     	;# 
   390  009C                     	;# 
   391  009D                     	;# 
   392  009E                     	;# 
   393  010C                     	;# 
   394  010E                     	;# 
   395  0111                     	;# 
   396  0112                     	;# 
   397  0113                     	;# 
   398  0114                     	;# 
   399  0115                     	;# 
   400  0116                     	;# 
   401  0117                     	;# 
   402  0118                     	;# 
   403  0119                     	;# 
   404  011A                     	;# 
   405  011B                     	;# 
   406  011D                     	;# 
   407  011D                     	;# 
   408  018C                     	;# 
   409  018E                     	;# 
   410  0191                     	;# 
   411  0191                     	;# 
   412  0192                     	;# 
   413  0193                     	;# 
   414  0193                     	;# 
   415  0193                     	;# 
   416  0194                     	;# 
   417  0195                     	;# 
   418  0196                     	;# 
   419  0199                     	;# 
   420  019A                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019C                     	;# 
   426  019C                     	;# 
   427  019D                     	;# 
   428  019E                     	;# 
   429  019F                     	;# 
   430  020C                     	;# 
   431  020E                     	;# 
   432  0211                     	;# 
   433  0211                     	;# 
   434  0212                     	;# 
   435  0212                     	;# 
   436  0213                     	;# 
   437  0213                     	;# 
   438  0214                     	;# 
   439  0214                     	;# 
   440  0215                     	;# 
   441  0215                     	;# 
   442  0215                     	;# 
   443  0216                     	;# 
   444  0216                     	;# 
   445  0217                     	;# 
   446  0217                     	;# 
   447  0291                     	;# 
   448  0291                     	;# 
   449  0292                     	;# 
   450  0293                     	;# 
   451  0294                     	;# 
   452  0295                     	;# 
   453  0295                     	;# 
   454  0296                     	;# 
   455  0391                     	;# 
   456  0392                     	;# 
   457  0393                     	;# 
   458  039A                     	;# 
   459  039C                     	;# 
   460  039D                     	;# 
   461  039E                     	;# 
   462  039F                     	;# 
   463  0FE4                     	;# 
   464  0FE5                     	;# 
   465  0FE6                     	;# 
   466  0FE7                     	;# 
   467  0FE8                     	;# 
   468  0FE9                     	;# 
   469  0FEA                     	;# 
   470  0FEB                     	;# 
   471  0FED                     	;# 
   472  0FEE                     	;# 
   473  0FEF                     	;# 
   474  0000                     	;# 
   475  0001                     	;# 
   476  0002                     	;# 
   477  0003                     	;# 
   478  0004                     	;# 
   479  0005                     	;# 
   480  0006                     	;# 
   481  0007                     	;# 
   482  0008                     	;# 
   483  0009                     	;# 
   484  000A                     	;# 
   485  000B                     	;# 
   486  000C                     	;# 
   487  000E                     	;# 
   488  0011                     	;# 
   489  0012                     	;# 
   490  0015                     	;# 
   491  0016                     	;# 
   492  0016                     	;# 
   493  0017                     	;# 
   494  0018                     	;# 
   495  0019                     	;# 
   496  001A                     	;# 
   497  001B                     	;# 
   498  001C                     	;# 
   499  001E                     	;# 
   500  001F                     	;# 
   501  008C                     	;# 
   502  008E                     	;# 
   503  0091                     	;# 
   504  0092                     	;# 
   505  0095                     	;# 
   506  0096                     	;# 
   507  0097                     	;# 
   508  0098                     	;# 
   509  0099                     	;# 
   510  009A                     	;# 
   511  009B                     	;# 
   512  009B                     	;# 
   513  009C                     	;# 
   514  009D                     	;# 
   515  009E                     	;# 
   516  010C                     	;# 
   517  010E                     	;# 
   518  0111                     	;# 
   519  0112                     	;# 
   520  0113                     	;# 
   521  0114                     	;# 
   522  0115                     	;# 
   523  0116                     	;# 
   524  0117                     	;# 
   525  0118                     	;# 
   526  0119                     	;# 
   527  011A                     	;# 
   528  011B                     	;# 
   529  011D                     	;# 
   530  011D                     	;# 
   531  018C                     	;# 
   532  018E                     	;# 
   533  0191                     	;# 
   534  0191                     	;# 
   535  0192                     	;# 
   536  0193                     	;# 
   537  0193                     	;# 
   538  0193                     	;# 
   539  0194                     	;# 
   540  0195                     	;# 
   541  0196                     	;# 
   542  0199                     	;# 
   543  019A                     	;# 
   544  019B                     	;# 
   545  019B                     	;# 
   546  019B                     	;# 
   547  019B                     	;# 
   548  019C                     	;# 
   549  019C                     	;# 
   550  019D                     	;# 
   551  019E                     	;# 
   552  019F                     	;# 
   553  020C                     	;# 
   554  020E                     	;# 
   555  0211                     	;# 
   556  0211                     	;# 
   557  0212                     	;# 
   558  0212                     	;# 
   559  0213                     	;# 
   560  0213                     	;# 
   561  0214                     	;# 
   562  0214                     	;# 
   563  0215                     	;# 
   564  0215                     	;# 
   565  0215                     	;# 
   566  0216                     	;# 
   567  0216                     	;# 
   568  0217                     	;# 
   569  0217                     	;# 
   570  0291                     	;# 
   571  0291                     	;# 
   572  0292                     	;# 
   573  0293                     	;# 
   574  0294                     	;# 
   575  0295                     	;# 
   576  0295                     	;# 
   577  0296                     	;# 
   578  0391                     	;# 
   579  0392                     	;# 
   580  0393                     	;# 
   581  039A                     	;# 
   582  039C                     	;# 
   583  039D                     	;# 
   584  039E                     	;# 
   585  039F                     	;# 
   586  0FE4                     	;# 
   587  0FE5                     	;# 
   588  0FE6                     	;# 
   589  0FE7                     	;# 
   590  0FE8                     	;# 
   591  0FE9                     	;# 
   592  0FEA                     	;# 
   593  0FEB                     	;# 
   594  0FED                     	;# 
   595  0FEE                     	;# 
   596  0FEF                     	;# 
   597  0000                     	;# 
   598  0001                     	;# 
   599  0002                     	;# 
   600  0003                     	;# 
   601  0004                     	;# 
   602  0005                     	;# 
   603  0006                     	;# 
   604  0007                     	;# 
   605  0008                     	;# 
   606  0009                     	;# 
   607  000A                     	;# 
   608  000B                     	;# 
   609  000C                     	;# 
   610  000E                     	;# 
   611  0011                     	;# 
   612  0012                     	;# 
   613  0015                     	;# 
   614  0016                     	;# 
   615  0016                     	;# 
   616  0017                     	;# 
   617  0018                     	;# 
   618  0019                     	;# 
   619  001A                     	;# 
   620  001B                     	;# 
   621  001C                     	;# 
   622  001E                     	;# 
   623  001F                     	;# 
   624  008C                     	;# 
   625  008E                     	;# 
   626  0091                     	;# 
   627  0092                     	;# 
   628  0095                     	;# 
   629  0096                     	;# 
   630  0097                     	;# 
   631  0098                     	;# 
   632  0099                     	;# 
   633  009A                     	;# 
   634  009B                     	;# 
   635  009B                     	;# 
   636  009C                     	;# 
   637  009D                     	;# 
   638  009E                     	;# 
   639  010C                     	;# 
   640  010E                     	;# 
   641  0111                     	;# 
   642  0112                     	;# 
   643  0113                     	;# 
   644  0114                     	;# 
   645  0115                     	;# 
   646  0116                     	;# 
   647  0117                     	;# 
   648  0118                     	;# 
   649  0119                     	;# 
   650  011A                     	;# 
   651  011B                     	;# 
   652  011D                     	;# 
   653  011D                     	;# 
   654  018C                     	;# 
   655  018E                     	;# 
   656  0191                     	;# 
   657  0191                     	;# 
   658  0192                     	;# 
   659  0193                     	;# 
   660  0193                     	;# 
   661  0193                     	;# 
   662  0194                     	;# 
   663  0195                     	;# 
   664  0196                     	;# 
   665  0199                     	;# 
   666  019A                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019B                     	;# 
   671  019C                     	;# 
   672  019C                     	;# 
   673  019D                     	;# 
   674  019E                     	;# 
   675  019F                     	;# 
   676  020C                     	;# 
   677  020E                     	;# 
   678  0211                     	;# 
   679  0211                     	;# 
   680  0212                     	;# 
   681  0212                     	;# 
   682  0213                     	;# 
   683  0213                     	;# 
   684  0214                     	;# 
   685  0214                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0215                     	;# 
   689  0216                     	;# 
   690  0216                     	;# 
   691  0217                     	;# 
   692  0217                     	;# 
   693  0291                     	;# 
   694  0291                     	;# 
   695  0292                     	;# 
   696  0293                     	;# 
   697  0294                     	;# 
   698  0295                     	;# 
   699  0295                     	;# 
   700  0296                     	;# 
   701  0391                     	;# 
   702  0392                     	;# 
   703  0393                     	;# 
   704  039A                     	;# 
   705  039C                     	;# 
   706  039D                     	;# 
   707  039E                     	;# 
   708  039F                     	;# 
   709  0FE4                     	;# 
   710  0FE5                     	;# 
   711  0FE6                     	;# 
   712  0FE7                     	;# 
   713  0FE8                     	;# 
   714  0FE9                     	;# 
   715  0FEA                     	;# 
   716  0FEB                     	;# 
   717  0FED                     	;# 
   718  0FEE                     	;# 
   719  0FEF                     	;# 
   720  0000                     	;# 
   721  0001                     	;# 
   722  0002                     	;# 
   723  0003                     	;# 
   724  0004                     	;# 
   725  0005                     	;# 
   726  0006                     	;# 
   727  0007                     	;# 
   728  0008                     	;# 
   729  0009                     	;# 
   730  000A                     	;# 
   731  000B                     	;# 
   732  000C                     	;# 
   733  000E                     	;# 
   734  0011                     	;# 
   735  0012                     	;# 
   736  0015                     	;# 
   737  0016                     	;# 
   738  0016                     	;# 
   739  0017                     	;# 
   740  0018                     	;# 
   741  0019                     	;# 
   742  001A                     	;# 
   743  001B                     	;# 
   744  001C                     	;# 
   745  001E                     	;# 
   746  001F                     	;# 
   747  008C                     	;# 
   748  008E                     	;# 
   749  0091                     	;# 
   750  0092                     	;# 
   751  0095                     	;# 
   752  0096                     	;# 
   753  0097                     	;# 
   754  0098                     	;# 
   755  0099                     	;# 
   756  009A                     	;# 
   757  009B                     	;# 
   758  009B                     	;# 
   759  009C                     	;# 
   760  009D                     	;# 
   761  009E                     	;# 
   762  010C                     	;# 
   763  010E                     	;# 
   764  0111                     	;# 
   765  0112                     	;# 
   766  0113                     	;# 
   767  0114                     	;# 
   768  0115                     	;# 
   769  0116                     	;# 
   770  0117                     	;# 
   771  0118                     	;# 
   772  0119                     	;# 
   773  011A                     	;# 
   774  011B                     	;# 
   775  011D                     	;# 
   776  011D                     	;# 
   777  018C                     	;# 
   778  018E                     	;# 
   779  0191                     	;# 
   780  0191                     	;# 
   781  0192                     	;# 
   782  0193                     	;# 
   783  0193                     	;# 
   784  0193                     	;# 
   785  0194                     	;# 
   786  0195                     	;# 
   787  0196                     	;# 
   788  0199                     	;# 
   789  019A                     	;# 
   790  019B                     	;# 
   791  019B                     	;# 
   792  019B                     	;# 
   793  019B                     	;# 
   794  019C                     	;# 
   795  019C                     	;# 
   796  019D                     	;# 
   797  019E                     	;# 
   798  019F                     	;# 
   799  020C                     	;# 
   800  020E                     	;# 
   801  0211                     	;# 
   802  0211                     	;# 
   803  0212                     	;# 
   804  0212                     	;# 
   805  0213                     	;# 
   806  0213                     	;# 
   807  0214                     	;# 
   808  0214                     	;# 
   809  0215                     	;# 
   810  0215                     	;# 
   811  0215                     	;# 
   812  0216                     	;# 
   813  0216                     	;# 
   814  0217                     	;# 
   815  0217                     	;# 
   816  0291                     	;# 
   817  0291                     	;# 
   818  0292                     	;# 
   819  0293                     	;# 
   820  0294                     	;# 
   821  0295                     	;# 
   822  0295                     	;# 
   823  0296                     	;# 
   824  0391                     	;# 
   825  0392                     	;# 
   826  0393                     	;# 
   827  039A                     	;# 
   828  039C                     	;# 
   829  039D                     	;# 
   830  039E                     	;# 
   831  039F                     	;# 
   832  0FE4                     	;# 
   833  0FE5                     	;# 
   834  0FE6                     	;# 
   835  0FE7                     	;# 
   836  0FE8                     	;# 
   837  0FE9                     	;# 
   838  0FEA                     	;# 
   839  0FEB                     	;# 
   840  0FED                     	;# 
   841  0FEE                     	;# 
   842  0FEF                     	;# 
   843  0000                     	;# 
   844  0001                     	;# 
   845  0002                     	;# 
   846  0003                     	;# 
   847  0004                     	;# 
   848  0005                     	;# 
   849  0006                     	;# 
   850  0007                     	;# 
   851  0008                     	;# 
   852  0009                     	;# 
   853  000A                     	;# 
   854  000B                     	;# 
   855  000C                     	;# 
   856  000E                     	;# 
   857  0011                     	;# 
   858  0012                     	;# 
   859  0015                     	;# 
   860  0016                     	;# 
   861  0016                     	;# 
   862  0017                     	;# 
   863  0018                     	;# 
   864  0019                     	;# 
   865  001A                     	;# 
   866  001B                     	;# 
   867  001C                     	;# 
   868  001E                     	;# 
   869  001F                     	;# 
   870  008C                     	;# 
   871  008E                     	;# 
   872  0091                     	;# 
   873  0092                     	;# 
   874  0095                     	;# 
   875  0096                     	;# 
   876  0097                     	;# 
   877  0098                     	;# 
   878  0099                     	;# 
   879  009A                     	;# 
   880  009B                     	;# 
   881  009B                     	;# 
   882  009C                     	;# 
   883  009D                     	;# 
   884  009E                     	;# 
   885  010C                     	;# 
   886  010E                     	;# 
   887  0111                     	;# 
   888  0112                     	;# 
   889  0113                     	;# 
   890  0114                     	;# 
   891  0115                     	;# 
   892  0116                     	;# 
   893  0117                     	;# 
   894  0118                     	;# 
   895  0119                     	;# 
   896  011A                     	;# 
   897  011B                     	;# 
   898  011D                     	;# 
   899  011D                     	;# 
   900  018C                     	;# 
   901  018E                     	;# 
   902  0191                     	;# 
   903  0191                     	;# 
   904  0192                     	;# 
   905  0193                     	;# 
   906  0193                     	;# 
   907  0193                     	;# 
   908  0194                     	;# 
   909  0195                     	;# 
   910  0196                     	;# 
   911  0199                     	;# 
   912  019A                     	;# 
   913  019B                     	;# 
   914  019B                     	;# 
   915  019B                     	;# 
   916  019B                     	;# 
   917  019C                     	;# 
   918  019C                     	;# 
   919  019D                     	;# 
   920  019E                     	;# 
   921  019F                     	;# 
   922  020C                     	;# 
   923  020E                     	;# 
   924  0211                     	;# 
   925  0211                     	;# 
   926  0212                     	;# 
   927  0212                     	;# 
   928  0213                     	;# 
   929  0213                     	;# 
   930  0214                     	;# 
   931  0214                     	;# 
   932  0215                     	;# 
   933  0215                     	;# 
   934  0215                     	;# 
   935  0216                     	;# 
   936  0216                     	;# 
   937  0217                     	;# 
   938  0217                     	;# 
   939  0291                     	;# 
   940  0291                     	;# 
   941  0292                     	;# 
   942  0293                     	;# 
   943  0294                     	;# 
   944  0295                     	;# 
   945  0295                     	;# 
   946  0296                     	;# 
   947  0391                     	;# 
   948  0392                     	;# 
   949  0393                     	;# 
   950  039A                     	;# 
   951  039C                     	;# 
   952  039D                     	;# 
   953  039E                     	;# 
   954  039F                     	;# 
   955  0FE4                     	;# 
   956  0FE5                     	;# 
   957  0FE6                     	;# 
   958  0FE7                     	;# 
   959  0FE8                     	;# 
   960  0FE9                     	;# 
   961  0FEA                     	;# 
   962  0FEB                     	;# 
   963  0FED                     	;# 
   964  0FEE                     	;# 
   965  0FEF                     	;# 
   966  0000                     	;# 
   967  0001                     	;# 
   968  0002                     	;# 
   969  0003                     	;# 
   970  0004                     	;# 
   971  0005                     	;# 
   972  0006                     	;# 
   973  0007                     	;# 
   974  0008                     	;# 
   975  0009                     	;# 
   976  000A                     	;# 
   977  000B                     	;# 
   978  000C                     	;# 
   979  000E                     	;# 
   980  0011                     	;# 
   981  0012                     	;# 
   982  0015                     	;# 
   983  0016                     	;# 
   984  0016                     	;# 
   985  0017                     	;# 
   986  0018                     	;# 
   987  0019                     	;# 
   988  001A                     	;# 
   989  001B                     	;# 
   990  001C                     	;# 
   991  001E                     	;# 
   992  001F                     	;# 
   993  008C                     	;# 
   994  008E                     	;# 
   995  0091                     	;# 
   996  0092                     	;# 
   997  0095                     	;# 
   998  0096                     	;# 
   999  0097                     	;# 
  1000  0098                     	;# 
  1001  0099                     	;# 
  1002  009A                     	;# 
  1003  009B                     	;# 
  1004  009B                     	;# 
  1005  009C                     	;# 
  1006  009D                     	;# 
  1007  009E                     	;# 
  1008  010C                     	;# 
  1009  010E                     	;# 
  1010  0111                     	;# 
  1011  0112                     	;# 
  1012  0113                     	;# 
  1013  0114                     	;# 
  1014  0115                     	;# 
  1015  0116                     	;# 
  1016  0117                     	;# 
  1017  0118                     	;# 
  1018  0119                     	;# 
  1019  011A                     	;# 
  1020  011B                     	;# 
  1021  011D                     	;# 
  1022  011D                     	;# 
  1023  018C                     	;# 
  1024  018E                     	;# 
  1025  0191                     	;# 
  1026  0191                     	;# 
  1027  0192                     	;# 
  1028  0193                     	;# 
  1029  0193                     	;# 
  1030  0193                     	;# 
  1031  0194                     	;# 
  1032  0195                     	;# 
  1033  0196                     	;# 
  1034  0199                     	;# 
  1035  019A                     	;# 
  1036  019B                     	;# 
  1037  019B                     	;# 
  1038  019B                     	;# 
  1039  019B                     	;# 
  1040  019C                     	;# 
  1041  019C                     	;# 
  1042  019D                     	;# 
  1043  019E                     	;# 
  1044  019F                     	;# 
  1045  020C                     	;# 
  1046  020E                     	;# 
  1047  0211                     	;# 
  1048  0211                     	;# 
  1049  0212                     	;# 
  1050  0212                     	;# 
  1051  0213                     	;# 
  1052  0213                     	;# 
  1053  0214                     	;# 
  1054  0214                     	;# 
  1055  0215                     	;# 
  1056  0215                     	;# 
  1057  0215                     	;# 
  1058  0216                     	;# 
  1059  0216                     	;# 
  1060  0217                     	;# 
  1061  0217                     	;# 
  1062  0291                     	;# 
  1063  0291                     	;# 
  1064  0292                     	;# 
  1065  0293                     	;# 
  1066  0294                     	;# 
  1067  0295                     	;# 
  1068  0295                     	;# 
  1069  0296                     	;# 
  1070  0391                     	;# 
  1071  0392                     	;# 
  1072  0393                     	;# 
  1073  039A                     	;# 
  1074  039C                     	;# 
  1075  039D                     	;# 
  1076  039E                     	;# 
  1077  039F                     	;# 
  1078  0FE4                     	;# 
  1079  0FE5                     	;# 
  1080  0FE6                     	;# 
  1081  0FE7                     	;# 
  1082  0FE8                     	;# 
  1083  0FE9                     	;# 
  1084  0FEA                     	;# 
  1085  0FEB                     	;# 
  1086  0FED                     	;# 
  1087  0FEE                     	;# 
  1088  0FEF                     	;# 
  1089  0000                     	;# 
  1090  0001                     	;# 
  1091  0002                     	;# 
  1092  0003                     	;# 
  1093  0004                     	;# 
  1094  0005                     	;# 
  1095  0006                     	;# 
  1096  0007                     	;# 
  1097  0008                     	;# 
  1098  0009                     	;# 
  1099  000A                     	;# 
  1100  000B                     	;# 
  1101  000C                     	;# 
  1102  000E                     	;# 
  1103  0011                     	;# 
  1104  0012                     	;# 
  1105  0015                     	;# 
  1106  0016                     	;# 
  1107  0016                     	;# 
  1108  0017                     	;# 
  1109  0018                     	;# 
  1110  0019                     	;# 
  1111  001A                     	;# 
  1112  001B                     	;# 
  1113  001C                     	;# 
  1114  001E                     	;# 
  1115  001F                     	;# 
  1116  008C                     	;# 
  1117  008E                     	;# 
  1118  0091                     	;# 
  1119  0092                     	;# 
  1120  0095                     	;# 
  1121  0096                     	;# 
  1122  0097                     	;# 
  1123  0098                     	;# 
  1124  0099                     	;# 
  1125  009A                     	;# 
  1126  009B                     	;# 
  1127  009B                     	;# 
  1128  009C                     	;# 
  1129  009D                     	;# 
  1130  009E                     	;# 
  1131  010C                     	;# 
  1132  010E                     	;# 
  1133  0111                     	;# 
  1134  0112                     	;# 
  1135  0113                     	;# 
  1136  0114                     	;# 
  1137  0115                     	;# 
  1138  0116                     	;# 
  1139  0117                     	;# 
  1140  0118                     	;# 
  1141  0119                     	;# 
  1142  011A                     	;# 
  1143  011B                     	;# 
  1144  011D                     	;# 
  1145  011D                     	;# 
  1146  018C                     	;# 
  1147  018E                     	;# 
  1148  0191                     	;# 
  1149  0191                     	;# 
  1150  0192                     	;# 
  1151  0193                     	;# 
  1152  0193                     	;# 
  1153  0193                     	;# 
  1154  0194                     	;# 
  1155  0195                     	;# 
  1156  0196                     	;# 
  1157  0199                     	;# 
  1158  019A                     	;# 
  1159  019B                     	;# 
  1160  019B                     	;# 
  1161  019B                     	;# 
  1162  019B                     	;# 
  1163  019C                     	;# 
  1164  019C                     	;# 
  1165  019D                     	;# 
  1166  019E                     	;# 
  1167  019F                     	;# 
  1168  020C                     	;# 
  1169  020E                     	;# 
  1170  0211                     	;# 
  1171  0211                     	;# 
  1172  0212                     	;# 
  1173  0212                     	;# 
  1174  0213                     	;# 
  1175  0213                     	;# 
  1176  0214                     	;# 
  1177  0214                     	;# 
  1178  0215                     	;# 
  1179  0215                     	;# 
  1180  0215                     	;# 
  1181  0216                     	;# 
  1182  0216                     	;# 
  1183  0217                     	;# 
  1184  0217                     	;# 
  1185  0291                     	;# 
  1186  0291                     	;# 
  1187  0292                     	;# 
  1188  0293                     	;# 
  1189  0294                     	;# 
  1190  0295                     	;# 
  1191  0295                     	;# 
  1192  0296                     	;# 
  1193  0391                     	;# 
  1194  0392                     	;# 
  1195  0393                     	;# 
  1196  039A                     	;# 
  1197  039C                     	;# 
  1198  039D                     	;# 
  1199  039E                     	;# 
  1200  039F                     	;# 
  1201  0FE4                     	;# 
  1202  0FE5                     	;# 
  1203  0FE6                     	;# 
  1204  0FE7                     	;# 
  1205  0FE8                     	;# 
  1206  0FE9                     	;# 
  1207  0FEA                     	;# 
  1208  0FEB                     	;# 
  1209  0FED                     	;# 
  1210  0FEE                     	;# 
  1211  0FEF                     	;# 
  1212  0000                     	;# 
  1213  0001                     	;# 
  1214  0002                     	;# 
  1215  0003                     	;# 
  1216  0004                     	;# 
  1217  0005                     	;# 
  1218  0006                     	;# 
  1219  0007                     	;# 
  1220  0008                     	;# 
  1221  0009                     	;# 
  1222  000A                     	;# 
  1223  000B                     	;# 
  1224  000C                     	;# 
  1225  000E                     	;# 
  1226  0011                     	;# 
  1227  0012                     	;# 
  1228  0015                     	;# 
  1229  0016                     	;# 
  1230  0016                     	;# 
  1231  0017                     	;# 
  1232  0018                     	;# 
  1233  0019                     	;# 
  1234  001A                     	;# 
  1235  001B                     	;# 
  1236  001C                     	;# 
  1237  001E                     	;# 
  1238  001F                     	;# 
  1239  008C                     	;# 
  1240  008E                     	;# 
  1241  0091                     	;# 
  1242  0092                     	;# 
  1243  0095                     	;# 
  1244  0096                     	;# 
  1245  0097                     	;# 
  1246  0098                     	;# 
  1247  0099                     	;# 
  1248  009A                     	;# 
  1249  009B                     	;# 
  1250  009B                     	;# 
  1251  009C                     	;# 
  1252  009D                     	;# 
  1253  009E                     	;# 
  1254  010C                     	;# 
  1255  010E                     	;# 
  1256  0111                     	;# 
  1257  0112                     	;# 
  1258  0113                     	;# 
  1259  0114                     	;# 
  1260  0115                     	;# 
  1261  0116                     	;# 
  1262  0117                     	;# 
  1263  0118                     	;# 
  1264  0119                     	;# 
  1265  011A                     	;# 
  1266  011B                     	;# 
  1267  011D                     	;# 
  1268  011D                     	;# 
  1269  018C                     	;# 
  1270  018E                     	;# 
  1271  0191                     	;# 
  1272  0191                     	;# 
  1273  0192                     	;# 
  1274  0193                     	;# 
  1275  0193                     	;# 
  1276  0193                     	;# 
  1277  0194                     	;# 
  1278  0195                     	;# 
  1279  0196                     	;# 
  1280  0199                     	;# 
  1281  019A                     	;# 
  1282  019B                     	;# 
  1283  019B                     	;# 
  1284  019B                     	;# 
  1285  019B                     	;# 
  1286  019C                     	;# 
  1287  019C                     	;# 
  1288  019D                     	;# 
  1289  019E                     	;# 
  1290  019F                     	;# 
  1291  020C                     	;# 
  1292  020E                     	;# 
  1293  0211                     	;# 
  1294  0211                     	;# 
  1295  0212                     	;# 
  1296  0212                     	;# 
  1297  0213                     	;# 
  1298  0213                     	;# 
  1299  0214                     	;# 
  1300  0214                     	;# 
  1301  0215                     	;# 
  1302  0215                     	;# 
  1303  0215                     	;# 
  1304  0216                     	;# 
  1305  0216                     	;# 
  1306  0217                     	;# 
  1307  0217                     	;# 
  1308  0291                     	;# 
  1309  0291                     	;# 
  1310  0292                     	;# 
  1311  0293                     	;# 
  1312  0294                     	;# 
  1313  0295                     	;# 
  1314  0295                     	;# 
  1315  0296                     	;# 
  1316  0391                     	;# 
  1317  0392                     	;# 
  1318  0393                     	;# 
  1319  039A                     	;# 
  1320  039C                     	;# 
  1321  039D                     	;# 
  1322  039E                     	;# 
  1323  039F                     	;# 
  1324  0FE4                     	;# 
  1325  0FE5                     	;# 
  1326  0FE6                     	;# 
  1327  0FE7                     	;# 
  1328  0FE8                     	;# 
  1329  0FE9                     	;# 
  1330  0FEA                     	;# 
  1331  0FEB                     	;# 
  1332  0FED                     	;# 
  1333  0FEE                     	;# 
  1334  0FEF                     	;# 
  1335                           
  1336                           	psect	stringtext1
  1337  0769                     __pstringtext1:
  1338  0769                     _ROTATION_TIME:
  1339  0769  343C               	retlw	60
  1340  076A  3400               	retlw	0
  1341  076B  3400               	retlw	0
  1342  076C                     __end_of_ROTATION_TIME:
  1343                           
  1344                           	psect	stringtext2
  1345  076C                     __pstringtext2:
  1346  076C                     _GOOD_WSP_VOLTAGE:
  1347  076C  3440               	retlw	64
  1348  076D  349C               	retlw	156
  1349  076E  3400               	retlw	0
  1350  076F                     __end_of_GOOD_WSP_VOLTAGE:
  1351                           
  1352                           	psect	stringtext3
  1353  076F                     __pstringtext3:
  1354  076F                     _BAD_WSP_VOLTAGE:
  1355  076F  3420               	retlw	32
  1356  0770  344E               	retlw	78
  1357  0771  3400               	retlw	0
  1358  0772                     __end_of_BAD_WSP_VOLTAGE:
  1359                           
  1360                           	psect	nvBANK0
  1361  0060                     __pnvBANK0:
  1362  0060                     _TMR0_InterruptHandler:
  1363  0060                     	ds	2
  1364  0062                     _TMR2_InterruptHandler:
  1365  0062                     	ds	2
  1366  0064                     _timer0ReloadVal:
  1367  0064                     	ds	1
  1368  0015                     _TMR0	set	21
  1369  001C                     _T2CONbits	set	28
  1370  001C                     _T2CON	set	28
  1371  001A                     _TMR2	set	26
  1372  001B                     _PR2	set	27
  1373  0011                     _PIR1bits	set	17
  1374  000B                     _INTCONbits	set	11
  1375  005F                     _GIE	set	95
  1376  008E                     _TRISCbits	set	142
  1377  008C                     _TRISAbits	set	140
  1378  0095                     _OPTION_REG	set	149
  1379  0091                     _PIE1bits	set	145
  1380  0095                     _OPTION_REGbits	set	149
  1381  008E                     _TRISC	set	142
  1382  008C                     _TRISA	set	140
  1383  009D                     _ADCON0bits	set	157
  1384  009D                     _ADCON0	set	157
  1385  009C                     _ADRESH	set	156
  1386  009B                     _ADRESL	set	155
  1387  009E                     _ADCON1	set	158
  1388  0097                     _WDTCON	set	151
  1389  0098                     _OSCTUNE	set	152
  1390  0099                     _OSCCON	set	153
  1391  010E                     _LATCbits	set	270
  1392  010C                     _LATAbits	set	268
  1393  0117                     _FVRCONbits	set	279
  1394  0117                     _FVRCON	set	279
  1395  011D                     _APFCON	set	285
  1396  010E                     _LATC	set	270
  1397  010C                     _LATA	set	268
  1398  0116                     _BORCON	set	278
  1399  0191                     _EEADR	set	401
  1400  0196                     _EECON2	set	406
  1401  0193                     _EEDATA	set	403
  1402  018C                     _ANSELAbits	set	396
  1403  018E                     _ANSELCbits	set	398
  1404  018C                     _ANSELA	set	396
  1405  018E                     _ANSELC	set	398
  1406  0CA8                     _RD	set	3240
  1407  0CAA                     _WREN	set	3242
  1408  0CA9                     _WR	set	3241
  1409  020E                     _WPUCbits	set	526
  1410  020C                     _WPUAbits	set	524
  1411  020E                     _WPUC	set	526
  1412  020C                     _WPUA	set	524
  1413                           
  1414                           	psect	cinit
  1415  0027                     start_initialization:	
  1416                           ; #config settings
  1417                           
  1418  0027                     __initialization:
  1419                           
  1420                           ; Clear objects allocated to COMMON
  1421  0027  01F8               	clrf	__pbssCOMMON& (0+127)
  1422  0028  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  1423  0029  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  1424  002A  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  1425  002B  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  1426                           
  1427                           ; Clear objects allocated to BANK0
  1428  002C  3049               	movlw	low __pbssBANK0
  1429  002D  0084               	movwf	4
  1430  002E  3000               	movlw	high __pbssBANK0
  1431  002F  0085               	movwf	5
  1432  0030  3017               	movlw	23
  1433  0031  3187  2740  3180   	fcall	clear_ram0
  1434                           
  1435                           ; Clear objects allocated to BANK1
  1436  0034  30A0               	movlw	low __pbssBANK1
  1437  0035  0084               	movwf	4
  1438  0036  3000               	movlw	high __pbssBANK1
  1439  0037  0085               	movwf	5
  1440  0038  3010               	movlw	16
  1441  0039  3187  2740  3180   	fcall	clear_ram0
  1442  003C                     end_of_initialization:	
  1443                           ;End of C runtime variable initialization code
  1444                           
  1445  003C                     __end_of__initialization:
  1446  003C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1447  003D  0020               	movlb	0
  1448  003E  2DFE               	ljmp	_main	;jump to C main() function
  1449                           
  1450                           	psect	bssCOMMON
  1451  0078                     __pbssCOMMON:
  1452  0078                     TMR2_ISR@CountCallBack:
  1453  0078                     	ds	2
  1454  007A                     sec_tick_work@iled:
  1455  007A                     	ds	1
  1456  007B                     get_measure@measures:
  1457  007B                     	ds	1
  1458  007C                     _FLAGS:
  1459  007C                     	ds	1
  1460                           
  1461                           	psect	bssBANK0
  1462  0049                     __pbssBANK0:
  1463  0049                     get_time@F2658:
  1464  0049                     	ds	9
  1465  0052                     get_time@F2660:
  1466  0052                     	ds	3
  1467  0055                     _time_s:
  1468  0055                     	ds	3
  1469  0058                     _ADC_InterruptHandler:
  1470  0058                     	ds	2
  1471  005A                     get_jump_full@jump_counter:
  1472  005A                     	ds	1
  1473  005B                     get_jump@jump_counter:
  1474  005B                     	ds	1
  1475  005C                     get_fun_full@fun_counter:
  1476  005C                     	ds	1
  1477  005D                     get_fun@fun_counter:
  1478  005D                     	ds	1
  1479  005E                     _time_pow_s:
  1480  005E                     	ds	1
  1481  005F                     _START_EEPROM_ADR:
  1482  005F                     	ds	1
  1483                           
  1484                           	psect	bssBANK1
  1485  00A0                     __pbssBANK1:
  1486  00A0                     get_adr@F2638:
  1487  00A0                     	ds	16
  1488                           
  1489                           	psect	clrtext
  1490  0740                     clear_ram0:	
  1491                           ;	Called with FSR0 containing the base address, and
  1492                           ;	WREG with the size to clear
  1493                           
  1494  0740  0064               	clrwdt	;clear the watchdog before getting into this loop
  1495  0741                     clrloop0:
  1496  0741  0180               	clrf	0	;clear RAM location pointed to by FSR
  1497  0742  3101               	addfsr 0,1
  1498  0743  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1499  0744  2F41               	goto	clrloop0	;have we reached the end yet?
  1500  0745  3400               	retlw	0	;all done for this memory range, return
  1501                           
  1502                           	psect	cstackCOMMON
  1503  0070                     __pcstackCOMMON:
  1504  0070                     ?_PIN_MANAGER_Initialize:
  1505  0070                     ?_OSCILLATOR_Initialize:	
  1506                           ; 1 bytes @ 0x0
  1507                           
  1508  0070                     ?_WDT_Initialize:	
  1509                           ; 1 bytes @ 0x0
  1510                           
  1511  0070                     ?_FVR_Initialize:	
  1512                           ; 1 bytes @ 0x0
  1513                           
  1514  0070                     ?_ADC_Initialize:	
  1515                           ; 1 bytes @ 0x0
  1516                           
  1517  0070                     ?_TMR2_Initialize:	
  1518                           ; 1 bytes @ 0x0
  1519                           
  1520  0070                     ?_TMR0_Initialize:	
  1521                           ; 1 bytes @ 0x0
  1522                           
  1523  0070                     ?_TMR0_ISR:	
  1524                           ; 1 bytes @ 0x0
  1525                           
  1526  0070                     ??_TMR0_ISR:	
  1527                           ; 1 bytes @ 0x0
  1528                           
  1529  0070                     ?_TMR2_ISR:	
  1530                           ; 1 bytes @ 0x0
  1531                           
  1532  0070                     ?_TMR2_DefaultInterruptHandler:	
  1533                           ; 1 bytes @ 0x0
  1534                           
  1535  0070                     ??_TMR2_DefaultInterruptHandler:	
  1536                           ; 1 bytes @ 0x0
  1537                           
  1538  0070                     ?_TMR2_CallBack:	
  1539                           ; 1 bytes @ 0x0
  1540                           
  1541  0070                     ?_TMR0_DefaultInterruptHandler:	
  1542                           ; 1 bytes @ 0x0
  1543                           
  1544  0070                     ??_TMR0_DefaultInterruptHandler:	
  1545                           ; 1 bytes @ 0x0
  1546                           
  1547  0070                     ?_EEPROM_ReadByte:	
  1548                           ; 1 bytes @ 0x0
  1549                           
  1550  0070                     ?_SYSTEM_Initialize:	
  1551                           ; 1 bytes @ 0x0
  1552                           
  1553  0070                     ?_INTERRUPT_InterruptManager:	
  1554                           ; 1 bytes @ 0x0
  1555                           
  1556  0070                     ?_TMR2_StartTimer:	
  1557                           ; 1 bytes @ 0x0
  1558                           
  1559  0070                     ?_switch_zum:	
  1560                           ; 1 bytes @ 0x0
  1561                           
  1562  0070                     ?_toggle_tone:	
  1563                           ; 1 bytes @ 0x0
  1564                           
  1565  0070                     ??_toggle_tone:	
  1566                           ; 1 bytes @ 0x0
  1567                           
  1568  0070                     ?_go_close:	
  1569                           ; 1 bytes @ 0x0
  1570                           
  1571  0070                     ?_go_open:	
  1572                           ; 1 bytes @ 0x0
  1573                           
  1574  0070                     ?_go_close_alt:	
  1575                           ; 1 bytes @ 0x0
  1576                           
  1577  0070                     ?_go_open_alt:	
  1578                           ; 1 bytes @ 0x0
  1579                           
  1580  0070                     ?_start_alarm:	
  1581                           ; 1 bytes @ 0x0
  1582                           
  1583  0070                     ?_get_measure:	
  1584                           ; 1 bytes @ 0x0
  1585                           
  1586  0070                     ?_get_fun:	
  1587                           ; 1 bytes @ 0x0
  1588                           
  1589  0070                     ?_get_fun_full:	
  1590                           ; 1 bytes @ 0x0
  1591                           
  1592  0070                     ?_get_jump:	
  1593                           ; 1 bytes @ 0x0
  1594                           
  1595  0070                     ?_get_jump_full:	
  1596                           ; 1 bytes @ 0x0
  1597                           
  1598  0070                     ?_rele_tick:	
  1599                           ; 1 bytes @ 0x0
  1600                           
  1601  0070                     ??_rele_tick:	
  1602                           ; 1 bytes @ 0x0
  1603                           
  1604  0070                     ?_sec_tick_work:	
  1605                           ; 1 bytes @ 0x0
  1606                           
  1607  0070                     ?_povorot:	
  1608                           ; 1 bytes @ 0x0
  1609                           
  1610  0070                     ?_fun_work:	
  1611                           ; 1 bytes @ 0x0
  1612                           
  1613  0070                     ?_switch_wm:	
  1614                           ; 1 bytes @ 0x0
  1615                           
  1616  0070                     ?_get_voltage:	
  1617                           ; 1 bytes @ 0x0
  1618                           
  1619  0070                     ?_get_adr:	
  1620                           ; 1 bytes @ 0x0
  1621                           
  1622  0070                     ?_get_time:	
  1623                           ; 1 bytes @ 0x0
  1624                           
  1625  0070                     ?_get_eeprom:	
  1626                           ; 1 bytes @ 0x0
  1627                           
  1628  0070                     ?_start_setup:	
  1629                           ; 1 bytes @ 0x0
  1630                           
  1631  0070                     ?_main:	
  1632                           ; 1 bytes @ 0x0
  1633                           
  1634  0070                     ?i1_switch_zum:	
  1635                           ; 1 bytes @ 0x0
  1636                           
  1637  0070                     ??i1_switch_zum:	
  1638                           ; 1 bytes @ 0x0
  1639                           
  1640  0070                     ?i1_go_close:	
  1641                           ; 1 bytes @ 0x0
  1642                           
  1643  0070                     ??i1_go_close:	
  1644                           ; 1 bytes @ 0x0
  1645                           
  1646  0070                     ?i1_go_close_alt:	
  1647                           ; 1 bytes @ 0x0
  1648                           
  1649  0070                     ??i1_go_close_alt:	
  1650                           ; 1 bytes @ 0x0
  1651                           
  1652  0070                     ?i1_ADC_GetConversion:	
  1653                           ; 1 bytes @ 0x0
  1654                           
  1655                           
  1656                           ; 2 bytes @ 0x0
  1657  0070                     	ds	2
  1658  0072                     ??_start_alarm:
  1659  0072                     ??i1_ADC_GetConversion:	
  1660                           ; 1 bytes @ 0x2
  1661                           
  1662                           
  1663                           ; 1 bytes @ 0x2
  1664  0072                     	ds	1
  1665  0073                     i1ADC_GetConversion@channel:
  1666                           
  1667                           ; 1 bytes @ 0x3
  1668  0073                     	ds	1
  1669  0074                     ??_get_measure:
  1670                           
  1671                           ; 1 bytes @ 0x4
  1672  0074                     	ds	1
  1673  0075                     get_measure@res:
  1674                           
  1675                           ; 2 bytes @ 0x5
  1676  0075                     	ds	2
  1677  0077                     ??_sec_tick_work:
  1678                           
  1679                           ; 1 bytes @ 0x7
  1680  0077                     	ds	1
  1681  0078                     ??_TMR2_ISR:
  1682  0078                     ??_TMR2_CallBack:	
  1683                           ; 1 bytes @ 0x8
  1684                           
  1685  0078                     ??_INTERRUPT_InterruptManager:	
  1686                           ; 1 bytes @ 0x8
  1687                           
  1688                           
  1689                           	psect	cstackBANK0
  1690  0020                     __pcstackBANK0:	
  1691                           ; 1 bytes @ 0x8
  1692                           
  1693  0020                     ??_PIN_MANAGER_Initialize:
  1694  0020                     ??_OSCILLATOR_Initialize:	
  1695                           ; 1 bytes @ 0x0
  1696                           
  1697  0020                     ??_WDT_Initialize:	
  1698                           ; 1 bytes @ 0x0
  1699                           
  1700  0020                     ??_FVR_Initialize:	
  1701                           ; 1 bytes @ 0x0
  1702                           
  1703  0020                     ??_ADC_Initialize:	
  1704                           ; 1 bytes @ 0x0
  1705                           
  1706  0020                     ?_TMR2_SetInterruptHandler:	
  1707                           ; 1 bytes @ 0x0
  1708                           
  1709  0020                     ?_TMR0_SetInterruptHandler:	
  1710                           ; 1 bytes @ 0x0
  1711                           
  1712  0020                     ??_EEPROM_ReadByte:	
  1713                           ; 1 bytes @ 0x0
  1714                           
  1715  0020                     ?_EEPROM_WriteByte:	
  1716                           ; 1 bytes @ 0x0
  1717                           
  1718  0020                     ??_TMR2_StartTimer:	
  1719                           ; 1 bytes @ 0x0
  1720                           
  1721  0020                     ??_switch_zum:	
  1722                           ; 1 bytes @ 0x0
  1723                           
  1724  0020                     ?_beep:	
  1725                           ; 1 bytes @ 0x0
  1726                           
  1727  0020                     ??_go_close:	
  1728                           ; 1 bytes @ 0x0
  1729                           
  1730  0020                     ??_go_open:	
  1731                           ; 1 bytes @ 0x0
  1732                           
  1733  0020                     ??_go_close_alt:	
  1734                           ; 1 bytes @ 0x0
  1735                           
  1736  0020                     ??_go_open_alt:	
  1737                           ; 1 bytes @ 0x0
  1738                           
  1739  0020                     ?___bmul:	
  1740                           ; 1 bytes @ 0x0
  1741                           
  1742  0020                     ?_ADC_GetConversion:	
  1743                           ; 1 bytes @ 0x0
  1744                           
  1745  0020                     beep@count:	
  1746                           ; 2 bytes @ 0x0
  1747                           
  1748  0020                     EEPROM_WriteByte@dt:	
  1749                           ; 1 bytes @ 0x0
  1750                           
  1751  0020                     ___bmul@multiplicand:	
  1752                           ; 1 bytes @ 0x0
  1753                           
  1754  0020                     TMR2_SetInterruptHandler@InterruptHandler:	
  1755                           ; 1 bytes @ 0x0
  1756                           
  1757  0020                     TMR0_SetInterruptHandler@InterruptHandler:	
  1758                           ; 2 bytes @ 0x0
  1759                           
  1760                           
  1761                           ; 2 bytes @ 0x0
  1762  0020                     	ds	1
  1763  0021                     ??_EEPROM_WriteByte:
  1764  0021                     ??_beep:	
  1765                           ; 1 bytes @ 0x1
  1766                           
  1767  0021                     ??___bmul:	
  1768                           ; 1 bytes @ 0x1
  1769                           
  1770                           
  1771                           ; 1 bytes @ 0x1
  1772  0021                     	ds	1
  1773  0022                     ??_TMR2_Initialize:
  1774  0022                     ??_TMR0_Initialize:	
  1775                           ; 1 bytes @ 0x2
  1776                           
  1777  0022                     ??_TMR2_SetInterruptHandler:	
  1778                           ; 1 bytes @ 0x2
  1779                           
  1780  0022                     ??_TMR0_SetInterruptHandler:	
  1781                           ; 1 bytes @ 0x2
  1782                           
  1783  0022                     ??_ADC_GetConversion:	
  1784                           ; 1 bytes @ 0x2
  1785                           
  1786  0022                     ??_povorot:	
  1787                           ; 1 bytes @ 0x2
  1788                           
  1789  0022                     EEPROM_ReadByte@addr:	
  1790                           ; 1 bytes @ 0x2
  1791                           
  1792  0022                     ___bmul@product:	
  1793                           ; 1 bytes @ 0x2
  1794                           
  1795                           
  1796                           ; 1 bytes @ 0x2
  1797  0022                     	ds	1
  1798  0023                     ??_SYSTEM_Initialize:
  1799  0023                     ??_get_adr:	
  1800                           ; 1 bytes @ 0x3
  1801                           
  1802  0023                     ?_EEPROM_ReadShortLong:	
  1803                           ; 1 bytes @ 0x3
  1804                           
  1805  0023                     ADC_GetConversion@channel:	
  1806                           ; 3 bytes @ 0x3
  1807                           
  1808  0023                     beep@time:	
  1809                           ; 1 bytes @ 0x3
  1810                           
  1811  0023                     EEPROM_WriteByte@addr:	
  1812                           ; 1 bytes @ 0x3
  1813                           
  1814  0023                     ___bmul@multiplier:	
  1815                           ; 1 bytes @ 0x3
  1816                           
  1817                           
  1818                           ; 1 bytes @ 0x3
  1819  0023                     	ds	1
  1820  0024                     ??_get_fun:
  1821  0024                     ??_get_fun_full:	
  1822                           ; 1 bytes @ 0x4
  1823                           
  1824  0024                     ??_get_jump:	
  1825                           ; 1 bytes @ 0x4
  1826                           
  1827  0024                     ??_get_jump_full:	
  1828                           ; 1 bytes @ 0x4
  1829                           
  1830  0024                     beep@j:	
  1831                           ; 1 bytes @ 0x4
  1832                           
  1833  0024                     EEPROM_WriteByte@status:	
  1834                           ; 1 bytes @ 0x4
  1835                           
  1836  0024                     get_adr@adr:	
  1837                           ; 1 bytes @ 0x4
  1838                           
  1839                           
  1840                           ; 16 bytes @ 0x4
  1841  0024                     	ds	1
  1842  0025                     ?_EEPROM_WriteShortLong:
  1843  0025                     beep@i:	
  1844                           ; 1 bytes @ 0x5
  1845                           
  1846  0025                     get_fun@res:	
  1847                           ; 1 bytes @ 0x5
  1848                           
  1849  0025                     get_fun_full@res:	
  1850                           ; 2 bytes @ 0x5
  1851                           
  1852  0025                     get_jump@res:	
  1853                           ; 2 bytes @ 0x5
  1854                           
  1855  0025                     get_jump_full@res:	
  1856                           ; 2 bytes @ 0x5
  1857                           
  1858  0025                     EEPROM_WriteShortLong@ucData:	
  1859                           ; 2 bytes @ 0x5
  1860                           
  1861                           
  1862                           ; 3 bytes @ 0x5
  1863  0025                     	ds	1
  1864  0026                     ??_EEPROM_ReadShortLong:
  1865  0026                     ??_fun_work:	
  1866                           ; 1 bytes @ 0x6
  1867                           
  1868  0026                     ??_switch_wm:	
  1869                           ; 1 bytes @ 0x6
  1870                           
  1871                           
  1872                           ; 1 bytes @ 0x6
  1873  0026                     	ds	1
  1874  0027                     get_fun_full@flag:
  1875  0027                     get_jump_full@flag:	
  1876                           ; 1 bytes @ 0x7
  1877                           
  1878                           
  1879                           ; 1 bytes @ 0x7
  1880  0027                     	ds	1
  1881  0028                     ??_EEPROM_WriteShortLong:
  1882                           
  1883                           ; 1 bytes @ 0x8
  1884  0028                     	ds	4
  1885  002C                     EEPROM_WriteShortLong@dt:
  1886  002C                     EEPROM_ReadShortLong@dt:	
  1887                           ; 1 bytes @ 0xC
  1888                           
  1889                           
  1890                           ; 3 bytes @ 0xC
  1891  002C                     	ds	1
  1892  002D                     EEPROM_WriteShortLong@addr:
  1893                           
  1894                           ; 1 bytes @ 0xD
  1895  002D                     	ds	1
  1896  002E                     ??_get_voltage:
  1897                           
  1898                           ; 1 bytes @ 0xE
  1899  002E                     	ds	1
  1900  002F                     EEPROM_ReadShortLong@addr:
  1901                           
  1902                           ; 1 bytes @ 0xF
  1903  002F                     	ds	1
  1904  0030                     ??_get_time:
  1905  0030                     get_voltage@res:	
  1906                           ; 1 bytes @ 0x10
  1907                           
  1908                           
  1909                           ; 2 bytes @ 0x10
  1910  0030                     	ds	2
  1911  0032                     get_voltage@buf:
  1912                           
  1913                           ; 1 bytes @ 0x12
  1914  0032                     	ds	1
  1915  0033                     get_voltage@q_800:
  1916                           
  1917                           ; 1 bytes @ 0x13
  1918  0033                     	ds	1
  1919  0034                     get_voltage@q:
  1920  0034                     get_adr@i:	
  1921                           ; 1 bytes @ 0x14
  1922                           
  1923  0034                     get_time@times:	
  1924                           ; 1 bytes @ 0x14
  1925                           
  1926                           
  1927                           ; 9 bytes @ 0x14
  1928  0034                     	ds	1
  1929  0035                     get_adr@q:
  1930                           
  1931                           ; 1 bytes @ 0x15
  1932  0035                     	ds	1
  1933  0036                     get_adr@i_810:
  1934                           
  1935                           ; 1 bytes @ 0x16
  1936  0036                     	ds	1
  1937  0037                     get_adr@q_809:
  1938                           
  1939                           ; 1 bytes @ 0x17
  1940  0037                     	ds	1
  1941  0038                     get_adr@buf:
  1942                           
  1943                           ; 1 bytes @ 0x18
  1944  0038                     	ds	5
  1945  003D                     get_time@adr_error:
  1946                           
  1947                           ; 1 bytes @ 0x1D
  1948  003D                     	ds	1
  1949  003E                     get_time@time_count:
  1950                           
  1951                           ; 3 bytes @ 0x1E
  1952  003E                     	ds	3
  1953  0041                     get_time@buf2:
  1954                           
  1955                           ; 3 bytes @ 0x21
  1956  0041                     	ds	3
  1957  0044                     get_time@i:
  1958                           
  1959                           ; 1 bytes @ 0x24
  1960  0044                     	ds	1
  1961  0045                     get_time@buf:
  1962                           
  1963                           ; 1 bytes @ 0x25
  1964  0045                     	ds	1
  1965  0046                     get_time@q:
  1966                           
  1967                           ; 1 bytes @ 0x26
  1968  0046                     	ds	1
  1969  0047                     get_time@q_822:
  1970                           
  1971                           ; 1 bytes @ 0x27
  1972  0047                     	ds	1
  1973  0048                     get_time@q_821:
  1974                           
  1975                           ; 1 bytes @ 0x28
  1976  0048                     	ds	1
  1977  0049                     ??_get_eeprom:
  1978  0049                     ??_start_setup:	
  1979                           ; 1 bytes @ 0x29
  1980                           
  1981  0049                     ??_main:	
  1982                           ; 1 bytes @ 0x29
  1983                           
  1984                           
  1985                           	psect	maintext
  1986  05FE                     __pmaintext:	
  1987                           ; 1 bytes @ 0x29
  1988 ;;
  1989 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1990 ;;
  1991 ;; *************** function _main *****************
  1992 ;; Defined at:
  1993 ;;		line 513 in file "main.c"
  1994 ;; Parameters:    Size  Location     Type
  1995 ;;		None
  1996 ;; Auto vars:     Size  Location     Type
  1997 ;;		None
  1998 ;; Return value:  Size  Location     Type
  1999 ;;                  1    wreg      void 
  2000 ;; Registers used:
  2001 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2002 ;; Tracked objects:
  2003 ;;		On entry : B1F/0
  2004 ;;		On exit  : 0/0
  2005 ;;		Unchanged: 0/0
  2006 ;; Data sizes:     COMMON   BANK0   BANK1
  2007 ;;      Params:         0       0       0
  2008 ;;      Locals:         0       0       0
  2009 ;;      Temps:          0       0       0
  2010 ;;      Totals:         0       0       0
  2011 ;;Total ram usage:        0 bytes
  2012 ;; Hardware stack levels required when called: 12
  2013 ;; This function calls:
  2014 ;;		_fun_work
  2015 ;;		_get_fun
  2016 ;;		_get_jump
  2017 ;;		_get_voltage
  2018 ;;		_povorot
  2019 ;;		_start_setup
  2020 ;;		_switch_wm
  2021 ;; This function is called by:
  2022 ;;		Startup code after reset
  2023 ;; This function uses a non-reentrant model
  2024 ;;
  2025                           
  2026  05FE                     _main:	
  2027                           ;psect for function _main
  2028                           
  2029  05FE                     l2671:	
  2030                           ;incstack = 0
  2031                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2032                           
  2033                           
  2034                           ;main.c: 515:     start_setup();
  2035  05FE  3184  2480  3185   	fcall	_start_setup
  2036  0601                     l2673:
  2037                           
  2038                           ;main.c: 518:         get_voltage();
  2039  0601  3181  21D5  3185   	fcall	_get_voltage
  2040  0604                     l2675:
  2041                           
  2042                           ;main.c: 519:         if (!FLAGS.bits.ALARM) {
  2043  0604  187C               	btfsc	_FLAGS,0
  2044  0605  2E07               	goto	u2081
  2045  0606  2E08               	goto	u2080
  2046  0607                     u2081:
  2047  0607  2E01               	goto	l2673
  2048  0608                     u2080:
  2049  0608                     l2677:
  2050                           
  2051                           ;main.c: 520:             get_fun();
  2052  0608  3184  2408  3185   	fcall	_get_fun
  2053                           
  2054                           ;main.c: 521:             fun_work();
  2055  060B  3183  2345  3185   	fcall	_fun_work
  2056                           
  2057                           ;main.c: 522:             get_jump();
  2058  060E  3184  2446  3185   	fcall	_get_jump
  2059                           
  2060                           ;main.c: 523:             switch_wm();
  2061  0611  3184  24EA  3185   	fcall	_switch_wm
  2062                           
  2063                           ;main.c: 524:             povorot();
  2064  0614  3182  22BE  3185   	fcall	_povorot
  2065  0617  2E01               	goto	l2673
  2066  0618  2826               	ljmp	start
  2067  0619                     __end_of_main:
  2068                           
  2069                           	psect	text1
  2070  04EA                     __ptext1:	
  2071 ;; *************** function _switch_wm *****************
  2072 ;; Defined at:
  2073 ;;		line 372 in file "main.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;		None
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;		None
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  1    wreg      void 
  2080 ;; Registers used:
  2081 ;;		wreg, status,2, status,0, pclath, cstack
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMMON   BANK0   BANK1
  2087 ;;      Params:         0       0       0
  2088 ;;      Locals:         0       0       0
  2089 ;;      Temps:          0       1       0
  2090 ;;      Totals:         0       1       0
  2091 ;;Total ram usage:        1 bytes
  2092 ;; Hardware stack levels used: 1
  2093 ;; Hardware stack levels required when called: 9
  2094 ;; This function calls:
  2095 ;;		_beep
  2096 ;;		_go_close
  2097 ;;		_go_close_alt
  2098 ;; This function is called by:
  2099 ;;		_main
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103  04EA                     _switch_wm:	
  2104                           ;psect for function _switch_wm
  2105                           
  2106  04EA                     l2555:	
  2107                           ;incstack = 0
  2108                           ; Regs used in _switch_wm: [wreg+status,2+status,0+pclath+cstack]
  2109                           
  2110                           
  2111                           ;main.c: 373:     if (FLAGS.bits._JUMP_CONNECTED) {
  2112  04EA  1E7C               	btfss	_FLAGS,4
  2113  04EB  2CED               	goto	u1941
  2114  04EC  2CEE               	goto	u1940
  2115  04ED                     u1941:
  2116  04ED  2D04               	goto	l445
  2117  04EE                     u1940:
  2118  04EE                     l2557:
  2119                           
  2120                           ;main.c: 374:         if (FLAGS.bits.NORMAL_WORK_MODE) {
  2121  04EE  1CFC               	btfss	_FLAGS,1
  2122  04EF  2CF1               	goto	u1951
  2123  04F0  2CF2               	goto	u1950
  2124  04F1                     u1951:
  2125  04F1  2D19               	goto	l451
  2126  04F2                     u1950:
  2127  04F2                     l2559:
  2128                           
  2129                           ;main.c: 375:             FLAGS.bits.NORMAL_WORK_MODE = 0;
  2130  04F2  10FC               	bcf	_FLAGS,1
  2131                           
  2132                           ;main.c: 376:             if (FLAGS.bits.CLOSED) go_close_alt();
  2133  04F3  1D7C               	btfss	_FLAGS,2
  2134  04F4  2CF6               	goto	u1961
  2135  04F5  2CF7               	goto	u1960
  2136  04F6                     u1961:
  2137  04F6  2CFA               	goto	l2563
  2138  04F7                     u1960:
  2139  04F7                     l2561:
  2140  04F7  3187  2757  3184   	fcall	_go_close_alt
  2141  04FA                     l2563:
  2142                           
  2143                           ;main.c: 378:             beep( 40, 3);
  2144  04FA  3003               	movlw	3
  2145  04FB  0020               	movlb	0	; select bank0
  2146  04FC  00A6               	movwf	??_switch_wm
  2147  04FD  0826               	movf	??_switch_wm,w
  2148  04FE  00A0               	movwf	beep@count
  2149  04FF  3028               	movlw	40
  2150  0500  3185  251A  3184   	fcall	_beep
  2151  0503  2D19               	goto	l451
  2152  0504                     l445:
  2153                           
  2154                           ;main.c: 381:         if (!FLAGS.bits.NORMAL_WORK_MODE) {
  2155  0504  18FC               	btfsc	_FLAGS,1
  2156  0505  2D07               	goto	u1971
  2157  0506  2D08               	goto	u1970
  2158  0507                     u1971:
  2159  0507  2D19               	goto	l451
  2160  0508                     u1970:
  2161  0508                     l2565:
  2162                           
  2163                           ;main.c: 382:             FLAGS.bits.NORMAL_WORK_MODE = 1;
  2164  0508  14FC               	bsf	_FLAGS,1
  2165                           
  2166                           ;main.c: 383:             if (FLAGS.bits.CLOSED) go_close();
  2167  0509  1D7C               	btfss	_FLAGS,2
  2168  050A  2D0C               	goto	u1981
  2169  050B  2D0D               	goto	u1980
  2170  050C                     u1981:
  2171  050C  2D10               	goto	l450
  2172  050D                     u1980:
  2173  050D                     l2567:
  2174  050D  3185  25C0  3184   	fcall	_go_close
  2175  0510                     l450:
  2176                           
  2177                           ;main.c: 385:             beep(40, 2);
  2178  0510  3002               	movlw	2
  2179  0511  0020               	movlb	0	; select bank0
  2180  0512  00A6               	movwf	??_switch_wm
  2181  0513  0826               	movf	??_switch_wm,w
  2182  0514  00A0               	movwf	beep@count
  2183  0515  3028               	movlw	40
  2184  0516  3185  251A  3184   	fcall	_beep
  2185  0519                     l451:
  2186  0519  0008               	return
  2187  051A                     __end_of_switch_wm:
  2188                           
  2189                           	psect	text2
  2190  0480                     __ptext2:	
  2191 ;; *************** function _start_setup *****************
  2192 ;; Defined at:
  2193 ;;		line 478 in file "main.c"
  2194 ;; Parameters:    Size  Location     Type
  2195 ;;		None
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;		None
  2198 ;; Return value:  Size  Location     Type
  2199 ;;                  1    wreg      void 
  2200 ;; Registers used:
  2201 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2202 ;; Tracked objects:
  2203 ;;		On entry : 0/0
  2204 ;;		On exit  : 0/0
  2205 ;;		Unchanged: 0/0
  2206 ;; Data sizes:     COMMON   BANK0   BANK1
  2207 ;;      Params:         0       0       0
  2208 ;;      Locals:         0       0       0
  2209 ;;      Temps:          0       0       0
  2210 ;;      Totals:         0       0       0
  2211 ;;Total ram usage:        0 bytes
  2212 ;; Hardware stack levels used: 1
  2213 ;; Hardware stack levels required when called: 11
  2214 ;; This function calls:
  2215 ;;		_SYSTEM_Initialize
  2216 ;;		_TMR0_SetInterruptHandler
  2217 ;;		_TMR2_SetInterruptHandler
  2218 ;;		_TMR2_StartTimer
  2219 ;;		_get_eeprom
  2220 ;;		_get_fun_full
  2221 ;;		_get_jump_full
  2222 ;; This function is called by:
  2223 ;;		_main
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227  0480                     _start_setup:	
  2228                           ;psect for function _start_setup
  2229                           
  2230  0480                     l2597:	
  2231                           ;incstack = 0
  2232                           ; Regs used in _start_setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2233                           
  2234                           
  2235                           ;main.c: 480:     SYSTEM_Initialize();
  2236  0480  3186  2663  3184   	fcall	_SYSTEM_Initialize
  2237  0483                     l2599:
  2238                           
  2239                           ;main.c: 481:     (INTCONbits.GIE = 1);
  2240  0483  178B               	bsf	11,7	;volatile
  2241  0484                     l2601:
  2242                           
  2243                           ;main.c: 482:     (INTCONbits.PEIE = 1);
  2244  0484  170B               	bsf	11,6	;volatile
  2245  0485                     l2603:
  2246                           
  2247                           ;main.c: 484:     get_eeprom();
  2248  0485  3187  2732  3184   	fcall	_get_eeprom
  2249  0488                     l2605:
  2250                           
  2251                           ;main.c: 485:     TMR0_SetInterruptHandler(switch_zum);
  2252  0488  30CC               	movlw	low _switch_zum
  2253  0489  0020               	movlb	0	; select bank0
  2254  048A  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2255  048B  3006               	movlw	high _switch_zum
  2256  048C  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2257  048D  3187  274C  3184   	fcall	_TMR0_SetInterruptHandler
  2258  0490                     l2607:
  2259                           
  2260                           ;main.c: 486:     TMR2_SetInterruptHandler(sec_tick_work);
  2261  0490  3088               	movlw	low _sec_tick_work
  2262  0491  0020               	movlb	0	; select bank0
  2263  0492  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  2264  0493  3003               	movlw	high _sec_tick_work
  2265  0494  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  2266  0495  3187  2746  3184   	fcall	_TMR2_SetInterruptHandler
  2267  0498                     l2609:
  2268                           
  2269                           ;main.c: 487:     TMR2_StartTimer();
  2270  0498  3187  2772  3184   	fcall	_TMR2_StartTimer
  2271  049B                     l2611:
  2272  049B  0023               	movlb	3	; select bank3
  2273  049C  118E               	bcf	14,3	;volatile
  2274  049D                     l2613:
  2275  049D  108C               	bcf	12,1	;volatile
  2276  049E                     l2615:
  2277  049E  110E               	bcf	14,2	;volatile
  2278  049F                     l2617:
  2279  049F  0024               	movlb	4	; select bank4
  2280  04A0  108C               	bcf	12,1	;volatile
  2281  04A1                     l2619:
  2282  04A1  0021               	movlb	1	; select bank1
  2283  04A2  148C               	bsf	12,1	;volatile
  2284  04A3                     l2621:
  2285  04A3  0024               	movlb	4	; select bank4
  2286  04A4  110E               	bcf	14,2	;volatile
  2287  04A5                     l2623:
  2288  04A5  0021               	movlb	1	; select bank1
  2289  04A6  150E               	bsf	14,2	;volatile
  2290  04A7                     l2625:
  2291                           
  2292                           ;main.c: 499:     INTCONbits.TMR0IE = 0;
  2293  04A7  128B               	bcf	11,5	;volatile
  2294  04A8                     l2627:
  2295                           
  2296                           ;main.c: 500:     FLAGS.value = 0;
  2297  04A8  01FC               	clrf	_FLAGS
  2298  04A9                     l2629:
  2299  04A9  0022               	movlb	2	; select bank2
  2300  04AA  128E               	bcf	14,5	;volatile
  2301  04AB                     l2631:
  2302  04AB  120E               	bcf	14,4	;volatile
  2303  04AC                     l2633:
  2304  04AC  100E               	bcf	14,0	;volatile
  2305  04AD                     l2635:
  2306  04AD  0021               	movlb	1	; select bank1
  2307  04AE  100E               	bcf	14,0	;volatile
  2308  04AF                     l2637:
  2309                           
  2310                           ;main.c: 507:     get_fun_full();
  2311  04AF  3182  2231  3184   	fcall	_get_fun_full
  2312  04B2                     l2639:
  2313                           
  2314                           ;main.c: 508:     get_jump_full();
  2315  04B2  3183  2302  3184   	fcall	_get_jump_full
  2316  04B5                     l2641:
  2317                           
  2318                           ;main.c: 509:     time_pow_s = 0;
  2319  04B5  0020               	movlb	0	; select bank0
  2320  04B6  01DE               	clrf	_time_pow_s
  2321  04B7                     l532:
  2322  04B7  0008               	return
  2323  04B8                     __end_of_start_setup:
  2324                           
  2325                           	psect	text3
  2326  0302                     __ptext3:	
  2327 ;; *************** function _get_jump_full *****************
  2328 ;; Defined at:
  2329 ;;		line 251 in file "main.c"
  2330 ;; Parameters:    Size  Location     Type
  2331 ;;		None
  2332 ;; Auto vars:     Size  Location     Type
  2333 ;;  res             2    5[BANK0 ] unsigned int 
  2334 ;;  flag            1    7[BANK0 ] unsigned char 
  2335 ;; Return value:  Size  Location     Type
  2336 ;;                  1    wreg      void 
  2337 ;; Registers used:
  2338 ;;		wreg, status,2, status,0, pclath, cstack
  2339 ;; Tracked objects:
  2340 ;;		On entry : 0/0
  2341 ;;		On exit  : 0/0
  2342 ;;		Unchanged: 0/0
  2343 ;; Data sizes:     COMMON   BANK0   BANK1
  2344 ;;      Params:         0       0       0
  2345 ;;      Locals:         0       3       0
  2346 ;;      Temps:          0       1       0
  2347 ;;      Totals:         0       4       0
  2348 ;;Total ram usage:        4 bytes
  2349 ;; Hardware stack levels used: 1
  2350 ;; Hardware stack levels required when called: 8
  2351 ;; This function calls:
  2352 ;;		_ADC_GetConversion
  2353 ;; This function is called by:
  2354 ;;		_start_setup
  2355 ;; This function uses a non-reentrant model
  2356 ;;
  2357                           
  2358  0302                     _get_jump_full:	
  2359                           ;psect for function _get_jump_full
  2360                           
  2361  0302                     l391:	
  2362                           ;incstack = 0
  2363                           ; Regs used in _get_jump_full: [wreg+status,2+status,0+pclath+cstack]
  2364                           ;main.c: 253:     static signed char jump_counter;;main.c: 254:     do { ANSELAbits.ANSA
      +                          1 = 1; } while(0);
  2365                           
  2366  0302  0023               	movlb	3	; select bank3
  2367  0303  148C               	bsf	12,1	;volatile
  2368  0304                     l2399:
  2369                           
  2370                           ;main.c: 255:     char flag = 0;
  2371  0304  0020               	movlb	0	; select bank0
  2372  0305  01A7               	clrf	get_jump_full@flag
  2373  0306                     l2401:
  2374                           
  2375                           ;main.c: 257:         unsigned res = ADC_GetConversion(PIN_JUMP_STATE);
  2376  0306  3001               	movlw	1
  2377  0307  3185  259F  3183   	fcall	_ADC_GetConversion
  2378  030A  0020               	movlb	0	; select bank0
  2379  030B  0821               	movf	?_ADC_GetConversion+1,w
  2380  030C  00A6               	movwf	get_jump_full@res+1
  2381  030D  0820               	movf	?_ADC_GetConversion,w
  2382  030E  00A5               	movwf	get_jump_full@res
  2383  030F                     l2403:
  2384                           
  2385                           ;main.c: 258:         if (res < 2000) jump_counter--;
  2386  030F  3007               	movlw	7
  2387  0310  0226               	subwf	get_jump_full@res+1,w
  2388  0311  30D0               	movlw	208
  2389  0312  1903               	skipnz
  2390  0313  0225               	subwf	get_jump_full@res,w
  2391  0314  1803               	skipnc
  2392  0315  2B17               	goto	u1631
  2393  0316  2B18               	goto	u1630
  2394  0317                     u1631:
  2395  0317  2B1D               	goto	l2407
  2396  0318                     u1630:
  2397  0318                     l2405:
  2398  0318  30FF               	movlw	255
  2399  0319  00A4               	movwf	??_get_jump_full
  2400  031A  0824               	movf	??_get_jump_full,w
  2401  031B  07DA               	addwf	get_jump_full@jump_counter,f
  2402  031C  2B21               	goto	l2409
  2403  031D                     l2407:
  2404  031D  3001               	movlw	1
  2405  031E  00A4               	movwf	??_get_jump_full
  2406  031F  0824               	movf	??_get_jump_full,w
  2407  0320  07DA               	addwf	get_jump_full@jump_counter,f
  2408  0321                     l2409:
  2409                           
  2410                           ;main.c: 273:         if (jump_counter > 10) {
  2411  0321  085A               	movf	get_jump_full@jump_counter,w
  2412  0322  3A80               	xorlw	128
  2413  0323  3E75               	addlw	-139
  2414  0324  1C03               	skipc
  2415  0325  2B27               	goto	u1641
  2416  0326  2B28               	goto	u1640
  2417  0327                     u1641:
  2418  0327  2B30               	goto	l2417
  2419  0328                     u1640:
  2420  0328                     l2411:
  2421                           
  2422                           ;main.c: 274:             jump_counter = 10;
  2423  0328  300A               	movlw	10
  2424  0329  00A4               	movwf	??_get_jump_full
  2425  032A  0824               	movf	??_get_jump_full,w
  2426  032B  00DA               	movwf	get_jump_full@jump_counter
  2427  032C                     l2413:
  2428                           
  2429                           ;main.c: 275:             FLAGS.bits._JUMP_CONNECTED = 0;
  2430  032C  127C               	bcf	_FLAGS,4
  2431  032D                     l2415:
  2432                           
  2433                           ;main.c: 276:             flag = 1;
  2434  032D  01A7               	clrf	get_jump_full@flag
  2435  032E  0AA7               	incf	get_jump_full@flag,f
  2436                           
  2437                           ;main.c: 277:         } else if (jump_counter<-10) {
  2438  032F  2B3D               	goto	l2425
  2439  0330                     l2417:
  2440  0330  085A               	movf	get_jump_full@jump_counter,w
  2441  0331  3A80               	xorlw	128
  2442  0332  3E8A               	addlw	138
  2443  0333  1803               	skipnc
  2444  0334  2B36               	goto	u1651
  2445  0335  2B37               	goto	u1650
  2446  0336                     u1651:
  2447  0336  2B3D               	goto	l2425
  2448  0337                     u1650:
  2449  0337                     l2419:
  2450                           
  2451                           ;main.c: 278:             jump_counter = -10;
  2452  0337  30F6               	movlw	246
  2453  0338  00A4               	movwf	??_get_jump_full
  2454  0339  0824               	movf	??_get_jump_full,w
  2455  033A  00DA               	movwf	get_jump_full@jump_counter
  2456  033B                     l2421:
  2457                           
  2458                           ;main.c: 279:             FLAGS.bits._JUMP_CONNECTED = 1;
  2459  033B  167C               	bsf	_FLAGS,4
  2460  033C  2B2D               	goto	l2415
  2461  033D                     l2425:
  2462                           
  2463                           ;main.c: 285:     } while (flag == 0);
  2464  033D  0827               	movf	get_jump_full@flag,w
  2465  033E  1903               	btfsc	3,2
  2466  033F  2B41               	goto	u1661
  2467  0340  2B42               	goto	u1660
  2468  0341                     u1661:
  2469  0341  2B06               	goto	l2401
  2470  0342                     u1660:
  2471  0342                     l400:	
  2472                           ;main.c: 286:     do { ANSELAbits.ANSA1 = 0; } while(0);
  2473                           
  2474  0342  0023               	movlb	3	; select bank3
  2475  0343  108C               	bcf	12,1	;volatile
  2476  0344                     l402:
  2477  0344  0008               	return
  2478  0345                     __end_of_get_jump_full:
  2479                           
  2480                           	psect	text4
  2481  0231                     __ptext4:	
  2482 ;; *************** function _get_fun_full *****************
  2483 ;; Defined at:
  2484 ;;		line 177 in file "main.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;		None
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;  res             2    5[BANK0 ] unsigned int 
  2489 ;;  flag            1    7[BANK0 ] unsigned char 
  2490 ;; Return value:  Size  Location     Type
  2491 ;;                  1    wreg      void 
  2492 ;; Registers used:
  2493 ;;		wreg, status,2, status,0, pclath, cstack
  2494 ;; Tracked objects:
  2495 ;;		On entry : 0/0
  2496 ;;		On exit  : 0/0
  2497 ;;		Unchanged: 0/0
  2498 ;; Data sizes:     COMMON   BANK0   BANK1
  2499 ;;      Params:         0       0       0
  2500 ;;      Locals:         0       3       0
  2501 ;;      Temps:          0       1       0
  2502 ;;      Totals:         0       4       0
  2503 ;;Total ram usage:        4 bytes
  2504 ;; Hardware stack levels used: 1
  2505 ;; Hardware stack levels required when called: 8
  2506 ;; This function calls:
  2507 ;;		_ADC_GetConversion
  2508 ;; This function is called by:
  2509 ;;		_start_setup
  2510 ;; This function uses a non-reentrant model
  2511 ;;
  2512                           
  2513  0231                     _get_fun_full:	
  2514                           ;psect for function _get_fun_full
  2515                           
  2516  0231                     l357:	
  2517                           ;incstack = 0
  2518                           ; Regs used in _get_fun_full: [wreg+status,2+status,0+pclath+cstack]
  2519                           ;main.c: 179:     static signed char fun_counter;;main.c: 180:     do { LATCbits.LATC1 =
      +                           1; } while(0);
  2520                           
  2521  0231  0022               	movlb	2	; select bank2
  2522  0232  148E               	bsf	14,1	;volatile
  2523  0233                     l359:	
  2524                           ;main.c: 181:     do { ANSELCbits.ANSC2 = 1; } while(0);
  2525                           
  2526  0233  0023               	movlb	3	; select bank3
  2527  0234  150E               	bsf	14,2	;volatile
  2528  0235                     l2371:
  2529                           
  2530                           ;main.c: 182:     char flag = 0;
  2531  0235  0020               	movlb	0	; select bank0
  2532  0236  01A7               	clrf	get_fun_full@flag
  2533  0237                     l2373:
  2534                           
  2535                           ;main.c: 184:         unsigned res = ADC_GetConversion(PIN_FUN_STATE);
  2536  0237  3006               	movlw	6
  2537  0238  3185  259F  3182   	fcall	_ADC_GetConversion
  2538  023B  0020               	movlb	0	; select bank0
  2539  023C  0821               	movf	?_ADC_GetConversion+1,w
  2540  023D  00A6               	movwf	get_fun_full@res+1
  2541  023E  0820               	movf	?_ADC_GetConversion,w
  2542  023F  00A5               	movwf	get_fun_full@res
  2543  0240                     l2375:
  2544                           
  2545                           ;main.c: 185:         if (res < 2000) fun_counter--;
  2546  0240  3007               	movlw	7
  2547  0241  0226               	subwf	get_fun_full@res+1,w
  2548  0242  30D0               	movlw	208
  2549  0243  1903               	skipnz
  2550  0244  0225               	subwf	get_fun_full@res,w
  2551  0245  1803               	skipnc
  2552  0246  2A48               	goto	u1591
  2553  0247  2A49               	goto	u1590
  2554  0248                     u1591:
  2555  0248  2A4E               	goto	l2379
  2556  0249                     u1590:
  2557  0249                     l2377:
  2558  0249  30FF               	movlw	255
  2559  024A  00A4               	movwf	??_get_fun_full
  2560  024B  0824               	movf	??_get_fun_full,w
  2561  024C  07DC               	addwf	get_fun_full@fun_counter,f
  2562  024D  2A52               	goto	l2381
  2563  024E                     l2379:
  2564  024E  3001               	movlw	1
  2565  024F  00A4               	movwf	??_get_fun_full
  2566  0250  0824               	movf	??_get_fun_full,w
  2567  0251  07DC               	addwf	get_fun_full@fun_counter,f
  2568  0252                     l2381:
  2569                           
  2570                           ;main.c: 201:           if (fun_counter > 10) {
  2571  0252  085C               	movf	get_fun_full@fun_counter,w
  2572  0253  3A80               	xorlw	128
  2573  0254  3E75               	addlw	-139
  2574  0255  1C03               	skipc
  2575  0256  2A58               	goto	u1601
  2576  0257  2A59               	goto	u1600
  2577  0258                     u1601:
  2578  0258  2A61               	goto	l2389
  2579  0259                     u1600:
  2580  0259                     l2383:
  2581                           
  2582                           ;main.c: 202:             fun_counter = 10;
  2583  0259  300A               	movlw	10
  2584  025A  00A4               	movwf	??_get_fun_full
  2585  025B  0824               	movf	??_get_fun_full,w
  2586  025C  00DC               	movwf	get_fun_full@fun_counter
  2587  025D                     l2385:
  2588                           
  2589                           ;main.c: 203:             FLAGS.bits._FUN_CONNECTED = 0;
  2590  025D  11FC               	bcf	_FLAGS,3
  2591  025E                     l2387:
  2592                           
  2593                           ;main.c: 204:             flag = 1;
  2594  025E  01A7               	clrf	get_fun_full@flag
  2595  025F  0AA7               	incf	get_fun_full@flag,f
  2596                           
  2597                           ;main.c: 205:         } else if (fun_counter<-10) {
  2598  0260  2A6E               	goto	l2397
  2599  0261                     l2389:
  2600  0261  085C               	movf	get_fun_full@fun_counter,w
  2601  0262  3A80               	xorlw	128
  2602  0263  3E8A               	addlw	138
  2603  0264  1803               	skipnc
  2604  0265  2A67               	goto	u1611
  2605  0266  2A68               	goto	u1610
  2606  0267                     u1611:
  2607  0267  2A6E               	goto	l2397
  2608  0268                     u1610:
  2609  0268                     l2391:
  2610                           
  2611                           ;main.c: 206:             fun_counter = 10;
  2612  0268  300A               	movlw	10
  2613  0269  00A4               	movwf	??_get_fun_full
  2614  026A  0824               	movf	??_get_fun_full,w
  2615  026B  00DC               	movwf	get_fun_full@fun_counter
  2616  026C                     l2393:
  2617                           
  2618                           ;main.c: 207:             FLAGS.bits._FUN_CONNECTED = 1;
  2619  026C  15FC               	bsf	_FLAGS,3
  2620  026D  2A5E               	goto	l2387
  2621  026E                     l2397:
  2622                           
  2623                           ;main.c: 212:     } while (flag == 0);
  2624  026E  0827               	movf	get_fun_full@flag,w
  2625  026F  1903               	btfsc	3,2
  2626  0270  2A72               	goto	u1621
  2627  0271  2A73               	goto	u1620
  2628  0272                     u1621:
  2629  0272  2A37               	goto	l2373
  2630  0273                     u1620:
  2631  0273                     l368:	
  2632                           ;main.c: 214:     do { ANSELCbits.ANSC2 = 0; } while(0);
  2633                           
  2634  0273  0023               	movlb	3	; select bank3
  2635  0274  110E               	bcf	14,2	;volatile
  2636  0275                     l370:	
  2637                           ;main.c: 215:     do { LATCbits.LATC1 = 0; } while(0);
  2638                           
  2639  0275  0022               	movlb	2	; select bank2
  2640  0276  108E               	bcf	14,1	;volatile
  2641  0277                     l372:
  2642  0277  0008               	return
  2643  0278                     __end_of_get_fun_full:
  2644                           
  2645                           	psect	text5
  2646  0732                     __ptext5:	
  2647 ;; *************** function _get_eeprom *****************
  2648 ;; Defined at:
  2649 ;;		line 473 in file "main.c"
  2650 ;; Parameters:    Size  Location     Type
  2651 ;;		None
  2652 ;; Auto vars:     Size  Location     Type
  2653 ;;		None
  2654 ;; Return value:  Size  Location     Type
  2655 ;;                  1    wreg      void 
  2656 ;; Registers used:
  2657 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2658 ;; Tracked objects:
  2659 ;;		On entry : 0/0
  2660 ;;		On exit  : 0/0
  2661 ;;		Unchanged: 0/0
  2662 ;; Data sizes:     COMMON   BANK0   BANK1
  2663 ;;      Params:         0       0       0
  2664 ;;      Locals:         0       0       0
  2665 ;;      Temps:          0       0       0
  2666 ;;      Totals:         0       0       0
  2667 ;;Total ram usage:        0 bytes
  2668 ;; Hardware stack levels used: 1
  2669 ;; Hardware stack levels required when called: 10
  2670 ;; This function calls:
  2671 ;;		_get_adr
  2672 ;;		_get_time
  2673 ;; This function is called by:
  2674 ;;		_start_setup
  2675 ;; This function uses a non-reentrant model
  2676 ;;
  2677                           
  2678  0732                     _get_eeprom:	
  2679                           ;psect for function _get_eeprom
  2680                           
  2681  0732                     l2435:	
  2682                           ;incstack = 0
  2683                           ; Regs used in _get_eeprom: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2684                           
  2685                           
  2686                           ;main.c: 474:     get_adr();
  2687  0732  3181  2132  3187   	fcall	_get_adr
  2688                           
  2689                           ;main.c: 475:     get_time();
  2690  0735  3180  203F  3187   	fcall	_get_time
  2691  0738                     l507:
  2692  0738  0008               	return
  2693  0739                     __end_of_get_eeprom:
  2694                           
  2695                           	psect	text6
  2696  003F                     __ptext6:	
  2697 ;; *************** function _get_time *****************
  2698 ;; Defined at:
  2699 ;;		line 436 in file "main.c"
  2700 ;; Parameters:    Size  Location     Type
  2701 ;;		None
  2702 ;; Auto vars:     Size  Location     Type
  2703 ;;  q               1   40[BANK0 ] unsigned char 
  2704 ;;  q               1   38[BANK0 ] unsigned char 
  2705 ;;  q               1   39[BANK0 ] unsigned char 
  2706 ;;  i               1   36[BANK0 ] unsigned char 
  2707 ;;  times           9   20[BANK0 ] unsigned um[3]
  2708 ;;  time_count      3   30[BANK0 ] unsigned char [3]
  2709 ;;  buf2            3   33[BANK0 ] unsigned um
  2710 ;;  buf             1   37[BANK0 ] unsigned char 
  2711 ;;  adr_error       1   29[BANK0 ] unsigned char 
  2712 ;; Return value:  Size  Location     Type
  2713 ;;                  1    wreg      void 
  2714 ;; Registers used:
  2715 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2716 ;; Tracked objects:
  2717 ;;		On entry : 0/0
  2718 ;;		On exit  : 0/0
  2719 ;;		Unchanged: 0/0
  2720 ;; Data sizes:     COMMON   BANK0   BANK1
  2721 ;;      Params:         0       0       0
  2722 ;;      Locals:         0      21       0
  2723 ;;      Temps:          0       4       0
  2724 ;;      Totals:         0      25       0
  2725 ;;Total ram usage:       25 bytes
  2726 ;; Hardware stack levels used: 1
  2727 ;; Hardware stack levels required when called: 9
  2728 ;; This function calls:
  2729 ;;		_EEPROM_ReadShortLong
  2730 ;;		___bmul
  2731 ;; This function is called by:
  2732 ;;		_get_eeprom
  2733 ;; This function uses a non-reentrant model
  2734 ;;
  2735                           
  2736  003F                     _get_time:	
  2737                           ;psect for function _get_time
  2738                           
  2739  003F                     l2249:	
  2740                           ;incstack = 0
  2741                           ; Regs used in _get_time: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2742                           
  2743                           
  2744                           ;main.c: 438:     char adr_error = 0;
  2745  003F  0020               	movlb	0	; select bank0
  2746  0040  01BD               	clrf	get_time@adr_error
  2747                           
  2748                           ;main.c: 439:     char buf=0;
  2749  0041  01C5               	clrf	get_time@buf
  2750  0042                     l2251:
  2751  0042                     l2253:
  2752                           
  2753                           ;main.c: 441:     __uint24 times[3] = {};
  2754  0042  3034               	movlw	low get_time@times
  2755  0043  0086               	movwf	6
  2756  0044  3000               	movlw	high get_time@times
  2757  0045  0087               	movwf	7
  2758  0046  3009               	movlw	9
  2759  0047  00B0               	movwf	??_get_time
  2760  0048  3000               	movlw	0
  2761  0049                     u1460:
  2762  0049  001E               	movwi fsr1++
  2763  004A  0BB0               	decfsz	??_get_time,f
  2764  004B  2849               	goto	u1460
  2765  004C                     l2255:
  2766                           
  2767                           ;main.c: 442:     char time_count[3]={};
  2768  004C  3000               	movlw	0
  2769  004D  00BE               	movwf	get_time@time_count
  2770  004E  3000               	movlw	0
  2771  004F  00BF               	movwf	get_time@time_count+1
  2772  0050  3000               	movlw	0
  2773  0051  00C0               	movwf	get_time@time_count+2
  2774  0052                     l2257:
  2775                           
  2776                           ;main.c: 443:     for (unsigned char i = START_EEPROM_ADR; i < START_EEPROM_ADR + 0x10; 
      +                          i += 4) {
  2777  0052  085F               	movf	_START_EEPROM_ADR,w
  2778  0053  00B0               	movwf	??_get_time
  2779  0054  0830               	movf	??_get_time,w
  2780  0055  00C4               	movwf	get_time@i
  2781  0056  28E5               	goto	l2301
  2782  0057                     l2259:
  2783                           
  2784                           ;main.c: 444:         buf2 = EEPROM_ReadShortLong(i);
  2785  0057  0020               	movlb	0	; select bank0
  2786  0058  0844               	movf	get_time@i,w
  2787  0059  3182  2278  3180   	fcall	_EEPROM_ReadShortLong
  2788  005C  0020               	movlb	0	; select bank0
  2789  005D  0823               	movf	?_EEPROM_ReadShortLong,w
  2790  005E  00C1               	movwf	get_time@buf2
  2791  005F  0824               	movf	?_EEPROM_ReadShortLong+1,w
  2792  0060  00C2               	movwf	get_time@buf2+1
  2793  0061  0825               	movf	?_EEPROM_ReadShortLong+2,w
  2794  0062  00C3               	movwf	get_time@buf2+2
  2795  0063                     l2261:
  2796                           
  2797                           ;main.c: 446:         for (char q = 0; q < 3; q++) {
  2798  0063  01C6               	clrf	get_time@q
  2799  0064                     l2267:
  2800                           
  2801                           ;main.c: 447:             if (buf2 == times[q]) {
  2802  0064  3003               	movlw	3
  2803  0065  00B0               	movwf	??_get_time
  2804  0066  0830               	movf	??_get_time,w
  2805  0067  00A0               	movwf	___bmul@multiplicand
  2806  0068  0846               	movf	get_time@q,w
  2807  0069  3186  264D  3180   	fcall	___bmul
  2808  006C  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2809  006D  0086               	movwf	6
  2810  006E  0187               	clrf	7
  2811  006F  3F40               	moviw [0]fsr1
  2812  0070  0020               	movlb	0	; select bank0
  2813  0071  0641               	xorwf	get_time@buf2,w
  2814  0072  1D03               	skipz
  2815  0073  287A               	goto	u1475
  2816  0074  3F41               	moviw [1]fsr1
  2817  0075  0642               	xorwf	get_time@buf2+1,w
  2818  0076  1D03               	skipz
  2819  0077  287A               	goto	u1475
  2820  0078  3F42               	moviw [2]fsr1
  2821  0079  0643               	xorwf	get_time@buf2+2,w
  2822  007A                     u1475:
  2823  007A  1D03               	skipz
  2824  007B  287D               	goto	u1471
  2825  007C  287E               	goto	u1470
  2826  007D                     u1471:
  2827  007D  288C               	goto	l2273
  2828  007E                     u1470:
  2829  007E                     l2269:
  2830                           
  2831                           ;main.c: 448:                 time_count[q]++;
  2832  007E  3001               	movlw	1
  2833  007F  00B0               	movwf	??_get_time
  2834  0080  0846               	movf	get_time@q,w
  2835  0081  3E3E               	addlw	(low (get_time@time_count| 0))& (0+255)
  2836  0082  0086               	movwf	6
  2837  0083  0187               	clrf	7
  2838  0084  0830               	movf	??_get_time,w
  2839  0085  0781               	addwf	1,f
  2840  0086                     l2271:
  2841                           
  2842                           ;main.c: 449:                 buf2 = 0;
  2843  0086  3000               	movlw	0
  2844  0087  00C1               	movwf	get_time@buf2
  2845  0088  3000               	movlw	0
  2846  0089  00C2               	movwf	get_time@buf2+1
  2847  008A  3000               	movlw	0
  2848  008B  00C3               	movwf	get_time@buf2+2
  2849  008C                     l2273:
  2850                           
  2851                           ;main.c: 451:         }
  2852  008C  3001               	movlw	1
  2853  008D  00B0               	movwf	??_get_time
  2854  008E  0830               	movf	??_get_time,w
  2855  008F  07C6               	addwf	get_time@q,f
  2856  0090                     l2275:
  2857  0090  3003               	movlw	3
  2858  0091  0246               	subwf	get_time@q,w
  2859  0092  1C03               	skipc
  2860  0093  2895               	goto	u1481
  2861  0094  2896               	goto	u1480
  2862  0095                     u1481:
  2863  0095  2864               	goto	l2267
  2864  0096                     u1480:
  2865  0096                     l2277:
  2866                           
  2867                           ;main.c: 453:         if (buf2 != 0) {
  2868  0096  0843               	movf	get_time@buf2+2,w
  2869  0097  0442               	iorwf	get_time@buf2+1,w
  2870  0098  0441               	iorwf	get_time@buf2,w
  2871  0099  1903               	skipnz
  2872  009A  289C               	goto	u1491
  2873  009B  289D               	goto	u1490
  2874  009C                     u1491:
  2875  009C  28E1               	goto	l2299
  2876  009D                     u1490:
  2877  009D                     l2279:
  2878                           
  2879                           ;main.c: 454:             adr_error = 1;
  2880  009D  01BD               	clrf	get_time@adr_error
  2881  009E  0ABD               	incf	get_time@adr_error,f
  2882  009F                     l2281:
  2883                           
  2884                           ;main.c: 455:             for (unsigned char q = 0; q < 3; q++)
  2885  009F  01C8               	clrf	get_time@q_821
  2886  00A0                     l2287:
  2887                           
  2888                           ;main.c: 456:                 if (times[q]== 0) {
  2889  00A0  3003               	movlw	3
  2890  00A1  00B0               	movwf	??_get_time
  2891  00A2  0830               	movf	??_get_time,w
  2892  00A3  00A0               	movwf	___bmul@multiplicand
  2893  00A4  0848               	movf	get_time@q_821,w
  2894  00A5  3186  264D  3180   	fcall	___bmul
  2895  00A8  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2896  00A9  0086               	movwf	6
  2897  00AA  0187               	clrf	7
  2898  00AB  3F40               	moviw [0]fsr1
  2899  00AC  0020               	movlb	0	; select bank0
  2900  00AD  00B1               	movwf	??_get_time+1
  2901  00AE  3F41               	moviw [1]fsr1
  2902  00AF  00B2               	movwf	??_get_time+2
  2903  00B0  3F42               	moviw [2]fsr1
  2904  00B1  00B3               	movwf	??_get_time+3
  2905  00B2  0833               	movf	??_get_time+3,w
  2906  00B3  0432               	iorwf	??_get_time+2,w
  2907  00B4  0431               	iorwf	??_get_time+1,w
  2908  00B5  1D03               	skipz
  2909  00B6  28B8               	goto	u1501
  2910  00B7  28B9               	goto	u1500
  2911  00B8                     u1501:
  2912  00B8  28D7               	goto	l2295
  2913  00B9                     u1500:
  2914  00B9                     l2289:
  2915                           
  2916                           ;main.c: 457:                     times[q] = buf;
  2917  00B9  0845               	movf	get_time@buf,w
  2918  00BA  00B0               	movwf	??_get_time
  2919  00BB  01B1               	clrf	??_get_time+1
  2920  00BC  01B2               	clrf	??_get_time+2
  2921  00BD  3003               	movlw	3
  2922  00BE  00B3               	movwf	??_get_time+3
  2923  00BF  0833               	movf	??_get_time+3,w
  2924  00C0  00A0               	movwf	___bmul@multiplicand
  2925  00C1  0848               	movf	get_time@q_821,w
  2926  00C2  3186  264D  3180   	fcall	___bmul
  2927  00C5  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  2928  00C6  0086               	movwf	6
  2929  00C7  0187               	clrf	7
  2930  00C8  0020               	movlb	0	; select bank0
  2931  00C9  0830               	movf	??_get_time,w
  2932  00CA  3FC0               	movwi [0]fsr1
  2933  00CB  0831               	movf	??_get_time+1,w
  2934  00CC  3FC1               	movwi [1]fsr1
  2935  00CD  0832               	movf	??_get_time+2,w
  2936  00CE  3FC2               	movwi [2]fsr1
  2937  00CF                     l2291:
  2938                           
  2939                           ;main.c: 458:                     time_count[q] = 1;
  2940  00CF  0848               	movf	get_time@q_821,w
  2941  00D0  3E3E               	addlw	(low (get_time@time_count| 0))& (0+255)
  2942  00D1  0086               	movwf	6
  2943  00D2  0187               	clrf	7
  2944  00D3  0181               	clrf	1
  2945  00D4  0A81               	incf	1,f
  2946  00D5                     l2293:
  2947                           
  2948                           ;main.c: 459:                     buf = 0;
  2949  00D5  01C5               	clrf	get_time@buf
  2950                           
  2951                           ;main.c: 460:                     break;
  2952  00D6  28E1               	goto	l2299
  2953  00D7                     l2295:
  2954  00D7  3001               	movlw	1
  2955  00D8  00B0               	movwf	??_get_time
  2956  00D9  0830               	movf	??_get_time,w
  2957  00DA  07C8               	addwf	get_time@q_821,f
  2958  00DB                     l2297:
  2959  00DB  3003               	movlw	3
  2960  00DC  0248               	subwf	get_time@q_821,w
  2961  00DD  1C03               	skipc
  2962  00DE  28E0               	goto	u1511
  2963  00DF  28E1               	goto	u1510
  2964  00E0                     u1511:
  2965  00E0  28A0               	goto	l2287
  2966  00E1                     u1510:
  2967  00E1                     l2299:
  2968                           
  2969                           ;main.c: 463:     }
  2970  00E1  3004               	movlw	4
  2971  00E2  00B0               	movwf	??_get_time
  2972  00E3  0830               	movf	??_get_time,w
  2973  00E4  07C4               	addwf	get_time@i,f
  2974  00E5                     l2301:
  2975  00E5  085F               	movf	_START_EEPROM_ADR,w
  2976  00E6  3E10               	addlw	16
  2977  00E7  00B0               	movwf	??_get_time
  2978  00E8  3000               	movlw	0
  2979  00E9  1803               	skipnc
  2980  00EA  3001               	movlw	1
  2981  00EB  00B1               	movwf	??_get_time+1
  2982  00EC  0831               	movf	??_get_time+1,w
  2983  00ED  3A80               	xorlw	128
  2984  00EE  3C80               	sublw	128
  2985  00EF  1D03               	skipz
  2986  00F0  28F3               	goto	u1525
  2987  00F1  0830               	movf	??_get_time,w
  2988  00F2  0244               	subwf	get_time@i,w
  2989  00F3                     u1525:
  2990  00F3  1C03               	skipc
  2991  00F4  28F6               	goto	u1521
  2992  00F5  28F7               	goto	u1520
  2993  00F6                     u1521:
  2994  00F6  2857               	goto	l2259
  2995  00F7                     u1520:
  2996  00F7                     l2303:
  2997                           
  2998                           ;main.c: 464:     buf = 0;
  2999  00F7  0020               	movlb	0	; select bank0
  3000  00F8  01C5               	clrf	get_time@buf
  3001                           
  3002                           ;main.c: 465:     for (unsigned char q = 0; q < 3; q++) {
  3003  00F9  01C7               	clrf	get_time@q_822
  3004  00FA                     l2309:
  3005                           
  3006                           ;main.c: 466:         if (time_count[q] > time_count[buf]) buf = q;
  3007  00FA  0845               	movf	get_time@buf,w
  3008  00FB  3E3E               	addlw	(low (get_time@time_count| 0))& (0+255)
  3009  00FC  0086               	movwf	6
  3010  00FD  0187               	clrf	7
  3011  00FE  0847               	movf	get_time@q_822,w
  3012  00FF  3E3E               	addlw	(low (get_time@time_count| 0))& (0+255)
  3013  0100  0084               	movwf	4
  3014  0101  0185               	clrf	5
  3015  0102  0800               	movf	0,w
  3016  0103  0201               	subwf	1,w
  3017  0104  1803               	skipnc
  3018  0105  2907               	goto	u1531
  3019  0106  2908               	goto	u1530
  3020  0107                     u1531:
  3021  0107  290C               	goto	l2313
  3022  0108                     u1530:
  3023  0108                     l2311:
  3024  0108  0847               	movf	get_time@q_822,w
  3025  0109  00B0               	movwf	??_get_time
  3026  010A  0830               	movf	??_get_time,w
  3027  010B  00C5               	movwf	get_time@buf
  3028  010C                     l2313:
  3029                           
  3030                           ;main.c: 467:     }
  3031  010C  3001               	movlw	1
  3032  010D  00B0               	movwf	??_get_time
  3033  010E  0830               	movf	??_get_time,w
  3034  010F  07C7               	addwf	get_time@q_822,f
  3035  0110                     l2315:
  3036  0110  3003               	movlw	3
  3037  0111  0247               	subwf	get_time@q_822,w
  3038  0112  1C03               	skipc
  3039  0113  2915               	goto	u1541
  3040  0114  2916               	goto	u1540
  3041  0115                     u1541:
  3042  0115  28FA               	goto	l2309
  3043  0116                     u1540:
  3044  0116                     l2317:
  3045                           
  3046                           ;main.c: 468:     time_s = times[buf];
  3047  0116  3003               	movlw	3
  3048  0117  00B0               	movwf	??_get_time
  3049  0118  0830               	movf	??_get_time,w
  3050  0119  00A0               	movwf	___bmul@multiplicand
  3051  011A  0845               	movf	get_time@buf,w
  3052  011B  3186  264D  3180   	fcall	___bmul
  3053  011E  3E34               	addlw	(low (get_time@times| 0))& (0+255)
  3054  011F  0086               	movwf	6
  3055  0120  0187               	clrf	7
  3056  0121  3F40               	moviw [0]fsr1
  3057  0122  0020               	movlb	0	; select bank0
  3058  0123  00D5               	movwf	_time_s
  3059  0124  3F41               	moviw [1]fsr1
  3060  0125  00D6               	movwf	_time_s+1
  3061  0126  3F42               	moviw [2]fsr1
  3062  0127  00D7               	movwf	_time_s+2
  3063  0128                     l2319:
  3064                           
  3065                           ;main.c: 470:     if (adr_error) START_EEPROM_ADR += 0x10;
  3066  0128  083D               	movf	get_time@adr_error,w
  3067  0129  1903               	btfsc	3,2
  3068  012A  292C               	goto	u1551
  3069  012B  292D               	goto	u1550
  3070  012C                     u1551:
  3071  012C  2931               	goto	l504
  3072  012D                     u1550:
  3073  012D                     l2321:
  3074  012D  3010               	movlw	16
  3075  012E  00B0               	movwf	??_get_time
  3076  012F  0830               	movf	??_get_time,w
  3077  0130  07DF               	addwf	_START_EEPROM_ADR,f
  3078  0131                     l504:
  3079  0131  0008               	return
  3080  0132                     __end_of_get_time:
  3081                           
  3082                           	psect	text7
  3083  064D                     __ptext7:	
  3084 ;; *************** function ___bmul *****************
  3085 ;; Defined at:
  3086 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul8.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;  multiplier      1    wreg     unsigned char 
  3089 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3090 ;; Auto vars:     Size  Location     Type
  3091 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3092 ;;  product         1    2[BANK0 ] unsigned char 
  3093 ;; Return value:  Size  Location     Type
  3094 ;;                  1    wreg      unsigned char 
  3095 ;; Registers used:
  3096 ;;		wreg, status,2, status,0
  3097 ;; Tracked objects:
  3098 ;;		On entry : 0/0
  3099 ;;		On exit  : 0/0
  3100 ;;		Unchanged: 0/0
  3101 ;; Data sizes:     COMMON   BANK0   BANK1
  3102 ;;      Params:         0       1       0
  3103 ;;      Locals:         0       2       0
  3104 ;;      Temps:          0       1       0
  3105 ;;      Totals:         0       4       0
  3106 ;;Total ram usage:        4 bytes
  3107 ;; Hardware stack levels used: 1
  3108 ;; Hardware stack levels required when called: 7
  3109 ;; This function calls:
  3110 ;;		Nothing
  3111 ;; This function is called by:
  3112 ;;		_get_time
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116  064D                     ___bmul:	
  3117                           ;psect for function ___bmul
  3118                           
  3119                           
  3120                           ;incstack = 0
  3121                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3122                           ;___bmul@multiplier stored from wreg
  3123  064D  0020               	movlb	0	; select bank0
  3124  064E  00A3               	movwf	___bmul@multiplier
  3125  064F                     l2049:
  3126  064F  01A2               	clrf	___bmul@product
  3127  0650                     l2051:
  3128  0650  1C23               	btfss	___bmul@multiplier,0
  3129  0651  2E53               	goto	u1181
  3130  0652  2E54               	goto	u1180
  3131  0653                     u1181:
  3132  0653  2E58               	goto	l2055
  3133  0654                     u1180:
  3134  0654                     l2053:
  3135  0654  0820               	movf	___bmul@multiplicand,w
  3136  0655  00A1               	movwf	??___bmul
  3137  0656  0821               	movf	??___bmul,w
  3138  0657  07A2               	addwf	___bmul@product,f
  3139  0658                     l2055:
  3140  0658  1003               	clrc
  3141  0659  0DA0               	rlf	___bmul@multiplicand,f
  3142  065A                     l2057:
  3143  065A  1003               	clrc
  3144  065B  0CA3               	rrf	___bmul@multiplier,f
  3145  065C  0823               	movf	___bmul@multiplier,w
  3146  065D  1D03               	btfss	3,2
  3147  065E  2E60               	goto	u1191
  3148  065F  2E61               	goto	u1190
  3149  0660                     u1191:
  3150  0660  2E50               	goto	l2051
  3151  0661                     u1190:
  3152  0661                     l2059:
  3153  0661  0822               	movf	___bmul@product,w
  3154  0662                     l761:
  3155  0662  0008               	return
  3156  0663                     __end_of___bmul:
  3157                           
  3158                           	psect	text8
  3159  0278                     __ptext8:	
  3160 ;; *************** function _EEPROM_ReadShortLong *****************
  3161 ;; Defined at:
  3162 ;;		line 48 in file "eeprom.c"
  3163 ;; Parameters:    Size  Location     Type
  3164 ;;  addr            1    wreg     unsigned char 
  3165 ;; Auto vars:     Size  Location     Type
  3166 ;;  addr            1   15[BANK0 ] unsigned char 
  3167 ;;  dt              3   12[BANK0 ] unsigned um
  3168 ;; Return value:  Size  Location     Type
  3169 ;;                  3    3[BANK0 ] unsigned um
  3170 ;; Registers used:
  3171 ;;		wreg, status,2, status,0, pclath, cstack
  3172 ;; Tracked objects:
  3173 ;;		On entry : 0/0
  3174 ;;		On exit  : 0/0
  3175 ;;		Unchanged: 0/0
  3176 ;; Data sizes:     COMMON   BANK0   BANK1
  3177 ;;      Params:         0       3       0
  3178 ;;      Locals:         0       4       0
  3179 ;;      Temps:          0       6       0
  3180 ;;      Totals:         0      13       0
  3181 ;;Total ram usage:       13 bytes
  3182 ;; Hardware stack levels used: 1
  3183 ;; Hardware stack levels required when called: 8
  3184 ;; This function calls:
  3185 ;;		_EEPROM_ReadByte
  3186 ;; This function is called by:
  3187 ;;		_get_time
  3188 ;; This function uses a non-reentrant model
  3189 ;;
  3190                           
  3191  0278                     _EEPROM_ReadShortLong:	
  3192                           ;psect for function _EEPROM_ReadShortLong
  3193                           
  3194                           
  3195                           ;incstack = 0
  3196                           ; Regs used in _EEPROM_ReadShortLong: [wreg+status,2+status,0+pclath+cstack]
  3197                           ;EEPROM_ReadShortLong@addr stored from wreg
  3198  0278  0020               	movlb	0	; select bank0
  3199  0279  00AF               	movwf	EEPROM_ReadShortLong@addr
  3200  027A                     l2041:
  3201                           
  3202                           ;eeprom.c: 49:     __uint24 dt = EEPROM_ReadByte(addr + 2)*256*256;
  3203  027A  082F               	movf	EEPROM_ReadShortLong@addr,w
  3204  027B  3E02               	addlw	2
  3205  027C  3186  2634  3182   	fcall	_EEPROM_ReadByte
  3206  027F  0020               	movlb	0	; select bank0
  3207  0280  00A6               	movwf	??_EEPROM_ReadShortLong
  3208  0281  01A7               	clrf	??_EEPROM_ReadShortLong+1
  3209  0282  0826               	movf	??_EEPROM_ReadShortLong,w
  3210  0283  00A7               	movwf	??_EEPROM_ReadShortLong+1
  3211  0284  01A6               	clrf	??_EEPROM_ReadShortLong
  3212  0285  0826               	movf	??_EEPROM_ReadShortLong,w
  3213  0286  00A7               	movwf	??_EEPROM_ReadShortLong+1
  3214  0287  01A6               	clrf	??_EEPROM_ReadShortLong
  3215  0288  0826               	movf	??_EEPROM_ReadShortLong,w
  3216  0289  00AC               	movwf	EEPROM_ReadShortLong@dt
  3217  028A  0827               	movf	??_EEPROM_ReadShortLong+1,w
  3218  028B  00AD               	movwf	EEPROM_ReadShortLong@dt+1
  3219  028C  0D89               	rlf	9,f
  3220  028D  3B89               	subwfb	9,f
  3221  028E  0989               	comf	9,f
  3222  028F  00AE               	movwf	EEPROM_ReadShortLong@dt+2
  3223                           
  3224                           ;eeprom.c: 50:     dt += EEPROM_ReadByte(addr + 1)*256;
  3225  0290  082F               	movf	EEPROM_ReadShortLong@addr,w
  3226  0291  3E01               	addlw	1
  3227  0292  3186  2634  3182   	fcall	_EEPROM_ReadByte
  3228  0295  0020               	movlb	0	; select bank0
  3229  0296  00A6               	movwf	??_EEPROM_ReadShortLong
  3230  0297  01A7               	clrf	??_EEPROM_ReadShortLong+1
  3231  0298  0826               	movf	??_EEPROM_ReadShortLong,w
  3232  0299  00A7               	movwf	??_EEPROM_ReadShortLong+1
  3233  029A  01A6               	clrf	??_EEPROM_ReadShortLong
  3234  029B  0826               	movf	??_EEPROM_ReadShortLong,w
  3235  029C  00A9               	movwf	??_EEPROM_ReadShortLong+3
  3236  029D  0827               	movf	??_EEPROM_ReadShortLong+1,w
  3237  029E  00AA               	movwf	??_EEPROM_ReadShortLong+4
  3238  029F  3000               	movlw	0
  3239  02A0  1BAA               	btfsc	??_EEPROM_ReadShortLong+4,7
  3240  02A1  30FF               	movlw	255
  3241  02A2  00AB               	movwf	??_EEPROM_ReadShortLong+5
  3242  02A3  0829               	movf	??_EEPROM_ReadShortLong+3,w
  3243  02A4  07AC               	addwf	EEPROM_ReadShortLong@dt,f
  3244  02A5  082A               	movf	??_EEPROM_ReadShortLong+4,w
  3245  02A6  3DAD               	addwfc	EEPROM_ReadShortLong@dt+1,f
  3246  02A7  082B               	movf	??_EEPROM_ReadShortLong+5,w
  3247  02A8  3DAE               	addwfc	EEPROM_ReadShortLong@dt+2,f
  3248  02A9                     l2043:
  3249                           
  3250                           ;eeprom.c: 51:     dt += EEPROM_ReadByte(addr);
  3251  02A9  082F               	movf	EEPROM_ReadShortLong@addr,w
  3252  02AA  3186  2634  3182   	fcall	_EEPROM_ReadByte
  3253  02AD  0020               	movlb	0	; select bank0
  3254  02AE  00A6               	movwf	??_EEPROM_ReadShortLong
  3255  02AF  01A7               	clrf	??_EEPROM_ReadShortLong+1
  3256  02B0  01A8               	clrf	??_EEPROM_ReadShortLong+2
  3257  02B1  0826               	movf	??_EEPROM_ReadShortLong,w
  3258  02B2  07AC               	addwf	EEPROM_ReadShortLong@dt,f
  3259  02B3  0827               	movf	??_EEPROM_ReadShortLong+1,w
  3260  02B4  3DAD               	addwfc	EEPROM_ReadShortLong@dt+1,f
  3261  02B5  0828               	movf	??_EEPROM_ReadShortLong+2,w
  3262  02B6  3DAE               	addwfc	EEPROM_ReadShortLong@dt+2,f
  3263  02B7                     l2045:
  3264                           
  3265                           ;eeprom.c: 52:     return dt;
  3266  02B7  082C               	movf	EEPROM_ReadShortLong@dt,w
  3267  02B8  00A3               	movwf	?_EEPROM_ReadShortLong
  3268  02B9  082D               	movf	EEPROM_ReadShortLong@dt+1,w
  3269  02BA  00A4               	movwf	?_EEPROM_ReadShortLong+1
  3270  02BB  082E               	movf	EEPROM_ReadShortLong@dt+2,w
  3271  02BC  00A5               	movwf	?_EEPROM_ReadShortLong+2
  3272  02BD                     l579:
  3273  02BD  0008               	return
  3274  02BE                     __end_of_EEPROM_ReadShortLong:
  3275                           
  3276                           	psect	text9
  3277  0132                     __ptext9:	
  3278 ;; *************** function _get_adr *****************
  3279 ;; Defined at:
  3280 ;;		line 403 in file "main.c"
  3281 ;; Parameters:    Size  Location     Type
  3282 ;;		None
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;  q               1   23[BANK0 ] unsigned char 
  3285 ;;  q               1   21[BANK0 ] unsigned char 
  3286 ;;  i               1   22[BANK0 ] unsigned char 
  3287 ;;  i               1   20[BANK0 ] unsigned char 
  3288 ;;  adr            16    4[BANK0 ] unsigned char [2][8]
  3289 ;;  buf             1   24[BANK0 ] unsigned char 
  3290 ;; Return value:  Size  Location     Type
  3291 ;;                  1    wreg      void 
  3292 ;; Registers used:
  3293 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3294 ;; Tracked objects:
  3295 ;;		On entry : 0/0
  3296 ;;		On exit  : 0/0
  3297 ;;		Unchanged: 0/0
  3298 ;; Data sizes:     COMMON   BANK0   BANK1
  3299 ;;      Params:         0       0       0
  3300 ;;      Locals:         0      21       0
  3301 ;;      Temps:          0       1       0
  3302 ;;      Totals:         0      22       0
  3303 ;;Total ram usage:       22 bytes
  3304 ;; Hardware stack levels used: 1
  3305 ;; Hardware stack levels required when called: 8
  3306 ;; This function calls:
  3307 ;;		_EEPROM_ReadByte
  3308 ;; This function is called by:
  3309 ;;		_get_eeprom
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313  0132                     _get_adr:	
  3314                           ;psect for function _get_adr
  3315                           
  3316  0132                     l2173:	
  3317                           ;incstack = 0
  3318                           ; Regs used in _get_adr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3319                           
  3320  0132                     l2175:
  3321                           
  3322                           ;main.c: 405:     char adr[8][2] = {};
  3323  0132  3024               	movlw	low get_adr@adr
  3324  0133  0086               	movwf	6
  3325  0134  3000               	movlw	high get_adr@adr
  3326  0135  0087               	movwf	7
  3327  0136  3010               	movlw	16
  3328  0137  0020               	movlb	0	; select bank0
  3329  0138  00A3               	movwf	??_get_adr
  3330  0139  3000               	movlw	0
  3331  013A                     u1340:
  3332  013A  001E               	movwi fsr1++
  3333  013B  0BA3               	decfsz	??_get_adr,f
  3334  013C  293A               	goto	u1340
  3335  013D                     l2177:
  3336                           
  3337                           ;main.c: 407:     for (unsigned char i = 0; i < 8; i++) {
  3338  013D  01B4               	clrf	get_adr@i
  3339  013E                     l2183:
  3340                           
  3341                           ;main.c: 408:         buf = EEPROM_ReadByte(i);
  3342  013E  0834               	movf	get_adr@i,w
  3343  013F  3186  2634  3181   	fcall	_EEPROM_ReadByte
  3344  0142  0020               	movlb	0	; select bank0
  3345  0143  00A3               	movwf	??_get_adr
  3346  0144  0823               	movf	??_get_adr,w
  3347  0145  00B8               	movwf	get_adr@buf
  3348  0146                     l2185:
  3349                           
  3350                           ;main.c: 409:         if (buf == 0) continue;
  3351  0146  0838               	movf	get_adr@buf,w
  3352  0147  1D03               	btfss	3,2
  3353  0148  294A               	goto	u1351
  3354  0149  294B               	goto	u1350
  3355  014A                     u1351:
  3356  014A  294C               	goto	l2189
  3357  014B                     u1350:
  3358  014B  2994               	goto	l2223
  3359  014C                     l2189:
  3360                           
  3361                           ;main.c: 410:         for (unsigned char q = 0; q < 8; q++) {
  3362  014C  01B5               	clrf	get_adr@q
  3363  014D                     l2195:
  3364                           
  3365                           ;main.c: 411:             if (buf == adr[q][0]) {
  3366  014D  3535               	lslf	get_adr@q,w
  3367  014E  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3368  014F  0086               	movwf	6
  3369  0150  0187               	clrf	7
  3370  0151  0801               	movf	1,w
  3371  0152  0638               	xorwf	get_adr@buf,w
  3372  0153  1D03               	skipz
  3373  0154  2956               	goto	u1361
  3374  0155  2957               	goto	u1360
  3375  0156                     u1361:
  3376  0156  2961               	goto	l2201
  3377  0157                     u1360:
  3378  0157                     l2197:
  3379                           
  3380                           ;main.c: 412:                 (adr[q][1])++;
  3381  0157  3001               	movlw	1
  3382  0158  00A3               	movwf	??_get_adr
  3383  0159  1403               	setc
  3384  015A  0D35               	rlf	get_adr@q,w
  3385  015B  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3386  015C  0086               	movwf	6
  3387  015D  0187               	clrf	7
  3388  015E  0823               	movf	??_get_adr,w
  3389  015F  0781               	addwf	1,f
  3390  0160                     l2199:
  3391                           
  3392                           ;main.c: 413:                 buf = 0;
  3393  0160  01B8               	clrf	get_adr@buf
  3394  0161                     l2201:
  3395                           
  3396                           ;main.c: 415:         }
  3397  0161  3001               	movlw	1
  3398  0162  00A3               	movwf	??_get_adr
  3399  0163  0823               	movf	??_get_adr,w
  3400  0164  07B5               	addwf	get_adr@q,f
  3401  0165                     l2203:
  3402  0165  3008               	movlw	8
  3403  0166  0235               	subwf	get_adr@q,w
  3404  0167  1C03               	skipc
  3405  0168  296A               	goto	u1371
  3406  0169  296B               	goto	u1370
  3407  016A                     u1371:
  3408  016A  294D               	goto	l2195
  3409  016B                     u1370:
  3410  016B                     l2205:
  3411                           
  3412                           ;main.c: 417:         if (buf != 0) {
  3413  016B  0838               	movf	get_adr@buf,w
  3414  016C  1903               	btfsc	3,2
  3415  016D  296F               	goto	u1381
  3416  016E  2970               	goto	u1380
  3417  016F                     u1381:
  3418  016F  2994               	goto	l2223
  3419  0170                     u1380:
  3420  0170                     l2207:
  3421                           
  3422                           ;main.c: 418:             for (unsigned char q = 0; q < 8; q++)
  3423  0170  01B7               	clrf	get_adr@q_809
  3424  0171                     l2213:
  3425                           
  3426                           ;main.c: 419:                 if (adr[q][0] == 0) {
  3427  0171  3537               	lslf	get_adr@q_809,w
  3428  0172  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3429  0173  0086               	movwf	6
  3430  0174  0187               	clrf	7
  3431  0175  0801               	movf	1,w
  3432  0176  1D03               	btfss	3,2
  3433  0177  2979               	goto	u1391
  3434  0178  297A               	goto	u1390
  3435  0179                     u1391:
  3436  0179  298A               	goto	l2219
  3437  017A                     u1390:
  3438  017A                     l2215:
  3439                           
  3440                           ;main.c: 420:                     adr[q][0] = buf;
  3441  017A  0838               	movf	get_adr@buf,w
  3442  017B  00A3               	movwf	??_get_adr
  3443  017C  3537               	lslf	get_adr@q_809,w
  3444  017D  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3445  017E  0086               	movwf	6
  3446  017F  0187               	clrf	7
  3447  0180  0823               	movf	??_get_adr,w
  3448  0181  0081               	movwf	1
  3449                           
  3450                           ;main.c: 421:                     adr[q][1] = 1;
  3451  0182  1403               	setc
  3452  0183  0D37               	rlf	get_adr@q_809,w
  3453  0184  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3454  0185  0086               	movwf	6
  3455  0186  0187               	clrf	7
  3456  0187  0181               	clrf	1
  3457  0188  0A81               	incf	1,f
  3458  0189                     l2217:
  3459                           
  3460                           ;main.c: 423:                     break;
  3461  0189  2994               	goto	l2223
  3462  018A                     l2219:
  3463  018A  3001               	movlw	1
  3464  018B  00A3               	movwf	??_get_adr
  3465  018C  0823               	movf	??_get_adr,w
  3466  018D  07B7               	addwf	get_adr@q_809,f
  3467  018E                     l2221:
  3468  018E  3008               	movlw	8
  3469  018F  0237               	subwf	get_adr@q_809,w
  3470  0190  1C03               	skipc
  3471  0191  2993               	goto	u1401
  3472  0192  2994               	goto	u1400
  3473  0193                     u1401:
  3474  0193  2971               	goto	l2213
  3475  0194                     u1400:
  3476  0194                     l2223:
  3477  0194  3001               	movlw	1
  3478  0195  00A3               	movwf	??_get_adr
  3479  0196  0823               	movf	??_get_adr,w
  3480  0197  07B4               	addwf	get_adr@i,f
  3481  0198                     l2225:
  3482  0198  3008               	movlw	8
  3483  0199  0234               	subwf	get_adr@i,w
  3484  019A  1C03               	skipc
  3485  019B  299D               	goto	u1411
  3486  019C  299E               	goto	u1410
  3487  019D                     u1411:
  3488  019D  293E               	goto	l2183
  3489  019E                     u1410:
  3490  019E                     l2227:
  3491                           
  3492                           ;main.c: 427:     buf = 0;
  3493  019E  01B8               	clrf	get_adr@buf
  3494                           
  3495                           ;main.c: 428:     for (unsigned char i = 0; i < 8; i++) {
  3496  019F  01B6               	clrf	get_adr@i_810
  3497  01A0                     l2233:
  3498                           
  3499                           ;main.c: 429:         if (adr[i][1] > adr[buf][1]) buf = i;
  3500  01A0  1403               	setc
  3501  01A1  0D38               	rlf	get_adr@buf,w
  3502  01A2  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3503  01A3  0086               	movwf	6
  3504  01A4  0187               	clrf	7
  3505  01A5  1403               	setc
  3506  01A6  0D36               	rlf	get_adr@i_810,w
  3507  01A7  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3508  01A8  0084               	movwf	4
  3509  01A9  0185               	clrf	5
  3510  01AA  0800               	movf	0,w
  3511  01AB  0201               	subwf	1,w
  3512  01AC  1803               	skipnc
  3513  01AD  29AF               	goto	u1421
  3514  01AE  29B0               	goto	u1420
  3515  01AF                     u1421:
  3516  01AF  29B4               	goto	l2237
  3517  01B0                     u1420:
  3518  01B0                     l2235:
  3519  01B0  0836               	movf	get_adr@i_810,w
  3520  01B1  00A3               	movwf	??_get_adr
  3521  01B2  0823               	movf	??_get_adr,w
  3522  01B3  00B8               	movwf	get_adr@buf
  3523  01B4                     l2237:
  3524                           
  3525                           ;main.c: 430:     }
  3526  01B4  3001               	movlw	1
  3527  01B5  00A3               	movwf	??_get_adr
  3528  01B6  0823               	movf	??_get_adr,w
  3529  01B7  07B6               	addwf	get_adr@i_810,f
  3530  01B8                     l2239:
  3531  01B8  3008               	movlw	8
  3532  01B9  0236               	subwf	get_adr@i_810,w
  3533  01BA  1C03               	skipc
  3534  01BB  29BD               	goto	u1431
  3535  01BC  29BE               	goto	u1430
  3536  01BD                     u1431:
  3537  01BD  29A0               	goto	l2233
  3538  01BE                     u1430:
  3539  01BE                     l2241:
  3540                           
  3541                           ;main.c: 431:     START_EEPROM_ADR = adr[buf][0];
  3542  01BE  3538               	lslf	get_adr@buf,w
  3543  01BF  3E24               	addlw	(low (get_adr@adr| 0))& (0+255)
  3544  01C0  0086               	movwf	6
  3545  01C1  0187               	clrf	7
  3546  01C2  0801               	movf	1,w
  3547  01C3  00A3               	movwf	??_get_adr
  3548  01C4  0823               	movf	??_get_adr,w
  3549  01C5  00DF               	movwf	_START_EEPROM_ADR
  3550  01C6                     l2243:
  3551                           
  3552                           ;main.c: 432:     if (START_EEPROM_ADR == 0 || START_EEPROM_ADR == 0xFF) START_EEPROM_AD
      +                          R = 0x10;
  3553  01C6  085F               	movf	_START_EEPROM_ADR,w
  3554  01C7  1903               	btfsc	3,2
  3555  01C8  29CA               	goto	u1441
  3556  01C9  29CB               	goto	u1440
  3557  01CA                     u1441:
  3558  01CA  29D0               	goto	l2247
  3559  01CB                     u1440:
  3560  01CB                     l2245:
  3561  01CB  0A5F               	incf	_START_EEPROM_ADR,w
  3562  01CC  1D03               	btfss	3,2
  3563  01CD  29CF               	goto	u1451
  3564  01CE  29D0               	goto	u1450
  3565  01CF                     u1451:
  3566  01CF  29D4               	goto	l483
  3567  01D0                     u1450:
  3568  01D0                     l2247:
  3569  01D0  3010               	movlw	16
  3570  01D1  00A3               	movwf	??_get_adr
  3571  01D2  0823               	movf	??_get_adr,w
  3572  01D3  00DF               	movwf	_START_EEPROM_ADR
  3573  01D4                     l483:
  3574  01D4  0008               	return
  3575  01D5                     __end_of_get_adr:
  3576                           
  3577                           	psect	text10
  3578  0772                     __ptext10:	
  3579 ;; *************** function _TMR2_StartTimer *****************
  3580 ;; Defined at:
  3581 ;;		line 87 in file "mcc_generated_files/tmr2.c"
  3582 ;; Parameters:    Size  Location     Type
  3583 ;;		None
  3584 ;; Auto vars:     Size  Location     Type
  3585 ;;		None
  3586 ;; Return value:  Size  Location     Type
  3587 ;;                  1    wreg      void 
  3588 ;; Registers used:
  3589 ;;		None
  3590 ;; Tracked objects:
  3591 ;;		On entry : 0/0
  3592 ;;		On exit  : 0/0
  3593 ;;		Unchanged: 0/0
  3594 ;; Data sizes:     COMMON   BANK0   BANK1
  3595 ;;      Params:         0       0       0
  3596 ;;      Locals:         0       0       0
  3597 ;;      Temps:          0       0       0
  3598 ;;      Totals:         0       0       0
  3599 ;;Total ram usage:        0 bytes
  3600 ;; Hardware stack levels used: 1
  3601 ;; Hardware stack levels required when called: 7
  3602 ;; This function calls:
  3603 ;;		Nothing
  3604 ;; This function is called by:
  3605 ;;		_start_setup
  3606 ;; This function uses a non-reentrant model
  3607 ;;
  3608                           
  3609  0772                     _TMR2_StartTimer:	
  3610                           ;psect for function _TMR2_StartTimer
  3611                           
  3612  0772                     l2325:	
  3613                           ;incstack = 0
  3614                           ; Regs used in _TMR2_StartTimer: []
  3615                           
  3616                           
  3617                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
  3618  0772  0020               	movlb	0	; select bank0
  3619  0773  151C               	bsf	28,2	;volatile
  3620  0774                     l142:
  3621  0774  0008               	return
  3622  0775                     __end_of_TMR2_StartTimer:
  3623                           
  3624                           	psect	text11
  3625  0663                     __ptext11:	
  3626 ;; *************** function _SYSTEM_Initialize *****************
  3627 ;; Defined at:
  3628 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;		None
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;		None
  3633 ;; Return value:  Size  Location     Type
  3634 ;;                  1    wreg      void 
  3635 ;; Registers used:
  3636 ;;		wreg, status,2, status,0, pclath, cstack
  3637 ;; Tracked objects:
  3638 ;;		On entry : 0/0
  3639 ;;		On exit  : 0/0
  3640 ;;		Unchanged: 0/0
  3641 ;; Data sizes:     COMMON   BANK0   BANK1
  3642 ;;      Params:         0       0       0
  3643 ;;      Locals:         0       0       0
  3644 ;;      Temps:          0       0       0
  3645 ;;      Totals:         0       0       0
  3646 ;;Total ram usage:        0 bytes
  3647 ;; Hardware stack levels used: 1
  3648 ;; Hardware stack levels required when called: 9
  3649 ;; This function calls:
  3650 ;;		_ADC_Initialize
  3651 ;;		_FVR_Initialize
  3652 ;;		_OSCILLATOR_Initialize
  3653 ;;		_PIN_MANAGER_Initialize
  3654 ;;		_TMR0_Initialize
  3655 ;;		_TMR2_Initialize
  3656 ;;		_WDT_Initialize
  3657 ;; This function is called by:
  3658 ;;		_start_setup
  3659 ;; This function uses a non-reentrant model
  3660 ;;
  3661                           
  3662  0663                     _SYSTEM_Initialize:	
  3663                           ;psect for function _SYSTEM_Initialize
  3664                           
  3665  0663                     l2323:	
  3666                           ;incstack = 0
  3667                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3668                           
  3669                           
  3670                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  3671  0663  3186  268F  3186   	fcall	_PIN_MANAGER_Initialize
  3672                           
  3673                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  3674  0666  3187  2739  3186   	fcall	_OSCILLATOR_Initialize
  3675                           
  3676                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  3677  0669  3187  2761  3186   	fcall	_WDT_Initialize
  3678                           
  3679                           ;mcc_generated_files/mcc.c: 56:     FVR_Initialize();
  3680  066C  3187  2765  3186   	fcall	_FVR_Initialize
  3681                           
  3682                           ;mcc_generated_files/mcc.c: 57:     ADC_Initialize();
  3683  066F  3187  272A  3186   	fcall	_ADC_Initialize
  3684                           
  3685                           ;mcc_generated_files/mcc.c: 58:     TMR2_Initialize();
  3686  0672  3186  26B9  3186   	fcall	_TMR2_Initialize
  3687                           
  3688                           ;mcc_generated_files/mcc.c: 59:     TMR0_Initialize();
  3689  0675  3186  2679  3186   	fcall	_TMR0_Initialize
  3690  0678                     l25:
  3691  0678  0008               	return
  3692  0679                     __end_of_SYSTEM_Initialize:
  3693                           
  3694                           	psect	text12
  3695  0761                     __ptext12:	
  3696 ;; *************** function _WDT_Initialize *****************
  3697 ;; Defined at:
  3698 ;;		line 72 in file "mcc_generated_files/mcc.c"
  3699 ;; Parameters:    Size  Location     Type
  3700 ;;		None
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;		None
  3703 ;; Return value:  Size  Location     Type
  3704 ;;                  1    wreg      void 
  3705 ;; Registers used:
  3706 ;;		wreg
  3707 ;; Tracked objects:
  3708 ;;		On entry : 0/0
  3709 ;;		On exit  : 0/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMMON   BANK0   BANK1
  3712 ;;      Params:         0       0       0
  3713 ;;      Locals:         0       0       0
  3714 ;;      Temps:          0       0       0
  3715 ;;      Totals:         0       0       0
  3716 ;;Total ram usage:        0 bytes
  3717 ;; Hardware stack levels used: 1
  3718 ;; Hardware stack levels required when called: 7
  3719 ;; This function calls:
  3720 ;;		Nothing
  3721 ;; This function is called by:
  3722 ;;		_SYSTEM_Initialize
  3723 ;; This function uses a non-reentrant model
  3724 ;;
  3725                           
  3726  0761                     _WDT_Initialize:	
  3727                           ;psect for function _WDT_Initialize
  3728                           
  3729  0761                     l2083:	
  3730                           ;incstack = 0
  3731                           ; Regs used in _WDT_Initialize: [wreg]
  3732                           
  3733                           
  3734                           ;mcc_generated_files/mcc.c: 75:     WDTCON = 0x16;
  3735  0761  3016               	movlw	22
  3736  0762  0021               	movlb	1	; select bank1
  3737  0763  0097               	movwf	23	;volatile
  3738  0764                     l31:
  3739  0764  0008               	return
  3740  0765                     __end_of_WDT_Initialize:
  3741                           
  3742                           	psect	text13
  3743  06B9                     __ptext13:	
  3744 ;; *************** function _TMR2_Initialize *****************
  3745 ;; Defined at:
  3746 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  3747 ;; Parameters:    Size  Location     Type
  3748 ;;		None
  3749 ;; Auto vars:     Size  Location     Type
  3750 ;;		None
  3751 ;; Return value:  Size  Location     Type
  3752 ;;                  1    wreg      void 
  3753 ;; Registers used:
  3754 ;;		wreg, status,2, status,0, pclath, cstack
  3755 ;; Tracked objects:
  3756 ;;		On entry : 0/0
  3757 ;;		On exit  : 0/0
  3758 ;;		Unchanged: 0/0
  3759 ;; Data sizes:     COMMON   BANK0   BANK1
  3760 ;;      Params:         0       0       0
  3761 ;;      Locals:         0       0       0
  3762 ;;      Temps:          0       0       0
  3763 ;;      Totals:         0       0       0
  3764 ;;Total ram usage:        0 bytes
  3765 ;; Hardware stack levels used: 1
  3766 ;; Hardware stack levels required when called: 8
  3767 ;; This function calls:
  3768 ;;		_TMR2_SetInterruptHandler
  3769 ;; This function is called by:
  3770 ;;		_SYSTEM_Initialize
  3771 ;; This function uses a non-reentrant model
  3772 ;;
  3773                           
  3774  06B9                     _TMR2_Initialize:	
  3775                           ;psect for function _TMR2_Initialize
  3776                           
  3777  06B9                     l2093:	
  3778                           ;incstack = 0
  3779                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3780                           
  3781                           
  3782                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0xF9;
  3783  06B9  30F9               	movlw	249
  3784  06BA  0020               	movlb	0	; select bank0
  3785  06BB  009B               	movwf	27	;volatile
  3786  06BC                     l2095:
  3787                           
  3788                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  3789  06BC  019A               	clrf	26	;volatile
  3790  06BD                     l2097:
  3791                           
  3792                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  3793  06BD  1091               	bcf	17,1	;volatile
  3794  06BE                     l2099:
  3795                           
  3796                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  3797  06BE  0021               	movlb	1	; select bank1
  3798  06BF  1491               	bsf	17,1	;volatile
  3799  06C0                     l2101:
  3800                           
  3801                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  3802  06C0  3075               	movlw	low _TMR2_DefaultInterruptHandler
  3803  06C1  0020               	movlb	0	; select bank0
  3804  06C2  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  3805  06C3  3007               	movlw	high _TMR2_DefaultInterruptHandler
  3806  06C4  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  3807  06C5  3187  2746  3186   	fcall	_TMR2_SetInterruptHandler
  3808  06C8                     l2103:
  3809                           
  3810                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x4E;
  3811  06C8  304E               	movlw	78
  3812  06C9  0020               	movlb	0	; select bank0
  3813  06CA  009C               	movwf	28	;volatile
  3814  06CB                     l139:
  3815  06CB  0008               	return
  3816  06CC                     __end_of_TMR2_Initialize:
  3817                           
  3818                           	psect	text14
  3819  0746                     __ptext14:	
  3820 ;; *************** function _TMR2_SetInterruptHandler *****************
  3821 ;; Defined at:
  3822 ;;		line 147 in file "mcc_generated_files/tmr2.c"
  3823 ;; Parameters:    Size  Location     Type
  3824 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3825 ;;		 -> sec_tick_work(1), TMR2_DefaultInterruptHandler(1), 
  3826 ;; Auto vars:     Size  Location     Type
  3827 ;;		None
  3828 ;; Return value:  Size  Location     Type
  3829 ;;                  1    wreg      void 
  3830 ;; Registers used:
  3831 ;;		wreg
  3832 ;; Tracked objects:
  3833 ;;		On entry : 0/0
  3834 ;;		On exit  : 0/0
  3835 ;;		Unchanged: 0/0
  3836 ;; Data sizes:     COMMON   BANK0   BANK1
  3837 ;;      Params:         0       2       0
  3838 ;;      Locals:         0       0       0
  3839 ;;      Temps:          0       0       0
  3840 ;;      Totals:         0       2       0
  3841 ;;Total ram usage:        2 bytes
  3842 ;; Hardware stack levels used: 1
  3843 ;; Hardware stack levels required when called: 7
  3844 ;; This function calls:
  3845 ;;		Nothing
  3846 ;; This function is called by:
  3847 ;;		_TMR2_Initialize
  3848 ;;		_start_setup
  3849 ;; This function uses a non-reentrant model
  3850 ;;
  3851                           
  3852  0746                     _TMR2_SetInterruptHandler:	
  3853                           ;psect for function _TMR2_SetInterruptHandler
  3854                           
  3855  0746                     l1999:	
  3856                           ;incstack = 0
  3857                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  3858                           
  3859                           
  3860                           ;mcc_generated_files/tmr2.c: 148:     TMR2_InterruptHandler = InterruptHandler;
  3861  0746  0020               	movlb	0	; select bank0
  3862  0747  0821               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  3863  0748  00E3               	movwf	_TMR2_InterruptHandler+1
  3864  0749  0820               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  3865  074A  00E2               	movwf	_TMR2_InterruptHandler
  3866  074B                     l164:
  3867  074B  0008               	return
  3868  074C                     __end_of_TMR2_SetInterruptHandler:
  3869                           
  3870                           	psect	text15
  3871  0679                     __ptext15:	
  3872 ;; *************** function _TMR0_Initialize *****************
  3873 ;; Defined at:
  3874 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;		None
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;		None
  3879 ;; Return value:  Size  Location     Type
  3880 ;;                  1    wreg      void 
  3881 ;; Registers used:
  3882 ;;		wreg, status,2, status,0, pclath, cstack
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMMON   BANK0   BANK1
  3888 ;;      Params:         0       0       0
  3889 ;;      Locals:         0       0       0
  3890 ;;      Temps:          0       1       0
  3891 ;;      Totals:         0       1       0
  3892 ;;Total ram usage:        1 bytes
  3893 ;; Hardware stack levels used: 1
  3894 ;; Hardware stack levels required when called: 8
  3895 ;; This function calls:
  3896 ;;		_TMR0_SetInterruptHandler
  3897 ;; This function is called by:
  3898 ;;		_SYSTEM_Initialize
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902  0679                     _TMR0_Initialize:	
  3903                           ;psect for function _TMR0_Initialize
  3904                           
  3905  0679                     l2105:	
  3906                           ;incstack = 0
  3907                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3908                           
  3909                           
  3910                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD2 
      +                          & 0x3F));
  3911  0679  0021               	movlb	1	; select bank1
  3912  067A  0815               	movf	21,w	;volatile
  3913  067B  39C0               	andlw	192
  3914  067C  3812               	iorlw	18
  3915  067D  0095               	movwf	21	;volatile
  3916  067E                     l2107:
  3917                           
  3918                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x9C;
  3919  067E  309C               	movlw	156
  3920  067F  0020               	movlb	0	; select bank0
  3921  0680  0095               	movwf	21	;volatile
  3922  0681                     l2109:
  3923                           
  3924                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 156;
  3925  0681  309C               	movlw	156
  3926  0682  00A2               	movwf	??_TMR0_Initialize
  3927  0683  0822               	movf	??_TMR0_Initialize,w
  3928  0684  00E4               	movwf	_timer0ReloadVal	;volatile
  3929  0685                     l2111:
  3930                           
  3931                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  3932  0685  110B               	bcf	11,2	;volatile
  3933  0686                     l2113:
  3934                           
  3935                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  3936  0686  168B               	bsf	11,5	;volatile
  3937  0687                     l2115:
  3938                           
  3939                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  3940  0687  3076               	movlw	low _TMR0_DefaultInterruptHandler
  3941  0688  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  3942  0689  3007               	movlw	high _TMR0_DefaultInterruptHandler
  3943  068A  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  3944  068B  3187  274C  3186   	fcall	_TMR0_SetInterruptHandler
  3945  068E                     l184:
  3946  068E  0008               	return
  3947  068F                     __end_of_TMR0_Initialize:
  3948                           
  3949                           	psect	text16
  3950  074C                     __ptext16:	
  3951 ;; *************** function _TMR0_SetInterruptHandler *****************
  3952 ;; Defined at:
  3953 ;;		line 125 in file "mcc_generated_files/tmr0.c"
  3954 ;; Parameters:    Size  Location     Type
  3955 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3956 ;;		 -> switch_zum(1), TMR0_DefaultInterruptHandler(1), 
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;		None
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  1    wreg      void 
  3961 ;; Registers used:
  3962 ;;		wreg
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMMON   BANK0   BANK1
  3968 ;;      Params:         0       2       0
  3969 ;;      Locals:         0       0       0
  3970 ;;      Temps:          0       0       0
  3971 ;;      Totals:         0       2       0
  3972 ;;Total ram usage:        2 bytes
  3973 ;; Hardware stack levels used: 1
  3974 ;; Hardware stack levels required when called: 7
  3975 ;; This function calls:
  3976 ;;		Nothing
  3977 ;; This function is called by:
  3978 ;;		_TMR0_Initialize
  3979 ;;		_start_setup
  3980 ;; This function uses a non-reentrant model
  3981 ;;
  3982                           
  3983  074C                     _TMR0_SetInterruptHandler:	
  3984                           ;psect for function _TMR0_SetInterruptHandler
  3985                           
  3986  074C                     l2001:	
  3987                           ;incstack = 0
  3988                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  3989                           
  3990                           
  3991                           ;mcc_generated_files/tmr0.c: 126:     TMR0_InterruptHandler = InterruptHandler;
  3992  074C  0020               	movlb	0	; select bank0
  3993  074D  0821               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  3994  074E  00E1               	movwf	_TMR0_InterruptHandler+1
  3995  074F  0820               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  3996  0750  00E0               	movwf	_TMR0_InterruptHandler
  3997  0751                     l200:
  3998  0751  0008               	return
  3999  0752                     __end_of_TMR0_SetInterruptHandler:
  4000                           
  4001                           	psect	text17
  4002  068F                     __ptext17:	
  4003 ;; *************** function _PIN_MANAGER_Initialize *****************
  4004 ;; Defined at:
  4005 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;		None
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;		None
  4010 ;; Return value:  Size  Location     Type
  4011 ;;                  1    wreg      void 
  4012 ;; Registers used:
  4013 ;;		wreg, status,2
  4014 ;; Tracked objects:
  4015 ;;		On entry : 0/0
  4016 ;;		On exit  : 0/0
  4017 ;;		Unchanged: 0/0
  4018 ;; Data sizes:     COMMON   BANK0   BANK1
  4019 ;;      Params:         0       0       0
  4020 ;;      Locals:         0       0       0
  4021 ;;      Temps:          0       0       0
  4022 ;;      Totals:         0       0       0
  4023 ;;Total ram usage:        0 bytes
  4024 ;; Hardware stack levels used: 1
  4025 ;; Hardware stack levels required when called: 7
  4026 ;; This function calls:
  4027 ;;		Nothing
  4028 ;; This function is called by:
  4029 ;;		_SYSTEM_Initialize
  4030 ;; This function uses a non-reentrant model
  4031 ;;
  4032                           
  4033  068F                     _PIN_MANAGER_Initialize:	
  4034                           ;psect for function _PIN_MANAGER_Initialize
  4035                           
  4036  068F                     l2065:	
  4037                           ;incstack = 0
  4038                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4039                           
  4040                           
  4041                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  4042  068F  0022               	movlb	2	; select bank2
  4043  0690  018C               	clrf	12	;volatile
  4044                           
  4045                           ;mcc_generated_files/pin_manager.c: 61:     LATC = 0x00;
  4046  0691  018E               	clrf	14	;volatile
  4047  0692                     l2067:
  4048                           
  4049                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0x0F;
  4050  0692  300F               	movlw	15
  4051  0693  0021               	movlb	1	; select bank1
  4052  0694  008C               	movwf	12	;volatile
  4053  0695                     l2069:
  4054                           
  4055                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0x0C;
  4056  0695  300C               	movlw	12
  4057  0696  008E               	movwf	14	;volatile
  4058  0697                     l2071:
  4059                           
  4060                           ;mcc_generated_files/pin_manager.c: 72:     ANSELC = 0x0C;
  4061  0697  300C               	movlw	12
  4062  0698  0023               	movlb	3	; select bank3
  4063  0699  008E               	movwf	14	;volatile
  4064  069A                     l2073:
  4065                           
  4066                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x07;
  4067  069A  3007               	movlw	7
  4068  069B  008C               	movwf	12	;volatile
  4069                           
  4070                           ;mcc_generated_files/pin_manager.c: 78:     WPUA = 0x00;
  4071  069C  0024               	movlb	4	; select bank4
  4072  069D  018C               	clrf	12	;volatile
  4073                           
  4074                           ;mcc_generated_files/pin_manager.c: 79:     WPUC = 0x00;
  4075  069E  018E               	clrf	14	;volatile
  4076  069F                     l2075:
  4077                           
  4078                           ;mcc_generated_files/pin_manager.c: 80:     OPTION_REGbits.nWPUEN = 1;
  4079  069F  0021               	movlb	1	; select bank1
  4080  06A0  1795               	bsf	21,7	;volatile
  4081                           
  4082                           ;mcc_generated_files/pin_manager.c: 86:     APFCON = 0x00;
  4083  06A1  0022               	movlb	2	; select bank2
  4084  06A2  019D               	clrf	29	;volatile
  4085  06A3                     l92:
  4086  06A3  0008               	return
  4087  06A4                     __end_of_PIN_MANAGER_Initialize:
  4088                           
  4089                           	psect	text18
  4090  0739                     __ptext18:	
  4091 ;; *************** function _OSCILLATOR_Initialize *****************
  4092 ;; Defined at:
  4093 ;;		line 62 in file "mcc_generated_files/mcc.c"
  4094 ;; Parameters:    Size  Location     Type
  4095 ;;		None
  4096 ;; Auto vars:     Size  Location     Type
  4097 ;;		None
  4098 ;; Return value:  Size  Location     Type
  4099 ;;                  1    wreg      void 
  4100 ;; Registers used:
  4101 ;;		wreg, status,2
  4102 ;; Tracked objects:
  4103 ;;		On entry : 0/0
  4104 ;;		On exit  : 0/0
  4105 ;;		Unchanged: 0/0
  4106 ;; Data sizes:     COMMON   BANK0   BANK1
  4107 ;;      Params:         0       0       0
  4108 ;;      Locals:         0       0       0
  4109 ;;      Temps:          0       0       0
  4110 ;;      Totals:         0       0       0
  4111 ;;Total ram usage:        0 bytes
  4112 ;; Hardware stack levels used: 1
  4113 ;; Hardware stack levels required when called: 7
  4114 ;; This function calls:
  4115 ;;		Nothing
  4116 ;; This function is called by:
  4117 ;;		_SYSTEM_Initialize
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121  0739                     _OSCILLATOR_Initialize:	
  4122                           ;psect for function _OSCILLATOR_Initialize
  4123                           
  4124  0739                     l2077:	
  4125                           ;incstack = 0
  4126                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4127                           
  4128                           
  4129                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x78;
  4130  0739  3078               	movlw	120
  4131  073A  0021               	movlb	1	; select bank1
  4132  073B  0099               	movwf	25	;volatile
  4133  073C                     l2079:
  4134                           
  4135                           ;mcc_generated_files/mcc.c: 67:     OSCTUNE = 0x00;
  4136  073C  0198               	clrf	24	;volatile
  4137  073D                     l2081:
  4138                           
  4139                           ;mcc_generated_files/mcc.c: 69:     BORCON = 0x00;
  4140  073D  0022               	movlb	2	; select bank2
  4141  073E  0196               	clrf	22	;volatile
  4142  073F                     l28:
  4143  073F  0008               	return
  4144  0740                     __end_of_OSCILLATOR_Initialize:
  4145                           
  4146                           	psect	text19
  4147  0765                     __ptext19:	
  4148 ;; *************** function _FVR_Initialize *****************
  4149 ;; Defined at:
  4150 ;;		line 58 in file "mcc_generated_files/fvr.c"
  4151 ;; Parameters:    Size  Location     Type
  4152 ;;		None
  4153 ;; Auto vars:     Size  Location     Type
  4154 ;;		None
  4155 ;; Return value:  Size  Location     Type
  4156 ;;                  1    wreg      void 
  4157 ;; Registers used:
  4158 ;;		wreg
  4159 ;; Tracked objects:
  4160 ;;		On entry : 0/0
  4161 ;;		On exit  : 0/0
  4162 ;;		Unchanged: 0/0
  4163 ;; Data sizes:     COMMON   BANK0   BANK1
  4164 ;;      Params:         0       0       0
  4165 ;;      Locals:         0       0       0
  4166 ;;      Temps:          0       0       0
  4167 ;;      Totals:         0       0       0
  4168 ;;Total ram usage:        0 bytes
  4169 ;; Hardware stack levels used: 1
  4170 ;; Hardware stack levels required when called: 7
  4171 ;; This function calls:
  4172 ;;		Nothing
  4173 ;; This function is called by:
  4174 ;;		_SYSTEM_Initialize
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178  0765                     _FVR_Initialize:	
  4179                           ;psect for function _FVR_Initialize
  4180                           
  4181  0765                     l2085:	
  4182                           ;incstack = 0
  4183                           ; Regs used in _FVR_Initialize: [wreg]
  4184                           
  4185                           
  4186                           ;mcc_generated_files/fvr.c: 61:     FVRCON = 0x82;
  4187  0765  3082               	movlw	130
  4188  0766  0022               	movlb	2	; select bank2
  4189  0767  0097               	movwf	23	;volatile
  4190  0768                     l210:
  4191  0768  0008               	return
  4192  0769                     __end_of_FVR_Initialize:
  4193                           
  4194                           	psect	text20
  4195  072A                     __ptext20:	
  4196 ;; *************** function _ADC_Initialize *****************
  4197 ;; Defined at:
  4198 ;;		line 67 in file "mcc_generated_files/adc.c"
  4199 ;; Parameters:    Size  Location     Type
  4200 ;;		None
  4201 ;; Auto vars:     Size  Location     Type
  4202 ;;		None
  4203 ;; Return value:  Size  Location     Type
  4204 ;;                  1    wreg      void 
  4205 ;; Registers used:
  4206 ;;		wreg, status,2
  4207 ;; Tracked objects:
  4208 ;;		On entry : 0/0
  4209 ;;		On exit  : 0/0
  4210 ;;		Unchanged: 0/0
  4211 ;; Data sizes:     COMMON   BANK0   BANK1
  4212 ;;      Params:         0       0       0
  4213 ;;      Locals:         0       0       0
  4214 ;;      Temps:          0       0       0
  4215 ;;      Totals:         0       0       0
  4216 ;;Total ram usage:        0 bytes
  4217 ;; Hardware stack levels used: 1
  4218 ;; Hardware stack levels required when called: 7
  4219 ;; This function calls:
  4220 ;;		Nothing
  4221 ;; This function is called by:
  4222 ;;		_SYSTEM_Initialize
  4223 ;; This function uses a non-reentrant model
  4224 ;;
  4225                           
  4226  072A                     _ADC_Initialize:	
  4227                           ;psect for function _ADC_Initialize
  4228                           
  4229  072A                     l2087:	
  4230                           ;incstack = 0
  4231                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4232                           
  4233                           
  4234                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0x40;
  4235  072A  3040               	movlw	64
  4236  072B  0021               	movlb	1	; select bank1
  4237  072C  009E               	movwf	30	;volatile
  4238  072D                     l2089:
  4239                           
  4240                           ;mcc_generated_files/adc.c: 75:     ADRESL = 0x00;
  4241  072D  019B               	clrf	27	;volatile
  4242  072E                     l2091:
  4243                           
  4244                           ;mcc_generated_files/adc.c: 78:     ADRESH = 0x00;
  4245  072E  019C               	clrf	28	;volatile
  4246                           
  4247                           ;mcc_generated_files/adc.c: 81:     ADCON0 = 0x7D;
  4248  072F  307D               	movlw	125
  4249  0730  009D               	movwf	29	;volatile
  4250  0731                     l48:
  4251  0731  0008               	return
  4252  0732                     __end_of_ADC_Initialize:
  4253                           
  4254                           	psect	text21
  4255  02BE                     __ptext21:	
  4256 ;; *************** function _povorot *****************
  4257 ;; Defined at:
  4258 ;;		line 331 in file "main.c"
  4259 ;; Parameters:    Size  Location     Type
  4260 ;;		None
  4261 ;; Auto vars:     Size  Location     Type
  4262 ;;		None
  4263 ;; Return value:  Size  Location     Type
  4264 ;;                  1    wreg      void 
  4265 ;; Registers used:
  4266 ;;		wreg, status,2, status,0, pclath, cstack
  4267 ;; Tracked objects:
  4268 ;;		On entry : 0/0
  4269 ;;		On exit  : 0/0
  4270 ;;		Unchanged: 0/0
  4271 ;; Data sizes:     COMMON   BANK0   BANK1
  4272 ;;      Params:         0       0       0
  4273 ;;      Locals:         0       0       0
  4274 ;;      Temps:          0       0       0
  4275 ;;      Totals:         0       0       0
  4276 ;;Total ram usage:        0 bytes
  4277 ;; Hardware stack levels used: 1
  4278 ;; Hardware stack levels required when called: 8
  4279 ;; This function calls:
  4280 ;;		_go_close
  4281 ;;		_go_open
  4282 ;; This function is called by:
  4283 ;;		_main
  4284 ;; This function uses a non-reentrant model
  4285 ;;
  4286                           
  4287  02BE                     _povorot:	
  4288                           ;psect for function _povorot
  4289                           
  4290  02BE                     l2503:	
  4291                           ;incstack = 0
  4292                           ; Regs used in _povorot: [wreg+status,2+status,0+pclath+cstack]
  4293                           
  4294                           
  4295                           ;main.c: 332:     if ((time_s > ROTATION_TIME) &&
  4296  02BE  3000               	movlw	0
  4297  02BF  0020               	movlb	0	; select bank0
  4298  02C0  0257               	subwf	_time_s+2,w
  4299  02C1  1D03               	skipz
  4300  02C2  2AC9               	goto	u1775
  4301  02C3  3000               	movlw	0
  4302  02C4  0256               	subwf	_time_s+1,w
  4303  02C5  1D03               	skipz
  4304  02C6  2AC9               	goto	u1775
  4305  02C7  303D               	movlw	61
  4306  02C8  0255               	subwf	_time_s,w
  4307  02C9                     u1775:
  4308  02C9  1C03               	skipc
  4309  02CA  2ACC               	goto	u1771
  4310  02CB  2ACD               	goto	u1770
  4311  02CC                     u1771:
  4312  02CC  2ADC               	goto	l2513
  4313  02CD                     u1770:
  4314  02CD                     l2505:
  4315  02CD  197C               	btfsc	_FLAGS,2
  4316  02CE  2AD0               	goto	u1781
  4317  02CF  2AD1               	goto	u1780
  4318  02D0                     u1781:
  4319  02D0  2ADC               	goto	l2513
  4320  02D1                     u1780:
  4321  02D1                     l2507:
  4322  02D1  187C               	btfsc	_FLAGS,0
  4323  02D2  2AD4               	goto	u1791
  4324  02D3  2AD5               	goto	u1790
  4325  02D4                     u1791:
  4326  02D4  2ADC               	goto	l2513
  4327  02D5                     u1790:
  4328  02D5                     l2509:
  4329  02D5  1CFC               	btfss	_FLAGS,1
  4330  02D6  2AD8               	goto	u1801
  4331  02D7  2AD9               	goto	u1800
  4332  02D8                     u1801:
  4333  02D8  2ADC               	goto	l2513
  4334  02D9                     u1800:
  4335  02D9                     l2511:
  4336                           
  4337                           ;main.c: 336:             ) {;main.c: 337:         go_close();
  4338  02D9  3185  25C0  3182   	fcall	_go_close
  4339  02DC                     l2513:
  4340                           
  4341                           ;main.c: 339:     if ((time_s > (ROTATION_TIME + 20 + 5 * 2)) &&
  4342  02DC  3000               	movlw	0
  4343  02DD  0020               	movlb	0	; select bank0
  4344  02DE  0257               	subwf	_time_s+2,w
  4345  02DF  1D03               	skipz
  4346  02E0  2AE7               	goto	u1815
  4347  02E1  3000               	movlw	0
  4348  02E2  0256               	subwf	_time_s+1,w
  4349  02E3  1D03               	skipz
  4350  02E4  2AE7               	goto	u1815
  4351  02E5  305B               	movlw	91
  4352  02E6  0255               	subwf	_time_s,w
  4353  02E7                     u1815:
  4354  02E7  1C03               	skipc
  4355  02E8  2AEA               	goto	u1811
  4356  02E9  2AEB               	goto	u1810
  4357  02EA                     u1811:
  4358  02EA  2B01               	goto	l433
  4359  02EB                     u1810:
  4360  02EB                     l2515:
  4361  02EB  1D7C               	btfss	_FLAGS,2
  4362  02EC  2AEE               	goto	u1821
  4363  02ED  2AEF               	goto	u1820
  4364  02EE                     u1821:
  4365  02EE  2B01               	goto	l433
  4366  02EF                     u1820:
  4367  02EF                     l2517:
  4368  02EF  187C               	btfsc	_FLAGS,0
  4369  02F0  2AF2               	goto	u1831
  4370  02F1  2AF3               	goto	u1830
  4371  02F2                     u1831:
  4372  02F2  2B01               	goto	l433
  4373  02F3                     u1830:
  4374  02F3                     l2519:
  4375  02F3  1CFC               	btfss	_FLAGS,1
  4376  02F4  2AF6               	goto	u1841
  4377  02F5  2AF7               	goto	u1840
  4378  02F6                     u1841:
  4379  02F6  2B01               	goto	l433
  4380  02F7                     u1840:
  4381  02F7                     l2521:
  4382                           
  4383                           ;main.c: 343:             ) {;main.c: 344:         go_open();
  4384  02F7  3187  2716  3182   	fcall	_go_open
  4385  02FA                     l2523:
  4386                           
  4387                           ;main.c: 345:         time_s = 0;
  4388  02FA  3000               	movlw	0
  4389  02FB  0020               	movlb	0	; select bank0
  4390  02FC  00D5               	movwf	_time_s
  4391  02FD  3000               	movlw	0
  4392  02FE  00D6               	movwf	_time_s+1
  4393  02FF  3000               	movlw	0
  4394  0300  00D7               	movwf	_time_s+2
  4395  0301                     l433:
  4396  0301  0008               	return
  4397  0302                     __end_of_povorot:
  4398                           
  4399                           	psect	text22
  4400  01D5                     __ptext22:	
  4401 ;; *************** function _get_voltage *****************
  4402 ;; Defined at:
  4403 ;;		line 390 in file "main.c"
  4404 ;; Parameters:    Size  Location     Type
  4405 ;;		None
  4406 ;; Auto vars:     Size  Location     Type
  4407 ;;  buf             1   18[BANK0 ] unsigned char 
  4408 ;;  q               1   19[BANK0 ] unsigned char 
  4409 ;;  q               1   20[BANK0 ] unsigned char 
  4410 ;;  res             2   16[BANK0 ] unsigned int 
  4411 ;; Return value:  Size  Location     Type
  4412 ;;                  1    wreg      void 
  4413 ;; Registers used:
  4414 ;;		wreg, status,2, status,0, pclath, cstack
  4415 ;; Tracked objects:
  4416 ;;		On entry : 0/0
  4417 ;;		On exit  : 0/0
  4418 ;;		Unchanged: 0/0
  4419 ;; Data sizes:     COMMON   BANK0   BANK1
  4420 ;;      Params:         0       0       0
  4421 ;;      Locals:         0       5       0
  4422 ;;      Temps:          0       2       0
  4423 ;;      Totals:         0       7       0
  4424 ;;Total ram usage:        7 bytes
  4425 ;; Hardware stack levels used: 1
  4426 ;; Hardware stack levels required when called: 9
  4427 ;; This function calls:
  4428 ;;		_ADC_GetConversion
  4429 ;;		_EEPROM_ReadByte
  4430 ;;		_EEPROM_WriteByte
  4431 ;;		_EEPROM_WriteShortLong
  4432 ;; This function is called by:
  4433 ;;		_main
  4434 ;; This function uses a non-reentrant model
  4435 ;;
  4436                           
  4437  01D5                     _get_voltage:	
  4438                           ;psect for function _get_voltage
  4439                           
  4440  01D5                     l2569:	
  4441                           ;incstack = 0
  4442                           ; Regs used in _get_voltage: [wreg+status,2+status,0+pclath+cstack]
  4443                           
  4444                           
  4445                           ;main.c: 391:     unsigned res = ADC_GetConversion(channel_FVR);
  4446  01D5  301F               	movlw	31
  4447  01D6  3185  259F  3181   	fcall	_ADC_GetConversion
  4448  01D9  0020               	movlb	0	; select bank0
  4449  01DA  0821               	movf	?_ADC_GetConversion+1,w
  4450  01DB  00B1               	movwf	get_voltage@res+1
  4451  01DC  0820               	movf	?_ADC_GetConversion,w
  4452  01DD  00B0               	movwf	get_voltage@res
  4453  01DE                     l2571:
  4454                           
  4455                           ;main.c: 392:     if (res > 46200) {
  4456  01DE  30B4               	movlw	180
  4457  01DF  0231               	subwf	get_voltage@res+1,w
  4458  01E0  3079               	movlw	121
  4459  01E1  1903               	skipnz
  4460  01E2  0230               	subwf	get_voltage@res,w
  4461  01E3  1C03               	skipc
  4462  01E4  29E6               	goto	u1991
  4463  01E5  29E7               	goto	u1990
  4464  01E6                     u1991:
  4465  01E6  2A30               	goto	l461
  4466  01E7                     u1990:
  4467  01E7                     l2573:
  4468                           
  4469                           ;main.c: 393:         for (char q = 0; q < 0x10; q++) {
  4470  01E7  01B4               	clrf	get_voltage@q
  4471  01E8                     l2579:
  4472                           
  4473                           ;main.c: 394:             char buf = EEPROM_ReadByte(q);
  4474  01E8  0834               	movf	get_voltage@q,w
  4475  01E9  3186  2634  3181   	fcall	_EEPROM_ReadByte
  4476  01EC  0020               	movlb	0	; select bank0
  4477  01ED  00AE               	movwf	??_get_voltage
  4478  01EE  082E               	movf	??_get_voltage,w
  4479  01EF  00B2               	movwf	get_voltage@buf
  4480  01F0                     l2581:
  4481                           
  4482                           ;main.c: 395:             if (buf != START_EEPROM_ADR) EEPROM_WriteByte(q, START_EEPROM_
      +                          ADR);
  4483  01F0  0832               	movf	get_voltage@buf,w
  4484  01F1  065F               	xorwf	_START_EEPROM_ADR,w
  4485  01F2  1903               	skipnz
  4486  01F3  29F5               	goto	u2001
  4487  01F4  29F6               	goto	u2000
  4488  01F5                     u2001:
  4489  01F5  29FE               	goto	l2585
  4490  01F6                     u2000:
  4491  01F6                     l2583:
  4492  01F6  085F               	movf	_START_EEPROM_ADR,w
  4493  01F7  00AE               	movwf	??_get_voltage
  4494  01F8  082E               	movf	??_get_voltage,w
  4495  01F9  00A0               	movwf	EEPROM_WriteByte@dt
  4496  01FA  0834               	movf	get_voltage@q,w
  4497  01FB  3185  254A  3181   	fcall	_EEPROM_WriteByte
  4498  01FE                     l2585:
  4499                           
  4500                           ;main.c: 396:         }
  4501  01FE  3001               	movlw	1
  4502  01FF  0020               	movlb	0	; select bank0
  4503  0200  00AE               	movwf	??_get_voltage
  4504  0201  082E               	movf	??_get_voltage,w
  4505  0202  07B4               	addwf	get_voltage@q,f
  4506  0203                     l2587:
  4507  0203  3010               	movlw	16
  4508  0204  0234               	subwf	get_voltage@q,w
  4509  0205  1C03               	skipc
  4510  0206  2A08               	goto	u2011
  4511  0207  2A09               	goto	u2010
  4512  0208                     u2011:
  4513  0208  29E8               	goto	l2579
  4514  0209                     u2010:
  4515  0209                     l2589:
  4516                           
  4517                           ;main.c: 397:         for (char q = START_EEPROM_ADR; q < START_EEPROM_ADR + 16; q += 4)
      +                           {
  4518  0209  085F               	movf	_START_EEPROM_ADR,w
  4519  020A  00AE               	movwf	??_get_voltage
  4520  020B  082E               	movf	??_get_voltage,w
  4521  020C  00B3               	movwf	get_voltage@q_800
  4522  020D  2A1E               	goto	l2595
  4523  020E                     l2591:
  4524                           
  4525                           ;main.c: 398:             EEPROM_WriteShortLong(q, time_s);
  4526  020E  0020               	movlb	0	; select bank0
  4527  020F  0855               	movf	_time_s,w
  4528  0210  00A5               	movwf	EEPROM_WriteShortLong@ucData
  4529  0211  0856               	movf	_time_s+1,w
  4530  0212  00A6               	movwf	EEPROM_WriteShortLong@ucData+1
  4531  0213  0857               	movf	_time_s+2,w
  4532  0214  00A7               	movwf	EEPROM_WriteShortLong@ucData+2
  4533  0215  0833               	movf	get_voltage@q_800,w
  4534  0216  3183  23C9  3181   	fcall	_EEPROM_WriteShortLong
  4535  0219                     l2593:
  4536                           
  4537                           ;main.c: 399:         }
  4538  0219  3004               	movlw	4
  4539  021A  0020               	movlb	0	; select bank0
  4540  021B  00AE               	movwf	??_get_voltage
  4541  021C  082E               	movf	??_get_voltage,w
  4542  021D  07B3               	addwf	get_voltage@q_800,f
  4543  021E                     l2595:
  4544  021E  085F               	movf	_START_EEPROM_ADR,w
  4545  021F  3E10               	addlw	16
  4546  0220  00AE               	movwf	??_get_voltage
  4547  0221  3000               	movlw	0
  4548  0222  1803               	skipnc
  4549  0223  3001               	movlw	1
  4550  0224  00AF               	movwf	??_get_voltage+1
  4551  0225  082F               	movf	??_get_voltage+1,w
  4552  0226  3A80               	xorlw	128
  4553  0227  3C80               	sublw	128
  4554  0228  1D03               	skipz
  4555  0229  2A2C               	goto	u2025
  4556  022A  082E               	movf	??_get_voltage,w
  4557  022B  0233               	subwf	get_voltage@q_800,w
  4558  022C                     u2025:
  4559  022C  1C03               	skipc
  4560  022D  2A2F               	goto	u2021
  4561  022E  2A30               	goto	u2020
  4562  022F                     u2021:
  4563  022F  2A0E               	goto	l2591
  4564  0230                     u2020:
  4565  0230                     l461:
  4566  0230  0008               	return
  4567  0231                     __end_of_get_voltage:
  4568                           
  4569                           	psect	text23
  4570  03C9                     __ptext23:	
  4571 ;; *************** function _EEPROM_WriteShortLong *****************
  4572 ;; Defined at:
  4573 ;;		line 40 in file "eeprom.c"
  4574 ;; Parameters:    Size  Location     Type
  4575 ;;  addr            1    wreg     unsigned char 
  4576 ;;  ucData          3    5[BANK0 ] unsigned um
  4577 ;; Auto vars:     Size  Location     Type
  4578 ;;  addr            1   13[BANK0 ] unsigned char 
  4579 ;;  dt              1   12[BANK0 ] unsigned char 
  4580 ;; Return value:  Size  Location     Type
  4581 ;;                  1    wreg      void 
  4582 ;; Registers used:
  4583 ;;		wreg, status,2, status,0, pclath, cstack
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMMON   BANK0   BANK1
  4589 ;;      Params:         0       3       0
  4590 ;;      Locals:         0       2       0
  4591 ;;      Temps:          0       4       0
  4592 ;;      Totals:         0       9       0
  4593 ;;Total ram usage:        9 bytes
  4594 ;; Hardware stack levels used: 1
  4595 ;; Hardware stack levels required when called: 8
  4596 ;; This function calls:
  4597 ;;		_EEPROM_WriteByte
  4598 ;; This function is called by:
  4599 ;;		_get_voltage
  4600 ;; This function uses a non-reentrant model
  4601 ;;
  4602                           
  4603  03C9                     _EEPROM_WriteShortLong:	
  4604                           ;psect for function _EEPROM_WriteShortLong
  4605                           
  4606                           
  4607                           ;incstack = 0
  4608                           ; Regs used in _EEPROM_WriteShortLong: [wreg+status,2+status,0+pclath+cstack]
  4609                           ;EEPROM_WriteShortLong@addr stored from wreg
  4610  03C9  0020               	movlb	0	; select bank0
  4611  03CA  00AD               	movwf	EEPROM_WriteShortLong@addr
  4612  03CB                     l2427:
  4613                           
  4614                           ;eeprom.c: 41:     EEPROM_WriteByte(addr, (unsigned char) ucData);
  4615  03CB  0825               	movf	EEPROM_WriteShortLong@ucData,w
  4616  03CC  00A8               	movwf	??_EEPROM_WriteShortLong
  4617  03CD  0828               	movf	??_EEPROM_WriteShortLong,w
  4618  03CE  00A0               	movwf	EEPROM_WriteByte@dt
  4619  03CF  082D               	movf	EEPROM_WriteShortLong@addr,w
  4620  03D0  3185  254A  3183   	fcall	_EEPROM_WriteByte
  4621  03D3                     l2429:
  4622                           
  4623                           ;eeprom.c: 42:      char dt = ucData >> 8;
  4624  03D3  0020               	movlb	0	; select bank0
  4625  03D4  0825               	movf	EEPROM_WriteShortLong@ucData,w
  4626  03D5  00A8               	movwf	??_EEPROM_WriteShortLong
  4627  03D6  0826               	movf	EEPROM_WriteShortLong@ucData+1,w
  4628  03D7  00A9               	movwf	??_EEPROM_WriteShortLong+1
  4629  03D8  0827               	movf	EEPROM_WriteShortLong@ucData+2,w
  4630  03D9  00AA               	movwf	??_EEPROM_WriteShortLong+2
  4631  03DA  3008               	movlw	8
  4632  03DB                     u1675:
  4633  03DB  36AA               	lsrf	??_EEPROM_WriteShortLong+2,f
  4634  03DC  0CA9               	rrf	??_EEPROM_WriteShortLong+1,f
  4635  03DD  0CA8               	rrf	??_EEPROM_WriteShortLong,f
  4636  03DE                     u1670:
  4637  03DE  0B89               	decfsz	9,f
  4638  03DF  2BDB               	goto	u1675
  4639  03E0  0828               	movf	??_EEPROM_WriteShortLong,w
  4640  03E1  00AB               	movwf	??_EEPROM_WriteShortLong+3
  4641  03E2  082B               	movf	??_EEPROM_WriteShortLong+3,w
  4642  03E3  00AC               	movwf	EEPROM_WriteShortLong@dt
  4643  03E4                     l2431:
  4644                           
  4645                           ;eeprom.c: 43:     EEPROM_WriteByte(addr + 1, dt);
  4646  03E4  082C               	movf	EEPROM_WriteShortLong@dt,w
  4647  03E5  00A8               	movwf	??_EEPROM_WriteShortLong
  4648  03E6  0828               	movf	??_EEPROM_WriteShortLong,w
  4649  03E7  00A0               	movwf	EEPROM_WriteByte@dt
  4650  03E8  082D               	movf	EEPROM_WriteShortLong@addr,w
  4651  03E9  3E01               	addlw	1
  4652  03EA  3185  254A  3183   	fcall	_EEPROM_WriteByte
  4653                           
  4654                           ;eeprom.c: 44:     dt = ucData >> 16;
  4655  03ED  0020               	movlb	0	; select bank0
  4656  03EE  0825               	movf	EEPROM_WriteShortLong@ucData,w
  4657  03EF  00A8               	movwf	??_EEPROM_WriteShortLong
  4658  03F0  0826               	movf	EEPROM_WriteShortLong@ucData+1,w
  4659  03F1  00A9               	movwf	??_EEPROM_WriteShortLong+1
  4660  03F2  0827               	movf	EEPROM_WriteShortLong@ucData+2,w
  4661  03F3  00AA               	movwf	??_EEPROM_WriteShortLong+2
  4662  03F4  3010               	movlw	16
  4663  03F5                     u1685:
  4664  03F5  36AA               	lsrf	??_EEPROM_WriteShortLong+2,f
  4665  03F6  0CA9               	rrf	??_EEPROM_WriteShortLong+1,f
  4666  03F7  0CA8               	rrf	??_EEPROM_WriteShortLong,f
  4667  03F8                     u1680:
  4668  03F8  0B89               	decfsz	9,f
  4669  03F9  2BF5               	goto	u1685
  4670  03FA  0828               	movf	??_EEPROM_WriteShortLong,w
  4671  03FB  00AB               	movwf	??_EEPROM_WriteShortLong+3
  4672  03FC  082B               	movf	??_EEPROM_WriteShortLong+3,w
  4673  03FD  00AC               	movwf	EEPROM_WriteShortLong@dt
  4674  03FE                     l2433:
  4675                           
  4676                           ;eeprom.c: 45:     EEPROM_WriteByte(addr + 2, dt);
  4677  03FE  082C               	movf	EEPROM_WriteShortLong@dt,w
  4678  03FF  00A8               	movwf	??_EEPROM_WriteShortLong
  4679  0400  0828               	movf	??_EEPROM_WriteShortLong,w
  4680  0401  00A0               	movwf	EEPROM_WriteByte@dt
  4681  0402  082D               	movf	EEPROM_WriteShortLong@addr,w
  4682  0403  3E02               	addlw	2
  4683  0404  3185  254A  3183   	fcall	_EEPROM_WriteByte
  4684  0407                     l576:
  4685  0407  0008               	return
  4686  0408                     __end_of_EEPROM_WriteShortLong:
  4687                           
  4688                           	psect	text24
  4689  054A                     __ptext24:	
  4690 ;; *************** function _EEPROM_WriteByte *****************
  4691 ;; Defined at:
  4692 ;;		line 6 in file "eeprom.c"
  4693 ;; Parameters:    Size  Location     Type
  4694 ;;  addr            1    wreg     unsigned char 
  4695 ;;  dt              1    0[BANK0 ] unsigned char 
  4696 ;; Auto vars:     Size  Location     Type
  4697 ;;  addr            1    3[BANK0 ] unsigned char 
  4698 ;;  status          1    4[BANK0 ] unsigned char 
  4699 ;; Return value:  Size  Location     Type
  4700 ;;                  1    wreg      void 
  4701 ;; Registers used:
  4702 ;;		wreg, status,2
  4703 ;; Tracked objects:
  4704 ;;		On entry : 0/0
  4705 ;;		On exit  : 0/0
  4706 ;;		Unchanged: 0/0
  4707 ;; Data sizes:     COMMON   BANK0   BANK1
  4708 ;;      Params:         0       1       0
  4709 ;;      Locals:         0       2       0
  4710 ;;      Temps:          0       2       0
  4711 ;;      Totals:         0       5       0
  4712 ;;Total ram usage:        5 bytes
  4713 ;; Hardware stack levels used: 1
  4714 ;; Hardware stack levels required when called: 7
  4715 ;; This function calls:
  4716 ;;		Nothing
  4717 ;; This function is called by:
  4718 ;;		_get_voltage
  4719 ;;		_EEPROM_WriteShortLong
  4720 ;;		_EEPROM_WriteWord
  4721 ;; This function uses a non-reentrant model
  4722 ;;
  4723                           
  4724  054A                     _EEPROM_WriteByte:	
  4725                           ;psect for function _EEPROM_WriteByte
  4726                           
  4727                           
  4728                           ;incstack = 0
  4729                           ; Regs used in _EEPROM_WriteByte: [wreg+status,2]
  4730                           ;EEPROM_WriteByte@addr stored from wreg
  4731  054A  0020               	movlb	0	; select bank0
  4732  054B  00A3               	movwf	EEPROM_WriteByte@addr
  4733  054C                     l2151:
  4734  054C                     l558:	
  4735                           ;eeprom.c: 7:     unsigned char status;;eeprom.c: 8:     while (WR);
  4736                           
  4737  054C  0023               	movlb	3	; select bank3
  4738  054D  1895               	btfsc	21,1	;volsfr
  4739  054E  2D50               	goto	u1311
  4740  054F  2D51               	goto	u1310
  4741  0550                     u1311:
  4742  0550  2D4C               	goto	l558
  4743  0551                     u1310:
  4744  0551                     l2153:
  4745                           
  4746                           ;eeprom.c: 9:     status = GIE;
  4747  0551  3000               	movlw	0
  4748  0552  1B8B               	btfsc	11,7	;volatile
  4749  0553  3001               	movlw	1
  4750  0554  0020               	movlb	0	; select bank0
  4751  0555  00A4               	movwf	EEPROM_WriteByte@status
  4752  0556                     l2155:
  4753                           
  4754                           ;eeprom.c: 10:     GIE = 0;
  4755  0556  138B               	bcf	11,7	;volatile
  4756  0557                     l2157:
  4757                           
  4758                           ;eeprom.c: 11:     EEADR = addr;
  4759  0557  0823               	movf	EEPROM_WriteByte@addr,w
  4760  0558  00A1               	movwf	??_EEPROM_WriteByte
  4761  0559  01A2               	clrf	??_EEPROM_WriteByte+1
  4762  055A  0821               	movf	??_EEPROM_WriteByte,w
  4763  055B  0023               	movlb	3	; select bank3
  4764  055C  0091               	movwf	17	;volatile
  4765  055D  0020               	movlb	0	; select bank0
  4766  055E  0822               	movf	??_EEPROM_WriteByte+1,w
  4767  055F  0023               	movlb	3	; select bank3
  4768  0560  0092               	movwf	18	;volatile
  4769  0561                     l2159:
  4770                           
  4771                           ;eeprom.c: 12:     EEDATA = dt;
  4772  0561  0020               	movlb	0	; select bank0
  4773  0562  0820               	movf	EEPROM_WriteByte@dt,w
  4774  0563  0023               	movlb	3	; select bank3
  4775  0564  0093               	movwf	19	;volatile
  4776  0565                     l2161:
  4777                           
  4778                           ;eeprom.c: 13:     WREN = 1;
  4779  0565  1515               	bsf	21,2	;volsfr
  4780  0566                     l2163:
  4781                           
  4782                           ;eeprom.c: 14:     EECON2 = 0x55;
  4783  0566  3055               	movlw	85
  4784  0567  0096               	movwf	22	;volsfr
  4785  0568                     l2165:
  4786                           
  4787                           ;eeprom.c: 15:     EECON2 = 0xAA;
  4788  0568  30AA               	movlw	170
  4789  0569  0096               	movwf	22	;volsfr
  4790  056A                     l2167:
  4791                           
  4792                           ;eeprom.c: 16:     WR = 1;
  4793  056A  1495               	bsf	21,1	;volsfr
  4794  056B                     l2169:
  4795                           
  4796                           ;eeprom.c: 17:     GIE = status;
  4797  056B  0020               	movlb	0	; select bank0
  4798  056C  1824               	btfsc	EEPROM_WriteByte@status,0
  4799  056D  2D6F               	goto	u1321
  4800  056E  2D71               	goto	u1320
  4801  056F                     u1321:
  4802  056F  178B               	bsf	11,7	;volatile
  4803  0570  2D72               	goto	u1334
  4804  0571                     u1320:
  4805  0571  138B               	bcf	11,7	;volatile
  4806  0572                     u1334:
  4807  0572                     l2171:
  4808                           
  4809                           ;eeprom.c: 18:     WREN = 0;
  4810  0572  0023               	movlb	3	; select bank3
  4811  0573  1115               	bcf	21,2	;volsfr
  4812  0574                     l561:
  4813  0574  0008               	return
  4814  0575                     __end_of_EEPROM_WriteByte:
  4815                           
  4816                           	psect	text25
  4817  0634                     __ptext25:	
  4818 ;; *************** function _EEPROM_ReadByte *****************
  4819 ;; Defined at:
  4820 ;;		line 21 in file "eeprom.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;  addr            1    wreg     unsigned char 
  4823 ;; Auto vars:     Size  Location     Type
  4824 ;;  addr            1    2[BANK0 ] unsigned char 
  4825 ;; Return value:  Size  Location     Type
  4826 ;;                  1    wreg      unsigned char 
  4827 ;; Registers used:
  4828 ;;		wreg
  4829 ;; Tracked objects:
  4830 ;;		On entry : 0/0
  4831 ;;		On exit  : 0/0
  4832 ;;		Unchanged: 0/0
  4833 ;; Data sizes:     COMMON   BANK0   BANK1
  4834 ;;      Params:         0       0       0
  4835 ;;      Locals:         0       1       0
  4836 ;;      Temps:          0       2       0
  4837 ;;      Totals:         0       3       0
  4838 ;;Total ram usage:        3 bytes
  4839 ;; Hardware stack levels used: 1
  4840 ;; Hardware stack levels required when called: 7
  4841 ;; This function calls:
  4842 ;;		Nothing
  4843 ;; This function is called by:
  4844 ;;		_get_voltage
  4845 ;;		_get_adr
  4846 ;;		_EEPROM_ReadShortLong
  4847 ;;		_EEPROM_ReadWord
  4848 ;; This function uses a non-reentrant model
  4849 ;;
  4850                           
  4851  0634                     _EEPROM_ReadByte:	
  4852                           ;psect for function _EEPROM_ReadByte
  4853                           
  4854                           
  4855                           ;incstack = 0
  4856                           ; Regs used in _EEPROM_ReadByte: [wreg]
  4857                           ;EEPROM_ReadByte@addr stored from wreg
  4858  0634  0020               	movlb	0	; select bank0
  4859  0635  00A2               	movwf	EEPROM_ReadByte@addr
  4860  0636                     l1977:
  4861  0636                     l564:	
  4862                           ;eeprom.c: 22:     while (RD || WR);
  4863                           
  4864  0636  0023               	movlb	3	; select bank3
  4865  0637  1815               	btfsc	21,0	;volsfr
  4866  0638  2E3A               	goto	u1071
  4867  0639  2E3B               	goto	u1070
  4868  063A                     u1071:
  4869  063A  2E36               	goto	l564
  4870  063B                     u1070:
  4871  063B                     l1979:
  4872  063B  1895               	btfsc	21,1	;volsfr
  4873  063C  2E3E               	goto	u1081
  4874  063D  2E3F               	goto	u1080
  4875  063E                     u1081:
  4876  063E  2E36               	goto	l564
  4877  063F                     u1080:
  4878  063F                     l1981:
  4879                           
  4880                           ;eeprom.c: 23:     EEADR = addr;
  4881  063F  0020               	movlb	0	; select bank0
  4882  0640  0822               	movf	EEPROM_ReadByte@addr,w
  4883  0641  00A0               	movwf	??_EEPROM_ReadByte
  4884  0642  01A1               	clrf	??_EEPROM_ReadByte+1
  4885  0643  0820               	movf	??_EEPROM_ReadByte,w
  4886  0644  0023               	movlb	3	; select bank3
  4887  0645  0091               	movwf	17	;volatile
  4888  0646  0020               	movlb	0	; select bank0
  4889  0647  0821               	movf	??_EEPROM_ReadByte+1,w
  4890  0648  0023               	movlb	3	; select bank3
  4891  0649  0092               	movwf	18	;volatile
  4892  064A                     l1983:
  4893                           
  4894                           ;eeprom.c: 24:     RD = 1;
  4895  064A  1415               	bsf	21,0	;volsfr
  4896                           
  4897                           ;eeprom.c: 25:     return EEDATA;
  4898  064B  0813               	movf	19,w	;volatile
  4899  064C                     l567:
  4900  064C  0008               	return
  4901  064D                     __end_of_EEPROM_ReadByte:
  4902                           
  4903                           	psect	text26
  4904  0446                     __ptext26:	
  4905 ;; *************** function _get_jump *****************
  4906 ;; Defined at:
  4907 ;;		line 219 in file "main.c"
  4908 ;; Parameters:    Size  Location     Type
  4909 ;;		None
  4910 ;; Auto vars:     Size  Location     Type
  4911 ;;  res             2    5[BANK0 ] unsigned int 
  4912 ;; Return value:  Size  Location     Type
  4913 ;;                  1    wreg      void 
  4914 ;; Registers used:
  4915 ;;		wreg, status,2, status,0, pclath, cstack
  4916 ;; Tracked objects:
  4917 ;;		On entry : 0/0
  4918 ;;		On exit  : 0/0
  4919 ;;		Unchanged: 0/0
  4920 ;; Data sizes:     COMMON   BANK0   BANK1
  4921 ;;      Params:         0       0       0
  4922 ;;      Locals:         0       2       0
  4923 ;;      Temps:          0       1       0
  4924 ;;      Totals:         0       3       0
  4925 ;;Total ram usage:        3 bytes
  4926 ;; Hardware stack levels used: 1
  4927 ;; Hardware stack levels required when called: 8
  4928 ;; This function calls:
  4929 ;;		_ADC_GetConversion
  4930 ;; This function is called by:
  4931 ;;		_main
  4932 ;; This function uses a non-reentrant model
  4933 ;;
  4934                           
  4935  0446                     _get_jump:	
  4936                           ;psect for function _get_jump
  4937                           
  4938  0446                     l377:	
  4939                           ;incstack = 0
  4940                           ; Regs used in _get_jump: [wreg+status,2+status,0+pclath+cstack]
  4941                           ;main.c: 221:     static signed char jump_counter;;main.c: 222:     do { ANSELAbits.ANSA
      +                          1 = 1; } while(0);
  4942                           
  4943  0446  0023               	movlb	3	; select bank3
  4944  0447  148C               	bsf	12,1	;volatile
  4945  0448                     l2479:
  4946                           
  4947                           ;main.c: 223:     unsigned res = ADC_GetConversion(PIN_JUMP_STATE);
  4948  0448  3001               	movlw	1
  4949  0449  3185  259F  3184   	fcall	_ADC_GetConversion
  4950  044C  0020               	movlb	0	; select bank0
  4951  044D  0821               	movf	?_ADC_GetConversion+1,w
  4952  044E  00A6               	movwf	get_jump@res+1
  4953  044F  0820               	movf	?_ADC_GetConversion,w
  4954  0450  00A5               	movwf	get_jump@res
  4955  0451                     l2481:
  4956  0451  0023               	movlb	3	; select bank3
  4957  0452  108C               	bcf	12,1	;volatile
  4958  0453                     l2483:
  4959                           
  4960                           ;main.c: 227:     if (res < 2000) jump_counter--;
  4961  0453  3007               	movlw	7
  4962  0454  0020               	movlb	0	; select bank0
  4963  0455  0226               	subwf	get_jump@res+1,w
  4964  0456  30D0               	movlw	208
  4965  0457  1903               	skipnz
  4966  0458  0225               	subwf	get_jump@res,w
  4967  0459  1803               	skipnc
  4968  045A  2C5C               	goto	u1741
  4969  045B  2C5D               	goto	u1740
  4970  045C                     u1741:
  4971  045C  2C62               	goto	l2487
  4972  045D                     u1740:
  4973  045D                     l2485:
  4974  045D  30FF               	movlw	255
  4975  045E  00A4               	movwf	??_get_jump
  4976  045F  0824               	movf	??_get_jump,w
  4977  0460  07DB               	addwf	get_jump@jump_counter,f
  4978  0461  2C66               	goto	l2489
  4979  0462                     l2487:
  4980  0462  3001               	movlw	1
  4981  0463  00A4               	movwf	??_get_jump
  4982  0464  0824               	movf	??_get_jump,w
  4983  0465  07DB               	addwf	get_jump@jump_counter,f
  4984  0466                     l2489:
  4985                           
  4986                           ;main.c: 239:     if (jump_counter > 10) {
  4987  0466  085B               	movf	get_jump@jump_counter,w
  4988  0467  3A80               	xorlw	128
  4989  0468  3E75               	addlw	-139
  4990  0469  1C03               	skipc
  4991  046A  2C6C               	goto	u1751
  4992  046B  2C6D               	goto	u1750
  4993  046C                     u1751:
  4994  046C  2C73               	goto	l2495
  4995  046D                     u1750:
  4996  046D                     l2491:
  4997                           
  4998                           ;main.c: 240:         jump_counter = 10;
  4999  046D  300A               	movlw	10
  5000  046E  00A4               	movwf	??_get_jump
  5001  046F  0824               	movf	??_get_jump,w
  5002  0470  00DB               	movwf	get_jump@jump_counter
  5003  0471                     l2493:
  5004                           
  5005                           ;main.c: 241:         FLAGS.bits._JUMP_CONNECTED = 0;
  5006  0471  127C               	bcf	_FLAGS,4
  5007                           
  5008                           ;main.c: 242:     } else if (jump_counter<-10) {
  5009  0472  2C7F               	goto	l386
  5010  0473                     l2495:
  5011  0473  085B               	movf	get_jump@jump_counter,w
  5012  0474  3A80               	xorlw	128
  5013  0475  3E8A               	addlw	138
  5014  0476  1803               	skipnc
  5015  0477  2C79               	goto	u1761
  5016  0478  2C7A               	goto	u1760
  5017  0479                     u1761:
  5018  0479  2C7F               	goto	l386
  5019  047A                     u1760:
  5020  047A                     l2497:
  5021                           
  5022                           ;main.c: 243:         jump_counter = -10;
  5023  047A  30F6               	movlw	246
  5024  047B  00A4               	movwf	??_get_jump
  5025  047C  0824               	movf	??_get_jump,w
  5026  047D  00DB               	movwf	get_jump@jump_counter
  5027  047E                     l2499:
  5028                           
  5029                           ;main.c: 244:         FLAGS.bits._JUMP_CONNECTED = 1;
  5030  047E  167C               	bsf	_FLAGS,4
  5031  047F                     l386:
  5032  047F  0008               	return
  5033  0480                     __end_of_get_jump:
  5034                           
  5035                           	psect	text27
  5036  0408                     __ptext27:	
  5037 ;; *************** function _get_fun *****************
  5038 ;; Defined at:
  5039 ;;		line 145 in file "main.c"
  5040 ;; Parameters:    Size  Location     Type
  5041 ;;		None
  5042 ;; Auto vars:     Size  Location     Type
  5043 ;;  res             2    5[BANK0 ] unsigned int 
  5044 ;; Return value:  Size  Location     Type
  5045 ;;                  1    wreg      void 
  5046 ;; Registers used:
  5047 ;;		wreg, status,2, status,0, pclath, cstack
  5048 ;; Tracked objects:
  5049 ;;		On entry : 0/0
  5050 ;;		On exit  : 0/0
  5051 ;;		Unchanged: 0/0
  5052 ;; Data sizes:     COMMON   BANK0   BANK1
  5053 ;;      Params:         0       0       0
  5054 ;;      Locals:         0       2       0
  5055 ;;      Temps:          0       1       0
  5056 ;;      Totals:         0       3       0
  5057 ;;Total ram usage:        3 bytes
  5058 ;; Hardware stack levels used: 1
  5059 ;; Hardware stack levels required when called: 8
  5060 ;; This function calls:
  5061 ;;		_ADC_GetConversion
  5062 ;; This function is called by:
  5063 ;;		_main
  5064 ;; This function uses a non-reentrant model
  5065 ;;
  5066                           
  5067  0408                     _get_fun:	
  5068                           ;psect for function _get_fun
  5069                           
  5070  0408                     l339:	
  5071                           ;incstack = 0
  5072                           ; Regs used in _get_fun: [wreg+status,2+status,0+pclath+cstack]
  5073                           ;main.c: 147:     static signed char fun_counter;;main.c: 148:     do { LATCbits.LATC1 =
      +                           1; } while(0);
  5074                           
  5075  0408  0022               	movlb	2	; select bank2
  5076  0409  148E               	bsf	14,1	;volatile
  5077  040A                     l341:	
  5078                           ;main.c: 149:     do { ANSELCbits.ANSC2 = 1; } while(0);
  5079                           
  5080  040A  0023               	movlb	3	; select bank3
  5081  040B  150E               	bsf	14,2	;volatile
  5082  040C                     l2453:
  5083                           
  5084                           ;main.c: 150:     unsigned res = ADC_GetConversion(PIN_FUN_STATE);
  5085  040C  3006               	movlw	6
  5086  040D  3185  259F  3184   	fcall	_ADC_GetConversion
  5087  0410  0020               	movlb	0	; select bank0
  5088  0411  0821               	movf	?_ADC_GetConversion+1,w
  5089  0412  00A6               	movwf	get_fun@res+1
  5090  0413  0820               	movf	?_ADC_GetConversion,w
  5091  0414  00A5               	movwf	get_fun@res
  5092  0415                     l2455:
  5093  0415  0023               	movlb	3	; select bank3
  5094  0416  110E               	bcf	14,2	;volatile
  5095  0417                     l2457:
  5096  0417  0022               	movlb	2	; select bank2
  5097  0418  108E               	bcf	14,1	;volatile
  5098  0419                     l2459:
  5099                           
  5100                           ;main.c: 153:     if (res < 2000) fun_counter--;
  5101  0419  3007               	movlw	7
  5102  041A  0020               	movlb	0	; select bank0
  5103  041B  0226               	subwf	get_fun@res+1,w
  5104  041C  30D0               	movlw	208
  5105  041D  1903               	skipnz
  5106  041E  0225               	subwf	get_fun@res,w
  5107  041F  1803               	skipnc
  5108  0420  2C22               	goto	u1711
  5109  0421  2C23               	goto	u1710
  5110  0422                     u1711:
  5111  0422  2C28               	goto	l2463
  5112  0423                     u1710:
  5113  0423                     l2461:
  5114  0423  30FF               	movlw	255
  5115  0424  00A4               	movwf	??_get_fun
  5116  0425  0824               	movf	??_get_fun,w
  5117  0426  07DD               	addwf	get_fun@fun_counter,f
  5118  0427  2C2C               	goto	l2465
  5119  0428                     l2463:
  5120  0428  3001               	movlw	1
  5121  0429  00A4               	movwf	??_get_fun
  5122  042A  0824               	movf	??_get_fun,w
  5123  042B  07DD               	addwf	get_fun@fun_counter,f
  5124  042C                     l2465:
  5125                           
  5126                           ;main.c: 166:        if (fun_counter > 10) {
  5127  042C  085D               	movf	get_fun@fun_counter,w
  5128  042D  3A80               	xorlw	128
  5129  042E  3E75               	addlw	-139
  5130  042F  1C03               	skipc
  5131  0430  2C32               	goto	u1721
  5132  0431  2C33               	goto	u1720
  5133  0432                     u1721:
  5134  0432  2C39               	goto	l2471
  5135  0433                     u1720:
  5136  0433                     l2467:
  5137                           
  5138                           ;main.c: 167:         fun_counter = 10;
  5139  0433  300A               	movlw	10
  5140  0434  00A4               	movwf	??_get_fun
  5141  0435  0824               	movf	??_get_fun,w
  5142  0436  00DD               	movwf	get_fun@fun_counter
  5143  0437                     l2469:
  5144                           
  5145                           ;main.c: 168:         FLAGS.bits._FUN_CONNECTED = 0;
  5146  0437  11FC               	bcf	_FLAGS,3
  5147                           
  5148                           ;main.c: 169:     } else if (fun_counter<-10) {
  5149  0438  2C45               	goto	l352
  5150  0439                     l2471:
  5151  0439  085D               	movf	get_fun@fun_counter,w
  5152  043A  3A80               	xorlw	128
  5153  043B  3E8A               	addlw	138
  5154  043C  1803               	skipnc
  5155  043D  2C3F               	goto	u1731
  5156  043E  2C40               	goto	u1730
  5157  043F                     u1731:
  5158  043F  2C45               	goto	l352
  5159  0440                     u1730:
  5160  0440                     l2473:
  5161                           
  5162                           ;main.c: 170:         fun_counter = -10;
  5163  0440  30F6               	movlw	246
  5164  0441  00A4               	movwf	??_get_fun
  5165  0442  0824               	movf	??_get_fun,w
  5166  0443  00DD               	movwf	get_fun@fun_counter
  5167  0444                     l2475:
  5168                           
  5169                           ;main.c: 171:         FLAGS.bits._FUN_CONNECTED = 1;
  5170  0444  15FC               	bsf	_FLAGS,3
  5171  0445                     l352:
  5172  0445  0008               	return
  5173  0446                     __end_of_get_fun:
  5174                           
  5175                           	psect	text28
  5176  059F                     __ptext28:	
  5177 ;; *************** function _ADC_GetConversion *****************
  5178 ;; Defined at:
  5179 ;;		line 116 in file "mcc_generated_files/adc.c"
  5180 ;; Parameters:    Size  Location     Type
  5181 ;;  channel         1    wreg     enum E2178
  5182 ;; Auto vars:     Size  Location     Type
  5183 ;;  channel         1    3[BANK0 ] enum E2178
  5184 ;; Return value:  Size  Location     Type
  5185 ;;                  2    0[BANK0 ] unsigned short 
  5186 ;; Registers used:
  5187 ;;		wreg, status,2, status,0
  5188 ;; Tracked objects:
  5189 ;;		On entry : 0/0
  5190 ;;		On exit  : 0/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMMON   BANK0   BANK1
  5193 ;;      Params:         0       2       0
  5194 ;;      Locals:         0       1       0
  5195 ;;      Temps:          0       1       0
  5196 ;;      Totals:         0       4       0
  5197 ;;Total ram usage:        4 bytes
  5198 ;; Hardware stack levels used: 1
  5199 ;; Hardware stack levels required when called: 7
  5200 ;; This function calls:
  5201 ;;		Nothing
  5202 ;; This function is called by:
  5203 ;;		_get_fun
  5204 ;;		_get_fun_full
  5205 ;;		_get_jump
  5206 ;;		_get_jump_full
  5207 ;;		_get_voltage
  5208 ;; This function uses a non-reentrant model
  5209 ;;
  5210                           
  5211  059F                     _ADC_GetConversion:	
  5212                           ;psect for function _ADC_GetConversion
  5213                           
  5214                           
  5215                           ;incstack = 0
  5216                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  5217                           ;ADC_GetConversion@channel stored from wreg
  5218  059F  0020               	movlb	0	; select bank0
  5219  05A0  00A3               	movwf	ADC_GetConversion@channel
  5220  05A1                     l2117:
  5221                           
  5222                           ;mcc_generated_files/adc.c: 116: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 117: {;mcc_generated_files/adc.c: 119:     ADCON0bits.CHS = ch
      +                          annel;
  5223  05A1  0823               	movf	ADC_GetConversion@channel,w
  5224  05A2  00A2               	movwf	??_ADC_GetConversion
  5225  05A3  0DA2               	rlf	??_ADC_GetConversion,f
  5226  05A4  0DA2               	rlf	??_ADC_GetConversion,f
  5227  05A5  0021               	movlb	1	; select bank1
  5228  05A6  081D               	movf	29,w	;volatile
  5229  05A7  0020               	movlb	0	; select bank0
  5230  05A8  0622               	xorwf	??_ADC_GetConversion,w
  5231  05A9  3983               	andlw	-125
  5232  05AA  0622               	xorwf	??_ADC_GetConversion,w
  5233  05AB  0021               	movlb	1	; select bank1
  5234  05AC  009D               	movwf	29	;volatile
  5235  05AD                     l2119:
  5236                           
  5237                           ;mcc_generated_files/adc.c: 122:     ADCON0bits.ADON = 1;
  5238  05AD  141D               	bsf	29,0	;volatile
  5239  05AE                     l2121:
  5240                           
  5241                           ;mcc_generated_files/adc.c: 125:     _delay((unsigned long)((5)*(16000000/4000000.0)));
  5242  05AE  3006               	movlw	6
  5243  05AF                     u2117:
  5244  05AF  0B89               	decfsz	9,f
  5245  05B0  2DAF               	goto	u2117
  5246  05B1  3200               	nop2
  5247  05B2                     l2123:
  5248                           
  5249                           ;mcc_generated_files/adc.c: 128:     ADCON0bits.GO_nDONE = 1;
  5250  05B2  0021               	movlb	1	; select bank1
  5251  05B3  149D               	bsf	29,1	;volatile
  5252  05B4                     l66:	
  5253                           ;mcc_generated_files/adc.c: 132:     {;mcc_generated_files/adc.c: 133:     }
  5254                           
  5255                           
  5256                           ;mcc_generated_files/adc.c: 131:     while (ADCON0bits.GO_nDONE)
  5257  05B4  189D               	btfsc	29,1	;volatile
  5258  05B5  2DB7               	goto	u1221
  5259  05B6  2DB8               	goto	u1220
  5260  05B7                     u1221:
  5261  05B7  2DB4               	goto	l66
  5262  05B8                     u1220:
  5263  05B8                     l2125:
  5264                           
  5265                           ;mcc_generated_files/adc.c: 136:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  5266  05B8  081C               	movf	28,w	;volatile
  5267  05B9  0020               	movlb	0	; select bank0
  5268  05BA  00A1               	movwf	?_ADC_GetConversion+1
  5269  05BB  0021               	movlb	1	; select bank1
  5270  05BC  081B               	movf	27,w	;volatile
  5271  05BD  0020               	movlb	0	; select bank0
  5272  05BE  00A0               	movwf	?_ADC_GetConversion
  5273  05BF                     l69:
  5274  05BF  0008               	return
  5275  05C0                     __end_of_ADC_GetConversion:
  5276                           
  5277                           	psect	text29
  5278  0345                     __ptext29:	
  5279 ;; *************** function _fun_work *****************
  5280 ;; Defined at:
  5281 ;;		line 350 in file "main.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;		None
  5284 ;; Auto vars:     Size  Location     Type
  5285 ;;		None
  5286 ;; Return value:  Size  Location     Type
  5287 ;;                  1    wreg      void 
  5288 ;; Registers used:
  5289 ;;		wreg, status,2, status,0, pclath, cstack
  5290 ;; Tracked objects:
  5291 ;;		On entry : 0/0
  5292 ;;		On exit  : 0/0
  5293 ;;		Unchanged: 0/0
  5294 ;; Data sizes:     COMMON   BANK0   BANK1
  5295 ;;      Params:         0       0       0
  5296 ;;      Locals:         0       0       0
  5297 ;;      Temps:          0       1       0
  5298 ;;      Totals:         0       1       0
  5299 ;;Total ram usage:        1 bytes
  5300 ;; Hardware stack levels used: 1
  5301 ;; Hardware stack levels required when called: 9
  5302 ;; This function calls:
  5303 ;;		_beep
  5304 ;;		_go_close
  5305 ;;		_go_close_alt
  5306 ;;		_go_open
  5307 ;;		_go_open_alt
  5308 ;; This function is called by:
  5309 ;;		_main
  5310 ;; This function uses a non-reentrant model
  5311 ;;
  5312                           
  5313  0345                     _fun_work:	
  5314                           ;psect for function _fun_work
  5315                           
  5316  0345                     l2525:	
  5317                           ;incstack = 0
  5318                           ; Regs used in _fun_work: [wreg+status,2+status,0+pclath+cstack]
  5319                           
  5320                           
  5321                           ;main.c: 351:     {;main.c: 352:         if (FLAGS.bits._FUN_CONNECTED &&
  5322  0345  1DFC               	btfss	_FLAGS,3
  5323  0346  2B48               	goto	u1851
  5324  0347  2B49               	goto	u1850
  5325  0348                     u1851:
  5326  0348  2B67               	goto	l2541
  5327  0349                     u1850:
  5328  0349                     l2527:
  5329  0349  187C               	btfsc	_FLAGS,0
  5330  034A  2B4C               	goto	u1861
  5331  034B  2B4D               	goto	u1860
  5332  034C                     u1861:
  5333  034C  2B67               	goto	l2541
  5334  034D                     u1860:
  5335  034D                     l2529:
  5336  034D  1D7C               	btfss	_FLAGS,2
  5337  034E  2B50               	goto	u1871
  5338  034F  2B51               	goto	u1870
  5339  0350                     u1871:
  5340  0350  2B67               	goto	l2541
  5341  0351                     u1870:
  5342  0351                     l2531:
  5343  0351  1AFC               	btfsc	_FLAGS,5
  5344  0352  2B54               	goto	u1881
  5345  0353  2B55               	goto	u1880
  5346  0354                     u1881:
  5347  0354  2B67               	goto	l2541
  5348  0355                     u1880:
  5349  0355                     l2533:
  5350                           
  5351                           ;main.c: 355:                 !FLAGS.bits.RELE_POW_WAIT) {;main.c: 356:             if (
      +                          FLAGS.bits.NORMAL_WORK_MODE) go_open();
  5352  0355  1CFC               	btfss	_FLAGS,1
  5353  0356  2B58               	goto	u1891
  5354  0357  2B59               	goto	u1890
  5355  0358                     u1891:
  5356  0358  2B5D               	goto	l2537
  5357  0359                     u1890:
  5358  0359                     l2535:
  5359  0359  3187  2716  3183   	fcall	_go_open
  5360  035C  2B60               	goto	l2539
  5361  035D                     l2537:
  5362  035D  3187  2752  3183   	fcall	_go_open_alt
  5363  0360                     l2539:
  5364                           
  5365                           ;main.c: 359:             beep( 40, 1);
  5366  0360  0020               	movlb	0	; select bank0
  5367  0361  01A0               	clrf	beep@count
  5368  0362  0AA0               	incf	beep@count,f
  5369  0363  3028               	movlw	40
  5370  0364  3185  251A  3183   	fcall	_beep
  5371  0367                     l2541:
  5372                           
  5373                           ;main.c: 361:         if (!FLAGS.bits._FUN_CONNECTED &&
  5374  0367  19FC               	btfsc	_FLAGS,3
  5375  0368  2B6A               	goto	u1901
  5376  0369  2B6B               	goto	u1900
  5377  036A                     u1901:
  5378  036A  2B87               	goto	l442
  5379  036B                     u1900:
  5380  036B                     l2543:
  5381  036B  197C               	btfsc	_FLAGS,2
  5382  036C  2B6E               	goto	u1911
  5383  036D  2B6F               	goto	u1910
  5384  036E                     u1911:
  5385  036E  2B87               	goto	l442
  5386  036F                     u1910:
  5387  036F                     l2545:
  5388  036F  1AFC               	btfsc	_FLAGS,5
  5389  0370  2B72               	goto	u1921
  5390  0371  2B73               	goto	u1920
  5391  0372                     u1921:
  5392  0372  2B87               	goto	l442
  5393  0373                     u1920:
  5394  0373                     l2547:
  5395                           
  5396                           ;main.c: 363:                 !FLAGS.bits.RELE_POW_WAIT) {;main.c: 364:             if (
      +                          FLAGS.bits.NORMAL_WORK_MODE) go_close();
  5397  0373  1CFC               	btfss	_FLAGS,1
  5398  0374  2B76               	goto	u1931
  5399  0375  2B77               	goto	u1930
  5400  0376                     u1931:
  5401  0376  2B7B               	goto	l2551
  5402  0377                     u1930:
  5403  0377                     l2549:
  5404  0377  3185  25C0  3183   	fcall	_go_close
  5405  037A  2B7E               	goto	l2553
  5406  037B                     l2551:
  5407  037B  3187  2757  3183   	fcall	_go_close_alt
  5408  037E                     l2553:
  5409                           
  5410                           ;main.c: 367:             beep( 40, 2);
  5411  037E  3002               	movlw	2
  5412  037F  0020               	movlb	0	; select bank0
  5413  0380  00A6               	movwf	??_fun_work
  5414  0381  0826               	movf	??_fun_work,w
  5415  0382  00A0               	movwf	beep@count
  5416  0383  3028               	movlw	40
  5417  0384  3185  251A  3183   	fcall	_beep
  5418  0387                     l442:
  5419  0387  0008               	return
  5420  0388                     __end_of_fun_work:
  5421                           
  5422                           	psect	text30
  5423  0752                     __ptext30:	
  5424 ;; *************** function _go_open_alt *****************
  5425 ;; Defined at:
  5426 ;;		line 114 in file "main.c"
  5427 ;; Parameters:    Size  Location     Type
  5428 ;;		None
  5429 ;; Auto vars:     Size  Location     Type
  5430 ;;		None
  5431 ;; Return value:  Size  Location     Type
  5432 ;;                  1    wreg      void 
  5433 ;; Registers used:
  5434 ;;		None
  5435 ;; Tracked objects:
  5436 ;;		On entry : 0/0
  5437 ;;		On exit  : 0/0
  5438 ;;		Unchanged: 0/0
  5439 ;; Data sizes:     COMMON   BANK0   BANK1
  5440 ;;      Params:         0       0       0
  5441 ;;      Locals:         0       0       0
  5442 ;;      Temps:          0       0       0
  5443 ;;      Totals:         0       0       0
  5444 ;;Total ram usage:        0 bytes
  5445 ;; Hardware stack levels used: 1
  5446 ;; Hardware stack levels required when called: 7
  5447 ;; This function calls:
  5448 ;;		Nothing
  5449 ;; This function is called by:
  5450 ;;		_fun_work
  5451 ;; This function uses a non-reentrant model
  5452 ;;
  5453                           
  5454  0752                     _go_open_alt:	
  5455                           ;psect for function _go_open_alt
  5456                           
  5457  0752                     l2369:	
  5458                           ;incstack = 0
  5459                           ; Regs used in _go_open_alt: []
  5460                           
  5461                           
  5462                           ;main.c: 115:     FLAGS.bits.CLOSED = 0;
  5463  0752  117C               	bcf	_FLAGS,2
  5464  0753                     l306:	
  5465                           ;main.c: 116:     do { LATCbits.LATC4 = 0; } while(0);
  5466                           
  5467  0753  0022               	movlb	2	; select bank2
  5468  0754  120E               	bcf	14,4	;volatile
  5469  0755                     l308:	
  5470                           ;main.c: 117:     do { LATCbits.LATC5 = 0; } while(0);
  5471                           
  5472  0755  128E               	bcf	14,5	;volatile
  5473  0756                     l310:
  5474  0756  0008               	return
  5475  0757                     __end_of_go_open_alt:
  5476                           
  5477                           	psect	text31
  5478  0716                     __ptext31:	
  5479 ;; *************** function _go_open *****************
  5480 ;; Defined at:
  5481 ;;		line 100 in file "main.c"
  5482 ;; Parameters:    Size  Location     Type
  5483 ;;		None
  5484 ;; Auto vars:     Size  Location     Type
  5485 ;;		None
  5486 ;; Return value:  Size  Location     Type
  5487 ;;                  1    wreg      void 
  5488 ;; Registers used:
  5489 ;;		wreg
  5490 ;; Tracked objects:
  5491 ;;		On entry : 0/0
  5492 ;;		On exit  : 0/0
  5493 ;;		Unchanged: 0/0
  5494 ;; Data sizes:     COMMON   BANK0   BANK1
  5495 ;;      Params:         0       0       0
  5496 ;;      Locals:         0       0       0
  5497 ;;      Temps:          0       1       0
  5498 ;;      Totals:         0       1       0
  5499 ;;Total ram usage:        1 bytes
  5500 ;; Hardware stack levels used: 1
  5501 ;; Hardware stack levels required when called: 7
  5502 ;; This function calls:
  5503 ;;		Nothing
  5504 ;; This function is called by:
  5505 ;;		_povorot
  5506 ;;		_fun_work
  5507 ;; This function uses a non-reentrant model
  5508 ;;
  5509                           
  5510  0716                     _go_open:	
  5511                           ;psect for function _go_open
  5512                           
  5513  0716                     l292:	
  5514                           ;incstack = 0
  5515                           ; Regs used in _go_open: [wreg]
  5516                           ;main.c: 101:     do { LATCbits.LATC4 = 0; } while(0);
  5517                           
  5518  0716  0022               	movlb	2	; select bank2
  5519  0717  120E               	bcf	14,4	;volatile
  5520  0718                     l294:	
  5521                           ;main.c: 102:     do { LATCbits.LATC5 = 1; } while(0);
  5522                           
  5523  0718  168E               	bsf	14,5	;volatile
  5524  0719                     l2361:
  5525                           
  5526                           ;main.c: 103:     time_pow_s = 20;
  5527  0719  3014               	movlw	20
  5528  071A  0020               	movlb	0	; select bank0
  5529  071B  00A0               	movwf	??_go_open
  5530  071C  0820               	movf	??_go_open,w
  5531  071D  00DE               	movwf	_time_pow_s
  5532  071E                     l2363:
  5533                           
  5534                           ;main.c: 104:     FLAGS.bits.RELE_POW_WAIT = 1;
  5535  071E  16FC               	bsf	_FLAGS,5
  5536  071F                     l296:
  5537  071F  0008               	return
  5538  0720                     __end_of_go_open:
  5539                           
  5540                           	psect	text32
  5541  0757                     __ptext32:	
  5542 ;; *************** function _go_close_alt *****************
  5543 ;; Defined at:
  5544 ;;		line 108 in file "main.c"
  5545 ;; Parameters:    Size  Location     Type
  5546 ;;		None
  5547 ;; Auto vars:     Size  Location     Type
  5548 ;;		None
  5549 ;; Return value:  Size  Location     Type
  5550 ;;                  1    wreg      void 
  5551 ;; Registers used:
  5552 ;;		None
  5553 ;; Tracked objects:
  5554 ;;		On entry : 0/0
  5555 ;;		On exit  : 0/0
  5556 ;;		Unchanged: 0/0
  5557 ;; Data sizes:     COMMON   BANK0   BANK1
  5558 ;;      Params:         0       0       0
  5559 ;;      Locals:         0       0       0
  5560 ;;      Temps:          0       0       0
  5561 ;;      Totals:         0       0       0
  5562 ;;Total ram usage:        0 bytes
  5563 ;; Hardware stack levels used: 1
  5564 ;; Hardware stack levels required when called: 7
  5565 ;; This function calls:
  5566 ;;		Nothing
  5567 ;; This function is called by:
  5568 ;;		_fun_work
  5569 ;;		_switch_wm
  5570 ;; This function uses a non-reentrant model
  5571 ;;
  5572                           
  5573  0757                     _go_close_alt:	
  5574                           ;psect for function _go_close_alt
  5575                           
  5576  0757                     l2367:	
  5577                           ;incstack = 0
  5578                           ; Regs used in _go_close_alt: []
  5579                           
  5580                           
  5581                           ;main.c: 109:     FLAGS.bits.CLOSED = 1;
  5582  0757  157C               	bsf	_FLAGS,2
  5583  0758                     l299:	
  5584                           ;main.c: 110:     do { LATCbits.LATC4 = 0; } while(0);
  5585                           
  5586  0758  0022               	movlb	2	; select bank2
  5587  0759  120E               	bcf	14,4	;volatile
  5588  075A                     l301:	
  5589                           ;main.c: 111:     do { LATCbits.LATC5 = 1; } while(0);
  5590                           
  5591  075A  168E               	bsf	14,5	;volatile
  5592  075B                     l303:
  5593  075B  0008               	return
  5594  075C                     __end_of_go_close_alt:
  5595                           
  5596                           	psect	text33
  5597  05C0                     __ptext33:	
  5598 ;; *************** function _go_close *****************
  5599 ;; Defined at:
  5600 ;;		line 89 in file "main.c"
  5601 ;; Parameters:    Size  Location     Type
  5602 ;;		None
  5603 ;; Auto vars:     Size  Location     Type
  5604 ;;		None
  5605 ;; Return value:  Size  Location     Type
  5606 ;;                  1    wreg      void 
  5607 ;; Registers used:
  5608 ;;		wreg
  5609 ;; Tracked objects:
  5610 ;;		On entry : 0/0
  5611 ;;		On exit  : 0/0
  5612 ;;		Unchanged: 0/0
  5613 ;; Data sizes:     COMMON   BANK0   BANK1
  5614 ;;      Params:         0       0       0
  5615 ;;      Locals:         0       0       0
  5616 ;;      Temps:          0       2       0
  5617 ;;      Totals:         0       2       0
  5618 ;;Total ram usage:        2 bytes
  5619 ;; Hardware stack levels used: 1
  5620 ;; Hardware stack levels required when called: 7
  5621 ;; This function calls:
  5622 ;;		Nothing
  5623 ;; This function is called by:
  5624 ;;		_povorot
  5625 ;;		_fun_work
  5626 ;;		_switch_wm
  5627 ;; This function uses a non-reentrant model
  5628 ;;
  5629                           
  5630  05C0                     _go_close:	
  5631                           ;psect for function _go_close
  5632                           
  5633  05C0                     l2349:	
  5634                           ;incstack = 0
  5635                           ; Regs used in _go_close: [wreg]
  5636                           
  5637                           
  5638                           ;main.c: 90:     time_s = 0;
  5639  05C0  3000               	movlw	0
  5640  05C1  0020               	movlb	0	; select bank0
  5641  05C2  00D5               	movwf	_time_s
  5642  05C3  3000               	movlw	0
  5643  05C4  00D6               	movwf	_time_s+1
  5644  05C5  3000               	movlw	0
  5645  05C6  00D7               	movwf	_time_s+2
  5646  05C7                     l2351:
  5647  05C7  0022               	movlb	2	; select bank2
  5648  05C8  160E               	bsf	14,4	;volatile
  5649  05C9                     l286:
  5650                           
  5651                           ;main.c: 92:     _delay((unsigned long)((5 * 1000)*(16000000/4000.0)));
  5652  05C9  3066               	movlw	102
  5653  05CA  0020               	movlb	0	; select bank0
  5654  05CB  00A1               	movwf	??_go_close+1
  5655  05CC  3076               	movlw	118
  5656  05CD  00A0               	movwf	??_go_close
  5657  05CE  30C1               	movlw	193
  5658  05CF                     u2127:
  5659  05CF  0B89               	decfsz	9,f
  5660  05D0  2DCF               	goto	u2127
  5661  05D1  0BA0               	decfsz	??_go_close,f
  5662  05D2  2DCF               	goto	u2127
  5663  05D3  0BA1               	decfsz	??_go_close+1,f
  5664  05D4  2DCF               	goto	u2127
  5665  05D5                     l2353:
  5666  05D5  0022               	movlb	2	; select bank2
  5667  05D6  168E               	bsf	14,5	;volatile
  5668  05D7                     l288:
  5669                           
  5670                           ;main.c: 94:     time_pow_s = 20;
  5671  05D7  3014               	movlw	20
  5672  05D8  0020               	movlb	0	; select bank0
  5673  05D9  00A0               	movwf	??_go_close
  5674  05DA  0820               	movf	??_go_close,w
  5675  05DB  00DE               	movwf	_time_pow_s
  5676  05DC                     l2355:
  5677                           
  5678                           ;main.c: 95:     FLAGS.bits.RELE_POW_WAIT = 1;
  5679  05DC  16FC               	bsf	_FLAGS,5
  5680  05DD                     l2357:
  5681                           
  5682                           ;main.c: 96:     FLAGS.bits.RELE_CON_WAIT = 1;
  5683  05DD  177C               	bsf	_FLAGS,6
  5684  05DE                     l289:
  5685  05DE  0008               	return
  5686  05DF                     __end_of_go_close:
  5687                           
  5688                           	psect	text34
  5689  051A                     __ptext34:	
  5690 ;; *************** function _beep *****************
  5691 ;; Defined at:
  5692 ;;		line 79 in file "main.c"
  5693 ;; Parameters:    Size  Location     Type
  5694 ;;  time            1    wreg     unsigned char 
  5695 ;;  count           1    0[BANK0 ] unsigned char 
  5696 ;; Auto vars:     Size  Location     Type
  5697 ;;  time            1    3[BANK0 ] unsigned char 
  5698 ;;  i               1    5[BANK0 ] unsigned char 
  5699 ;;  j               1    4[BANK0 ] unsigned char 
  5700 ;; Return value:  Size  Location     Type
  5701 ;;                  1    wreg      void 
  5702 ;; Registers used:
  5703 ;;		wreg, status,2, status,0, pclath, cstack
  5704 ;; Tracked objects:
  5705 ;;		On entry : 0/0
  5706 ;;		On exit  : 0/0
  5707 ;;		Unchanged: 0/0
  5708 ;; Data sizes:     COMMON   BANK0   BANK1
  5709 ;;      Params:         0       1       0
  5710 ;;      Locals:         0       3       0
  5711 ;;      Temps:          0       2       0
  5712 ;;      Totals:         0       6       0
  5713 ;;Total ram usage:        6 bytes
  5714 ;; Hardware stack levels used: 1
  5715 ;; Hardware stack levels required when called: 8
  5716 ;; This function calls:
  5717 ;;		_switch_zum
  5718 ;; This function is called by:
  5719 ;;		_fun_work
  5720 ;;		_switch_wm
  5721 ;; This function uses a non-reentrant model
  5722 ;;
  5723                           
  5724  051A                     _beep:	
  5725                           ;psect for function _beep
  5726                           
  5727                           
  5728                           ;incstack = 0
  5729                           ; Regs used in _beep: [wreg+status,2+status,0+pclath+cstack]
  5730                           ;beep@time stored from wreg
  5731  051A  0020               	movlb	0	; select bank0
  5732  051B  00A3               	movwf	beep@time
  5733  051C                     l2331:
  5734                           
  5735                           ;main.c: 80:     for (char j = 0; j < count; j++) {
  5736  051C  01A4               	clrf	beep@j
  5737  051D  2D43               	goto	l2347
  5738  051E                     l2333:
  5739                           
  5740                           ;main.c: 81:         for (char i = 0; i < time; i++) {
  5741  051E  01A5               	clrf	beep@i
  5742  051F  2D2C               	goto	l2341
  5743  0520                     l2335:
  5744                           
  5745                           ;main.c: 82:             switch_zum();
  5746  0520  3186  26CC  3185   	fcall	_switch_zum
  5747  0523                     l2337:
  5748                           
  5749                           ;main.c: 83:             _delay((unsigned long)((300)*(16000000/4000000.0)));
  5750  0523  30F0               	movlw	240
  5751  0524                     u2137:
  5752  0524  3200               	nop2
  5753  0525  0B89               	decfsz	9,f
  5754  0526  2D24               	goto	u2137
  5755  0527                     l2339:
  5756                           
  5757                           ;main.c: 84:         }
  5758  0527  3001               	movlw	1
  5759  0528  0020               	movlb	0	; select bank0
  5760  0529  00A1               	movwf	??_beep
  5761  052A  0821               	movf	??_beep,w
  5762  052B  07A5               	addwf	beep@i,f
  5763  052C                     l2341:
  5764  052C  0823               	movf	beep@time,w
  5765  052D  0225               	subwf	beep@i,w
  5766  052E  1C03               	skipc
  5767  052F  2D31               	goto	u1571
  5768  0530  2D32               	goto	u1570
  5769  0531                     u1571:
  5770  0531  2D20               	goto	l2335
  5771  0532                     u1570:
  5772  0532                     l2343:
  5773                           
  5774                           ;main.c: 85:         _delay((unsigned long)((100)*(16000000/4000.0)));
  5775  0532  3003               	movlw	3
  5776  0533  0020               	movlb	0	; select bank0
  5777  0534  00A2               	movwf	??_beep+1
  5778  0535  3008               	movlw	8
  5779  0536  00A1               	movwf	??_beep
  5780  0537  3077               	movlw	119
  5781  0538                     u2147:
  5782  0538  0B89               	decfsz	9,f
  5783  0539  2D38               	goto	u2147
  5784  053A  0BA1               	decfsz	??_beep,f
  5785  053B  2D38               	goto	u2147
  5786  053C  0BA2               	decfsz	??_beep+1,f
  5787  053D  2D38               	goto	u2147
  5788  053E                     l2345:
  5789                           
  5790                           ;main.c: 86:     }
  5791  053E  3001               	movlw	1
  5792  053F  0020               	movlb	0	; select bank0
  5793  0540  00A1               	movwf	??_beep
  5794  0541  0821               	movf	??_beep,w
  5795  0542  07A4               	addwf	beep@j,f
  5796  0543                     l2347:
  5797  0543  0820               	movf	beep@count,w
  5798  0544  0224               	subwf	beep@j,w
  5799  0545  1C03               	skipc
  5800  0546  2D48               	goto	u1581
  5801  0547  2D49               	goto	u1580
  5802  0548                     u1581:
  5803  0548  2D1E               	goto	l2333
  5804  0549                     u1580:
  5805  0549                     l282:
  5806  0549  0008               	return
  5807  054A                     __end_of_beep:
  5808                           
  5809                           	psect	text35
  5810  06CC                     __ptext35:	
  5811 ;; *************** function _switch_zum *****************
  5812 ;; Defined at:
  5813 ;;		line 71 in file "main.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;		None
  5816 ;; Auto vars:     Size  Location     Type
  5817 ;;		None
  5818 ;; Return value:  Size  Location     Type
  5819 ;;                  1    wreg      void 
  5820 ;; Registers used:
  5821 ;;		status,0
  5822 ;; Tracked objects:
  5823 ;;		On entry : 0/0
  5824 ;;		On exit  : 0/0
  5825 ;;		Unchanged: 0/0
  5826 ;; Data sizes:     COMMON   BANK0   BANK1
  5827 ;;      Params:         0       0       0
  5828 ;;      Locals:         0       0       0
  5829 ;;      Temps:          0       0       0
  5830 ;;      Totals:         0       0       0
  5831 ;;Total ram usage:        0 bytes
  5832 ;; Hardware stack levels used: 1
  5833 ;; Hardware stack levels required when called: 7
  5834 ;; This function calls:
  5835 ;;		Nothing
  5836 ;; This function is called by:
  5837 ;;		_beep
  5838 ;;		_start_setup
  5839 ;;		_TMR0_ISR
  5840 ;; This function uses a non-reentrant model
  5841 ;;
  5842                           
  5843  06CC                     _switch_zum:	
  5844                           ;psect for function _switch_zum
  5845                           
  5846                           
  5847                           ;Skip over the trampoline to the duplicate function for level 1
  5848  06CC  1C7E               	btfss	int$flags,0
  5849  06CD  2ECF               	goto	_switch_zum$intlevel0
  5850  06CE  2F09               	ljmp	i1_switch_zum
  5851  06CF                     _switch_zum$intlevel0:
  5852  06CF                     l268:	
  5853                           ;incstack = 0
  5854                           ; Regs used in _switch_zum: [status,0]
  5855                           ;main.c: 72:     do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  5856                           
  5857  06CF                     l2129:
  5858  06CF  1003               	clrc
  5859  06D0  0022               	movlb	2	; select bank2
  5860  06D1  1E8C               	btfss	12,5	;volatile
  5861  06D2  1403               	setc
  5862  06D3  1803               	btfsc	3,0
  5863  06D4  2ED6               	goto	u1231
  5864  06D5  2ED9               	goto	u1230
  5865  06D6                     u1231:
  5866  06D6  0022               	movlb	2	; select bank2
  5867  06D7  168C               	bsf	12,5	;volatile
  5868  06D8  2EDB               	goto	u1244
  5869  06D9                     u1230:
  5870  06D9  0022               	movlb	2	; select bank2
  5871  06DA  128C               	bcf	12,5	;volatile
  5872  06DB                     u1244:
  5873  06DB                     l270:
  5874  06DB  0008               	return
  5875  06DC                     __end_of_switch_zum:
  5876                           
  5877                           	psect	intentry
  5878  0004                     __pintentry:	
  5879 ;; *************** function _INTERRUPT_InterruptManager *****************
  5880 ;; Defined at:
  5881 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5882 ;; Parameters:    Size  Location     Type
  5883 ;;		None
  5884 ;; Auto vars:     Size  Location     Type
  5885 ;;		None
  5886 ;; Return value:  Size  Location     Type
  5887 ;;                  1    wreg      void 
  5888 ;; Registers used:
  5889 ;;		wreg, status,2, status,0, pclath, cstack
  5890 ;; Tracked objects:
  5891 ;;		On entry : 0/0
  5892 ;;		On exit  : 0/0
  5893 ;;		Unchanged: 0/0
  5894 ;; Data sizes:     COMMON   BANK0   BANK1
  5895 ;;      Params:         0       0       0
  5896 ;;      Locals:         0       0       0
  5897 ;;      Temps:          0       0       0
  5898 ;;      Totals:         0       0       0
  5899 ;;Total ram usage:        0 bytes
  5900 ;; Hardware stack levels used: 1
  5901 ;; Hardware stack levels required when called: 6
  5902 ;; This function calls:
  5903 ;;		_TMR0_ISR
  5904 ;;		_TMR2_ISR
  5905 ;; This function is called by:
  5906 ;;		Interrupt level 1
  5907 ;; This function uses a non-reentrant model
  5908 ;;
  5909                           
  5910  0004                     _INTERRUPT_InterruptManager:
  5911                           
  5912                           ;incstack = 0
  5913  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  5914                           
  5915                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  5916  0005  3180               	pagesel	$
  5917  0006                     i1l2657:
  5918                           
  5919                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  5920  0006  1E8B               	btfss	11,5	;volatile
  5921  0007  2809               	goto	u203_21
  5922  0008  280A               	goto	u203_20
  5923  0009                     u203_21:
  5924  0009  2812               	goto	i1l110
  5925  000A                     u203_20:
  5926  000A                     i1l2659:
  5927  000A  1D0B               	btfss	11,2	;volatile
  5928  000B  280D               	goto	u204_21
  5929  000C  280E               	goto	u204_20
  5930  000D                     u204_21:
  5931  000D  2812               	goto	i1l110
  5932  000E                     u204_20:
  5933  000E                     i1l2661:
  5934                           
  5935                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
  5936  000E  3186  26EC  3180   	fcall	_TMR0_ISR
  5937                           
  5938                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  5939  0011  2824               	goto	i1l116
  5940  0012                     i1l110:	
  5941                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
  5942                           
  5943  0012  1F0B               	btfss	11,6	;volatile
  5944  0013  2815               	goto	u205_21
  5945  0014  2816               	goto	u205_20
  5946  0015                     u205_21:
  5947  0015  2824               	goto	i1l116
  5948  0016                     u205_20:
  5949  0016                     i1l2663:
  5950                           
  5951                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  5952  0016  0021               	movlb	1	; select bank1
  5953  0017  1C91               	btfss	17,1	;volatile
  5954  0018  281A               	goto	u206_21
  5955  0019  281B               	goto	u206_20
  5956  001A                     u206_21:
  5957  001A  2824               	goto	i1l115
  5958  001B                     u206_20:
  5959  001B                     i1l2665:
  5960  001B  0020               	movlb	0	; select bank0
  5961  001C  1C91               	btfss	17,1	;volatile
  5962  001D  281F               	goto	u207_21
  5963  001E  2820               	goto	u207_20
  5964  001F                     u207_21:
  5965  001F  2824               	goto	i1l115
  5966  0020                     u207_20:
  5967  0020                     i1l2667:
  5968                           
  5969                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR2_ISR();
  5970  0020  3186  26A4  3180   	fcall	_TMR2_ISR
  5971                           
  5972                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  5973  0023  2824               	goto	i1l116
  5974  0024                     i1l115:	
  5975                           ;mcc_generated_files/interrupt_manager.c: 71:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 73:     }
  5976                           
  5977  0024                     i1l116:
  5978  0024  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5979  0025  0009               	retfie
  5980  0026                     __end_of_INTERRUPT_InterruptManager:
  5981                           
  5982                           	psect	text37
  5983  06A4                     __ptext37:	
  5984 ;; *************** function _TMR2_ISR *****************
  5985 ;; Defined at:
  5986 ;;		line 119 in file "mcc_generated_files/tmr2.c"
  5987 ;; Parameters:    Size  Location     Type
  5988 ;;		None
  5989 ;; Auto vars:     Size  Location     Type
  5990 ;;		None
  5991 ;; Return value:  Size  Location     Type
  5992 ;;                  1    wreg      void 
  5993 ;; Registers used:
  5994 ;;		wreg, status,2, status,0, pclath, cstack
  5995 ;; Tracked objects:
  5996 ;;		On entry : 0/0
  5997 ;;		On exit  : 0/0
  5998 ;;		Unchanged: 0/0
  5999 ;; Data sizes:     COMMON   BANK0   BANK1
  6000 ;;      Params:         0       0       0
  6001 ;;      Locals:         0       0       0
  6002 ;;      Temps:          0       0       0
  6003 ;;      Totals:         0       0       0
  6004 ;;Total ram usage:        0 bytes
  6005 ;; Hardware stack levels used: 1
  6006 ;; Hardware stack levels required when called: 5
  6007 ;; This function calls:
  6008 ;;		_TMR2_CallBack
  6009 ;; This function is called by:
  6010 ;;		_INTERRUPT_InterruptManager
  6011 ;; This function uses a non-reentrant model
  6012 ;;
  6013                           
  6014  06A4                     _TMR2_ISR:	
  6015                           ;psect for function _TMR2_ISR
  6016                           
  6017  06A4                     i1l2445:	
  6018                           ;incstack = 0
  6019                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
  6020                           
  6021                           
  6022                           ;mcc_generated_files/tmr2.c: 121:     static volatile unsigned int CountCallBack = 0;;mc
      +                          c_generated_files/tmr2.c: 124:     PIR1bits.TMR2IF = 0;
  6023  06A4  0020               	movlb	0	; select bank0
  6024  06A5  1091               	bcf	17,1	;volatile
  6025  06A6                     i1l2447:
  6026                           
  6027                           ;mcc_generated_files/tmr2.c: 127:     if (++CountCallBack >= 100)
  6028  06A6  3001               	movlw	1
  6029  06A7  07F8               	addwf	TMR2_ISR@CountCallBack,f	;volatile
  6030  06A8  3000               	movlw	0
  6031  06A9  3DF9               	addwfc	TMR2_ISR@CountCallBack+1,f	;volatile
  6032  06AA  3000               	movlw	0
  6033  06AB  0279               	subwf	TMR2_ISR@CountCallBack+1,w	;volatile
  6034  06AC  3064               	movlw	100
  6035  06AD  1903               	skipnz
  6036  06AE  0278               	subwf	TMR2_ISR@CountCallBack,w	;volatile
  6037  06AF  1C03               	skipc
  6038  06B0  2EB2               	goto	u170_21
  6039  06B1  2EB3               	goto	u170_20
  6040  06B2                     u170_21:
  6041  06B2  2EB8               	goto	i1l157
  6042  06B3                     u170_20:
  6043  06B3                     i1l2449:
  6044                           
  6045                           ;mcc_generated_files/tmr2.c: 128:     {;mcc_generated_files/tmr2.c: 130:         TMR2_Ca
      +                          llBack();
  6046  06B3  3186  26FC  3186   	fcall	_TMR2_CallBack
  6047  06B6                     i1l2451:
  6048                           
  6049                           ;mcc_generated_files/tmr2.c: 133:         CountCallBack = 0;
  6050  06B6  01F8               	clrf	TMR2_ISR@CountCallBack	;volatile
  6051  06B7  01F9               	clrf	TMR2_ISR@CountCallBack+1	;volatile
  6052  06B8                     i1l157:
  6053  06B8  0008               	return
  6054  06B9                     __end_of_TMR2_ISR:
  6055                           
  6056                           	psect	text38
  6057  06FC                     __ptext38:	
  6058 ;; *************** function _TMR2_CallBack *****************
  6059 ;; Defined at:
  6060 ;;		line 137 in file "mcc_generated_files/tmr2.c"
  6061 ;; Parameters:    Size  Location     Type
  6062 ;;		None
  6063 ;; Auto vars:     Size  Location     Type
  6064 ;;		None
  6065 ;; Return value:  Size  Location     Type
  6066 ;;                  1    wreg      void 
  6067 ;; Registers used:
  6068 ;;		wreg, status,2, status,0, pclath, cstack
  6069 ;; Tracked objects:
  6070 ;;		On entry : 0/0
  6071 ;;		On exit  : 0/0
  6072 ;;		Unchanged: 0/0
  6073 ;; Data sizes:     COMMON   BANK0   BANK1
  6074 ;;      Params:         0       0       0
  6075 ;;      Locals:         0       0       0
  6076 ;;      Temps:          0       0       0
  6077 ;;      Totals:         0       0       0
  6078 ;;Total ram usage:        0 bytes
  6079 ;; Hardware stack levels used: 1
  6080 ;; Hardware stack levels required when called: 4
  6081 ;; This function calls:
  6082 ;;		Absolute function
  6083 ;;		_TMR2_DefaultInterruptHandler
  6084 ;;		_sec_tick_work
  6085 ;; This function is called by:
  6086 ;;		_TMR2_ISR
  6087 ;; This function uses a non-reentrant model
  6088 ;;
  6089                           
  6090  06FC                     _TMR2_CallBack:	
  6091                           ;psect for function _TMR2_CallBack
  6092                           
  6093  06FC                     i1l2327:	
  6094                           ;incstack = 0
  6095                           ; Regs used in _TMR2_CallBack: [wreg+status,2+status,0+pclath+cstack]
  6096                           
  6097                           
  6098                           ;mcc_generated_files/tmr2.c: 141:     if(TMR2_InterruptHandler)
  6099  06FC  0020               	movlb	0	; select bank0
  6100  06FD  0862               	movf	_TMR2_InterruptHandler,w
  6101  06FE  0463               	iorwf	_TMR2_InterruptHandler+1,w
  6102  06FF  1903               	btfsc	3,2
  6103  0700  2F02               	goto	u156_21
  6104  0701  2F03               	goto	u156_20
  6105  0702                     u156_21:
  6106  0702  2F08               	goto	i1l161
  6107  0703                     u156_20:
  6108  0703                     i1l2329:
  6109                           
  6110                           ;mcc_generated_files/tmr2.c: 142:     {;mcc_generated_files/tmr2.c: 143:         TMR2_In
      +                          terruptHandler();
  6111  0703  0863               	movf	_TMR2_InterruptHandler+1,w
  6112  0704  008A               	movwf	10
  6113  0705  0862               	movf	_TMR2_InterruptHandler,w
  6114  0706  000A               	callw
  6115  0707  3186               	pagesel	$
  6116  0708                     i1l161:
  6117  0708  0008               	return
  6118  0709                     __end_of_TMR2_CallBack:
  6119                           
  6120                           	psect	text39
  6121  0775                     __ptext39:	
  6122 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  6123 ;; Defined at:
  6124 ;;		line 151 in file "mcc_generated_files/tmr2.c"
  6125 ;; Parameters:    Size  Location     Type
  6126 ;;		None
  6127 ;; Auto vars:     Size  Location     Type
  6128 ;;		None
  6129 ;; Return value:  Size  Location     Type
  6130 ;;                  1    wreg      void 
  6131 ;; Registers used:
  6132 ;;		None
  6133 ;; Tracked objects:
  6134 ;;		On entry : 0/0
  6135 ;;		On exit  : 0/0
  6136 ;;		Unchanged: 0/0
  6137 ;; Data sizes:     COMMON   BANK0   BANK1
  6138 ;;      Params:         0       0       0
  6139 ;;      Locals:         0       0       0
  6140 ;;      Temps:          0       0       0
  6141 ;;      Totals:         0       0       0
  6142 ;;Total ram usage:        0 bytes
  6143 ;; Hardware stack levels used: 1
  6144 ;; This function calls:
  6145 ;;		Nothing
  6146 ;; This function is called by:
  6147 ;;		_TMR2_Initialize
  6148 ;;		_TMR2_CallBack
  6149 ;; This function uses a non-reentrant model
  6150 ;;
  6151                           
  6152  0775                     _TMR2_DefaultInterruptHandler:	
  6153                           ;psect for function _TMR2_DefaultInterruptHandler
  6154                           
  6155  0775                     i1l167:	
  6156                           ;incstack = 0
  6157                           ; Regs used in _TMR2_DefaultInterruptHandler: []
  6158                           
  6159  0775  0008               	return
  6160  0776                     __end_of_TMR2_DefaultInterruptHandler:
  6161                           
  6162                           	psect	text40
  6163  0388                     __ptext40:	
  6164 ;; *************** function _sec_tick_work *****************
  6165 ;; Defined at:
  6166 ;;		line 310 in file "main.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;		None
  6169 ;; Auto vars:     Size  Location     Type
  6170 ;;		None
  6171 ;; Return value:  Size  Location     Type
  6172 ;;                  1    wreg      void 
  6173 ;; Registers used:
  6174 ;;		wreg, status,2, status,0, pclath, cstack
  6175 ;; Tracked objects:
  6176 ;;		On entry : 0/0
  6177 ;;		On exit  : 0/0
  6178 ;;		Unchanged: 0/0
  6179 ;; Data sizes:     COMMON   BANK0   BANK1
  6180 ;;      Params:         0       0       0
  6181 ;;      Locals:         0       0       0
  6182 ;;      Temps:          1       0       0
  6183 ;;      Totals:         1       0       0
  6184 ;;Total ram usage:        1 bytes
  6185 ;; Hardware stack levels used: 1
  6186 ;; Hardware stack levels required when called: 3
  6187 ;; This function calls:
  6188 ;;		_get_measure
  6189 ;;		_rele_tick
  6190 ;;		_toggle_tone
  6191 ;;		i1_switch_zum
  6192 ;; This function is called by:
  6193 ;;		_start_setup
  6194 ;;		_TMR2_CallBack
  6195 ;; This function uses a non-reentrant model
  6196 ;;
  6197                           
  6198  0388                     _sec_tick_work:	
  6199                           ;psect for function _sec_tick_work
  6200                           
  6201  0388                     i1l2131:	
  6202                           ;incstack = 0
  6203                           ; Regs used in _sec_tick_work: [wreg+status,2+status,0+pclath+cstack]
  6204                           
  6205                           
  6206                           ;main.c: 312:     switch_zum();
  6207  0388  3187  2709  3183   	fcall	i1_switch_zum
  6208  038B                     i1l2133:
  6209                           
  6210                           ;main.c: 314:     time_s++;
  6211  038B  3001               	movlw	1
  6212  038C  0020               	movlb	0	; select bank0
  6213  038D  07D5               	addwf	_time_s,f
  6214  038E  3000               	movlw	0
  6215  038F  1803               	skipnc
  6216  0390  3001               	movlw	1
  6217  0391  07D6               	addwf	_time_s+1,f
  6218  0392  3000               	movlw	0
  6219  0393  1803               	skipnc
  6220  0394  3001               	movlw	1
  6221  0395  07D7               	addwf	_time_s+2,f
  6222                           
  6223                           ;main.c: 315:     rele_tick();
  6224  0396  3185  2575  3183   	fcall	_rele_tick
  6225  0399  0064               	clrwdt	;# 
  6226  039A                     i1l2135:
  6227                           
  6228                           ;main.c: 317:     if (FLAGS.bits.ALARM) {
  6229  039A  1C7C               	btfss	_FLAGS,0
  6230  039B  2B9D               	goto	u125_21
  6231  039C  2B9E               	goto	u125_20
  6232  039D                     u125_21:
  6233  039D  2BAE               	goto	i1l2141
  6234  039E                     u125_20:
  6235  039E                     i1l2137:
  6236  039E  1003               	clrc
  6237  039F  0022               	movlb	2	; select bank2
  6238  03A0  1E0C               	btfss	12,4	;volatile
  6239  03A1  1403               	setc
  6240  03A2  1803               	btfsc	3,0
  6241  03A3  2BA5               	goto	u126_21
  6242  03A4  2BA8               	goto	u126_20
  6243  03A5                     u126_21:
  6244  03A5  0022               	movlb	2	; select bank2
  6245  03A6  160C               	bsf	12,4	;volatile
  6246  03A7  2BAA               	goto	u127_24
  6247  03A8                     u126_20:
  6248  03A8  0022               	movlb	2	; select bank2
  6249  03A9  120C               	bcf	12,4	;volatile
  6250  03AA                     u127_24:
  6251  03AA                     i1l2139:
  6252                           
  6253                           ;main.c: 319:         toggle_tone();
  6254  03AA  3187  2720  3183   	fcall	_toggle_tone
  6255                           
  6256                           ;main.c: 320:     } else {
  6257  03AD  2BC8               	goto	i1l428
  6258  03AE                     i1l2141:
  6259                           
  6260                           ;main.c: 321:         get_measure();
  6261  03AE  3184  24B8  3183   	fcall	_get_measure
  6262  03B1                     i1l2143:
  6263                           
  6264                           ;main.c: 322:         static char iled;;main.c: 323:         iled++;
  6265  03B1  3001               	movlw	1
  6266  03B2  00F7               	movwf	??_sec_tick_work
  6267  03B3  0877               	movf	??_sec_tick_work,w
  6268  03B4  07FA               	addwf	sec_tick_work@iled,f
  6269  03B5                     i1l2145:
  6270                           
  6271                           ;main.c: 324:         if (iled > 2) {
  6272  03B5  3003               	movlw	3
  6273  03B6  027A               	subwf	sec_tick_work@iled,w
  6274  03B7  1C03               	skipc
  6275  03B8  2BBA               	goto	u128_21
  6276  03B9  2BBB               	goto	u128_20
  6277  03BA                     u128_21:
  6278  03BA  2BC8               	goto	i1l428
  6279  03BB                     u128_20:
  6280  03BB                     i1l2147:
  6281  03BB  1003               	clrc
  6282  03BC  0022               	movlb	2	; select bank2
  6283  03BD  1E0C               	btfss	12,4	;volatile
  6284  03BE  1403               	setc
  6285  03BF  1803               	btfsc	3,0
  6286  03C0  2BC2               	goto	u129_21
  6287  03C1  2BC5               	goto	u129_20
  6288  03C2                     u129_21:
  6289  03C2  0022               	movlb	2	; select bank2
  6290  03C3  160C               	bsf	12,4	;volatile
  6291  03C4  2BC7               	goto	u130_24
  6292  03C5                     u129_20:
  6293  03C5  0022               	movlb	2	; select bank2
  6294  03C6  120C               	bcf	12,4	;volatile
  6295  03C7                     u130_24:
  6296  03C7                     i1l2149:
  6297                           
  6298                           ;main.c: 326:             iled = 0;
  6299  03C7  01FA               	clrf	sec_tick_work@iled
  6300  03C8                     i1l428:
  6301  03C8  0008               	return
  6302  03C9                     __end_of_sec_tick_work:
  6303                           
  6304                           	psect	text41
  6305  0720                     __ptext41:	
  6306 ;; *************** function _toggle_tone *****************
  6307 ;; Defined at:
  6308 ;;		line 75 in file "main.c"
  6309 ;; Parameters:    Size  Location     Type
  6310 ;;		None
  6311 ;; Auto vars:     Size  Location     Type
  6312 ;;		None
  6313 ;; Return value:  Size  Location     Type
  6314 ;;                  1    wreg      void 
  6315 ;; Registers used:
  6316 ;;		status,0
  6317 ;; Tracked objects:
  6318 ;;		On entry : 0/0
  6319 ;;		On exit  : 0/0
  6320 ;;		Unchanged: 0/0
  6321 ;; Data sizes:     COMMON   BANK0   BANK1
  6322 ;;      Params:         0       0       0
  6323 ;;      Locals:         0       0       0
  6324 ;;      Temps:          0       0       0
  6325 ;;      Totals:         0       0       0
  6326 ;;Total ram usage:        0 bytes
  6327 ;; Hardware stack levels used: 1
  6328 ;; This function calls:
  6329 ;;		Nothing
  6330 ;; This function is called by:
  6331 ;;		_sec_tick_work
  6332 ;; This function uses a non-reentrant model
  6333 ;;
  6334                           
  6335  0720                     _toggle_tone:	
  6336                           ;psect for function _toggle_tone
  6337                           
  6338  0720                     i1l2003:	
  6339                           ;incstack = 0
  6340                           ; Regs used in _toggle_tone: [status,0]
  6341                           
  6342                           
  6343                           ;main.c: 76:     INTCONbits.TMR0IE = ~INTCONbits.TMR0IE;
  6344  0720  1003               	clrc
  6345  0721  1E8B               	btfss	11,5	;volatile
  6346  0722  1403               	setc
  6347  0723  1803               	btfsc	3,0
  6348  0724  2F26               	goto	u110_21
  6349  0725  2F28               	goto	u110_20
  6350  0726                     u110_21:
  6351  0726  168B               	bsf	11,5	;volatile
  6352  0727  2F29               	goto	u111_24
  6353  0728                     u110_20:
  6354  0728  128B               	bcf	11,5	;volatile
  6355  0729                     u111_24:
  6356  0729                     i1l273:
  6357  0729  0008               	return
  6358  072A                     __end_of_toggle_tone:
  6359                           
  6360                           	psect	text42
  6361  0575                     __ptext42:	
  6362 ;; *************** function _rele_tick *****************
  6363 ;; Defined at:
  6364 ;;		line 289 in file "main.c"
  6365 ;; Parameters:    Size  Location     Type
  6366 ;;		None
  6367 ;; Auto vars:     Size  Location     Type
  6368 ;;		None
  6369 ;; Return value:  Size  Location     Type
  6370 ;;                  1    wreg      void 
  6371 ;; Registers used:
  6372 ;;		wreg, status,2, status,0
  6373 ;; Tracked objects:
  6374 ;;		On entry : 0/0
  6375 ;;		On exit  : 0/0
  6376 ;;		Unchanged: 0/0
  6377 ;; Data sizes:     COMMON   BANK0   BANK1
  6378 ;;      Params:         0       0       0
  6379 ;;      Locals:         0       0       0
  6380 ;;      Temps:          2       0       0
  6381 ;;      Totals:         2       0       0
  6382 ;;Total ram usage:        2 bytes
  6383 ;; Hardware stack levels used: 1
  6384 ;; This function calls:
  6385 ;;		Nothing
  6386 ;; This function is called by:
  6387 ;;		_sec_tick_work
  6388 ;; This function uses a non-reentrant model
  6389 ;;
  6390                           
  6391  0575                     _rele_tick:	
  6392                           ;psect for function _rele_tick
  6393                           
  6394  0575                     i1l2025:	
  6395                           ;incstack = 0
  6396                           ; Regs used in _rele_tick: [wreg+status,2+status,0]
  6397                           
  6398                           
  6399                           ;main.c: 290:     if (FLAGS.bits.RELE_POW_WAIT) {
  6400  0575  1EFC               	btfss	_FLAGS,5
  6401  0576  2D78               	goto	u115_21
  6402  0577  2D79               	goto	u115_20
  6403  0578                     u115_21:
  6404  0578  2D9E               	goto	i1l416
  6405  0579                     u115_20:
  6406  0579                     i1l2027:
  6407                           
  6408                           ;main.c: 291:         if (time_pow_s > 0) {
  6409  0579  0020               	movlb	0	; select bank0
  6410  057A  085E               	movf	_time_pow_s,w
  6411  057B  1903               	btfsc	3,2
  6412  057C  2D7E               	goto	u116_21
  6413  057D  2D7F               	goto	u116_20
  6414  057E                     u116_21:
  6415  057E  2D82               	goto	i1l406
  6416  057F                     u116_20:
  6417  057F                     i1l2029:
  6418                           
  6419                           ;main.c: 292:             time_pow_s--;
  6420  057F  3001               	movlw	1
  6421  0580  02DE               	subwf	_time_pow_s,f
  6422                           
  6423                           ;main.c: 293:         } else {
  6424  0581  2D9E               	goto	i1l416
  6425  0582                     i1l406:
  6426                           
  6427                           ;main.c: 294:             if (FLAGS.bits.RELE_CON_WAIT) {
  6428  0582  1F7C               	btfss	_FLAGS,6
  6429  0583  2D85               	goto	u117_21
  6430  0584  2D86               	goto	u117_20
  6431  0585                     u117_21:
  6432  0585  2D9A               	goto	i1l414
  6433  0586                     u117_20:
  6434  0586                     i1l409:	
  6435                           ;main.c: 295:                 do { LATCbits.LATC5 = 0; } while(0);
  6436                           
  6437  0586  0022               	movlb	2	; select bank2
  6438  0587  128E               	bcf	14,5	;volatile
  6439  0588                     i1l2031:
  6440                           
  6441                           ;main.c: 296:                 _delay((unsigned long)((5 * 1000)*(16000000/4000.0)));
  6442  0588  3066               	movlw	102
  6443  0589  00F1               	movwf	??_rele_tick+1
  6444  058A  3076               	movlw	118
  6445  058B  00F0               	movwf	??_rele_tick
  6446  058C  30C1               	movlw	193
  6447  058D                     u215_27:
  6448  058D  0B89               	decfsz	9,f
  6449  058E  2D8D               	goto	u215_27
  6450  058F  0BF0               	decfsz	??_rele_tick,f
  6451  0590  2D8D               	goto	u215_27
  6452  0591  0BF1               	decfsz	??_rele_tick+1,f
  6453  0592  2D8D               	goto	u215_27
  6454  0593  0000               	nop
  6455  0594                     i1l2033:
  6456  0594  0022               	movlb	2	; select bank2
  6457  0595  120E               	bcf	14,4	;volatile
  6458  0596                     i1l2035:
  6459                           
  6460                           ;main.c: 298:                 FLAGS.bits.CLOSED = 1;
  6461  0596  157C               	bsf	_FLAGS,2
  6462  0597                     i1l2037:
  6463                           
  6464                           ;main.c: 299:                 FLAGS.bits.RELE_CON_WAIT = 0;
  6465  0597  137C               	bcf	_FLAGS,6
  6466  0598                     i1l2039:
  6467                           
  6468                           ;main.c: 300:                 FLAGS.bits.RELE_POW_WAIT = 0;
  6469  0598  12FC               	bcf	_FLAGS,5
  6470                           
  6471                           ;main.c: 301:             } else {
  6472  0599  2D9E               	goto	i1l416
  6473  059A                     i1l414:	
  6474                           ;main.c: 302:                 do { LATCbits.LATC5 = 0; } while(0);
  6475                           
  6476  059A  0022               	movlb	2	; select bank2
  6477  059B  128E               	bcf	14,5	;volatile
  6478  059C                     i1l415:
  6479                           
  6480                           ;main.c: 303:                 FLAGS.bits.CLOSED = 0;
  6481  059C  117C               	bcf	_FLAGS,2
  6482                           
  6483                           ;main.c: 304:                 FLAGS.bits.RELE_POW_WAIT = 0;
  6484  059D  12FC               	bcf	_FLAGS,5
  6485  059E                     i1l416:
  6486  059E  0008               	return
  6487  059F                     __end_of_rele_tick:
  6488                           
  6489                           	psect	text43
  6490  04B8                     __ptext43:	
  6491 ;; *************** function _get_measure *****************
  6492 ;; Defined at:
  6493 ;;		line 132 in file "main.c"
  6494 ;; Parameters:    Size  Location     Type
  6495 ;;		None
  6496 ;; Auto vars:     Size  Location     Type
  6497 ;;  res             2    5[COMMON] unsigned int 
  6498 ;; Return value:  Size  Location     Type
  6499 ;;                  1    wreg      void 
  6500 ;; Registers used:
  6501 ;;		wreg, status,2, status,0, pclath, cstack
  6502 ;; Tracked objects:
  6503 ;;		On entry : 0/0
  6504 ;;		On exit  : 0/0
  6505 ;;		Unchanged: 0/0
  6506 ;; Data sizes:     COMMON   BANK0   BANK1
  6507 ;;      Params:         0       0       0
  6508 ;;      Locals:         2       0       0
  6509 ;;      Temps:          1       0       0
  6510 ;;      Totals:         3       0       0
  6511 ;;Total ram usage:        3 bytes
  6512 ;; Hardware stack levels used: 1
  6513 ;; Hardware stack levels required when called: 2
  6514 ;; This function calls:
  6515 ;;		_start_alarm
  6516 ;;		i1_ADC_GetConversion
  6517 ;; This function is called by:
  6518 ;;		_sec_tick_work
  6519 ;; This function uses a non-reentrant model
  6520 ;;
  6521                           
  6522  04B8                     _get_measure:	
  6523                           ;psect for function _get_measure
  6524                           
  6525  04B8                     i1l322:	
  6526                           ;incstack = 0
  6527                           ; Regs used in _get_measure: [wreg+status,2+status,0+pclath+cstack]
  6528                           ;main.c: 133:     static unsigned char measures;;main.c: 134:     do { LATCbits.LATC1 = 
      +                          1; } while(0);
  6529                           
  6530  04B8  0022               	movlb	2	; select bank2
  6531  04B9  148E               	bsf	14,1	;volatile
  6532  04BA                     i1l324:	
  6533                           ;main.c: 135:     do { ANSELCbits.ANSC3 = 1; } while(0);
  6534                           
  6535  04BA  0023               	movlb	3	; select bank3
  6536  04BB  158E               	bsf	14,3	;volatile
  6537  04BC                     i1l2005:
  6538                           
  6539                           ;main.c: 136:     unsigned res = ADC_GetConversion(PIN_WSP_STATE);
  6540  04BC  3007               	movlw	7
  6541  04BD  3186  2619  3184   	fcall	i1_ADC_GetConversion
  6542  04C0  0871               	movf	?i1_ADC_GetConversion+1,w
  6543  04C1  00F6               	movwf	get_measure@res+1
  6544  04C2  0870               	movf	?i1_ADC_GetConversion,w
  6545  04C3  00F5               	movwf	get_measure@res
  6546  04C4                     i1l2007:
  6547  04C4  0023               	movlb	3	; select bank3
  6548  04C5  118E               	bcf	14,3	;volatile
  6549  04C6                     i1l2009:
  6550  04C6  0022               	movlb	2	; select bank2
  6551  04C7  108E               	bcf	14,1	;volatile
  6552  04C8                     i1l2011:
  6553                           
  6554                           ;main.c: 139:     if (res < BAD_WSP_VOLTAGE) measures++;
  6555  04C8  304E               	movlw	78
  6556  04C9  0276               	subwf	get_measure@res+1,w
  6557  04CA  3020               	movlw	32
  6558  04CB  1903               	skipnz
  6559  04CC  0275               	subwf	get_measure@res,w
  6560  04CD  1803               	skipnc
  6561  04CE  2CD0               	goto	u112_21
  6562  04CF  2CD1               	goto	u112_20
  6563  04D0                     u112_21:
  6564  04D0  2CD6               	goto	i1l2015
  6565  04D1                     u112_20:
  6566  04D1                     i1l2013:
  6567  04D1  3001               	movlw	1
  6568  04D2  00F4               	movwf	??_get_measure
  6569  04D3  0874               	movf	??_get_measure,w
  6570  04D4  07FB               	addwf	get_measure@measures,f
  6571  04D5  2CE0               	goto	i1l2019
  6572  04D6                     i1l2015:
  6573  04D6  309C               	movlw	156
  6574  04D7  0276               	subwf	get_measure@res+1,w
  6575  04D8  3041               	movlw	65
  6576  04D9  1903               	skipnz
  6577  04DA  0275               	subwf	get_measure@res,w
  6578  04DB  1C03               	skipc
  6579  04DC  2CDE               	goto	u113_21
  6580  04DD  2CDF               	goto	u113_20
  6581  04DE                     u113_21:
  6582  04DE  2CE0               	goto	i1l2019
  6583  04DF                     u113_20:
  6584  04DF                     i1l2017:
  6585  04DF  01FB               	clrf	get_measure@measures
  6586  04E0                     i1l2019:
  6587                           
  6588                           ;main.c: 141:     if (measures > 2) start_alarm();
  6589  04E0  3003               	movlw	3
  6590  04E1  027B               	subwf	get_measure@measures,w
  6591  04E2  1C03               	skipc
  6592  04E3  2CE5               	goto	u114_21
  6593  04E4  2CE6               	goto	u114_20
  6594  04E5                     u114_21:
  6595  04E5  2CE9               	goto	i1l334
  6596  04E6                     u114_20:
  6597  04E6                     i1l2021:
  6598  04E6  3186  26DC  3184   	fcall	_start_alarm
  6599  04E9                     i1l334:
  6600  04E9  0008               	return
  6601  04EA                     __end_of_get_measure:
  6602                           
  6603                           	psect	text44
  6604  0619                     __ptext44:	
  6605 ;; *************** function i1_ADC_GetConversion *****************
  6606 ;; Defined at:
  6607 ;;		line 116 in file "mcc_generated_files/adc.c"
  6608 ;; Parameters:    Size  Location     Type
  6609 ;;  channel         1    wreg     enum E2178
  6610 ;; Auto vars:     Size  Location     Type
  6611 ;;  channel         1    3[COMMON] enum E2178
  6612 ;; Return value:  Size  Location     Type
  6613 ;;                  2    0[COMMON] unsigned short 
  6614 ;; Registers used:
  6615 ;;		wreg, status,2, status,0
  6616 ;; Tracked objects:
  6617 ;;		On entry : 0/0
  6618 ;;		On exit  : 0/0
  6619 ;;		Unchanged: 0/0
  6620 ;; Data sizes:     COMMON   BANK0   BANK1
  6621 ;;      Params:         2       0       0
  6622 ;;      Locals:         1       0       0
  6623 ;;      Temps:          1       0       0
  6624 ;;      Totals:         4       0       0
  6625 ;;Total ram usage:        4 bytes
  6626 ;; Hardware stack levels used: 1
  6627 ;; This function calls:
  6628 ;;		Nothing
  6629 ;; This function is called by:
  6630 ;;		_get_measure
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634  0619                     i1_ADC_GetConversion:	
  6635                           ;psect for function i1_ADC_GetConversion
  6636                           
  6637                           
  6638                           ;incstack = 0
  6639                           ; Regs used in i1_ADC_GetConversion: [wreg+status,2+status,0]
  6640                           ;i1ADC_GetConversion@channel stored from wreg
  6641  0619  00F3               	movwf	i1ADC_GetConversion@channel
  6642  061A                     i1l1987:
  6643                           
  6644                           ;mcc_generated_files/adc.c: 116: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 117: {;mcc_generated_files/adc.c: 119:     ADCON0bits.CHS = ch
      +                          annel;
  6645  061A  0873               	movf	i1ADC_GetConversion@channel,w
  6646  061B  00F2               	movwf	??i1_ADC_GetConversion
  6647  061C  0DF2               	rlf	??i1_ADC_GetConversion,f
  6648  061D  0DF2               	rlf	??i1_ADC_GetConversion,f
  6649  061E  0021               	movlb	1	; select bank1
  6650  061F  081D               	movf	29,w	;volatile
  6651  0620  0672               	xorwf	??i1_ADC_GetConversion,w
  6652  0621  3983               	andlw	-125
  6653  0622  0672               	xorwf	??i1_ADC_GetConversion,w
  6654  0623  009D               	movwf	29	;volatile
  6655  0624                     i1l1989:
  6656                           
  6657                           ;mcc_generated_files/adc.c: 122:     ADCON0bits.ADON = 1;
  6658  0624  141D               	bsf	29,0	;volatile
  6659  0625                     i1l1991:
  6660                           
  6661                           ;mcc_generated_files/adc.c: 125:     _delay((unsigned long)((5)*(16000000/4000000.0)));
  6662  0625  3006               	movlw	6
  6663  0626                     u216_27:
  6664  0626  0B89               	decfsz	9,f
  6665  0627  2E26               	goto	u216_27
  6666  0628  3200               	nop2
  6667  0629                     i1l1993:
  6668                           
  6669                           ;mcc_generated_files/adc.c: 128:     ADCON0bits.GO_nDONE = 1;
  6670  0629  0021               	movlb	1	; select bank1
  6671  062A  149D               	bsf	29,1	;volatile
  6672  062B                     i1l66:	
  6673                           ;mcc_generated_files/adc.c: 132:     {;mcc_generated_files/adc.c: 133:     }
  6674                           
  6675                           
  6676                           ;mcc_generated_files/adc.c: 131:     while (ADCON0bits.GO_nDONE)
  6677  062B  189D               	btfsc	29,1	;volatile
  6678  062C  2E2E               	goto	u109_21
  6679  062D  2E2F               	goto	u109_20
  6680  062E                     u109_21:
  6681  062E  2E2B               	goto	i1l66
  6682  062F                     u109_20:
  6683  062F                     i1l1995:
  6684                           
  6685                           ;mcc_generated_files/adc.c: 136:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  6686  062F  081C               	movf	28,w	;volatile
  6687  0630  00F1               	movwf	?i1_ADC_GetConversion+1
  6688  0631  081B               	movf	27,w	;volatile
  6689  0632  00F0               	movwf	?i1_ADC_GetConversion
  6690  0633                     i1l69:
  6691  0633  0008               	return
  6692  0634                     __end_ofi1_ADC_GetConversion:
  6693                           
  6694                           	psect	text45
  6695  06DC                     __ptext45:	
  6696 ;; *************** function _start_alarm *****************
  6697 ;; Defined at:
  6698 ;;		line 121 in file "main.c"
  6699 ;; Parameters:    Size  Location     Type
  6700 ;;		None
  6701 ;; Auto vars:     Size  Location     Type
  6702 ;;		None
  6703 ;; Return value:  Size  Location     Type
  6704 ;;                  1    wreg      void 
  6705 ;; Registers used:
  6706 ;;		wreg, status,2, status,0, pclath, cstack
  6707 ;; Tracked objects:
  6708 ;;		On entry : 0/0
  6709 ;;		On exit  : 0/0
  6710 ;;		Unchanged: 0/0
  6711 ;; Data sizes:     COMMON   BANK0   BANK1
  6712 ;;      Params:         0       0       0
  6713 ;;      Locals:         0       0       0
  6714 ;;      Temps:          0       0       0
  6715 ;;      Totals:         0       0       0
  6716 ;;Total ram usage:        0 bytes
  6717 ;; Hardware stack levels used: 1
  6718 ;; Hardware stack levels required when called: 1
  6719 ;; This function calls:
  6720 ;;		i1_go_close
  6721 ;;		i1_go_close_alt
  6722 ;; This function is called by:
  6723 ;;		_get_measure
  6724 ;; This function uses a non-reentrant model
  6725 ;;
  6726                           
  6727  06DC                     _start_alarm:	
  6728                           ;psect for function _start_alarm
  6729                           
  6730  06DC                     i1l1971:	
  6731                           ;incstack = 0
  6732                           ; Regs used in _start_alarm: [wreg+status,2+status,0+pclath+cstack]
  6733                           
  6734                           
  6735                           ;main.c: 122:     FLAGS.bits.ALARM = 1;
  6736  06DC  147C               	bsf	_FLAGS,0
  6737  06DD                     i1l313:	
  6738                           ;main.c: 123:     do { LATCbits.LATC0 = 1; } while(0);
  6739                           
  6740  06DD  0022               	movlb	2	; select bank2
  6741  06DE  140E               	bsf	14,0	;volatile
  6742  06DF                     i1l314:
  6743                           
  6744                           ;main.c: 124:     INTCONbits.TMR0IE = 1;
  6745  06DF  168B               	bsf	11,5	;volatile
  6746                           
  6747                           ;main.c: 125:     if (FLAGS.bits.NORMAL_WORK_MODE) {
  6748  06E0  1CFC               	btfss	_FLAGS,1
  6749  06E1  2EE3               	goto	u106_21
  6750  06E2  2EE4               	goto	u106_20
  6751  06E3                     u106_21:
  6752  06E3  2EE8               	goto	i1l1975
  6753  06E4                     u106_20:
  6754  06E4                     i1l1973:
  6755                           
  6756                           ;main.c: 126:         go_close();
  6757  06E4  3185  25DF  3186   	fcall	i1_go_close
  6758                           
  6759                           ;main.c: 127:     } else {
  6760  06E7  2EEB               	goto	i1l317
  6761  06E8                     i1l1975:
  6762                           
  6763                           ;main.c: 128:         go_close_alt();
  6764  06E8  3187  275C  3186   	fcall	i1_go_close_alt
  6765  06EB                     i1l317:
  6766  06EB  0008               	return
  6767  06EC                     __end_of_start_alarm:
  6768                           
  6769                           	psect	text46
  6770  075C                     __ptext46:	
  6771 ;; *************** function i1_go_close_alt *****************
  6772 ;; Defined at:
  6773 ;;		line 108 in file "main.c"
  6774 ;; Parameters:    Size  Location     Type
  6775 ;;		None
  6776 ;; Auto vars:     Size  Location     Type
  6777 ;;		None
  6778 ;; Return value:  Size  Location     Type
  6779 ;;                  1    wreg      void 
  6780 ;; Registers used:
  6781 ;;		None
  6782 ;; Tracked objects:
  6783 ;;		On entry : 0/0
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMMON   BANK0   BANK1
  6787 ;;      Params:         0       0       0
  6788 ;;      Locals:         0       0       0
  6789 ;;      Temps:          0       0       0
  6790 ;;      Totals:         0       0       0
  6791 ;;Total ram usage:        0 bytes
  6792 ;; Hardware stack levels used: 1
  6793 ;; This function calls:
  6794 ;;		Nothing
  6795 ;; This function is called by:
  6796 ;;		_start_alarm
  6797 ;; This function uses a non-reentrant model
  6798 ;;
  6799                           
  6800  075C                     i1_go_close_alt:	
  6801                           ;psect for function i1_go_close_alt
  6802                           
  6803  075C                     i1l1969:	
  6804                           ;incstack = 0
  6805                           ; Regs used in i1_go_close_alt: []
  6806                           
  6807                           
  6808                           ;main.c: 109:     FLAGS.bits.CLOSED = 1;
  6809  075C  157C               	bsf	_FLAGS,2
  6810  075D                     i1l299:	
  6811                           ;main.c: 110:     do { LATCbits.LATC4 = 0; } while(0);
  6812                           
  6813  075D  0022               	movlb	2	; select bank2
  6814  075E  120E               	bcf	14,4	;volatile
  6815  075F                     i1l301:	
  6816                           ;main.c: 111:     do { LATCbits.LATC5 = 1; } while(0);
  6817                           
  6818  075F  168E               	bsf	14,5	;volatile
  6819  0760                     i1l303:
  6820  0760  0008               	return
  6821  0761                     __end_ofi1_go_close_alt:
  6822                           
  6823                           	psect	text47
  6824  05DF                     __ptext47:	
  6825 ;; *************** function i1_go_close *****************
  6826 ;; Defined at:
  6827 ;;		line 89 in file "main.c"
  6828 ;; Parameters:    Size  Location     Type
  6829 ;;		None
  6830 ;; Auto vars:     Size  Location     Type
  6831 ;;		None
  6832 ;; Return value:  Size  Location     Type
  6833 ;;                  1    wreg      void 
  6834 ;; Registers used:
  6835 ;;		wreg
  6836 ;; Tracked objects:
  6837 ;;		On entry : 0/0
  6838 ;;		On exit  : 0/0
  6839 ;;		Unchanged: 0/0
  6840 ;; Data sizes:     COMMON   BANK0   BANK1
  6841 ;;      Params:         0       0       0
  6842 ;;      Locals:         0       0       0
  6843 ;;      Temps:          2       0       0
  6844 ;;      Totals:         2       0       0
  6845 ;;Total ram usage:        2 bytes
  6846 ;; Hardware stack levels used: 1
  6847 ;; This function calls:
  6848 ;;		Nothing
  6849 ;; This function is called by:
  6850 ;;		_start_alarm
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854  05DF                     i1_go_close:	
  6855                           ;psect for function i1_go_close
  6856                           
  6857  05DF                     i1l1957:	
  6858                           ;incstack = 0
  6859                           ; Regs used in i1_go_close: [wreg]
  6860                           
  6861                           
  6862                           ;main.c: 90:     time_s = 0;
  6863  05DF  3000               	movlw	0
  6864  05E0  0020               	movlb	0	; select bank0
  6865  05E1  00D5               	movwf	_time_s
  6866  05E2  3000               	movlw	0
  6867  05E3  00D6               	movwf	_time_s+1
  6868  05E4  3000               	movlw	0
  6869  05E5  00D7               	movwf	_time_s+2
  6870  05E6                     i1l1959:
  6871  05E6  0022               	movlb	2	; select bank2
  6872  05E7  160E               	bsf	14,4	;volatile
  6873  05E8                     i1l286:
  6874                           
  6875                           ;main.c: 92:     _delay((unsigned long)((5 * 1000)*(16000000/4000.0)));
  6876  05E8  3066               	movlw	102
  6877  05E9  00F1               	movwf	??i1_go_close+1
  6878  05EA  3076               	movlw	118
  6879  05EB  00F0               	movwf	??i1_go_close
  6880  05EC  30C1               	movlw	193
  6881  05ED                     u217_27:
  6882  05ED  0B89               	decfsz	9,f
  6883  05EE  2DED               	goto	u217_27
  6884  05EF  0BF0               	decfsz	??i1_go_close,f
  6885  05F0  2DED               	goto	u217_27
  6886  05F1  0BF1               	decfsz	??i1_go_close+1,f
  6887  05F2  2DED               	goto	u217_27
  6888  05F3  0000               	nop
  6889  05F4                     i1l1961:
  6890  05F4  0022               	movlb	2	; select bank2
  6891  05F5  168E               	bsf	14,5	;volatile
  6892  05F6                     i1l288:
  6893                           
  6894                           ;main.c: 94:     time_pow_s = 20;
  6895  05F6  3014               	movlw	20
  6896  05F7  00F0               	movwf	??i1_go_close
  6897  05F8  0870               	movf	??i1_go_close,w
  6898  05F9  0020               	movlb	0	; select bank0
  6899  05FA  00DE               	movwf	_time_pow_s
  6900  05FB                     i1l1963:
  6901                           
  6902                           ;main.c: 95:     FLAGS.bits.RELE_POW_WAIT = 1;
  6903  05FB  16FC               	bsf	_FLAGS,5
  6904  05FC                     i1l1965:
  6905                           
  6906                           ;main.c: 96:     FLAGS.bits.RELE_CON_WAIT = 1;
  6907  05FC  177C               	bsf	_FLAGS,6
  6908  05FD                     i1l289:
  6909  05FD  0008               	return
  6910  05FE                     __end_ofi1_go_close:
  6911                           
  6912                           	psect	text48
  6913  06EC                     __ptext48:	
  6914 ;; *************** function _TMR0_ISR *****************
  6915 ;; Defined at:
  6916 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  6917 ;; Parameters:    Size  Location     Type
  6918 ;;		None
  6919 ;; Auto vars:     Size  Location     Type
  6920 ;;		None
  6921 ;; Return value:  Size  Location     Type
  6922 ;;                  1    wreg      void 
  6923 ;; Registers used:
  6924 ;;		wreg, status,2, status,0, pclath, cstack
  6925 ;; Tracked objects:
  6926 ;;		On entry : 0/0
  6927 ;;		On exit  : 0/0
  6928 ;;		Unchanged: 0/0
  6929 ;; Data sizes:     COMMON   BANK0   BANK1
  6930 ;;      Params:         0       0       0
  6931 ;;      Locals:         0       0       0
  6932 ;;      Temps:          0       0       0
  6933 ;;      Totals:         0       0       0
  6934 ;;Total ram usage:        0 bytes
  6935 ;; Hardware stack levels used: 1
  6936 ;; Hardware stack levels required when called: 1
  6937 ;; This function calls:
  6938 ;;		Absolute function
  6939 ;;		_TMR0_DefaultInterruptHandler
  6940 ;;		i1_switch_zum
  6941 ;; This function is called by:
  6942 ;;		_INTERRUPT_InterruptManager
  6943 ;; This function uses a non-reentrant model
  6944 ;;
  6945                           
  6946  06EC                     _TMR0_ISR:	
  6947                           ;psect for function _TMR0_ISR
  6948                           
  6949  06EC                     i1l2437:	
  6950                           ;incstack = 0
  6951                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  6952                           
  6953                           
  6954                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
  6955  06EC  110B               	bcf	11,2	;volatile
  6956  06ED                     i1l2439:
  6957                           
  6958                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
  6959  06ED  0020               	movlb	0	; select bank0
  6960  06EE  0864               	movf	_timer0ReloadVal,w	;volatile
  6961  06EF  0095               	movwf	21	;volatile
  6962  06F0                     i1l2441:
  6963                           
  6964                           ;mcc_generated_files/tmr0.c: 116:     if(TMR0_InterruptHandler)
  6965  06F0  0860               	movf	_TMR0_InterruptHandler,w
  6966  06F1  0461               	iorwf	_TMR0_InterruptHandler+1,w
  6967  06F2  1903               	btfsc	3,2
  6968  06F3  2EF5               	goto	u169_21
  6969  06F4  2EF6               	goto	u169_20
  6970  06F5                     u169_21:
  6971  06F5  2EFB               	goto	i1l197
  6972  06F6                     u169_20:
  6973  06F6                     i1l2443:
  6974                           
  6975                           ;mcc_generated_files/tmr0.c: 117:     {;mcc_generated_files/tmr0.c: 118:         TMR0_In
      +                          terruptHandler();
  6976  06F6  0861               	movf	_TMR0_InterruptHandler+1,w
  6977  06F7  008A               	movwf	10
  6978  06F8  0860               	movf	_TMR0_InterruptHandler,w
  6979  06F9  000A               	callw
  6980  06FA  3186               	pagesel	$
  6981  06FB                     i1l197:
  6982  06FB  0008               	return
  6983  06FC                     __end_of_TMR0_ISR:
  6984                           
  6985                           	psect	text49
  6986  0776                     __ptext49:	
  6987 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  6988 ;; Defined at:
  6989 ;;		line 129 in file "mcc_generated_files/tmr0.c"
  6990 ;; Parameters:    Size  Location     Type
  6991 ;;		None
  6992 ;; Auto vars:     Size  Location     Type
  6993 ;;		None
  6994 ;; Return value:  Size  Location     Type
  6995 ;;                  1    wreg      void 
  6996 ;; Registers used:
  6997 ;;		None
  6998 ;; Tracked objects:
  6999 ;;		On entry : 0/0
  7000 ;;		On exit  : 0/0
  7001 ;;		Unchanged: 0/0
  7002 ;; Data sizes:     COMMON   BANK0   BANK1
  7003 ;;      Params:         0       0       0
  7004 ;;      Locals:         0       0       0
  7005 ;;      Temps:          0       0       0
  7006 ;;      Totals:         0       0       0
  7007 ;;Total ram usage:        0 bytes
  7008 ;; Hardware stack levels used: 1
  7009 ;; This function calls:
  7010 ;;		Nothing
  7011 ;; This function is called by:
  7012 ;;		_TMR0_Initialize
  7013 ;;		_TMR0_ISR
  7014 ;; This function uses a non-reentrant model
  7015 ;;
  7016                           
  7017  0776                     _TMR0_DefaultInterruptHandler:	
  7018                           ;psect for function _TMR0_DefaultInterruptHandler
  7019                           
  7020  0776                     i1l203:	
  7021                           ;incstack = 0
  7022                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  7023                           
  7024  0776  0008               	return
  7025  0777                     __end_of_TMR0_DefaultInterruptHandler:
  7026                           
  7027                           	psect	text50
  7028  0709                     __ptext50:	
  7029 ;; *************** function i1_switch_zum *****************
  7030 ;; Defined at:
  7031 ;;		line 71 in file "main.c"
  7032 ;; Parameters:    Size  Location     Type
  7033 ;;		None
  7034 ;; Auto vars:     Size  Location     Type
  7035 ;;		None
  7036 ;; Return value:  Size  Location     Type
  7037 ;;                  1    wreg      void 
  7038 ;; Registers used:
  7039 ;;		status,0
  7040 ;; Tracked objects:
  7041 ;;		On entry : 0/0
  7042 ;;		On exit  : 0/0
  7043 ;;		Unchanged: 0/0
  7044 ;; Data sizes:     COMMON   BANK0   BANK1
  7045 ;;      Params:         0       0       0
  7046 ;;      Locals:         0       0       0
  7047 ;;      Temps:          0       0       0
  7048 ;;      Totals:         0       0       0
  7049 ;;Total ram usage:        0 bytes
  7050 ;; Hardware stack levels used: 1
  7051 ;; This function calls:
  7052 ;;		Nothing
  7053 ;; This function is called by:
  7054 ;;		_sec_tick_work
  7055 ;;		_TMR0_ISR
  7056 ;; This function uses a non-reentrant model
  7057 ;;
  7058                           
  7059  0709                     i1_switch_zum:	
  7060                           ;psect for function i1_switch_zum
  7061                           
  7062  0709                     i1l268:	
  7063                           ;incstack = 0
  7064                           ; Regs used in i1_switch_zum: [status,0]
  7065                           ;main.c: 72:     do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  7066                           
  7067  0709                     i1l2063:
  7068  0709  1003               	clrc
  7069  070A  0022               	movlb	2	; select bank2
  7070  070B  1E8C               	btfss	12,5	;volatile
  7071  070C  1403               	setc
  7072  070D  1803               	btfsc	3,0
  7073  070E  2F10               	goto	u120_21
  7074  070F  2F13               	goto	u120_20
  7075  0710                     u120_21:
  7076  0710  0022               	movlb	2	; select bank2
  7077  0711  168C               	bsf	12,5	;volatile
  7078  0712  2F15               	goto	u121_24
  7079  0713                     u120_20:
  7080  0713  0022               	movlb	2	; select bank2
  7081  0714  128C               	bcf	12,5	;volatile
  7082  0715                     u121_24:
  7083  0715                     i1l270:
  7084  0715  0008               	return
  7085  0716                     __end_ofi1_switch_zum:
  7086  007E                     btemp	set	126	;btemp
  7087  007E                     int$flags	set	126
  7088  007E                     wtemp0	set	126
  7089                           
  7090                           	psect	idloc
  7091                           
  7092                           ;Config register IDLOC0 @ 0x8000
  7093                           ;	unspecified, using default values
  7094  8000                     	org	32768
  7095  8000  3FFF               	dw	16383
  7096                           
  7097                           ;Config register IDLOC1 @ 0x8001
  7098                           ;	unspecified, using default values
  7099  8001                     	org	32769
  7100  8001  3FFF               	dw	16383
  7101                           
  7102                           ;Config register IDLOC2 @ 0x8002
  7103                           ;	unspecified, using default values
  7104  8002                     	org	32770
  7105  8002  3FFF               	dw	16383
  7106                           
  7107                           ;Config register IDLOC3 @ 0x8003
  7108                           ;	unspecified, using default values
  7109  8003                     	org	32771
  7110  8003  3FFF               	dw	16383
  7111                           
  7112                           	psect	config
  7113                           
  7114                           ;Config register CONFIG1 @ 0x8007
  7115                           ;	Oscillator Selection
  7116                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  7117                           ;	Watchdog Timer Enable
  7118                           ;	WDTE = ON, WDT enabled
  7119                           ;	Power-up Timer Enable
  7120                           ;	PWRTE = OFF, PWRT disabled
  7121                           ;	MCLR Pin Function Select
  7122                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  7123                           ;	Flash Program Memory Code Protection
  7124                           ;	CP = OFF, Program memory code protection is disabled
  7125                           ;	Data Memory Code Protection
  7126                           ;	CPD = OFF, Data memory code protection is disabled
  7127                           ;	Brown-out Reset Enable
  7128                           ;	BOREN = ON, Brown-out Reset enabled
  7129                           ;	Clock Out Enable
  7130                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  7131                           ;	Internal/External Switchover
  7132                           ;	IESO = ON, Internal/External Switchover mode is enabled
  7133                           ;	Fail-Safe Clock Monitor Enable
  7134                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  7135  8007                     	org	32775
  7136  8007  3FFC               	dw	16380
  7137                           
  7138                           ;Config register CONFIG2 @ 0x8008
  7139                           ;	Flash Memory Self-Write Protection
  7140                           ;	WRT = OFF, Write protection off
  7141                           ;	PLL Enable
  7142                           ;	PLLEN = OFF, 4x PLL disabled
  7143                           ;	Stack Overflow/Underflow Reset Enable
  7144                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  7145                           ;	Brown-out Reset Voltage Selection
  7146                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  7147                           ;	Low-Voltage Programming Enable
  7148                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  7149  8008                     	org	32776
  7150  8008  1EFF               	dw	7935

Data Sizes:
    Strings     0
    Constant    9
    Data        0
    BSS         44
    Persistent  37
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80     41      69
    BANK1            16      0      16

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> switch_zum(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> i1_switch_zum(), switch_zum(), TMR0_DefaultInterruptHandler(), Absolute function(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> sec_tick_work(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> sec_tick_work(), Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR2_CallBack->_sec_tick_work
    _sec_tick_work->_get_measure
    _get_measure->i1_ADC_GetConversion
    _start_alarm->i1_go_close

Critical Paths under _main in BANK0

    _switch_wm->_beep
    _get_jump_full->_ADC_GetConversion
    _get_fun_full->_ADC_GetConversion
    _get_eeprom->_get_time
    _get_time->_EEPROM_ReadShortLong
    _EEPROM_ReadShortLong->_EEPROM_ReadByte
    _get_adr->_EEPROM_ReadByte
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _povorot->_go_close
    _get_voltage->_EEPROM_WriteShortLong
    _EEPROM_WriteShortLong->_EEPROM_WriteByte
    _get_jump->_ADC_GetConversion
    _get_fun->_ADC_GetConversion
    _fun_work->_beep

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4929
                           _fun_work
                            _get_fun
                           _get_jump
                        _get_voltage
                            _povorot
                        _start_setup
                          _switch_wm
 ---------------------------------------------------------------------------------
 (1) _switch_wm                                            1     1      0     396
                                              6 BANK0      1     1      0
                               _beep
                           _go_close
                       _go_close_alt
 ---------------------------------------------------------------------------------
 (1) _start_setup                                          0     0      0    2521
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
                         _get_eeprom
                       _get_fun_full
                      _get_jump_full
 ---------------------------------------------------------------------------------
 (2) _get_jump_full                                        4     4      0      70
                                              4 BANK0      4     4      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (2) _get_fun_full                                         4     4      0      70
                                              4 BANK0      4     4      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (2) _get_eeprom                                           0     0      0    1685
                            _get_adr
                           _get_time
 ---------------------------------------------------------------------------------
 (3) _get_time                                            25    25      0     977
                                             16 BANK0     25    25      0
               _EEPROM_ReadShortLong
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     196
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _EEPROM_ReadShortLong                                13    10      3     113
                                              3 BANK0     13    10      3
                    _EEPROM_ReadByte
 ---------------------------------------------------------------------------------
 (3) _get_adr                                             22    22      0     708
                                              3 BANK0     22    22      0
                    _EEPROM_ReadByte
 ---------------------------------------------------------------------------------
 (2) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     348
                     _ADC_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      1     1      0     174
                                              2 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR0_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _povorot                                              0     0      0       0
                           _go_close
                            _go_open
 ---------------------------------------------------------------------------------
 (1) _get_voltage                                          7     7      0    1526
                                             14 BANK0      7     7      0
                  _ADC_GetConversion
                    _EEPROM_ReadByte
                   _EEPROM_WriteByte
              _EEPROM_WriteShortLong
 ---------------------------------------------------------------------------------
 (2) _EEPROM_WriteShortLong                                9     6      3     777
                                              5 BANK0      9     6      3
                   _EEPROM_WriteByte
 ---------------------------------------------------------------------------------
 (3) _EEPROM_WriteByte                                     5     4      1     523
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (5) _EEPROM_ReadByte                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _get_jump                                             3     3      0      45
                                              4 BANK0      3     3      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (1) _get_fun                                              3     3      0      45
                                              4 BANK0      3     3      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversion                                    4     2      2      22
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _fun_work                                             1     1      0     396
                                              6 BANK0      1     1      0
                               _beep
                           _go_close
                       _go_close_alt
                            _go_open
                        _go_open_alt
 ---------------------------------------------------------------------------------
 (2) _go_open_alt                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _go_open                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _go_close_alt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _go_close                                             2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _beep                                                 6     5      1     396
                                              0 BANK0      6     5      1
                         _switch_zum
 ---------------------------------------------------------------------------------
 (3) _switch_zum                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           0     0      0      67
                           _TMR0_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR2_ISR                                             0     0      0      67
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (8) _TMR2_CallBack                                        0     0      0      67
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
                      _sec_tick_work *
 ---------------------------------------------------------------------------------
 (9) _sec_tick_work                                        1     1      0      67
                                              7 COMMON     1     1      0
                        _get_measure
                          _rele_tick
                        _toggle_tone
                       i1_switch_zum
 ---------------------------------------------------------------------------------
 (10) _toggle_tone                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _rele_tick                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _get_measure                                         3     3      0      67
                                              4 COMMON     3     3      0
                        _start_alarm
                i1_ADC_GetConversion
 ---------------------------------------------------------------------------------
 (11) i1_ADC_GetConversion                                 4     2      2      22
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (11) _start_alarm                                         0     0      0       0
                         i1_go_close
                     i1_go_close_alt
 ---------------------------------------------------------------------------------
 (12) i1_go_close_alt                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_go_close                                          2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                       i1_switch_zum *
 ---------------------------------------------------------------------------------
 (10) i1_switch_zum                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fun_work
     _beep
       _switch_zum
     _go_close
     _go_close_alt
     _go_open
     _go_open_alt
   _get_fun
     _ADC_GetConversion
   _get_jump
     _ADC_GetConversion
   _get_voltage
     _ADC_GetConversion
     _EEPROM_ReadByte
     _EEPROM_WriteByte
     _EEPROM_WriteShortLong
       _EEPROM_WriteByte
   _povorot
     _go_close
     _go_open
   _start_setup
     _SYSTEM_Initialize
       _ADC_Initialize
       _FVR_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
       _TMR2_Initialize
         _TMR2_SetInterruptHandler
       _WDT_Initialize
     _TMR0_SetInterruptHandler
     _TMR2_SetInterruptHandler
     _TMR2_StartTimer
     _get_eeprom
       _get_adr
         _EEPROM_ReadByte
       _get_time
         _EEPROM_ReadShortLong
           _EEPROM_ReadByte
         ___bmul
     _get_fun_full
       _ADC_GetConversion
     _get_jump_full
       _ADC_GetConversion
   _switch_wm
     _beep
     _go_close
     _go_close_alt

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
     i1_switch_zum *
   _TMR2_ISR
     _TMR2_CallBack
       Absolute function(Fake) *
       _TMR2_DefaultInterruptHandler *
       _sec_tick_work *
         _get_measure
           _start_alarm
             i1_go_close
             i1_go_close_alt
           i1_ADC_GetConversion
         _rele_tick
         _toggle_tone
         i1_switch_zum

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              60      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      62       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     29      45       6       86.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            10      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               10      0      10       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      62       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Fri Apr 29 15:38:53 2022

        __end_of_TMR2_SetInterruptHandler 074C                          get_fun_full@flag 0027  
                      get_fun@fun_counter 005D                            ___bmul@product 0022  
                   __end_of_sec_tick_work 03C9                                        l31 0764  
                                      l25 0678                                        l28 073F  
                                      l48 0731                                        l66 05B4  
                                      l92 06A3                                        l69 05BF  
                                      _RD 0CA8                                        _WR 0CA9  
                           ?_go_close_alt 0070                              ?_get_voltage 0070  
                          ?_get_jump_full 0070                    __end_of_FVR_Initialize 0769  
                         _timer0ReloadVal 0064                                       l200 0751  
                                     l210 0768                                       l301 075A  
                                     l310 0756                                       l142 0774  
                                     l303 075B                                       l400 0342  
                                     l306 0753                                       l402 0344  
                                     l139 06CB                                       l308 0755  
                                     l164 074B                                       l341 040A  
                                     l270 06DB                                       l352 0445  
                                     l184 068E                                       l504 0131  
                                     l433 0301                                       l282 0549  
                                     l442 0387                                       l370 0275  
                                     l450 0510                                       l339 0408  
                                     l507 0738                                       l451 0519  
                                     l268 06CF                                       l292 0716  
                                     l372 0277                                       l532 04B7  
                                     l461 0230                                       l357 0231  
                                     l445 0504                                       l286 05C9  
                                     l294 0718                                       l359 0233  
                                     l391 0302                                       l288 05D7  
                                     l296 071F                                       l368 0273  
                                     l289 05DE                                       l377 0446  
                                     l561 0574                                       l386 047F  
                                     l299 0758                                       l483 01D4  
                                     l564 0636                                       l558 054C  
                                     l567 064C                                       l576 0407  
                                     l761 0662                                       l579 02BD  
                                     _GIE 005F                               _start_alarm 06DC  
                                     _PR2 001B                               _start_setup 0480  
                            ?_go_open_alt 0070                           _TMR2_Initialize 06B9  
                                     wreg 0009                                i1_go_close 05DF  
                             get_jump@res 0025                                      l2001 074C  
                                    l2101 06C0                                      l2111 0685  
                                    l2103 06C8                                      l2121 05AE  
                                    l2113 0686                                      l2105 0679  
                                    l2201 0161                                      l2041 027A  
                                    l2123 05B2                                      l2115 0687  
                                    l2107 067E                                      l2203 0165  
                                    l2043 02A9                                      l2051 0650  
                                    l2125 05B8                                      l2117 05A1  
                                    l2109 0681                                      l2221 018E  
                                    l2213 0171                                      l2205 016B  
                                    l2045 02B7                                      l2053 0654  
                                    l2301 00E5                                      l2119 05AD  
                                    l2151 054C                                      l2071 0697  
                                    l2215 017A                                      l2207 0170  
                                    l2223 0194                                      l2055 0658  
                                    l2311 0108                                      l2303 00F7  
                                    l2129 06CF                                      l2161 0565  
                                    l2153 0551                                      l2081 073D  
                                    l2073 069A                                      l2065 068F  
                                    l2241 01BE                                      l2233 01A0  
                                    l2225 0198                                      l2217 0189  
                                    l2057 065A                                      l2049 064F  
                                    l2321 012D                                      l2313 010C  
                                    l2401 0306                                      l2331 051C  
                                    l2171 0572                                      l2163 0566  
                                    l2155 0556                                      l2091 072E  
                                    l2075 069F                                      l2067 0692  
                                    l2083 0761                                      l2323 0663  
                                    l2243 01C6                                      l2235 01B0  
                                    l2227 019E                                      l2219 018A  
                                    l2059 0661                                      l2315 0110  
                                    l2251 0042                                      l2411 0328  
                                    l2403 030F                                      l2341 052C  
                                    l2333 051E                                      l2165 0568  
                                    l2157 0557                                      l2085 0765  
                                    l2077 0739                                      l2069 0695  
                                    l2093 06B9                                      l2325 0772  
                                    l2245 01CB                                      l2237 01B4  
                                    l2173 0132                                      l2317 0116  
                                    l2309 00FA                                      l2261 0063  
                                    l2253 0042                                      l2421 033B  
                                    l2413 032C                                      l2405 0318  
                                    l2343 0532                                      l2335 0520  
                                    l2351 05C7                                      l2167 056A  
                                    l2159 0561                                      l2431 03E4  
                                    l2511 02D9                                      l2503 02BE  
                                    l2087 072A                                      l2079 073C  
                                    l2095 06BC                                      l2247 01D0  
                                    l2239 01B8                                      l2183 013E  
                                    l2175 0132                                      l2319 0128  
                                    l2271 0086                                      l2255 004C  
                                    l2415 032D                                      l2407 031D  
                                    l2345 053E                                      l2337 0523  
                                    l2353 05D5                                      l2361 0719  
                                    l2169 056B                                      l2433 03FE  
                                    l2521 02F7                                      l2505 02CD  
                                    l2513 02DC                                      l2089 072D  
                                    l2097 06BD                                      l2185 0146  
                                    l2177 013D                                      l2281 009F  
                                    l2273 008C                                      l2257 0052  
                                    l2249 003F                                      l2425 033D  
                                    l2417 0330                                      l2409 0321  
                                    l2601 0484                                      l2339 0527  
                                    l2347 0543                                      l2355 05DC  
                                    l2363 071E                                      l2531 0351  
                                    l2427 03CB                                      l2523 02FA  
                                    l2515 02EB                                      l2507 02D1  
                                    l2099 06BE                                      l2195 014D  
                                    l2291 00CF                                      l2275 0090  
                                    l2267 0064                                      l2259 0057  
                                    l2435 0732                                      l2371 0235  
                                    l2419 0337                                      l2611 049B  
                                    l2603 0485                                      l2357 05DD  
                                    l2349 05C0                                      l2533 0355  
                                    l2541 0367                                      l2525 0345  
                                    l2461 0423                                      l2453 040C  
                                    l2429 03D3                                      l2517 02EF  
                                    l2509 02D5                                      l2197 0157  
                                    l2189 014C                                      l2293 00D5  
                                    l2277 0096                                      l2269 007E  
                                    l2381 0252                                      l2373 0237  
                                    l2621 04A3                                      l2613 049D  
                                    l2605 0488                                      l2367 0757  
                                    l2551 037B                                      l2543 036B  
                                    l2535 0359                                      l2527 0349  
                                    l2471 0439                                      l2463 0428  
                                    l2455 0415                                      l2519 02F3  
                                    l2199 0160                                      l2295 00D7  
                                    l2287 00A0                                      l2279 009D  
                                    l2391 0268                                      l2383 0259  
                                    l2375 0240                                      l2631 04AB  
                                    l2623 04A5                                      l2615 049E  
                                    l2607 0490                                      l2369 0752  
                                    l2553 037E                                      l2545 036F  
                                    l2537 035D                                      l2529 034D  
                                    l2473 0440                                      l2465 042C  
                                    l2457 0417                                      l2481 0451  
                                    l2297 00DB                                      l2289 00B9  
                                    l2393 026C                                      l2385 025D  
                                    l2377 0249                                      l2641 04B5  
                                    l2633 04AC                                      l2625 04A7  
                                    l2617 049F                                      l2609 0498  
                                    l2561 04F7                                      l2547 0373  
                                    l2539 0360                                      l2475 0444  
                                    l2467 0433                                      l2459 0419  
                                    l2491 046D                                      l2483 0453  
                                    l2571 01DE                                      l2299 00E1  
                                    l2387 025E                                      l2379 024E  
                                    l2635 04AD                                      l2627 04A8  
                                    l2619 04A1                                      l2563 04FA  
                                    l2555 04EA                                      l2549 0377  
                                    l2469 0437                                      l2493 0471  
                                    l2485 045D                                      l2581 01F0  
                                    l2573 01E7                                      l2397 026E  
                                    l2389 0261                                      l2637 04AF  
                                    l2629 04A9                                      l2565 0508  
                                    l2557 04EE                                      l2495 0473  
                                    l2487 0462                                      l2479 0448  
                                    l2591 020E                                      l2583 01F6  
                                    l2399 0304                                      l2639 04B2  
                                    l2567 050D                                      l2559 04F2  
                                    l2671 05FE                                      l2497 047A  
                                    l2489 0466                                      l2593 0219  
                                    l2585 01FE                                      l2569 01D5  
                                    l2673 0601                                      l2499 047E  
                                    l2595 021E                                      l2587 0203  
                                    l2579 01E8                                      l2675 0604  
                                    l1981 063F                                      l2589 0209  
                                    l2597 0480                                      l2677 0608  
                                    l1983 064A                                      l2599 0483  
                                    l1977 0636                                      l1979 063B  
                                    l1999 0746                               get_time@buf 0045  
                                    u2000 01F6                                      u2001 01F5  
                                    u2010 0209                                      u2011 0208  
                                    u1220 05B8                                      u2020 0230  
                                    u1221 05B7                                      u2021 022F  
                                    u1230 06D9                                      u1070 063B  
                                    u1310 0551                                      u1231 06D6  
                                    u1071 063A                                      u1311 0550  
                                    u1080 063F                                      u1320 0571  
                                    u1400 0194                                      u1081 063E  
                                    u1321 056F                                      u2025 022C  
                                    u1401 0193                                      u1410 019E  
                                    u1411 019D                                      u1244 06DB  
                                    u1420 01B0                                      u1340 013A  
                                    u1180 0654                                      u1500 00B9  
                                    u2117 05AF                                      u1421 01AF  
                                    u1181 0653                                      u1501 00B8  
                                    _LATA 010C                                      u1334 0572  
                                    u1430 01BE                                      u1350 014B  
                                    u1190 0661                                      u1510 00E1  
                                    u2127 05CF                                      u1431 01BD  
                                    u1351 014A                                      u1191 0660  
                                    u1511 00E0                                      _LATC 010E  
                                    u1440 01CB                                      u1360 0157  
                                    u1520 00F7                                      u1600 0259  
                                    u2080 0608                                      u2137 0524  
                                    u1441 01CA                                      u1361 0156  
                                    u1521 00F6                                      u1601 0258  
                                    u2081 0607                                      u1450 01D0  
                                    u1370 016B                                      u1530 0108  
                                    u1610 0268                                      u2147 0538  
                                    u1451 01CF                                      u1371 016A  
                                    u1531 0107                                      u1611 0267  
                                    u1380 0170                                      u1540 0116  
                                    u1460 0049                                      u1620 0273  
                                    u1381 016F                                      u1541 0115  
                                    u1525 00F3                                      u1621 0272  
                                    u1710 0423                                      u1390 017A  
                                    u1550 012D                                      u1470 007E  
                                    u1630 0318                                      u1711 0422  
                                    u1391 0179                                      u1551 012C  
                                    u1471 007D                                      u1631 0317  
                                    u1720 0433                                      u1800 02D9  
                                    u1480 0096                                      u1640 0328  
                                    u1721 0432                                      u1801 02D8  
                                    u1481 0095                                      u1641 0327  
                                    u1570 0532                                      u1730 0440  
                                    u1810 02EB                                      u1490 009D  
                                    u1650 0337                                      u1571 0531  
                                    u1731 043F                                      u1811 02EA  
                                    u1491 009C                                      u1475 007A  
                                    u1651 0336                                      u1580 0549  
                                    u1900 036B                                      u1740 045D  
                                    u1820 02EF                                      u1660 0342  
                                    u1581 0548                                      u1901 036A  
                                    u1741 045C                                      u1821 02EE  
                                    u1661 0341                                      u1910 036F  
                                    u1750 046D                                      u1670 03DE  
                                    u1830 02F3                                      u1590 0249  
                                    u1911 036E                                      u1751 046C  
                                    u1831 02F2                                      u1815 02E7  
                                    u1591 0248                                      u1920 0373  
                                    u1760 047A                                      u1680 03F8  
                                    u1840 02F7                                      u1921 0372  
                                    u1761 0479                                      u1841 02F6  
                                    u1930 0377                                      u1850 0349  
                                    u1770 02CD                                      u1931 0376  
                                    u1851 0348                                      u1675 03DB  
                                    u1771 02CC                                      u1860 034D  
                                    u1780 02D1                                      u1940 04EE  
                                    u1861 034C                                      u1685 03F5  
                                    u1781 02D0                                      u1941 04ED  
                                    u1870 0351                                      u1790 02D5  
                                    u1950 04F2                                      u1871 0350  
                                    u1791 02D4                                      u1775 02C9  
                                    u1951 04F1                                      u1880 0355  
                                    u1960 04F7                                      u1881 0354  
                                    u1961 04F6                                      u1890 0359  
                                    u1970 0508                                      u1891 0358  
                                    u1971 0507                                      u1980 050D  
                                    u1981 050C                                      u1990 01E7  
                                    u1991 01E6                                      i1l66 062B  
                                    i1l69 0633                                      _TMR0 0015  
                                    _TMR2 001A                                      _WREN 0CAA  
                                    _WPUA 020C                                      _WPUC 020E  
                                    _beep 051A                                      _main 05FE  
                                    fsr0h 0005                                      fsr1h 0007  
                                    indf0 0000                                      fsr0l 0004  
                                    indf1 0001                                      fsr1l 0006  
                    EEPROM_WriteByte@addr 0023                                      btemp 007E  
                          ??_get_fun_full 0024                                      start 0026  
                       ___bmul@multiplier 0023                      __end_ofi1_switch_zum 0716  
                 get_fun_full@fun_counter 005C                            ??_go_close_alt 0020  
                 __end_of_TMR0_Initialize 068F            ??_TMR0_DefaultInterruptHandler 0070  
                         ?_FVR_Initialize 0070             __end_of_OSCILLATOR_Initialize 0740  
                                   ?_beep 0020                                     ?_main 0070  
                            get_time@buf2 0041                                     _EEADR 0191  
                                   _FLAGS 007C                                     _T2CON 001C  
                                   i1l110 0012                                     i1l203 0776  
                                   i1l115 0024                                     i1l116 0024  
                                   i1l301 075F                                     i1l303 0760  
                                   i1l313 06DD                                     i1l161 0708  
                                   i1l314 06DF                                     i1l322 04B8  
                                   i1l324 04BA                                     i1l317 06EB  
                                   i1l157 06B8                                     i1l270 0715  
                                   i1l334 04E9                                     i1l414 059A  
                                   i1l406 0582                                     i1l415 059C  
                                   i1l167 0775                                     i1l416 059E  
                                   i1l409 0586                                     i1l273 0729  
                                   i1l268 0709                                     i1l428 03C8  
                                   i1l197 06FB                                     i1l286 05E8  
                                   i1l288 05F6                                     i1l289 05FD  
                                   i1l299 075D                                     _TRISA 008C  
                                   _TRISC 008E                 ?_TMR0_SetInterruptHandler 0020  
                         __end_of_get_adr 01D5                          __end_of_TMR0_ISR 06FC  
                         __end_of_get_fun 0446                          __end_of_TMR2_ISR 06B9  
                         __end_of_go_open 0720                                     beep@i 0025  
                                   beep@j 0024                            _WDT_Initialize 0761  
                                   pclath 000A                           __end_of_povorot 0302  
                                   status 0003                                     wtemp0 007E  
                         _TMR2_StartTimer 0772                              get_voltage@q 0034  
                         __initialization 0027                              __end_of_beep 054A  
                            __end_of_main 0619                           ??_get_jump_full 0024  
                 __end_of_TMR2_Initialize 06CC               ?_INTERRUPT_InterruptManager 0070  
                                  ??_beep 0021                             get_time@F2660 0052  
                _TMR2_SetInterruptHandler 0746                                    ??_main 0049  
                           get_time@F2658 0049                    __end_of_WDT_Initialize 0765  
                             ?i1_go_close 0070                       i1_ADC_GetConversion 0619  
                           get_time@q_821 0048                             get_time@q_822 0047  
                                  _ADCON0 009D                                    _ADCON1 009E  
                                  _ADRESH 009C                                    _ADRESL 009B  
                                  _EEDATA 0193                                    _EECON2 0196  
                                  _APFCON 011D                                    _ANSELA 018C  
                                  _ANSELC 018E                                    _BORCON 0116  
                           get_time@times 0034                                    u110_20 0728  
                                  u110_21 0726                                    i1l2011 04C8  
                                  i1l2003 0720                                    i1l2021 04E6  
                                  i1l2013 04D1                                    i1l2005 04BC  
                                  i1l2015 04D6                                    i1l2007 04C4  
                                  i1l2031 0588                                    i1l2017 04DF  
                                  i1l2009 04C6                                    i1l2033 0594  
                                  i1l2025 0575                                    i1l2019 04E0  
                                  i1l2035 0596                                    i1l2027 0579  
                                  i1l2131 0388                                    u111_24 0729  
                                  i1l2037 0597                                    i1l2029 057F  
                                  i1l2141 03AE                                    i1l2133 038B  
                                  i1l2063 0709                                    i1l2039 0598  
                                  i1l2143 03B1                                    i1l2135 039A  
                                  u120_20 0713                                    u112_20 04D1  
                                  u120_21 0710                                    u112_21 04D0  
                                  i1l2145 03B5                                    i1l2137 039E  
                                  i1l2147 03BB                                    i1l2139 03AA  
                                  i1l2149 03C7                                    i1l2327 06FC  
                                  u113_20 04DF                                    i1l2441 06F0  
                                  u113_21 04DE                                    i1l2329 0703  
                                  i1l2443 06F6                                    i1l2451 06B6  
                                  u121_24 0715                                    i1l2437 06EC  
                                  i1l2445 06A4                                    i1l2439 06ED  
                                  i1l2447 06A6                                    u106_20 06E4  
                                  u114_20 04E6                                    u106_21 06E3  
                                  u114_21 04E5                                    i1l2449 06B3  
                                  u130_24 03C7                                    i1l2661 000E  
                                  i1l2663 0016                                    u115_20 0579  
                                  u203_20 000A                                    i1l1961 05F4  
                                  u115_21 0578                                    i1l2665 001B  
                                  u203_21 0009                                    i1l2657 0006  
                                  i1l1963 05FB                                    i1l1971 06DC  
                                  i1l2667 0020                                    i1l2659 000A  
                                  i1l1965 05FC                                    i1l1957 05DF  
                                  i1l1973 06E4                                    i1l1959 05E6  
                                  i1l1975 06E8                                    i1l1991 0625  
                                  u116_20 057F                                    u204_20 000E  
                                  i1l1969 075C                                    i1l1993 0629  
                                  u116_21 057E                                    u204_21 000D  
                                  i1l1995 062F                                    i1l1987 061A  
                                  i1l1989 0624                                    u109_20 062F  
                                  u117_20 0586                                    u125_20 039E  
                                  u205_20 0016                                    u109_21 062E  
                                  u117_21 0585                                    u125_21 039D  
                                  u205_21 0015                                    u126_20 03A8  
                                  u206_20 001B                                    u126_21 03A5  
                                  u206_21 001A                                    u207_20 0020  
                                  u207_21 001F                                    u127_24 03AA  
                                  u215_27 058D                                    u128_20 03BB  
                                  u128_21 03BA                                    u216_27 0626  
                                  u129_20 03C5                                    u129_21 03C2  
                                  u217_27 05ED                                    u170_20 06B3  
                                  u170_21 06B2                                    _FVRCON 0117  
                                  u156_20 0703                                    u156_21 0702  
                                  u169_20 06F6                                    u169_21 06F5  
                        _GOOD_WSP_VOLTAGE 076C                                    _OSCCON 0099  
                                  _WDTCON 0097             __end_of_EEPROM_WriteShortLong 0408  
                    ?i1_ADC_GetConversion 0070                          __end_of_get_jump 0480  
                        __end_of_get_time 0132                          __end_of_go_close 05DF  
                                  ___bmul 064D                      _switch_zum$intlevel0 06CF  
                        ?_TMR0_Initialize 0070                         ??_EEPROM_ReadByte 0020  
                        __end_of_fun_work 0388                                    _time_s 0055  
                __end_of_EEPROM_WriteByte 0575                                 ??_get_adr 0023  
                               ??_get_fun 0024                                 ??_go_open 0020  
                    __end_of_get_fun_full 0278                           ?_WDT_Initialize 0070  
                          get_measure@res 0075                    EEPROM_WriteByte@status 0024  
                ADC_GetConversion@channel 0023                                 ??_povorot 0022  
                 __end_of_TMR2_StartTimer 0775  TMR0_SetInterruptHandler@InterruptHandler 0020  
TMR2_SetInterruptHandler@InterruptHandler 0020                      __end_of_go_close_alt 075C  
                       _SYSTEM_Initialize 0663                   __end_of__initialization 003C  
                   __end_of_TMR2_CallBack 0709                        ?_SYSTEM_Initialize 0070  
                            ?_toggle_tone 0070                     ??i1_ADC_GetConversion 0072  
                     ___bmul@multiplicand 0020                  EEPROM_ReadShortLong@addr 002F  
                          __pcstackCOMMON 0070                 get_jump_full@jump_counter 005A  
                     ??_SYSTEM_Initialize 0023                                 ?_TMR0_ISR 0070  
                               ?_TMR2_ISR 0070                     __end_of_ROTATION_TIME 076C  
                        ?_TMR2_Initialize 0070                i1ADC_GetConversion@channel 0073  
                            ?_start_alarm 0070                            _OPTION_REGbits 0095  
                            ?_start_setup 0070                              i1_switch_zum 0709  
               __end_of_SYSTEM_Initialize 0679                                __pbssBANK0 0049  
                              __pbssBANK1 00A0                          ??_FVR_Initialize 0020  
                              __pmaintext 05FE                                   ?___bmul 0020  
        __end_of_TMR0_SetInterruptHandler 0752                                ??_TMR0_ISR 0070  
                              ??_TMR2_ISR 0078                                __pintentry 0004  
                        get_jump_full@res 0025                                _get_eeprom 0732  
                                 _OSCTUNE 0098                          ?_TMR2_StartTimer 0070  
                               ?_get_jump 0070                                 ?_get_time 0070  
                               ?_go_close 0070                                 ?_fun_work 0070  
                    _ADC_InterruptHandler 0058                ??_TMR2_SetInterruptHandler 0022  
                __end_of_GOOD_WSP_VOLTAGE 076F                                   __ptext1 04EA  
                                 __ptext2 0480                       get_measure@measures 007B  
                                 __ptext3 0302                                   __ptext4 0231  
                                 __ptext5 0732                                   __ptext6 003F  
                                 __ptext7 064D                                   __ptext8 0278  
                                 __ptext9 0132                                   _get_adr 0132  
                                 _get_fun 0408                                   _go_open 0716  
                   _OSCILLATOR_Initialize 0739                                 _T2CONbits 001C  
                ??_PIN_MANAGER_Initialize 0020                              ??i1_go_close 0070  
                                 _povorot 02BE                                   clrloop0 0741  
                              ??_get_jump 0024                                ??_get_time 0030  
                              ??_go_close 0020                         __end_of_rele_tick 059F  
                    end_of_initialization 003C                                ??_fun_work 0026  
                         _EEPROM_ReadByte 0634                              _get_fun_full 0231  
                      __end_ofi1_go_close 05FE                     __end_of_get_jump_full 0345  
                           _sec_tick_work 0388                                _time_pow_s 005E  
                            _go_close_alt 0757                          ??_WDT_Initialize 0020  
                _TMR0_SetInterruptHandler 074C                         ?_EEPROM_WriteByte 0020  
                       __end_of_switch_wm 051A                            get_voltage@buf 0032  
                          get_voltage@res 0030                               ?_get_eeprom 0070  
                      ??_EEPROM_WriteByte 0021                                get_adr@adr 0024  
                              get_adr@buf 0038                                 _TRISAbits 008C  
                               _TRISCbits 008E                           get_fun_full@res 0025  
                              get_fun@res 0025                        EEPROM_WriteByte@dt 0020  
            __end_of_EEPROM_ReadShortLong 02BE                             ??_get_measure 0074  
                   _EEPROM_WriteShortLong 03C9                                _switch_zum 06CC  
    __end_of_TMR2_DefaultInterruptHandler 0776              _TMR2_DefaultInterruptHandler 0775  
                          __end_of___bmul 0663                            ?_sec_tick_work 0070  
                           ??_get_voltage 002E                            _ADC_Initialize 072A  
                  ?_OSCILLATOR_Initialize 0070                            i1_go_close_alt 075C  
                           ??_go_open_alt 0020                       start_initialization 0027  
                 __end_of_EEPROM_ReadByte 064D               __end_ofi1_ADC_GetConversion 0634  
                                ??___bmul 0021                    __end_of_ADC_Initialize 0732  
                     __end_of_get_measure 04EA                    __end_ofi1_go_close_alt 0761  
           ?_TMR2_DefaultInterruptHandler 0070                               __pbssCOMMON 0078  
                     __end_of_get_voltage 0231                                 ___latbits 0000  
                           __pcstackBANK0 0020                       __end_of_go_open_alt 0757  
                        _START_EEPROM_ADR 005F                     _TMR0_InterruptHandler 0060  
                               __pnvBANK0 0060                    ?_EEPROM_WriteShortLong 0025  
                  _PIN_MANAGER_Initialize 068F                           ??_sec_tick_work 0077  
                             ?_switch_zum 0070                           ?_ADC_Initialize 0070  
                               beep@count 0020                           ?i1_go_close_alt 0070  
            ??_INTERRUPT_InterruptManager 0078               EEPROM_WriteShortLong@ucData 0025  
                                ?_get_adr 0070                                  ?_get_fun 0070  
                                ?_go_open 0070                      _EEPROM_ReadShortLong 0278  
                       sec_tick_work@iled 007A                                  ?_povorot 0070  
                      get_time@time_count 003E                          ?_EEPROM_ReadByte 0070  
                       ??_TMR0_Initialize 0022                         get_jump_full@flag 0027  
                                _LATAbits 010C                                  _LATCbits 010E  
                               _rele_tick 0575                                 clear_ram0 0740  
                           _TMR2_CallBack 06FC                                  _PIE1bits 0091  
                             _get_measure 04B8                ??_TMR0_SetInterruptHandler 0022  
                                _PIR1bits 0011                                  _TMR0_ISR 06EC  
                                _TMR2_ISR 06A4                             _ROTATION_TIME 0769  
                             _get_voltage 01D5                                _ADCON0bits 009D  
                   ?_EEPROM_ReadShortLong 0023                                  _WPUAbits 020C  
                                _WPUCbits 020E                                 get_time@i 0044  
                               get_time@q 0046                              ??_get_eeprom 0049  
          ??_TMR2_DefaultInterruptHandler 0070                               _go_open_alt 0752  
               ?_TMR2_SetInterruptHandler 0020                         get_time@adr_error 003D  
                               _switch_wm 04EA                         ??_TMR2_Initialize 0022  
                          ?_TMR2_CallBack 0070                                ?_rele_tick 0070  
                           ??_toggle_tone 0070                         _ADC_GetConversion 059F  
                      __end_of_get_eeprom 0739                   ??_OSCILLATOR_Initialize 0020  
                      ?_ADC_GetConversion 0020                    EEPROM_ReadShortLong@dt 002C  
                           ??_start_alarm 0072                                _ANSELAbits 018C  
                              _ANSELCbits 018E                       ??_ADC_GetConversion 0022  
                           ??_start_setup 0049                   EEPROM_WriteShortLong@dt 002C  
                              ?_switch_wm 0070                                  __ptext10 0772  
                                __ptext11 0663                                  __ptext20 072A  
                                __ptext12 0761                                  __ptext21 02BE  
                                __ptext13 06B9                                  __ptext30 0752  
                                __ptext22 01D5                                  __ptext14 0746  
                                __ptext31 0716                                  __ptext23 03C9  
                                __ptext15 0679                                  __ptext40 0388  
                                __ptext32 0757                                  __ptext24 054A  
                                __ptext16 074C                                  __ptext41 0720  
                                __ptext33 05C0                                  __ptext25 0634  
                                __ptext17 068F                                  __ptext50 0709  
                                __ptext42 0575                                  __ptext34 051A  
                                __ptext26 0446                                  __ptext18 0739  
                                __ptext43 04B8                                  __ptext35 06CC  
                                __ptext27 0408                                  __ptext19 0765  
                                __ptext44 0619                                  __ptext28 059F  
                                __ptext45 06DC                                  __ptext37 06A4  
                                __ptext29 0345                                  __ptext46 075C  
                                __ptext38 06FC                                  __ptext47 05DF  
                                __ptext39 0775                                  __ptext48 06EC  
                                __ptext49 0776                             ?i1_switch_zum 0070  
                                beep@time 0023                                  _get_jump 0446  
                                _get_time 003F                                  _go_close 05C0  
                         _BAD_WSP_VOLTAGE 076F                                  _fun_work 0345  
    __end_of_TMR0_DefaultInterruptHandler 0777              _TMR0_DefaultInterruptHandler 0776  
               __end_of_ADC_GetConversion 05C0                                  int$flags 007E  
                                get_adr@i 0034                                  get_adr@q 0035  
                       ??_TMR2_StartTimer 0020                       __end_of_toggle_tone 072A  
      __end_of_INTERRUPT_InterruptManager 0026                _INTERRUPT_InterruptManager 0004  
                  ??_EEPROM_ReadShortLong 0026                      get_jump@jump_counter 005B  
                              _INTCONbits 000B                                _FVRCONbits 0117  
                          ??i1_switch_zum 0070                       __end_of_start_alarm 06EC  
                     __end_of_start_setup 04B8                                  intlevel1 0000  
                         ??_TMR2_CallBack 0078                   ??_EEPROM_WriteShortLong 0028  
               EEPROM_WriteShortLong@addr 002D                   ?_PIN_MANAGER_Initialize 0070  
                             ??_rele_tick 0070                       EEPROM_ReadByte@addr 0022  
                        ??_ADC_Initialize 0020             ?_TMR0_DefaultInterruptHandler 0070  
                        ??i1_go_close_alt 0070                              ??_switch_zum 0020  
                           _get_jump_full 0302                             __pstringtext1 0769  
                           __pstringtext2 076C                             __pstringtext3 076F  
                          _FVR_Initialize 0765                                _OPTION_REG 0095  
                        get_voltage@q_800 0033                     TMR2_ISR@CountCallBack 0078  
                         _TMR0_Initialize 0679                   __end_of_BAD_WSP_VOLTAGE 0772  
                             ??_switch_wm 0026                              get_adr@F2638 00A0  
                      __end_of_switch_zum 06DC            __end_of_PIN_MANAGER_Initialize 06A4  
                        _EEPROM_WriteByte 054A                              get_adr@i_810 0036  
                            get_adr@q_809 0037                     _TMR2_InterruptHandler 0062  
                             _toggle_tone 0720                             ?_get_fun_full 0070  
                            ?_get_measure 0070  
